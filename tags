!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FIELD_DESCRIPTION!Python	nameref	/the original name for the tag/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	M,module	/modules/
!_TAG_KIND_DESCRIPTION!C++	P,partition	/partitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!CMake	D,option	/options specified with -D/
!_TAG_KIND_DESCRIPTION!CMake	f,function	/functions/
!_TAG_KIND_DESCRIPTION!CMake	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!CMake	p,project	/projects/
!_TAG_KIND_DESCRIPTION!CMake	t,target	/targets/
!_TAG_KIND_DESCRIPTION!CMake	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!DosBatch	l,label	/labels/
!_TAG_KIND_DESCRIPTION!DosBatch	v,variable	/variables/
!_TAG_KIND_DESCRIPTION!Lisp	Y,unknown	/unknown type of definitions/
!_TAG_KIND_DESCRIPTION!Lisp	c,const	/constants/
!_TAG_KIND_DESCRIPTION!Lisp	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Lisp	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Lisp	v,variable	/variables/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	Y,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	i,module	/modules/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_KIND_DESCRIPTION!Rust	C,constant	/A constant/
!_TAG_KIND_DESCRIPTION!Rust	M,macro	/Macro Definition/
!_TAG_KIND_DESCRIPTION!Rust	P,method	/A method/
!_TAG_KIND_DESCRIPTION!Rust	c,implementation	/implementation/
!_TAG_KIND_DESCRIPTION!Rust	e,enumerator	/An enum variant/
!_TAG_KIND_DESCRIPTION!Rust	f,function	/Function/
!_TAG_KIND_DESCRIPTION!Rust	g,enum	/Enum/
!_TAG_KIND_DESCRIPTION!Rust	i,interface	/trait interface/
!_TAG_KIND_DESCRIPTION!Rust	m,field	/A struct field/
!_TAG_KIND_DESCRIPTION!Rust	n,module	/module/
!_TAG_KIND_DESCRIPTION!Rust	s,struct	/structural type/
!_TAG_KIND_DESCRIPTION!Rust	t,typedef	/Type Alias/
!_TAG_KIND_DESCRIPTION!Rust	v,variable	/Global variable/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_KIND_DESCRIPTION!Yaml	a,anchor	/anchors/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!CMake	0.0	/current.age/
!_TAG_PARSER_VERSION!DosBatch	0.0	/current.age/
!_TAG_PARSER_VERSION!Lisp	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	1.1	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PARSER_VERSION!Python	0.0	/current.age/
!_TAG_PARSER_VERSION!Rust	0.0	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PARSER_VERSION!Yaml	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	C:/Projects/C_Projects/WastelandAdventures/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/29b9e6f/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C++!header	exported	/exported with "exported imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!module	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!module	partOwner	/used for specifying a partition/
!_TAG_ROLE_DESCRIPTION!C++!partition	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
!_TAG_ROLE_DESCRIPTION!Python!module	imported	/imported modules/
!_TAG_ROLE_DESCRIPTION!Python!module	indirectlyImported	/module imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Python!module	namespace	/namespace from where classes\/variables\/functions are imported/
!_TAG_ROLE_DESCRIPTION!Python!unknown	imported	/imported from the other module/
!_TAG_ROLE_DESCRIPTION!Python!unknown	indirectlyImported	/classes\/variables\/functions\/modules imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
!_TAG_ROLE_DESCRIPTION!Yaml!anchor	alias	/alias/
$(ASM_OBJ)	./Makefile	/^$(ASM_OBJ): .\/asm\/nasm\/%.asm$/;"	t
$(ASM_TARGET)	./Makefile	/^$(ASM_TARGET):  $(ASM_OBJ)$/;"	t
$(TARGET)	./Makefile	/^$(TARGET): $(OBJ)$/;"	t
./bin-int/%.o	./Makefile	/^.\/bin-int\/%.o: .\/src\/%.asm$/;"	t
./bin-int/%.o	./Makefile	/^.\/bin-int\/%.o: .\/src\/%.c$/;"	t
1. Include as a header file	./vendor/STC/README.md	/^### 1. Include as a header file$/;"	S	section:STC - Smart Template Containers""Forward declarations
2. Forward declare only	./vendor/STC/README.md	/^### 2. Forward declare only$/;"	S	section:STC - Smart Template Containers""Forward declarations
AC_VERSION_KHASH_H	./vendor/STC/misc/benchmarks/external/khash.h	/^#define AC_VERSION_KHASH_H /;"	d
ALIGNED_SIZE	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    static constexpr size_t ALIGNED_SIZE = ((sizeof(T) - 1) \/ ALIGNMENT + 1) * ALIGNMENT;$/;"	m	class:robin_hood::detail::BulkPoolAllocator	typeref:typename:size_t
ALIGNMENT	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    static const size_t ALIGNMENT =$/;"	m	class:robin_hood::detail::BulkPoolAllocator	typeref:typename:const size_t
ALIGNMENT	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    static constexpr size_t ALIGNMENT =$/;"	m	class:robin_hood::detail::BulkPoolAllocator	typeref:typename:size_t
ALMOST	./src/glyph.h	/^#define    ALMOST /;"	d
ALPHA	./src/glyph.h	/^#define    ALPHA /;"	d
AMPERSAND	./src/glyph.h	/^#define    AMPERSAND /;"	d
ANKERL_UNORDERED_DENSE_CPP_VERSION	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^#    define ANKERL_UNORDERED_DENSE_CPP_VERSION /;"	d
ANKERL_UNORDERED_DENSE_H	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^#define ANKERL_UNORDERED_DENSE_H$/;"	d
ANKERL_UNORDERED_DENSE_HASH_STATICCAST	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^#    define ANKERL_UNORDERED_DENSE_HASH_STATICCAST(/;"	d
ANKERL_UNORDERED_DENSE_HAS_EXCEPTIONS	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^#    define ANKERL_UNORDERED_DENSE_HAS_EXCEPTIONS(/;"	d
ANKERL_UNORDERED_DENSE_LIKELY	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^#        define ANKERL_UNORDERED_DENSE_LIKELY(/;"	d
ANKERL_UNORDERED_DENSE_NAMESPACE	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^#define ANKERL_UNORDERED_DENSE_NAMESPACE /;"	d
ANKERL_UNORDERED_DENSE_NAMESPACE	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^inline namespace ANKERL_UNORDERED_DENSE_NAMESPACE {$/;"	n	namespace:ankerl::unordered_dense
ANKERL_UNORDERED_DENSE_NOINLINE	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^#    define ANKERL_UNORDERED_DENSE_NOINLINE /;"	d
ANKERL_UNORDERED_DENSE_PACK	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^#    define ANKERL_UNORDERED_DENSE_PACK(/;"	d
ANKERL_UNORDERED_DENSE_PMR	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^#            define ANKERL_UNORDERED_DENSE_PMR /;"	d
ANKERL_UNORDERED_DENSE_UNLIKELY	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^#        define ANKERL_UNORDERED_DENSE_UNLIKELY(/;"	d
ANKERL_UNORDERED_DENSE_VERSION_CONCAT	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^#define ANKERL_UNORDERED_DENSE_VERSION_CONCAT(major, minor, patch) ANKERL_UNORDERED_DENSE_VERSIO/;"	d
ANKERL_UNORDERED_DENSE_VERSION_CONCAT1	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^#define ANKERL_UNORDERED_DENSE_VERSION_CONCAT1(/;"	d
ANKERL_UNORDERED_DENSE_VERSION_MAJOR	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^#define ANKERL_UNORDERED_DENSE_VERSION_MAJOR /;"	d
ANKERL_UNORDERED_DENSE_VERSION_MINOR	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^#define ANKERL_UNORDERED_DENSE_VERSION_MINOR /;"	d
ANKERL_UNORDERED_DENSE_VERSION_PATCH	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^#define ANKERL_UNORDERED_DENSE_VERSION_PATCH /;"	d
ANSI_BBLUE	./vendor/STC/misc/tests/ctest.h	/^#define ANSI_BBLUE /;"	d
ANSI_BCYAN	./vendor/STC/misc/tests/ctest.h	/^#define ANSI_BCYAN /;"	d
ANSI_BGREEN	./vendor/STC/misc/tests/ctest.h	/^#define ANSI_BGREEN /;"	d
ANSI_BLACK	./vendor/STC/misc/tests/ctest.h	/^#define ANSI_BLACK /;"	d
ANSI_BLUE	./vendor/STC/misc/tests/ctest.h	/^#define ANSI_BLUE /;"	d
ANSI_BMAGENTA	./vendor/STC/misc/tests/ctest.h	/^#define ANSI_BMAGENTA /;"	d
ANSI_BRED	./vendor/STC/misc/tests/ctest.h	/^#define ANSI_BRED /;"	d
ANSI_BYELLOW	./vendor/STC/misc/tests/ctest.h	/^#define ANSI_BYELLOW /;"	d
ANSI_CYAN	./vendor/STC/misc/tests/ctest.h	/^#define ANSI_CYAN /;"	d
ANSI_DARKGREY	./vendor/STC/misc/tests/ctest.h	/^#define ANSI_DARKGREY /;"	d
ANSI_GREEN	./vendor/STC/misc/tests/ctest.h	/^#define ANSI_GREEN /;"	d
ANSI_GREY	./vendor/STC/misc/tests/ctest.h	/^#define ANSI_GREY /;"	d
ANSI_MAGENTA	./vendor/STC/misc/tests/ctest.h	/^#define ANSI_MAGENTA /;"	d
ANSI_NORMAL	./vendor/STC/misc/tests/ctest.h	/^#define ANSI_NORMAL /;"	d
ANSI_RED	./vendor/STC/misc/tests/ctest.h	/^#define ANSI_RED /;"	d
ANSI_WHITE	./vendor/STC/misc/tests/ctest.h	/^#define ANSI_WHITE /;"	d
ANSI_YELLOW	./vendor/STC/misc/tests/ctest.h	/^#define ANSI_YELLOW /;"	d
API changes summary V4.0	./vendor/STC/README.md	/^## API changes summary V4.0$/;"	s	chapter:Version History
APOSTROPHE	./src/glyph.h	/^#define    APOSTROPHE /;"	d
APPEND	./vendor/fmt/include/os.h	/^    APPEND = FMT_POSIX(O_APPEND),  \/\/ Open in append mode.$/;"	e	enum:file::__anon511c5d600103
ARGS_ARR_SIZE	./vendor/fmt/include/base.h	/^  static constexpr size_t ARGS_ARR_SIZE = 1 + (NUM_ARGS != 0 ? NUM_ARGS : +1);$/;"	m	struct:detail::format_arg_store	typeref:typename:size_t
ARROWS_SIZE	./vendor/raylib5/include/raygui.h	/^    ARROWS_SIZE = 16,           \/\/ ScrollBar arrows size$/;"	e	enum:__anon65c7f6000c03
ARROWS_VISIBLE	./vendor/raylib5/include/raygui.h	/^    ARROWS_VISIBLE,             \/\/ ScrollBar arrows visible$/;"	e	enum:__anon65c7f6000c03
ARROW_PADDING	./vendor/raylib5/include/raygui.h	/^    ARROW_PADDING = 16,         \/\/ DropdownBox arrow separation from border and items$/;"	e	enum:__anon65c7f6000f03
ASC_AL	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_al      , ASC_AL,       \/* alpha *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_AN	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_an      , ASC_AN,       \/* alphanum *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_AS	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_as      , ASC_AS,       \/* ascii *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_BL	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_bl      , ASC_BL,       \/* blank *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_CT	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_ct      , ASC_CT,       \/* ctrl *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_D	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_d       , ASC_D,        \/* digit *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_GR	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_gr      , ASC_GR,       \/* graphic *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_LO	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_lo      , ASC_LO,       \/* lower *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_PR	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_pr      , ASC_PR,       \/* print *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_PU	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_pu      , ASC_PU,       \/* punct *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_S	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_s       , ASC_S,        \/* space *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_UP	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_up      , ASC_UP,       \/* upper *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_W	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_w       , ASC_W,        \/* word *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_XD	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_xd      , ASC_XD,       \/* hex *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_al	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_al      , ASC_AL,       \/* alpha *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_an	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_an      , ASC_AN,       \/* alphanum *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_as	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_as      , ASC_AS,       \/* ascii *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_bl	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_bl      , ASC_BL,       \/* blank *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_ct	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_ct      , ASC_CT,       \/* ctrl *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_d	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_d       , ASC_D,        \/* digit *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_gr	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_gr      , ASC_GR,       \/* graphic *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_lo	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_lo      , ASC_LO,       \/* lower *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_pr	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_pr      , ASC_PR,       \/* print *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_pu	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_pu      , ASC_PU,       \/* punct *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_s	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_s       , ASC_S,        \/* space *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_up	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_up      , ASC_UP,       \/* upper *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_w	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_w       , ASC_W,        \/* word *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASC_xd	./vendor/STC/include/stc/priv/cregex_prv.c	/^    ASC_xd      , ASC_XD,       \/* hex *\/$/;"	e	enum:__anon4ce7005a0503	file:
ASM_TARGET	./Makefile	/^ASM_TARGET = asm\/bin\/main.exe$/;"	m
ASSERT_DOUBLE_EQ	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_DOUBLE_EQ(/;"	d
ASSERT_DOUBLE_GT	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_DOUBLE_GT(/;"	d
ASSERT_DOUBLE_LT	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_DOUBLE_LT(/;"	d
ASSERT_DOUBLE_NE	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_DOUBLE_NE(/;"	d
ASSERT_EQ	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_EQ(/;"	d
ASSERT_FAIL	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_FAIL(/;"	d
ASSERT_FALSE	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_FALSE(/;"	d
ASSERT_FLOAT_EQ	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_FLOAT_EQ(/;"	d
ASSERT_FLOAT_GT	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_FLOAT_GT(/;"	d
ASSERT_FLOAT_LT	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_FLOAT_LT(/;"	d
ASSERT_FLOAT_NE	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_FLOAT_NE(/;"	d
ASSERT_GE	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_GE(/;"	d
ASSERT_GT	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_GT(/;"	d
ASSERT_INTERVAL	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_INTERVAL(/;"	d
ASSERT_LE	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_LE(/;"	d
ASSERT_LT	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_LT(/;"	d
ASSERT_NE	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_NE(/;"	d
ASSERT_NEAR	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_NEAR(/;"	d
ASSERT_NOT_NEAR	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_NOT_NEAR(/;"	d
ASSERT_NOT_NULL	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_NOT_NULL(/;"	d
ASSERT_NOT_SUBSTR	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_NOT_SUBSTR(/;"	d
ASSERT_NULL	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_NULL(/;"	d
ASSERT_PTR_EQ	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_PTR_EQ(/;"	d
ASSERT_PTR_NE	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_PTR_NE(/;"	d
ASSERT_STREQ	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_STREQ(/;"	d
ASSERT_STRNE	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_STRNE(/;"	d
ASSERT_SUBSTR	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_SUBSTR(/;"	d
ASSERT_TRUE	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_TRUE(/;"	d
ASSERT_WSTREQ	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_WSTREQ(/;"	d
ASSERT_WSTRNE	./vendor/STC/misc/tests/ctest.h	/^#define ASSERT_WSTRNE(/;"	d
ASTERISK	./src/glyph.h	/^#define    ASTERISK /;"	d
AT	./src/glyph.h	/^#define    AT /;"	d
Acyclic	./src/flecs.h	/^static const flecs::entity_t Acyclic = EcsAcyclic;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
AddTickSource	./src/flecs.c	/^void AddTickSource(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
AggregateStats	./src/flecs.c	/^void AggregateStats(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
Alert	./src/flecs.h	/^    struct Alert { };$/;"	s	struct:flecs::alerts
AlertsActive	./src/flecs.h	/^    using AlertsActive = EcsAlertsActive;$/;"	t	struct:flecs::alerts	typeref:typename:EcsAlertsActive
Algorithms	./vendor/STC/README.md	/^Algorithms$/;"	s	chapter:STC - Smart Template Containers
AllocSize	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    static size_t AllocSize(uint64_t num_buckets)$/;"	f	class:emhash7::HashMap	typeref:typename:size_t
AllocatorTraits	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    using AllocatorTraits = std::allocator_traits<EntryAlloc>;$/;"	t	class:ska::detailv3::sherwood_v3_table	typeref:typename:std::allocator_traits<EntryAlloc>
AlwaysOverride	./src/flecs.h	/^static const flecs::entity_t AlwaysOverride = EcsAlwaysOverride;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Amount	./src/flecs.h	/^struct Amount { };$/;"	s	struct:flecs::units
Ampere	./src/flecs.h	/^struct Ampere { };$/;"	s	struct:flecs::units::electric_current
And	./src/flecs.h	/^    And = EcsAnd,$/;"	e	enum:flecs::oper_kind_t
AndFrom	./src/flecs.h	/^    AndFrom = EcsAndFrom,$/;"	e	enum:flecs::oper_kind_t
Angle	./src/flecs.h	/^struct Angle { };$/;"	s	struct:flecs::units
Any	./src/flecs.h	/^static const flecs::entity_t Any = EcsAny;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Arabic_range16	./vendor/STC/include/stc/priv/utf8_prv.c	/^static const URange16 Arabic_range16[] = {$/;"	v	typeref:typename:const URange16[]	file:
Array	./src/flecs.h	/^using Array = EcsArray;$/;"	t	namespace:flecs	typeref:typename:EcsArray
ArrayType	./src/flecs.h	/^    using ArrayType = flecs::array<void*, sizeof...(Args)>;$/;"	t	struct:flecs::_::entity_with_delegate_impl
ArrayType	./src/flecs.h	/^static const type_kind_t ArrayType = EcsArrayType;$/;"	v	namespace:flecs::meta	typeref:typename:const type_kind_t
AssignIfTrue	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^struct AssignIfTrue$/;"	s	namespace:ska::detailv3
AssignIfTrue	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^struct AssignIfTrue<T, false>$/;"	s	namespace:ska::detailv3
Atto	./src/flecs.h	/^struct Atto { };$/;"	s	struct:flecs::units
AudioCallback	./vendor/raylib5/include/raylib.h	/^typedef void (*AudioCallback)(void *bufferData, unsigned int frames);$/;"	t	typeref:typename:void (*)(void * bufferData,unsigned int frames)
AudioStream	./vendor/raylib5/include/raylib.h	/^typedef struct AudioStream {$/;"	s
AudioStream	./vendor/raylib5/include/raylib.h	/^} AudioStream;$/;"	t	typeref:struct:AudioStream
AutomationEvent	./vendor/raylib5/include/raylib.h	/^typedef struct AutomationEvent {$/;"	s
AutomationEvent	./vendor/raylib5/include/raylib.h	/^} AutomationEvent;$/;"	t	typeref:struct:AutomationEvent
AutomationEventList	./vendor/raylib5/include/raylib.h	/^typedef struct AutomationEventList {$/;"	s
AutomationEventList	./vendor/raylib5/include/raylib.h	/^} AutomationEventList;$/;"	t	typeref:struct:AutomationEventList
BACKGROUND_COLOR	./vendor/raylib5/include/raygui.h	/^    BACKGROUND_COLOR,           \/\/ Background color$/;"	e	enum:__anon65c7f6000803
BACKTICK	./src/glyph.h	/^#define    BACKTICK /;"	d
BASE	./vendor/raylib5/include/raygui.h	/^typedef enum { BORDER = 0, BASE, TEXT, OTHER } GuiPropertyElement;$/;"	e	enum:__anon65c7f6001503
BASE_COLOR_DISABLED	./vendor/raylib5/include/raygui.h	/^    BASE_COLOR_DISABLED,        \/\/ Control base color in STATE_DISABLED$/;"	e	enum:__anon65c7f6000703
BASE_COLOR_FOCUSED	./vendor/raylib5/include/raygui.h	/^    BASE_COLOR_FOCUSED,         \/\/ Control base color in STATE_FOCUSED$/;"	e	enum:__anon65c7f6000703
BASE_COLOR_NORMAL	./vendor/raylib5/include/raygui.h	/^    BASE_COLOR_NORMAL,          \/\/ Control base color in STATE_NORMAL$/;"	e	enum:__anon65c7f6000703
BASE_COLOR_PRESSED	./vendor/raylib5/include/raygui.h	/^    BASE_COLOR_PRESSED,         \/\/ Control base color in STATE_PRESSED$/;"	e	enum:__anon65c7f6000703
BEIGE	./vendor/raylib5/include/raylib.h	/^#define BEIGE /;"	d
BENCHMARK_SIZE	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^static const int BENCHMARK_SIZE = 250000;$/;"	v	typeref:typename:const int	file:
BITS	./vendor/STC/misc/examples/hashmaps/birthday.c	/^    enum {BITS = 26};$/;"	e	enum:test_distribution::__anon5abf1d6d0203	file:
BITS	./vendor/STC/misc/examples/hashmaps/birthday.c	/^    enum {BITS = 46, BITS_TEST = BITS\/2 + 2};$/;"	e	enum:test_repeats::__anon5abf1d6d0103	file:
BITS_TEST	./vendor/STC/misc/examples/hashmaps/birthday.c	/^    enum {BITS = 46, BITS_TEST = BITS\/2 + 2};$/;"	e	enum:test_repeats::__anon5abf1d6d0103	file:
BIT_CHECK	./vendor/raylib5/include/raygui.h	/^    #define BIT_CHECK(/;"	d
BIT_PACK	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    static constexpr uint32_t BIT_PACK = sizeof(_bitmask[0]) * 2;$/;"	m	class:emhash7::HashMap	typeref:typename:uint32_t
BLACK	./vendor/raylib5/include/raylib.h	/^#define BLACK /;"	d
BLACK_SQUARE	./src/glyph.h	/^#define    BLACK_SQUARE /;"	d
BLANK	./vendor/raylib5/include/raylib.h	/^#define BLANK /;"	d
BLEND_ADDITIVE	./vendor/raylib5/include/raylib.h	/^    BLEND_ADDITIVE,                 \/\/ Blend textures adding colors$/;"	e	enum:__anon661bbe321203
BLEND_ADD_COLORS	./vendor/raylib5/include/raylib.h	/^    BLEND_ADD_COLORS,               \/\/ Blend textures adding colors (alternative)$/;"	e	enum:__anon661bbe321203
BLEND_ALPHA	./vendor/raylib5/include/raylib.h	/^    BLEND_ALPHA = 0,                \/\/ Blend textures considering alpha (default)$/;"	e	enum:__anon661bbe321203
BLEND_ALPHA_PREMULTIPLY	./vendor/raylib5/include/raylib.h	/^    BLEND_ALPHA_PREMULTIPLY,        \/\/ Blend premultiplied textures considering alpha$/;"	e	enum:__anon661bbe321203
BLEND_CUSTOM	./vendor/raylib5/include/raylib.h	/^    BLEND_CUSTOM,                   \/\/ Blend textures using custom src\/dst factors (use rlSet/;"	e	enum:__anon661bbe321203
BLEND_CUSTOM_SEPARATE	./vendor/raylib5/include/raylib.h	/^    BLEND_CUSTOM_SEPARATE           \/\/ Blend textures using custom rgb\/alpha separate src\/ds/;"	e	enum:__anon661bbe321203
BLEND_MULTIPLIED	./vendor/raylib5/include/raylib.h	/^    BLEND_MULTIPLIED,               \/\/ Blend textures multiplying colors$/;"	e	enum:__anon661bbe321203
BLEND_SUBTRACT_COLORS	./vendor/raylib5/include/raylib.h	/^    BLEND_SUBTRACT_COLORS,          \/\/ Blend textures subtracting colors (alternative)$/;"	e	enum:__anon661bbe321203
BLUE	./vendor/raylib5/include/raylib.h	/^#define BLUE /;"	d
BMAP_BUCKETS	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define BMAP_BUCKETS(/;"	d	file:
BMAP_CLEAR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define BMAP_CLEAR(/;"	d	file:
BMAP_DTOR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define BMAP_DTOR(/;"	d	file:
BMAP_EMPLACE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define BMAP_EMPLACE(/;"	d	file:
BMAP_ERASE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define BMAP_ERASE(/;"	d	file:
BMAP_FIND	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define BMAP_FIND(/;"	d	file:
BMAP_FOR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define BMAP_FOR(/;"	d	file:
BMAP_ITEM	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define BMAP_ITEM(/;"	d	file:
BMAP_PUT	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define BMAP_PUT(/;"	d	file:
BMAP_SETUP	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define BMAP_SETUP(/;"	d	file:
BMAP_SIZE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define BMAP_SIZE(/;"	d	file:
BORDER	./vendor/raylib5/include/raygui.h	/^typedef enum { BORDER = 0, BASE, TEXT, OTHER } GuiPropertyElement;$/;"	e	enum:__anon65c7f6001503
BORDER_COLOR_DISABLED	./vendor/raylib5/include/raygui.h	/^    BORDER_COLOR_DISABLED,      \/\/ Control border color in STATE_DISABLED$/;"	e	enum:__anon65c7f6000703
BORDER_COLOR_FOCUSED	./vendor/raylib5/include/raygui.h	/^    BORDER_COLOR_FOCUSED,       \/\/ Control border color in STATE_FOCUSED$/;"	e	enum:__anon65c7f6000703
BORDER_COLOR_NORMAL	./vendor/raylib5/include/raygui.h	/^    BORDER_COLOR_NORMAL = 0,    \/\/ Control border color in STATE_NORMAL$/;"	e	enum:__anon65c7f6000703
BORDER_COLOR_PRESSED	./vendor/raylib5/include/raygui.h	/^    BORDER_COLOR_PRESSED,       \/\/ Control border color in STATE_PRESSED$/;"	e	enum:__anon65c7f6000703
BORDER_WIDTH	./vendor/raylib5/include/raygui.h	/^    BORDER_WIDTH,               \/\/ Control border size, 0 for no border$/;"	e	enum:__anon65c7f6000703
BOX_TE_VDHS	./src/glyph.h	/^#define    BOX_TE_VDHS /;"	d
BOX_TN_VDHS	./src/glyph.h	/^#define    BOX_TN_VDHS /;"	d
BOX_TS_VDHS	./src/glyph.h	/^#define    BOX_TS_VDHS /;"	d
BOX_TW_VDHS	./src/glyph.h	/^#define    BOX_TW_VDHS /;"	d
BRACE_L	./src/glyph.h	/^#define    BRACE_L /;"	d
BRACE_R	./src/glyph.h	/^#define    BRACE_R /;"	d
BRACKET_L	./src/glyph.h	/^#define    BRACKET_L /;"	d
BRACKET_R	./src/glyph.h	/^#define    BRACKET_R /;"	d
BROWN	./vendor/raylib5/include/raylib.h	/^#define BROWN /;"	d
BSLASH	./src/glyph.h	/^#define    BSLASH /;"	d
BS_MAX	./src/flecs.c	/^#define BS_MAX /;"	d	file:
BULLET	./src/glyph.h	/^#define    BULLET /;"	d
BULLET_S	./src/glyph.h	/^#define    BULLET_S /;"	d
BUTTON	./vendor/raylib5/include/raygui.h	/^    BUTTON,$/;"	e	enum:__anon65c7f6000603
B_SLASH	./src/glyph.h	/^#define    B_SLASH /;"	d
Bar	./src/flecs.h	/^struct Bar { };$/;"	s	struct:flecs::units::pressure
BaseClass	./src/flecs.h	/^    using BaseClass = filter_builder_i<Base, Components ...>;$/;"	t	struct:flecs::alert_builder_i	typeref:typename:filter_builder_i<Base,Components...>
BaseClass	./src/flecs.h	/^    using BaseClass = filter_builder_i<Base, Components ...>;$/;"	t	struct:flecs::observer_builder_i	typeref:typename:filter_builder_i<Base,Components...>
BaseClass	./src/flecs.h	/^    using BaseClass = filter_builder_i<Base, Components ...>;$/;"	t	struct:flecs::query_builder_i	typeref:typename:filter_builder_i<Base,Components...>
BaseClass	./src/flecs.h	/^    using BaseClass = query_builder_i<Base, Components ...>;$/;"	t	struct:flecs::system_builder_i	typeref:typename:query_builder_i<Base,Components...>
Bel	./src/flecs.h	/^struct Bel { };$/;"	s	struct:flecs::units
BindingCtx	./src/flecs.h	/^    using BindingCtx = _::component_binding_ctx;$/;"	t	struct:flecs::component	typeref:typename:_::component_binding_ctx
Bitmask	./src/flecs.h	/^using Bitmask = EcsBitmask;$/;"	t	namespace:flecs	typeref:typename:EcsBitmask
BitmaskType	./src/flecs.h	/^static const type_kind_t BitmaskType = EcsBitmaskType;$/;"	v	namespace:flecs::meta	typeref:typename:const type_kind_t
Bits	./src/flecs.h	/^struct Bits { };$/;"	s	struct:flecs::units::data
BitsPerSecond	./src/flecs.h	/^struct BitsPerSecond { };$/;"	s	struct:flecs::units::datarate
BlendMode	./vendor/raylib5/include/raylib.h	/^} BlendMode;$/;"	t	typeref:enum:__anon661bbe321203
BoneInfo	./vendor/raylib5/include/raylib.h	/^typedef struct BoneInfo {$/;"	s
BoneInfo	./vendor/raylib5/include/raylib.h	/^} BoneInfo;$/;"	t	typeref:struct:BoneInfo
Bool	./src/flecs.h	/^static const flecs::entity_t Bool = ecs_id(ecs_bool_t);$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Bool	./src/flecs.h	/^static const primitive_kind_t Bool = EcsBool;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
BoundingBox	./vendor/raylib5/include/raylib.h	/^typedef struct BoundingBox {$/;"	s
BoundingBox	./vendor/raylib5/include/raylib.h	/^} BoundingBox;$/;"	t	typeref:struct:BoundingBox
Brief	./src/flecs.h	/^static const flecs::entity_t Brief = EcsDocBrief;$/;"	v	namespace:flecs::doc	typeref:typename:const flecs::entity_t
BulkPoolAllocator	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    BulkPoolAllocator(BulkPoolAllocator&& o) noexcept$/;"	f	class:robin_hood::detail::BulkPoolAllocator
BulkPoolAllocator	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    BulkPoolAllocator(const BulkPoolAllocator& ROBIN_HOOD_UNUSED(o) \/*unused*\/) noexcept$/;"	f	class:robin_hood::detail::BulkPoolAllocator
BulkPoolAllocator	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^class BulkPoolAllocator {$/;"	c	namespace:robin_hood::detail
Byte	./src/flecs.h	/^static const flecs::entity_t Byte = ecs_id(ecs_byte_t);$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Byte	./src/flecs.h	/^static const primitive_kind_t Byte = EcsByte;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
Bytes	./src/flecs.h	/^struct Bytes { };$/;"	s	struct:flecs::units::data
BytesPerSecond	./src/flecs.h	/^struct BytesPerSecond { };$/;"	s	struct:flecs::units::datarate
CAMERA_CUSTOM	./vendor/raylib5/include/raylib.h	/^    CAMERA_CUSTOM = 0,              \/\/ Camera custom, controlled by user (UpdateCamera() does /;"	e	enum:__anon661bbe321403
CAMERA_FIRST_PERSON	./vendor/raylib5/include/raylib.h	/^    CAMERA_FIRST_PERSON,            \/\/ Camera first person$/;"	e	enum:__anon661bbe321403
CAMERA_FREE	./vendor/raylib5/include/raylib.h	/^    CAMERA_FREE,                    \/\/ Camera free mode$/;"	e	enum:__anon661bbe321403
CAMERA_ORBITAL	./vendor/raylib5/include/raylib.h	/^    CAMERA_ORBITAL,                 \/\/ Camera orbital, around target, zoom supported$/;"	e	enum:__anon661bbe321403
CAMERA_ORTHOGRAPHIC	./vendor/raylib5/include/raylib.h	/^    CAMERA_ORTHOGRAPHIC             \/\/ Orthographic projection$/;"	e	enum:__anon661bbe321503
CAMERA_PERSPECTIVE	./vendor/raylib5/include/raylib.h	/^    CAMERA_PERSPECTIVE = 0,         \/\/ Perspective projection$/;"	e	enum:__anon661bbe321503
CAMERA_THIRD_PERSON	./vendor/raylib5/include/raylib.h	/^    CAMERA_THIRD_PERSON             \/\/ Camera third person$/;"	e	enum:__anon661bbe321403
CARET	./src/glyph.h	/^#define    CARET /;"	d
CASE_RUNE_MAPPINGS	./vendor/STC/include/stc/priv/cregex_prv.c	/^#define CASE_RUNE_MAPPINGS(/;"	d	file:
CCO_AWAIT	./vendor/STC/include/stc/coroutine.h	/^    CCO_AWAIT = 1<<0,$/;"	e	enum:__anone7a129120203
CCO_DONE	./vendor/STC/include/stc/coroutine.h	/^    CCO_DONE = 0,$/;"	e	enum:__anone7a129120203
CCO_STATE_DONE	./vendor/STC/include/stc/coroutine.h	/^    CCO_STATE_DONE = -2,$/;"	e	enum:__anone7a129120103
CCO_STATE_FINAL	./vendor/STC/include/stc/coroutine.h	/^    CCO_STATE_FINAL = -1,$/;"	e	enum:__anone7a129120103
CCO_YIELD	./vendor/STC/include/stc/coroutine.h	/^    CCO_YIELD = 1<<1,$/;"	e	enum:__anone7a129120203
CFLAGS	./Makefile	/^CFLAGS = -O2 -g -s -fno-asynchronous-unwind-tables $(foreach path, $(INCLUDE_PATHS), -I$(path)) /;"	m
CHARS	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^static const char CHARS[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz=+-";$/;"	v	typeref:typename:const char[]	file:
CHECKBOX	./vendor/raylib5/include/raygui.h	/^    CHECKBOX,$/;"	e	enum:__anon65c7f6000603
CHECK_BOUNDS_ID	./vendor/raylib5/include/raygui.h	/^    #define CHECK_BOUNDS_ID(/;"	d
CHECK_PADDING	./vendor/raylib5/include/raygui.h	/^    CHECK_PADDING = 16          \/\/ CheckBox internal check padding$/;"	e	enum:__anon65c7f6000d03
CJSON_CDECL	./vendor/cjson/include/cJSON.h	/^      void (CJSON_CDECL *free_fn)(void *ptr);$/;"	m	struct:cJSON_Hooks	typeref:typename:void (* free_fn)(void * ptr)
CJSON_CDECL	./vendor/cjson/include/cJSON.h	/^      void *(CJSON_CDECL *malloc_fn)(size_t sz);$/;"	m	struct:cJSON_Hooks	typeref:typename:void * (* malloc_fn)(size_t sz)
CJSON_CDECL	./vendor/cjson/include/cJSON.h	/^#define CJSON_CDECL /;"	d
CJSON_EXPORT_SYMBOLS	./vendor/cjson/include/cJSON.h	/^#define CJSON_EXPORT_SYMBOLS$/;"	d
CJSON_NESTING_LIMIT	./vendor/cjson/include/cJSON.h	/^#define CJSON_NESTING_LIMIT /;"	d
CJSON_PUBLIC	./vendor/cjson/include/cJSON.h	/^#define CJSON_PUBLIC(/;"	d
CJSON_STDCALL	./vendor/cjson/include/cJSON.h	/^#define CJSON_STDCALL /;"	d
CJSON_VERSION_MAJOR	./vendor/cjson/include/cJSON.h	/^#define CJSON_VERSION_MAJOR /;"	d
CJSON_VERSION_MINOR	./vendor/cjson/include/cJSON.h	/^#define CJSON_VERSION_MINOR /;"	d
CJSON_VERSION_PATCH	./vendor/cjson/include/cJSON.h	/^#define CJSON_VERSION_PATCH /;"	d
CLITERAL	./vendor/raylib5/include/raylib.h	/^    #define CLITERAL(/;"	d
CLUB	./src/glyph.h	/^#define    CLUB /;"	d
CMAP_BUCKETS	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define CMAP_BUCKETS(/;"	d	file:
CMAP_CLEAR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define CMAP_CLEAR(/;"	d	file:
CMAP_DTOR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define CMAP_DTOR(/;"	d	file:
CMAP_EMPLACE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define CMAP_EMPLACE(/;"	d	file:
CMAP_ERASE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define CMAP_ERASE(/;"	d	file:
CMAP_FIND	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define CMAP_FIND(/;"	d	file:
CMAP_FOR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define CMAP_FOR(/;"	d	file:
CMAP_ITEM	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define CMAP_ITEM(/;"	d	file:
CMAP_PUT	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define CMAP_PUT(/;"	d	file:
CMAP_SETUP	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define CMAP_SETUP(/;"	d	file:
CMAP_SIZE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define CMAP_SIZE(/;"	d	file:
COLON	./src/glyph.h	/^#define    COLON /;"	d
COLORPICKER	./vendor/raylib5/include/raygui.h	/^    COLORPICKER,$/;"	e	enum:__anon65c7f6000603
COLOR_SELECTOR_SIZE	./vendor/raylib5/include/raygui.h	/^    COLOR_SELECTOR_SIZE = 16,$/;"	e	enum:__anon65c7f6001303
COMBOBOX	./vendor/raylib5/include/raygui.h	/^    COMBOBOX,$/;"	e	enum:__anon65c7f6000603
COMBO_BUTTON_SPACING	./vendor/raylib5/include/raygui.h	/^    COMBO_BUTTON_SPACING        \/\/ ComboBox button separation$/;"	e	enum:__anon65c7f6000e03
COMBO_BUTTON_WIDTH	./vendor/raylib5/include/raygui.h	/^    COMBO_BUTTON_WIDTH = 16,    \/\/ ComboBox right button width$/;"	e	enum:__anon65c7f6000e03
COMMA	./src/glyph.h	/^#define    COMMA /;"	d
COMPONENTS_H	./src/components.h	/^#define COMPONENTS_H$/;"	d
CREATE	./vendor/fmt/include/os.h	/^    CREATE = FMT_POSIX(O_CREAT),   \/\/ Create if the file doesn't exist.$/;"	e	enum:file::__anon511c5d600103
CREG_DEFAULT	./vendor/STC/include/stc/cregex.h	/^    CREG_DEFAULT = 0,$/;"	e	enum:__anon7cecd9d80103
CREG_DOTALL	./vendor/STC/include/stc/cregex.h	/^    CREG_DOTALL = 1<<0,    \/* dot matches newline too *\/$/;"	e	enum:__anon7cecd9d80103
CREG_FULLMATCH	./vendor/STC/include/stc/cregex.h	/^    CREG_FULLMATCH = 1<<2, \/* like start-, end-of-line anchors were in pattern: "^ ... $" *\/$/;"	e	enum:__anon7cecd9d80103
CREG_ICASE	./vendor/STC/include/stc/cregex.h	/^    CREG_ICASE = 1<<1,     \/* ignore case *\/$/;"	e	enum:__anon7cecd9d80103
CREG_MALFORMEDCHARACTERCLASS	./vendor/STC/include/stc/cregex.h	/^    CREG_MALFORMEDCHARACTERCLASS = -8,$/;"	e	enum:__anon7cecd9d80203
CREG_MATCHERROR	./vendor/STC/include/stc/cregex.h	/^    CREG_MATCHERROR = -2,$/;"	e	enum:__anon7cecd9d80203
CREG_MAX_CAPTURES	./vendor/STC/include/stc/cregex.h	/^    CREG_MAX_CAPTURES = 32,$/;"	e	enum:__anon7cecd9d80103
CREG_MAX_CLASSES	./vendor/STC/include/stc/cregex.h	/^    CREG_MAX_CLASSES = 16,$/;"	e	enum:__anon7cecd9d80103
CREG_MISSINGOPERAND	./vendor/STC/include/stc/cregex.h	/^    CREG_MISSINGOPERAND = -9,$/;"	e	enum:__anon7cecd9d80203
CREG_NEXT	./vendor/STC/include/stc/cregex.h	/^    CREG_NEXT = 1<<3,      \/* use end of previous match[0] as start of input *\/$/;"	e	enum:__anon7cecd9d80103
CREG_NOMATCH	./vendor/STC/include/stc/cregex.h	/^    CREG_NOMATCH = -1,$/;"	e	enum:__anon7cecd9d80203
CREG_OK	./vendor/STC/include/stc/cregex.h	/^    CREG_OK = 0,$/;"	e	enum:__anon7cecd9d80203
CREG_OPERANDSTACKOVERFLOW	./vendor/STC/include/stc/cregex.h	/^    CREG_OPERANDSTACKOVERFLOW = -11,$/;"	e	enum:__anon7cecd9d80203
CREG_OPERATORSTACKOVERFLOW	./vendor/STC/include/stc/cregex.h	/^    CREG_OPERATORSTACKOVERFLOW = -12,$/;"	e	enum:__anon7cecd9d80203
CREG_OPERATORSTACKUNDERFLOW	./vendor/STC/include/stc/cregex.h	/^    CREG_OPERATORSTACKUNDERFLOW = -13,$/;"	e	enum:__anon7cecd9d80203
CREG_OUTOFMEMORY	./vendor/STC/include/stc/cregex.h	/^    CREG_OUTOFMEMORY = -3,$/;"	e	enum:__anon7cecd9d80203
CREG_STARTEND	./vendor/STC/include/stc/cregex.h	/^    CREG_STARTEND = 1<<4,  \/* use match[0] as start+end of input *\/$/;"	e	enum:__anon7cecd9d80103
CREG_STRIP	./vendor/STC/include/stc/cregex.h	/^    CREG_STRIP = 1<<5,     \/* only keep the matched strings, strip rest *\/$/;"	e	enum:__anon7cecd9d80103
CREG_TOOMANYCHARACTERCLASSES	./vendor/STC/include/stc/cregex.h	/^    CREG_TOOMANYCHARACTERCLASSES = -7,$/;"	e	enum:__anon7cecd9d80203
CREG_TOOMANYSUBEXPRESSIONS	./vendor/STC/include/stc/cregex.h	/^    CREG_TOOMANYSUBEXPRESSIONS = -6,$/;"	e	enum:__anon7cecd9d80203
CREG_UNKNOWNOPERATOR	./vendor/STC/include/stc/cregex.h	/^    CREG_UNKNOWNOPERATOR = -10,$/;"	e	enum:__anon7cecd9d80203
CREG_UNMATCHEDLEFTPARENTHESIS	./vendor/STC/include/stc/cregex.h	/^    CREG_UNMATCHEDLEFTPARENTHESIS = -4,$/;"	e	enum:__anon7cecd9d80203
CREG_UNMATCHEDRIGHTPARENTHESIS	./vendor/STC/include/stc/cregex.h	/^    CREG_UNMATCHEDRIGHTPARENTHESIS = -5,$/;"	e	enum:__anon7cecd9d80203
CTEST	./vendor/STC/misc/tests/cregex_test.c	/^CTEST(cregex, captures_cap)$/;"	f
CTEST	./vendor/STC/misc/tests/cregex_test.c	/^CTEST(cregex, captures_len)$/;"	f
CTEST	./vendor/STC/misc/tests/cregex_test.c	/^CTEST(cregex, compile_match_anchors)$/;"	f
CTEST	./vendor/STC/misc/tests/cregex_test.c	/^CTEST(cregex, compile_match_cap)$/;"	f
CTEST	./vendor/STC/misc/tests/cregex_test.c	/^CTEST(cregex, compile_match_char)$/;"	f
CTEST	./vendor/STC/misc/tests/cregex_test.c	/^CTEST(cregex, compile_match_class_complex_0)$/;"	f
CTEST	./vendor/STC/misc/tests/cregex_test.c	/^CTEST(cregex, compile_match_class_complex_1)$/;"	f
CTEST	./vendor/STC/misc/tests/cregex_test.c	/^CTEST(cregex, compile_match_class_simple)$/;"	f
CTEST	./vendor/STC/misc/tests/cregex_test.c	/^CTEST(cregex, compile_match_escaped_chars)$/;"	f
CTEST	./vendor/STC/misc/tests/cregex_test.c	/^CTEST(cregex, compile_match_or)$/;"	f
CTEST	./vendor/STC/misc/tests/cregex_test.c	/^CTEST(cregex, compile_match_quantifiers1)$/;"	f
CTEST	./vendor/STC/misc/tests/cregex_test.c	/^CTEST(cregex, compile_match_quantifiers2)$/;"	f
CTEST	./vendor/STC/misc/tests/cregex_test.c	/^CTEST(cregex, replace)$/;"	f
CTEST	./vendor/STC/misc/tests/cregex_test.c	/^CTEST(cregex, search_all)$/;"	f
CTEST	./vendor/STC/misc/tests/cspan_test.c	/^CTEST(cspan, slice) {$/;"	f
CTEST	./vendor/STC/misc/tests/cspan_test.c	/^CTEST(cspan, slice2) {$/;"	f
CTEST	./vendor/STC/misc/tests/cspan_test.c	/^CTEST(cspan, subdim) {$/;"	f
CTEST	./vendor/STC/misc/tests/ctest.h	/^#define CTEST(sname, tname) CTEST_IMPL_CTEST(/;"	d
CTEST	./vendor/STC/misc/tests/ctest.h	/^CTEST(suite, test) { }$/;"	f
CTEST_CONTAINER_OF	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_CONTAINER_OF(/;"	d
CTEST_DBL_EPSILON	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_DBL_EPSILON /;"	d
CTEST_ERR	./vendor/STC/misc/tests/ctest.h	/^void CTEST_ERR(const char* fmt, ...)$/;"	f	typeref:typename:CTEST_IMPL_DIAG_PUSH_IGNORED (missing-noreturn)void
CTEST_F	./vendor/STC/misc/tests/cspan_test.c	/^CTEST_F(cspan_cube, slice3) {$/;"	f
CTEST_F	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_F(sname, tname) CTEST_IMPL_CTEST_F(/;"	d
CTEST_FIXTURE	./vendor/STC/misc/tests/cspan_test.c	/^CTEST_FIXTURE(cspan_cube) {$/;"	f
CTEST_FIXTURE	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_FIXTURE(/;"	d
CTEST_FLT_EPSILON	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_FLT_EPSILON /;"	d
CTEST_F_SKIP	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_F_SKIP(/;"	d
CTEST_H	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_H$/;"	d
CTEST_IMPL_CTEST	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_IMPL_CTEST(/;"	d
CTEST_IMPL_CTEST_F	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_IMPL_CTEST_F(/;"	d
CTEST_IMPL_DATA_SNAME	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_IMPL_DATA_SNAME(/;"	d
CTEST_IMPL_DATA_TNAME	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_IMPL_DATA_TNAME(/;"	d
CTEST_IMPL_DIAG_POP	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_IMPL_DIAG_POP(/;"	d
CTEST_IMPL_DIAG_POP	./vendor/STC/misc/tests/ctest.h	/^CTEST_IMPL_DIAG_POP()$/;"	f
CTEST_IMPL_DIAG_PUSH_IGNORED	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_IMPL_DIAG_PUSH_IGNORED(/;"	d
CTEST_IMPL_FNAME	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_IMPL_FNAME(/;"	d
CTEST_IMPL_FORMAT_PRINTF	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_IMPL_FORMAT_PRINTF(/;"	d
CTEST_IMPL_MAGIC_SEEK	./vendor/STC/misc/tests/ctest.h	/^    #define CTEST_IMPL_MAGIC_SEEK /;"	d
CTEST_IMPL_NAME	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_IMPL_NAME(/;"	d
CTEST_IMPL_PRAGMA	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_IMPL_PRAGMA(/;"	d
CTEST_IMPL_SECTION	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_IMPL_SECTION /;"	d
CTEST_IMPL_SECTION	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_IMPL_SECTION$/;"	d
CTEST_IMPL_SETUP_FNAME	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_IMPL_SETUP_FNAME(/;"	d
CTEST_IMPL_SETUP_FPNAME	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_IMPL_SETUP_FPNAME(/;"	d
CTEST_IMPL_SETUP_TPNAME	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_IMPL_SETUP_TPNAME(/;"	d
CTEST_IMPL_STRUCT	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_IMPL_STRUCT(/;"	d
CTEST_IMPL_TEARDOWN_FNAME	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_IMPL_TEARDOWN_FNAME(/;"	d
CTEST_IMPL_TEARDOWN_FPNAME	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_IMPL_TEARDOWN_FPNAME(/;"	d
CTEST_IMPL_TEARDOWN_TPNAME	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_IMPL_TEARDOWN_TPNAME(/;"	d
CTEST_IMPL_TNAME	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_IMPL_TNAME(/;"	d
CTEST_LOG	./vendor/STC/misc/tests/ctest.h	/^void CTEST_LOG(const char* fmt, ...)$/;"	f	typeref:typename:void
CTEST_MAIN	./vendor/STC/misc/tests/main.c	/^#define CTEST_MAIN$/;"	d	file:
CTEST_SETUP	./vendor/STC/misc/tests/cspan_test.c	/^CTEST_SETUP(cspan_cube) {$/;"	f
CTEST_SETUP	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_SETUP(/;"	d
CTEST_SKIP	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_SKIP(/;"	d
CTEST_TEARDOWN	./vendor/STC/misc/tests/cspan_test.c	/^CTEST_TEARDOWN(cspan_cube) {$/;"	f
CTEST_TEARDOWN	./vendor/STC/misc/tests/ctest.h	/^#define CTEST_TEARDOWN(/;"	d
CTZ	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^static int CTZ(size_t n)$/;"	f	namespace:emhash7	typeref:typename:int
CUBE	./vendor/STC/misc/tests/cspan_test.c	/^    enum {TSIZE=4, CUBE=64, N=CUBE*CUBE*CUBE};$/;"	e	enum:CTEST_SETUP::__anonc003a19a0103	file:
CUBEMAP_LAYOUT_AUTO_DETECT	./vendor/raylib5/include/raylib.h	/^    CUBEMAP_LAYOUT_AUTO_DETECT = 0,         \/\/ Automatically detect layout type$/;"	e	enum:__anon661bbe321003
CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE	./vendor/raylib5/include/raylib.h	/^    CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE,     \/\/ Layout is defined by a 4x3 cross with cubemap f/;"	e	enum:__anon661bbe321003
CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR	./vendor/raylib5/include/raylib.h	/^    CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR,     \/\/ Layout is defined by a 3x4 cross with cubemap f/;"	e	enum:__anon661bbe321003
CUBEMAP_LAYOUT_LINE_HORIZONTAL	./vendor/raylib5/include/raylib.h	/^    CUBEMAP_LAYOUT_LINE_HORIZONTAL,         \/\/ Layout is defined by a horizontal line with fac/;"	e	enum:__anon661bbe321003
CUBEMAP_LAYOUT_LINE_VERTICAL	./vendor/raylib5/include/raylib.h	/^    CUBEMAP_LAYOUT_LINE_VERTICAL,           \/\/ Layout is defined by a vertical line with faces$/;"	e	enum:__anon661bbe321003
CUBEMAP_LAYOUT_PANORAMA	./vendor/raylib5/include/raylib.h	/^    CUBEMAP_LAYOUT_PANORAMA                 \/\/ Layout is defined by a panorama image (equirrec/;"	e	enum:__anon661bbe321003
CVEC_H	./src/cvec.h	/^#define CVEC_H$/;"	d
CVecInt	./src/cvec.h	/^} CVecInt;$/;"	t	typeref:struct:__anonbf71e1100108
CVecVoid	./src/cvec.h	/^} CVecVoid;$/;"	t	typeref:struct:__anonbf71e1100208
Callback	./src/log.c	/^} Callback;$/;"	t	typeref:struct:__anon6383736c0108	file:
Camera	./vendor/raylib5/include/raylib.h	/^typedef Camera3D Camera;    \/\/ Camera type fallback, defaults to Camera3D$/;"	t	typeref:typename:Camera3D
Camera2D	./vendor/raylib5/include/raylib.h	/^typedef struct Camera2D {$/;"	s
Camera2D	./vendor/raylib5/include/raylib.h	/^} Camera2D;$/;"	t	typeref:struct:Camera2D
Camera3D	./vendor/raylib5/include/raylib.h	/^typedef struct Camera3D {$/;"	s
Camera3D	./vendor/raylib5/include/raylib.h	/^} Camera3D;$/;"	t	typeref:struct:Camera3D
CameraComponent	./src/components.h	/^typedef struct CameraComponent{$/;"	s
CameraComponent	./src/components.h	/^} CameraComponent;$/;"	t	typeref:struct:CameraComponent
CameraMode	./vendor/raylib5/include/raylib.h	/^} CameraMode;$/;"	t	typeref:enum:__anon661bbe321403
CameraProjection	./vendor/raylib5/include/raylib.h	/^} CameraProjection;$/;"	t	typeref:enum:__anon661bbe321503
Candela	./src/flecs.h	/^struct Candela { };$/;"	s	struct:flecs::units::luminous_intensity
Cascade	./src/flecs.h	/^static const uint32_t Cascade = EcsCascade;$/;"	v	namespace:flecs	typeref:typename:const uint32_t
CaseMapping	./vendor/STC/include/stc/priv/utf8_tab.c	/^struct CaseMapping { uint16_t c1, c2, m2; };$/;"	s	file:
Cc_range16	./vendor/STC/include/stc/priv/utf8_prv.c	/^static const URange16 Cc_range16[] = { \/\/ Control$/;"	v	typeref:typename:const URange16[]	file:
Celsius	./src/flecs.h	/^struct Celsius { };$/;"	s	struct:flecs::units::temperature
Centi	./src/flecs.h	/^struct Centi { };$/;"	s	struct:flecs::units
CentiMeters	./src/flecs.h	/^struct CentiMeters { };$/;"	s	struct:flecs::units::length
Changes version 3.6	./vendor/STC/README.md	/^## Changes version 3.6$/;"	s	chapter:Version History
Changes version 3.7	./vendor/STC/README.md	/^## Changes version 3.7$/;"	s	chapter:Version History
Changes version 3.8	./vendor/STC/README.md	/^## Changes version 3.8$/;"	s	chapter:Version History
Char	./src/flecs.h	/^static const flecs::entity_t Char = ecs_id(ecs_char_t);$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Char	./src/flecs.h	/^static const primitive_kind_t Char = EcsChar;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
CheckCollisionPointRec	./vendor/raylib5/include/raygui.h	/^static bool CheckCollisionPointRec(Vector2 point, Rectangle rec)$/;"	f	typeref:typename:bool
ChildOf	./src/flecs.h	/^static const flecs::entity_t ChildOf = EcsChildOf;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Clamp	./vendor/raylib5/include/raymath.h	/^RMAPI float Clamp(float value, float min, float max)$/;"	f	typeref:typename:RMAPI float
Class	./src/flecs.h	/^    using Class = event_builder_typed<E>;$/;"	t	struct:flecs::event_builder_typed	typeref:typename:event_builder_typed<E>
ClearMetricInstance	./src/flecs.c	/^static void ClearMetricInstance(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
Cloner	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    struct Cloner<M, false> {$/;"	s	class:robin_hood::detail::Table
Cloner	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    struct Cloner<M, true> {$/;"	s	class:robin_hood::detail::Table
CodepointToUTF8	./vendor/raylib5/include/raygui.h	/^static const char *CodepointToUTF8(int codepoint, int *byteSize)$/;"	f	typeref:typename:const char *
Color	./src/flecs.h	/^static const flecs::entity_t Color = EcsDocColor;$/;"	v	namespace:flecs::doc	typeref:typename:const flecs::entity_t
Color	./vendor/raylib5/include/raygui.h	/^    typedef struct Color {$/;"	s
Color	./vendor/raylib5/include/raygui.h	/^    } Color;$/;"	t	typeref:struct:Color
Color	./vendor/raylib5/include/raylib.h	/^typedef struct Color {$/;"	s
Color	./vendor/raylib5/include/raylib.h	/^} Color;$/;"	t	typeref:struct:Color
ColorToInt	./vendor/raylib5/include/raygui.h	/^static int ColorToInt(Color color)$/;"	f	typeref:typename:int
ColumnArray	./src/flecs.h	/^    using ColumnArray = flecs::array<int32_t, sizeof...(Args)>;$/;"	t	struct:flecs::_::entity_with_delegate_impl
CommonSecondsType	./vendor/fmt/include/chrono.h	/^  using CommonSecondsType =$/;"	t	function:detail::get_milliseconds
Compiling a regular expression	./vendor/STC/docs/cregex_api.md	/^### Compiling a regular expression$/;"	S	section:STC [cregex](../include/stc/cregex.h): Regular Expressions""Usage
Component	./src/flecs.h	/^using Component = EcsComponent;$/;"	t	namespace:flecs	typeref:typename:EcsComponent
ConfigFlags	./vendor/raylib5/include/raylib.h	/^} ConfigFlags;$/;"	t	typeref:enum:__anon661bbe320203
Constant	./src/flecs.h	/^static const flecs::entity_t Constant = EcsConstant;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Constants and macros	./vendor/STC/docs/cstr_api.md	/^## Constants and macros$/;"	s	chapter:STC [cstr](../include/stc/cstr.h): String
Constants and macros	./vendor/STC/docs/csview_api.md	/^## Constants and macros$/;"	s	chapter:STC [csview](../include/stc/csview.h): Sub-string View
Containers	./vendor/STC/README.md	/^Containers$/;"	s	chapter:STC - Smart Template Containers
ConvertHSVtoRGB	./vendor/raylib5/include/raygui.h	/^static Vector3 ConvertHSVtoRGB(Vector3 hsv)$/;"	f	typeref:typename:Vector3
ConvertRGBtoHSV	./vendor/raylib5/include/raygui.h	/^static Vector3 ConvertRGBtoHSV(Vector3 rgb)$/;"	f	typeref:typename:Vector3
Coroutine API	./vendor/STC/docs/coroutine_api.md	/^### Coroutine API$/;"	S	chapter:STC [coroutine](../include/stc/coroutine.h): Coroutines
Counter	./src/flecs.h	/^    struct Counter { };$/;"	s	struct:flecs::metrics
CounterId	./src/flecs.h	/^    struct CounterId { };$/;"	s	struct:flecs::metrics
CounterIncrement	./src/flecs.h	/^    struct CounterIncrement { };$/;"	s	struct:flecs::metrics
Counts	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^struct Counts {$/;"	s	namespace:robin_hood
CubemapLayout	./vendor/raylib5/include/raylib.h	/^} CubemapLayout;$/;"	t	typeref:enum:__anon661bbe321003
CustomType	./src/flecs.h	/^static const type_kind_t CustomType = EcsOpaqueType;$/;"	v	namespace:flecs::meta	typeref:typename:const type_kind_t
Cyrillic_range16	./vendor/STC/include/stc/priv/utf8_prv.c	/^static const URange16 Cyrillic_range16[] = {$/;"	v	typeref:typename:const URange16[]	file:
D1	./vendor/STC/misc/examples/spans/matmult.c	/^  enum {N = 10, D1 = 256, D2 = D1};$/;"	e	enum:main::__anonc4048f0a0303	file:
D2	./vendor/STC/misc/examples/spans/matmult.c	/^  enum {N = 10, D1 = 256, D2 = D1};$/;"	e	enum:main::__anonc4048f0a0303	file:
DARKBLUE	./vendor/raylib5/include/raylib.h	/^#define DARKBLUE /;"	d
DARKBROWN	./vendor/raylib5/include/raylib.h	/^#define DARKBROWN /;"	d
DARKGRAY	./vendor/raylib5/include/raylib.h	/^#define DARKGRAY /;"	d
DARKGREEN	./vendor/raylib5/include/raylib.h	/^#define DARKGREEN /;"	d
DARKPURPLE	./vendor/raylib5/include/raylib.h	/^#define DARKPURPLE /;"	d
DASH	./src/glyph.h	/^#define    DASH /;"	d
DATA	./src/flecs.c	/^#define DATA(/;"	d	file:
DBOX_BL	./src/glyph.h	/^#define    DBOX_BL /;"	d
DBOX_BR	./src/glyph.h	/^#define    DBOX_BR /;"	d
DBOX_TE	./src/glyph.h	/^#define    DBOX_TE /;"	d
DBOX_TL	./src/glyph.h	/^#define    DBOX_TL /;"	d
DBOX_TN	./src/glyph.h	/^#define    DBOX_TN /;"	d
DBOX_TR	./src/glyph.h	/^#define    DBOX_TR /;"	d
DBOX_TS	./src/glyph.h	/^#define    DBOX_TS /;"	d
DBOX_TW	./src/glyph.h	/^#define    DBOX_TW /;"	d
DBOX_VH	./src/glyph.h	/^#define    DBOX_VH /;"	d
DBOX_WE	./src/glyph.h	/^#define    DBOX_WE /;"	d
DBOX_WN	./src/glyph.h	/^#define    DBOX_WN /;"	d
DBOX_WS	./src/glyph.h	/^#define    DBOX_WS /;"	d
DBOX_WW	./src/glyph.h	/^#define    DBOX_WW /;"	d
DEFAULT	./vendor/raylib5/include/raygui.h	/^    DEFAULT = 0,$/;"	e	enum:__anon65c7f6000603
DEFAULT_INIT_BUCKETS_SIZE	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  static const size_type DEFAULT_INIT_BUCKETS_SIZE = 0;$/;"	m	class:tsl::detail_robin_hash::robin_hash	typeref:typename:const size_type
DEFAULT_KEYBITS	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^    DEFAULT_KEYBITS = 22,$/;"	e	enum:__anoneab13f8a0103	file:
DEFAULT_MAX_LOAD_FACTOR	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  static constexpr float DEFAULT_MAX_LOAD_FACTOR = 0.5f;$/;"	m	class:tsl::detail_robin_hash::robin_hash	typeref:typename:float
DEFAULT_MIN_LOAD_FACTOR	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  static constexpr float DEFAULT_MIN_LOAD_FACTOR = 0.0f;$/;"	m	class:tsl::detail_robin_hash::robin_hash	typeref:typename:float
DEFAULT_N_MILL	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^    DEFAULT_N_MILL = 10,$/;"	e	enum:__anoneab13f8a0103	file:
DEFMAP	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^#define DEFMAP(/;"	d	file:
DEG2RAD	./vendor/raylib5/include/raylib.h	/^    #define DEG2RAD /;"	d
DEG2RAD	./vendor/raylib5/include/raymath.h	/^    #define DEG2RAD /;"	d
DEGREE	./src/glyph.h	/^#define    DEGREE /;"	d
DELTA	./src/glyph.h	/^#define    DELTA /;"	d
DESTRUCT	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anonfac950030103	file:
DESTRUCT	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anonca721fef0103	file:
DESTRUCT	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anona03d81450103	file:
DESTRUCT	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anon0565975a0103	file:
DESTRUCT	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anon603333870103	file:
DIAMOND	./src/glyph.h	/^#define    DIAMOND /;"	d
DIST_FROM_IDEAL_BUCKET_LIMIT	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  static const distance_type DIST_FROM_IDEAL_BUCKET_LIMIT = 8192;$/;"	m	class:tsl::detail_robin_hash::bucket_entry	typeref:typename:const distance_type
DMAP_BUCKETS	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define DMAP_BUCKETS(/;"	d	file:
DMAP_CLEAR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define DMAP_CLEAR(/;"	d	file:
DMAP_DTOR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define DMAP_DTOR(/;"	d	file:
DMAP_EMPLACE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define DMAP_EMPLACE(/;"	d	file:
DMAP_ERASE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define DMAP_ERASE(/;"	d	file:
DMAP_FIND	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define DMAP_FIND(/;"	d	file:
DMAP_FOR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define DMAP_FOR(/;"	d	file:
DMAP_ITEM	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define DMAP_ITEM(/;"	d	file:
DMAP_PUT	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define DMAP_PUT(/;"	d	file:
DMAP_SETUP	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define DMAP_SETUP(/;"	d	file:
DMAP_SIZE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define DMAP_SIZE(/;"	d	file:
DOLLAR	./src/glyph.h	/^#define    DOLLAR /;"	d
DONUT_SQUARE	./src/glyph.h	/^#define    DONUT_SQUARE /;"	d
DOT	./src/glyph.h	/^#define    DOT /;"	d
DOUBLE_EXCLAM	./src/glyph.h	/^#define    DOUBLE_EXCLAM /;"	d
DROPDOWNBOX	./vendor/raylib5/include/raygui.h	/^    DROPDOWNBOX,$/;"	e	enum:__anon65c7f6000603
DROPDOWN_ARROW_HIDDEN	./vendor/raylib5/include/raygui.h	/^    DROPDOWN_ARROW_HIDDEN       \/\/ DropdownBox arrow hidden$/;"	e	enum:__anon65c7f6000f03
DROPDOWN_ITEMS_SPACING	./vendor/raylib5/include/raygui.h	/^    DROPDOWN_ITEMS_SPACING,     \/\/ DropdownBox items separation$/;"	e	enum:__anon65c7f6000f03
DYN_CAST	./vendor/STC/misc/examples/algorithms/shape.c	/^#define DYN_CAST(/;"	d	file:
D_ARROW	./src/glyph.h	/^#define    D_ARROW /;"	d
D_QUOTE	./src/glyph.h	/^#define    D_QUOTE /;"	d
Data	./src/flecs.h	/^struct Data { };$/;"	s	struct:flecs::units
DataNode	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        DataNode(M& ROBIN_HOOD_UNUSED(map) \/*unused*\/, DataNode<M, false>&& n) noexcept$/;"	f	class:robin_hood::detail::Table::DataNode
DataNode	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        DataNode(M& ROBIN_HOOD_UNUSED(map) \/*unused*\/, DataNode<M, true>&& n) noexcept($/;"	f	class:robin_hood::detail::Table::DataNode
DataNode	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        explicit DataNode(M& ROBIN_HOOD_UNUSED(map) \/*unused*\/, Args&&... args) noexcept($/;"	f	class:robin_hood::detail::Table::DataNode
DataNode	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        explicit DataNode(M& map, Args&&... args)$/;"	f	class:robin_hood::detail::Table::DataNode
DataNode	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    class DataNode {};$/;"	c	class:robin_hood::detail::Table
DataNode	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    class DataNode<M, false> {$/;"	c	class:robin_hood::detail::Table
DataNode	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    class DataNode<M, true> final {$/;"	c	class:robin_hood::detail::Table
DataPool	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    using DataPool = detail::NodeAllocator<value_type, 4, 16384, IsFlat>;$/;"	t	class:robin_hood::detail::Table	typeref:typename:detail::NodeAllocator<value_type,4,16384,IsFlat>
DataRate	./src/flecs.h	/^struct DataRate { };$/;"	s	struct:flecs::units
Date	./src/flecs.h	/^struct Date { };$/;"	s	struct:flecs::units::time
Days	./src/flecs.h	/^struct Days { };$/;"	s	struct:flecs::units::duration
Deca	./src/flecs.h	/^struct Deca { };$/;"	s	struct:flecs::units
Deci	./src/flecs.h	/^struct Deci { };$/;"	s	struct:flecs::units
DeciBel	./src/flecs.h	/^struct DeciBel { };$/;"	s	struct:flecs::units
DefaultChildComponent	./src/flecs.h	/^static const flecs::entity_t DefaultChildComponent = EcsDefaultChildComponent;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Degrees	./src/flecs.h	/^struct Degrees { };$/;"	s	struct:flecs::units::angle
Delegate	./src/flecs.h	/^            using Delegate = _::entity_observer_delegate<Func>;$/;"	t	function:flecs::_::entity_observer_factory::create	typeref:typename:_::entity_observer_delegate<Func>
Delegate	./src/flecs.h	/^            using Delegate = _::entity_payload_observer_delegate<Func, Evt>;$/;"	t	function:flecs::_::entity_observer_factory::create	typeref:typename:_::entity_payload_observer_delegate<Func,Evt>
Delegate	./src/flecs.h	/^        using Delegate = typename _::each_delegate<$/;"	t	function:flecs::_::node_builder::each	typeref:typename:_::each_delegate<typename std::decay<Func>::type,Components...>
Delegate	./src/flecs.h	/^        using Delegate = typename _::each_delegate<$/;"	t	function:flecs::component::on_remove	typeref:typename:_::each_delegate<typename std::decay<Func>::type,T>
Delegate	./src/flecs.h	/^        using Delegate = typename _::each_delegate<$/;"	t	function:flecs::component::on_set	typeref:typename:_::each_delegate<typename std::decay<Func>::type,T>
Delegate	./src/flecs.h	/^        using Delegate = typename _::each_delegate<typename std::decay<Func>::type, T>;$/;"	t	function:flecs::component::on_add	typeref:typename:_::each_delegate<typename std::decay<Func>::type,T>
Delegate	./src/flecs.h	/^        using Delegate = typename _::iter_delegate<$/;"	t	function:flecs::_::node_builder::iter	typeref:typename:_::iter_delegate<typename std::decay<Func>::type,Components...>
Delegate	./src/flecs.h	/^    using Delegate = _::entity_observer_delegate<Func>;$/;"	t	function:flecs::entity_builder::observe	typeref:typename:_::entity_observer_delegate<Func>
Delete	./src/flecs.h	/^static const flecs::entity_t Delete = EcsDelete;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
DependsOn	./src/flecs.h	/^static const flecs::entity_t DependsOn = EcsDependsOn;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
DequeueRest	./src/flecs.c	/^void DequeueRest(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
Desc	./src/flecs.h	/^static const uint32_t Desc = EcsDesc;$/;"	v	namespace:flecs	typeref:typename:const uint32_t
Description	./src/flecs.h	/^using Description = EcsDocDescription;$/;"	t	namespace:flecs::doc	typeref:typename:EcsDocDescription
Description	./vendor/STC/README.md	/^Description$/;"	s	chapter:STC - Smart Template Containers
Description	./vendor/STC/docs/crandom_api.md	/^## Description$/;"	s	chapter:STC [crand](../include/stc/crand.h): Pseudo Random Number Generator
Description	./vendor/STC/docs/cregex_api.md	/^## Description$/;"	s	chapter:STC [cregex](../include/stc/cregex.h): Regular Expressions
Destroyer	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    struct Destroyer {};$/;"	s	class:robin_hood::detail::Table
Destroyer	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    struct Destroyer<M, false> {$/;"	s	class:robin_hood::detail::Table
Destroyer	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    struct Destroyer<M, true> {$/;"	s	class:robin_hood::detail::Table
Detail	./src/flecs.h	/^static const flecs::entity_t Detail = EcsDocDetail;$/;"	v	namespace:flecs::doc	typeref:typename:const flecs::entity_t
Devanagari_range16	./vendor/STC/include/stc/priv/utf8_prv.c	/^static const URange16 Devanagari_range16[] = {$/;"	v	typeref:typename:const URange16[]	file:
Dining	./vendor/STC/misc/examples/coroutines/dining_philosophers.c	/^struct Dining {$/;"	s	file:
DisableRest	./src/flecs.c	/^void DisableRest(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
Disabled	./src/flecs.h	/^static const flecs::entity_t Disabled = EcsDisabled;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
DontInherit	./src/flecs.h	/^static const flecs::entity_t DontInherit = EcsDontInherit;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Down	./src/flecs.h	/^static const uint32_t Down = EcsDown;$/;"	v	namespace:flecs	typeref:typename:const uint32_t
DrawRectangleGradientV	./vendor/raylib5/include/raygui.h	/^static void DrawRectangleGradientV(int posX, int posY, int width, int height, Color color1, Colo/;"	f	typeref:typename:void
DummyArray	./src/flecs.h	/^    using DummyArray = flecs::array<int, sizeof...(Args)>;$/;"	t	struct:flecs::_::entity_with_delegate_impl
Duration	./src/flecs.h	/^struct Duration { };$/;"	s	struct:flecs::units
ECS_ACCESS_VIOLATION	./src/flecs.h	/^#define ECS_ACCESS_VIOLATION /;"	d
ECS_ALERT_MAX_SEVERITY_FILTERS	./src/flecs.h	/^#define ECS_ALERT_MAX_SEVERITY_FILTERS /;"	d
ECS_ALIGN	./src/flecs.h	/^#define ECS_ALIGN(/;"	d
ECS_ALIGNOF	./src/flecs.h	/^#define ECS_ALIGNOF(/;"	d
ECS_ALREADY_DEFINED	./src/flecs.h	/^#define ECS_ALREADY_DEFINED /;"	d
ECS_ALREADY_IN_USE	./src/flecs.h	/^#define ECS_ALREADY_IN_USE /;"	d
ECS_AND	./src/flecs.c	/^const ecs_id_t ECS_AND =                                           (1ull << 60);$/;"	v	typeref:typename:const ecs_id_t
ECS_BINARY_BOOL_OP	./src/flecs.c	/^#define ECS_BINARY_BOOL_OP(/;"	d	file:
ECS_BINARY_COND_EQ_OP	./src/flecs.c	/^#define ECS_BINARY_COND_EQ_OP(/;"	d	file:
ECS_BINARY_COND_OP	./src/flecs.c	/^#define ECS_BINARY_COND_OP(/;"	d	file:
ECS_BINARY_OP	./src/flecs.c	/^#define ECS_BINARY_OP(/;"	d	file:
ECS_BINARY_OP_T	./src/flecs.c	/^#define ECS_BINARY_OP_T(/;"	d	file:
ECS_BINARY_UINT_OP	./src/flecs.c	/^#define ECS_BINARY_UINT_OP(/;"	d	file:
ECS_BITMASK	./src/flecs.h	/^#define ECS_BITMASK(/;"	d
ECS_BITMASK_DECLARE	./src/flecs.h	/^#define ECS_BITMASK_DECLARE(/;"	d
ECS_BITMASK_ECS_META_IMPL	./src/flecs.h	/^#define ECS_BITMASK_ECS_META_IMPL /;"	d
ECS_BITMASK_EXTERN	./src/flecs.h	/^#define ECS_BITMASK_EXTERN(/;"	d
ECS_BITMASK_IMPL	./src/flecs.h	/^#define ECS_BITMASK_IMPL(/;"	d
ECS_BITMASK_TYPE	./src/flecs.h	/^#define ECS_BITMASK_TYPE(/;"	d
ECS_BIT_CLEAR	./src/flecs.h	/^#define ECS_BIT_CLEAR(/;"	d
ECS_BIT_COND	./src/flecs.h	/^#define ECS_BIT_COND(/;"	d
ECS_BIT_IS_SET	./src/flecs.h	/^#define ECS_BIT_IS_SET(/;"	d
ECS_BIT_SET	./src/flecs.h	/^#define ECS_BIT_SET(/;"	d
ECS_BLACK	./src/flecs.h	/^#define ECS_BLACK /;"	d
ECS_BLUE	./src/flecs.h	/^#define ECS_BLUE /;"	d
ECS_BOLD	./src/flecs.h	/^#define ECS_BOLD /;"	d
ECS_BT_BUF_SIZE	./src/flecs.c	/^#define ECS_BT_BUF_SIZE /;"	d	file:
ECS_BUCKET_END	./src/flecs.c	/^#define ECS_BUCKET_END(/;"	d	file:
ECS_CAST	./src/flecs.h	/^#define ECS_CAST(/;"	d
ECS_CLANG_VERSION	./src/flecs.h	/^                #define ECS_CLANG_VERSION /;"	d
ECS_CLANG_VERSION	./src/flecs.h	/^            #define ECS_CLANG_VERSION /;"	d
ECS_CLANG_VERSION	./src/flecs.h	/^        #define ECS_CLANG_VERSION /;"	d
ECS_CLASS_LEN	./src/flecs.c	/^#define ECS_CLASS_LEN /;"	d	file:
ECS_CLASS_PREFIX	./src/flecs.c	/^#define ECS_CLASS_PREFIX /;"	d	file:
ECS_COLUMN_INDEX_OUT_OF_RANGE	./src/flecs.h	/^#define ECS_COLUMN_INDEX_OUT_OF_RANGE /;"	d
ECS_COLUMN_IS_NOT_SHARED	./src/flecs.h	/^#define ECS_COLUMN_IS_NOT_SHARED /;"	d
ECS_COLUMN_IS_SHARED	./src/flecs.h	/^#define ECS_COLUMN_IS_SHARED /;"	d
ECS_COLUMN_TYPE_MISMATCH	./src/flecs.h	/^#define ECS_COLUMN_TYPE_MISMATCH /;"	d
ECS_COMPARE	./src/flecs.h	/^#define ECS_COMPARE(/;"	d
ECS_COMPONENT	./src/flecs.h	/^#define ECS_COMPONENT(/;"	d
ECS_COMPONENT_DECLARE	./src/flecs.h	/^#define ECS_COMPONENT_DECLARE(/;"	d
ECS_COMPONENT_DEFINE	./src/flecs.h	/^#define ECS_COMPONENT_DEFINE(/;"	d
ECS_COMPONENT_MASK	./src/flecs.h	/^#define ECS_COMPONENT_MASK /;"	d
ECS_COMPONENT_NOT_REGISTERED	./src/flecs.h	/^#define ECS_COMPONENT_NOT_REGISTERED /;"	d
ECS_CONCAT	./src/flecs.h	/^#define ECS_CONCAT(/;"	d
ECS_CONSTRAINT_VIOLATED	./src/flecs.h	/^#define ECS_CONSTRAINT_VIOLATED /;"	d
ECS_CONST_CAST	./src/flecs.h	/^#define ECS_CONST_CAST(/;"	d
ECS_CONST_LEN	./src/flecs.c	/^#define ECS_CONST_LEN /;"	d	file:
ECS_CONST_PREFIX	./src/flecs.c	/^#define ECS_CONST_PREFIX /;"	d	file:
ECS_COPY	./src/flecs.h	/^#define ECS_COPY(/;"	d
ECS_COPY_IMPL	./src/flecs.h	/^#define ECS_COPY_IMPL(/;"	d
ECS_COUNTER_APPEND	./src/flecs.c	/^#define ECS_COUNTER_APPEND(/;"	d	file:
ECS_COUNTER_APPEND_T	./src/flecs.c	/^#define ECS_COUNTER_APPEND_T(/;"	d	file:
ECS_COUNTER_RECORD	./src/flecs.c	/^#define ECS_COUNTER_RECORD(/;"	d	file:
ECS_CTOR	./src/flecs.h	/^#define ECS_CTOR(/;"	d
ECS_CYAN	./src/flecs.h	/^#define ECS_CYAN /;"	d
ECS_CYCLE_DETECTED	./src/flecs.h	/^#define ECS_CYCLE_DETECTED /;"	d
ECS_DECLARE	./src/flecs.h	/^#define ECS_DECLARE(/;"	d
ECS_DEPRECATED	./src/flecs.h	/^#define ECS_DEPRECATED(/;"	d
ECS_DOUBLE_FREE	./src/flecs.h	/^#define ECS_DOUBLE_FREE /;"	d
ECS_DTOR	./src/flecs.h	/^#define ECS_DTOR(/;"	d
ECS_ELEM	./src/flecs.h	/^#define ECS_ELEM(/;"	d
ECS_ELEM_T	./src/flecs.h	/^#define ECS_ELEM_T(/;"	d
ECS_ENTITY	./src/flecs.h	/^#define ECS_ENTITY(/;"	d
ECS_ENTITY_DECLARE	./src/flecs.h	/^#define ECS_ENTITY_DECLARE /;"	d
ECS_ENTITY_DEFINE	./src/flecs.h	/^#define ECS_ENTITY_DEFINE(/;"	d
ECS_ENTITY_MASK	./src/flecs.h	/^#define ECS_ENTITY_MASK /;"	d
ECS_ENTITY_TO_JSON_INIT	./src/flecs.h	/^#define ECS_ENTITY_TO_JSON_INIT /;"	d
ECS_ENUM	./src/flecs.h	/^#define ECS_ENUM(/;"	d
ECS_ENUM_DECLARE	./src/flecs.h	/^#define ECS_ENUM_DECLARE(/;"	d
ECS_ENUM_ECS_META_IMPL	./src/flecs.h	/^#define ECS_ENUM_ECS_META_IMPL /;"	d
ECS_ENUM_EXTERN	./src/flecs.h	/^#define ECS_ENUM_EXTERN(/;"	d
ECS_ENUM_IMPL	./src/flecs.h	/^#define ECS_ENUM_IMPL(/;"	d
ECS_ENUM_LEN	./src/flecs.c	/^#define ECS_ENUM_LEN /;"	d	file:
ECS_ENUM_PREFIX	./src/flecs.c	/^#define ECS_ENUM_PREFIX /;"	d	file:
ECS_ENUM_TYPE	./src/flecs.h	/^#define ECS_ENUM_TYPE(/;"	d
ECS_EQ	./src/flecs.h	/^#define ECS_EQ(/;"	d
ECS_EQZERO	./src/flecs.h	/^#define ECS_EQZERO(/;"	d
ECS_ERR_STR	./src/flecs.c	/^#define ECS_ERR_STR(/;"	d	file:
ECS_EVENT_DESC_ID_COUNT_MAX	./src/flecs.h	/^#define ECS_EVENT_DESC_ID_COUNT_MAX /;"	d
ECS_FILTER_INIT	./src/flecs.c	/^ecs_filter_t ECS_FILTER_INIT = { .hdr = { .magic = ecs_filter_t_magic }};$/;"	v	typeref:typename:ecs_filter_t
ECS_FUNC_NAME	./src/flecs.h	/^#define ECS_FUNC_NAME /;"	d
ECS_FUNC_NAME_BACK	./src/flecs.h	/^#define ECS_FUNC_NAME_BACK /;"	d
ECS_FUNC_NAME_FRONT	./src/flecs.h	/^#define ECS_FUNC_NAME_FRONT(/;"	d
ECS_FUNC_TYPE_LEN	./src/flecs.h	/^#define ECS_FUNC_TYPE_LEN(/;"	d
ECS_GAUGE_APPEND	./src/flecs.c	/^#define ECS_GAUGE_APPEND(/;"	d	file:
ECS_GAUGE_APPEND_T	./src/flecs.c	/^#define ECS_GAUGE_APPEND_T(/;"	d	file:
ECS_GAUGE_RECORD	./src/flecs.c	/^#define ECS_GAUGE_RECORD(/;"	d	file:
ECS_GENERATION	./src/flecs.h	/^#define ECS_GENERATION(e)             ((e & ECS_GENERATION_/;"	d
ECS_GENERATION_INC	./src/flecs.h	/^#define ECS_GENERATION_INC(/;"	d
ECS_GENERATION_MASK	./src/flecs.h	/^#define ECS_GENERATION_MASK /;"	d
ECS_GREEN	./src/flecs.h	/^#define ECS_GREEN /;"	d
ECS_GREY	./src/flecs.h	/^#define ECS_GREY /;"	d
ECS_HAS_ID_FLAG	./src/flecs.h	/^#define ECS_HAS_ID_FLAG(/;"	d
ECS_HAS_RELATION	./src/flecs.h	/^#define ECS_HAS_RELATION(/;"	d
ECS_HOOK_IMPL	./src/flecs.h	/^#define ECS_HOOK_IMPL(/;"	d
ECS_HTTP_CONNECTION_PURGE_RETRY_COUNT	./src/flecs.c	/^#define ECS_HTTP_CONNECTION_PURGE_RETRY_COUNT /;"	d	file:
ECS_HTTP_CONNECTION_PURGE_TIMEOUT	./src/flecs.c	/^#define ECS_HTTP_CONNECTION_PURGE_TIMEOUT /;"	d	file:
ECS_HTTP_HEADER_COUNT_MAX	./src/flecs.h	/^#define ECS_HTTP_HEADER_COUNT_MAX /;"	d
ECS_HTTP_METHOD_LEN_MAX	./src/flecs.c	/^#define ECS_HTTP_METHOD_LEN_MAX /;"	d	file:
ECS_HTTP_MIN_DEQUEUE_INTERVAL	./src/flecs.c	/^#define ECS_HTTP_MIN_DEQUEUE_INTERVAL /;"	d	file:
ECS_HTTP_MIN_STATS_INTERVAL	./src/flecs.c	/^#define ECS_HTTP_MIN_STATS_INTERVAL /;"	d	file:
ECS_HTTP_QUERY_PARAM_COUNT_MAX	./src/flecs.h	/^#define ECS_HTTP_QUERY_PARAM_COUNT_MAX /;"	d
ECS_HTTP_REPLY_INIT	./src/flecs.h	/^#define ECS_HTTP_REPLY_INIT /;"	d
ECS_HTTP_REQUEST_LEN_MAX	./src/flecs.c	/^#define ECS_HTTP_REQUEST_LEN_MAX /;"	d	file:
ECS_HTTP_REQUEST_RECV_RETRY	./src/flecs.c	/^#define ECS_HTTP_REQUEST_RECV_RETRY /;"	d	file:
ECS_HTTP_SEND_QUEUE_MAX	./src/flecs.c	/^#define ECS_HTTP_SEND_QUEUE_MAX /;"	d	file:
ECS_HTTP_SEND_RECV_BUFFER_SIZE	./src/flecs.c	/^#define ECS_HTTP_SEND_RECV_BUFFER_SIZE /;"	d	file:
ECS_ID_FLAGS_MASK	./src/flecs.h	/^#define ECS_ID_FLAGS_MASK /;"	d
ECS_ID_IN_USE	./src/flecs.h	/^#define ECS_ID_IN_USE /;"	d
ECS_ID_ON_DELETE	./src/flecs.h	/^#define ECS_ID_ON_DELETE(/;"	d
ECS_ID_ON_DELETE_FLAG	./src/flecs.h	/^#define ECS_ID_ON_DELETE_FLAG(/;"	d
ECS_ID_ON_DELETE_TARGET	./src/flecs.h	/^#define ECS_ID_ON_DELETE_TARGET(/;"	d
ECS_ID_ON_DELETE_TARGET_FLAG	./src/flecs.h	/^#define ECS_ID_ON_DELETE_TARGET_FLAG(/;"	d
ECS_IMPORT	./src/flecs.h	/^#define ECS_IMPORT(/;"	d
ECS_INCONSISTENT_COMPONENT_ACTION	./src/flecs.h	/^#define ECS_INCONSISTENT_COMPONENT_ACTION /;"	d
ECS_INCONSISTENT_COMPONENT_ID	./src/flecs.h	/^#define ECS_INCONSISTENT_COMPONENT_ID /;"	d
ECS_INCONSISTENT_NAME	./src/flecs.h	/^#define ECS_INCONSISTENT_NAME /;"	d
ECS_INTERNAL_ERROR	./src/flecs.h	/^#define ECS_INTERNAL_ERROR /;"	d
ECS_INVALID_COMPONENT_ALIGNMENT	./src/flecs.h	/^#define ECS_INVALID_COMPONENT_ALIGNMENT /;"	d
ECS_INVALID_COMPONENT_SIZE	./src/flecs.h	/^#define ECS_INVALID_COMPONENT_SIZE /;"	d
ECS_INVALID_CONVERSION	./src/flecs.h	/^#define ECS_INVALID_CONVERSION /;"	d
ECS_INVALID_FROM_WORKER	./src/flecs.h	/^#define ECS_INVALID_FROM_WORKER /;"	d
ECS_INVALID_OPERATION	./src/flecs.h	/^#define ECS_INVALID_OPERATION /;"	d
ECS_INVALID_PARAMETER	./src/flecs.h	/^#define ECS_INVALID_PARAMETER /;"	d
ECS_INVALID_WHILE_READONLY	./src/flecs.h	/^#define ECS_INVALID_WHILE_READONLY /;"	d
ECS_IS_PAIR	./src/flecs.h	/^#define ECS_IS_PAIR(/;"	d
ECS_ITER_TO_JSON_INIT	./src/flecs.h	/^#define ECS_ITER_TO_JSON_INIT /;"	d
ECS_LEAK_DETECTED	./src/flecs.h	/^#define ECS_LEAK_DETECTED /;"	d
ECS_LOAD_FACTOR	./src/flecs.c	/^#define ECS_LOAD_FACTOR /;"	d	file:
ECS_LOCKED_STORAGE	./src/flecs.h	/^#define ECS_LOCKED_STORAGE /;"	d
ECS_MAGENTA	./src/flecs.h	/^#define ECS_MAGENTA /;"	d
ECS_MAX	./src/flecs.h	/^#define ECS_MAX(/;"	d
ECS_MAX_COMPONENT_ID	./src/flecs.h	/^#define ECS_MAX_COMPONENT_ID /;"	d
ECS_MAX_DEFER_STACK	./src/flecs.c	/^#define ECS_MAX_DEFER_STACK /;"	d	file:
ECS_MAX_JOBS_PER_WORKER	./src/flecs.c	/^#define ECS_MAX_JOBS_PER_WORKER /;"	d	file:
ECS_MAX_RECURSION	./src/flecs.h	/^#define ECS_MAX_RECURSION /;"	d
ECS_MAX_TOKEN_SIZE	./src/flecs.c	/^#define ECS_MAX_TOKEN_SIZE /;"	d	file:
ECS_MAX_TOKEN_SIZE	./src/flecs.h	/^#define ECS_MAX_TOKEN_SIZE /;"	d
ECS_MEMBER_DESC_CACHE_SIZE	./src/flecs.h	/^#define ECS_MEMBER_DESC_CACHE_SIZE /;"	d
ECS_META_COMPONENT	./src/flecs.h	/^#define ECS_META_COMPONENT(/;"	d
ECS_META_IDENTIFIER_LENGTH	./src/flecs.c	/^#define ECS_META_IDENTIFIER_LENGTH /;"	d	file:
ECS_META_IMPL_CALL	./src/flecs.h	/^#define ECS_META_IMPL_CALL(/;"	d
ECS_META_IMPL_CALL_INNER	./src/flecs.h	/^#define ECS_META_IMPL_CALL_INNER(/;"	d
ECS_META_MAX_SCOPE_DEPTH	./src/flecs.h	/^#define ECS_META_MAX_SCOPE_DEPTH /;"	d
ECS_METRIC_FIRST	./src/flecs.c	/^#define ECS_METRIC_FIRST(/;"	d	file:
ECS_METRIC_LAST	./src/flecs.c	/^#define ECS_METRIC_LAST(/;"	d	file:
ECS_MIN	./src/flecs.h	/^#define ECS_MIN(/;"	d
ECS_MISSING_OS_API	./src/flecs.h	/^#define ECS_MISSING_OS_API /;"	d
ECS_MISSING_SYMBOL	./src/flecs.h	/^#define ECS_MISSING_SYMBOL /;"	d
ECS_MODULE	./src/flecs.h	/^#define ECS_MODULE(/;"	d
ECS_MODULE_DEFINE	./src/flecs.h	/^#define ECS_MODULE_DEFINE(/;"	d
ECS_MODULE_UNDEFINED	./src/flecs.h	/^#define ECS_MODULE_UNDEFINED /;"	d
ECS_MOVE	./src/flecs.h	/^#define ECS_MOVE(/;"	d
ECS_MOVE_IMPL	./src/flecs.h	/^#define ECS_MOVE_IMPL(/;"	d
ECS_NAME_BUFFER_LENGTH	./src/flecs.c	/^#define ECS_NAME_BUFFER_LENGTH /;"	d	file:
ECS_NAME_IN_USE	./src/flecs.h	/^#define ECS_NAME_IN_USE /;"	d
ECS_NEQ	./src/flecs.h	/^#define ECS_NEQ(/;"	d
ECS_NEQZERO	./src/flecs.h	/^#define ECS_NEQZERO(/;"	d
ECS_NORMAL	./src/flecs.h	/^#define ECS_NORMAL /;"	d
ECS_NOT	./src/flecs.c	/^const ecs_id_t ECS_NOT =                                           (1ull << 58);$/;"	v	typeref:typename:const ecs_id_t	file:
ECS_NOT_A_COMPONENT	./src/flecs.h	/^#define ECS_NOT_A_COMPONENT /;"	d
ECS_OBJECT_MAGIC	./src/flecs.c	/^#define ECS_OBJECT_MAGIC /;"	d	file:
ECS_OBSERVER	./src/flecs.h	/^#define ECS_OBSERVER(/;"	d
ECS_OBSERVER_DECLARE	./src/flecs.h	/^#define ECS_OBSERVER_DECLARE(/;"	d
ECS_OBSERVER_DEFINE	./src/flecs.h	/^#define ECS_OBSERVER_DEFINE(/;"	d
ECS_OFFSET	./src/flecs.h	/^#define ECS_OFFSET(/;"	d
ECS_OFFSET_T	./src/flecs.h	/^#define ECS_OFFSET_T(/;"	d
ECS_ON_ADD	./src/flecs.h	/^#define ECS_ON_ADD(/;"	d
ECS_ON_REMOVE	./src/flecs.h	/^#define ECS_ON_REMOVE(/;"	d
ECS_ON_SET	./src/flecs.h	/^#define ECS_ON_SET(/;"	d
ECS_OPERATION_FAILED	./src/flecs.h	/^#define ECS_OPERATION_FAILED /;"	d
ECS_OR	./src/flecs.c	/^const ecs_id_t ECS_OR =                                            (1ull << 59);$/;"	v	typeref:typename:const ecs_id_t	file:
ECS_OUT_OF_MEMORY	./src/flecs.h	/^#define ECS_OUT_OF_MEMORY /;"	d
ECS_OUT_OF_RANGE	./src/flecs.h	/^#define ECS_OUT_OF_RANGE /;"	d
ECS_OVERRIDE	./src/flecs.c	/^const ecs_id_t ECS_OVERRIDE =                                      (1ull << 62);$/;"	v	typeref:typename:const ecs_id_t
ECS_PAIR	./src/flecs.c	/^const ecs_id_t ECS_PAIR =                                          (1ull << 63);$/;"	v	typeref:typename:const ecs_id_t
ECS_PAIR_FIRST	./src/flecs.h	/^#define ECS_PAIR_FIRST(/;"	d
ECS_PAIR_SECOND	./src/flecs.h	/^#define ECS_PAIR_SECOND(/;"	d
ECS_PARSER_MAX_ARGS	./src/flecs.h	/^#define ECS_PARSER_MAX_ARGS /;"	d
ECS_PIPELINE	./src/flecs.h	/^#define ECS_PIPELINE(/;"	d
ECS_PIPELINE_DEFINE	./src/flecs.h	/^#define ECS_PIPELINE_DEFINE(/;"	d
ECS_PREFAB	./src/flecs.h	/^#define ECS_PREFAB(/;"	d
ECS_PREFAB_DECLARE	./src/flecs.h	/^#define ECS_PREFAB_DECLARE /;"	d
ECS_PREFAB_DEFINE	./src/flecs.h	/^#define ECS_PREFAB_DEFINE(/;"	d
ECS_PRIMITIVE	./src/flecs.c	/^    #define ECS_PRIMITIVE(/;"	d	file:
ECS_PRIVATE	./src/flecs.h	/^#define ECS_PRIVATE$/;"	d
ECS_PTR_CAST	./src/flecs.h	/^#define ECS_PTR_CAST(/;"	d
ECS_RECORD_TO_ROW	./src/flecs.h	/^#define ECS_RECORD_TO_ROW(/;"	d
ECS_RECORD_TO_ROW_FLAGS	./src/flecs.h	/^#define ECS_RECORD_TO_ROW_FLAGS(/;"	d
ECS_RED	./src/flecs.h	/^#define ECS_RED /;"	d
ECS_REST_DEFAULT_PORT	./src/flecs.h	/^#define ECS_REST_DEFAULT_PORT /;"	d
ECS_ROW_FLAGS_MASK	./src/flecs.h	/^#define ECS_ROW_FLAGS_MASK /;"	d
ECS_ROW_MASK	./src/flecs.h	/^#define ECS_ROW_MASK /;"	d
ECS_ROW_TO_RECORD	./src/flecs.h	/^#define ECS_ROW_TO_RECORD(/;"	d
ECS_SIZEOF	./src/flecs.h	/^#define ECS_SIZEOF(/;"	d
ECS_SIZE_T_STR	./src/flecs.h	/^            #define ECS_SIZE_T_STR /;"	d
ECS_SORT_TABLE	./src/flecs.h	/^#define ECS_SORT_TABLE(/;"	d
ECS_SORT_TABLE_WITH_COMPARE	./src/flecs.c	/^ECS_SORT_TABLE_WITH_COMPARE(_, flecs_query_sort_table_generic, order_by, static)$/;"	f	file:
ECS_SORT_TABLE_WITH_COMPARE	./src/flecs.h	/^#define ECS_SORT_TABLE_WITH_COMPARE(/;"	d
ECS_STACK_PAGE_SIZE	./src/flecs.c	/^#define ECS_STACK_PAGE_SIZE /;"	d	file:
ECS_STAT_WINDOW	./src/flecs.h	/^#define ECS_STAT_WINDOW /;"	d
ECS_STRBUF_INIT	./src/flecs.h	/^#define ECS_STRBUF_INIT /;"	d
ECS_STRBUF_MAX_LIST_DEPTH	./src/flecs.h	/^#define ECS_STRBUF_MAX_LIST_DEPTH /;"	d
ECS_STRBUF_SMALL_STRING_SIZE	./src/flecs.h	/^#define ECS_STRBUF_SMALL_STRING_SIZE /;"	d
ECS_STRINGIFY	./src/flecs.c	/^#define ECS_STRINGIFY(x) ECS_STRINGIFY_/;"	d	file:
ECS_STRINGIFY_INNER	./src/flecs.c	/^#define ECS_STRINGIFY_INNER(/;"	d	file:
ECS_STRUCT	./src/flecs.h	/^#define ECS_STRUCT(/;"	d
ECS_STRUCT_DECLARE	./src/flecs.h	/^#define ECS_STRUCT_DECLARE(/;"	d
ECS_STRUCT_ECS_META_IMPL	./src/flecs.h	/^#define ECS_STRUCT_ECS_META_IMPL /;"	d
ECS_STRUCT_EXTERN	./src/flecs.h	/^#define ECS_STRUCT_EXTERN(/;"	d
ECS_STRUCT_IMPL	./src/flecs.h	/^#define ECS_STRUCT_IMPL(/;"	d
ECS_STRUCT_LEN	./src/flecs.c	/^#define ECS_STRUCT_LEN /;"	d	file:
ECS_STRUCT_PREFIX	./src/flecs.c	/^#define ECS_STRUCT_PREFIX /;"	d	file:
ECS_STRUCT_TYPE	./src/flecs.h	/^#define ECS_STRUCT_TYPE(/;"	d
ECS_SYSTEM	./src/flecs.h	/^#define ECS_SYSTEM(/;"	d
ECS_SYSTEM_DECLARE	./src/flecs.h	/^#define ECS_SYSTEM_DECLARE(/;"	d
ECS_SYSTEM_DEFINE	./src/flecs.h	/^#define ECS_SYSTEM_DEFINE(/;"	d
ECS_TABLE_DIFF_INIT	./src/flecs.c	/^#define ECS_TABLE_DIFF_INIT /;"	d	file:
ECS_TABLE_LOCK	./src/flecs.h	/^#define ECS_TABLE_LOCK(/;"	d
ECS_TABLE_UNLOCK	./src/flecs.h	/^#define ECS_TABLE_UNLOCK(/;"	d
ECS_TAG	./src/flecs.h	/^#define ECS_TAG(/;"	d
ECS_TAG_DECLARE	./src/flecs.h	/^#define ECS_TAG_DECLARE /;"	d
ECS_TAG_DEFINE	./src/flecs.h	/^#define ECS_TAG_DEFINE(/;"	d
ECS_TARGET_ANDROID	./src/flecs.h	/^#define ECS_TARGET_ANDROID$/;"	d
ECS_TARGET_CLANG	./src/flecs.h	/^#define ECS_TARGET_CLANG$/;"	d
ECS_TARGET_DARWIN	./src/flecs.h	/^#define ECS_TARGET_DARWIN$/;"	d
ECS_TARGET_EM	./src/flecs.h	/^#define ECS_TARGET_EM$/;"	d
ECS_TARGET_FREEBSD	./src/flecs.h	/^#define ECS_TARGET_FREEBSD$/;"	d
ECS_TARGET_GNU	./src/flecs.h	/^#define ECS_TARGET_GNU$/;"	d
ECS_TARGET_LINUX	./src/flecs.h	/^#define ECS_TARGET_LINUX$/;"	d
ECS_TARGET_MINGW	./src/flecs.h	/^#define ECS_TARGET_MINGW$/;"	d
ECS_TARGET_MSVC	./src/flecs.h	/^#define ECS_TARGET_MSVC$/;"	d
ECS_TARGET_POSIX	./src/flecs.h	/^#define ECS_TARGET_POSIX$/;"	d
ECS_TARGET_WINDOWS	./src/flecs.h	/^#define ECS_TARGET_WINDOWS$/;"	d
ECS_TOGGLE	./src/flecs.c	/^const ecs_id_t ECS_TOGGLE =                                        (1ull << 61);$/;"	v	typeref:typename:const ecs_id_t
ECS_UNSUPPORTED	./src/flecs.h	/^#define ECS_UNSUPPORTED /;"	d
ECS_VALUE_GET	./src/flecs.c	/^#define ECS_VALUE_GET(/;"	d	file:
ECS_WHITE	./src/flecs.h	/^#define ECS_WHITE /;"	d
ECS_XTOR_IMPL	./src/flecs.h	/^#define ECS_XTOR_IMPL(/;"	d
ECS_YELLOW	./src/flecs.h	/^#define ECS_YELLOW /;"	d
EMAP_BUCKETS	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define EMAP_BUCKETS(/;"	d	file:
EMAP_CLEAR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define EMAP_CLEAR(/;"	d	file:
EMAP_DTOR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define EMAP_DTOR(/;"	d	file:
EMAP_EMPLACE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define EMAP_EMPLACE(/;"	d	file:
EMAP_ERASE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define EMAP_ERASE(/;"	d	file:
EMAP_FIND	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define EMAP_FIND(/;"	d	file:
EMAP_FOR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define EMAP_FOR(/;"	d	file:
EMAP_ITEM	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define EMAP_ITEM(/;"	d	file:
EMAP_PUT	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define EMAP_PUT(/;"	d	file:
EMAP_SETUP	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define EMAP_SETUP(/;"	d	file:
EMAP_SIZE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define EMAP_SIZE(/;"	d	file:
EMH_BUCKET	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    #define EMH_BUCKET(/;"	d
EMH_BUCKET_INDEX	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    #define EMH_BUCKET_INDEX /;"	d
EMH_CLS	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^#define EMH_CLS(/;"	d
EMH_DEFAULT_LOAD_FACTOR	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    constexpr static float EMH_DEFAULT_LOAD_FACTOR = 0.80f;$/;"	m	class:emhash7::HashMap	typeref:typename:float
EMH_EMPTY	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^#define EMH_EMPTY(/;"	d
EMH_KEY	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    #define EMH_KEY(/;"	d
EMH_LIKELY	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^#    define EMH_LIKELY(/;"	d
EMH_MALIGN	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    static constexpr uint32_t EMH_MALIGN = 16;$/;"	v	namespace:emhash7	typeref:typename:uint32_t
EMH_MASK	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^#define EMH_MASK(/;"	d
EMH_MIN_LOAD_FACTOR	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    constexpr static float EMH_MIN_LOAD_FACTOR     = 0.25f; \/\/< 0.5$/;"	m	class:emhash7::HashMap	typeref:typename:float
EMH_NEW	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    #define EMH_NEW(/;"	d
EMH_PKV	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    #define EMH_PKV(/;"	d
EMH_SET	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^#define EMH_SET(/;"	d
EMH_UNLIKELY	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^#    define EMH_UNLIKELY(/;"	d
EMH_VAL	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    #define EMH_VAL(/;"	d
EMPTY_BULLET	./src/glyph.h	/^#define    EMPTY_BULLET /;"	d
EMPTY_MARKER_DIST_FROM_IDEAL_BUCKET	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  static const distance_type EMPTY_MARKER_DIST_FROM_IDEAL_BUCKET = -1;$/;"	m	class:tsl::detail_robin_hash::bucket_entry	typeref:typename:const distance_type
ENTITIES_H	./src/entities.h	/^#define ENTITIES_H$/;"	d
EPACK_SIZE	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    static constexpr uint32_t EPACK_SIZE = sizeof(PairT) >= sizeof(size_t) == 0 ? 1 : 2; \/\/ > /;"	m	class:emhash7::HashMap	typeref:typename:uint32_t
EPSILON	./vendor/raylib5/include/raymath.h	/^    #define EPSILON /;"	d
EQUALS	./src/glyph.h	/^#define    EQUALS /;"	d
ERASE	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anonfac950030103	file:
ERASE	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anonca721fef0103	file:
ERASE	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anona03d81450103	file:
ERASE	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anon0565975a0103	file:
ERASE	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anon603333870103	file:
EXCLAM	./src/glyph.h	/^#define    EXCLAM /;"	d
EXPR_MAX_STACK_SIZE	./src/flecs.c	/^#define EXPR_MAX_STACK_SIZE /;"	d	file:
EXP_THRESHOLD	./src/flecs.c	/^#define EXP_THRESHOLD /;"	d	file:
EcsAcyclic	./src/flecs.c	/^const ecs_entity_t EcsAcyclic =                     FLECS_HI_COMPONENT_ID + 23;$/;"	v	typeref:typename:const ecs_entity_t
EcsAdd	./src/flecs.c	/^    EcsAdd,$/;"	e	enum:ecs_expr_oper_t	file:
EcsAlert	./src/flecs.c	/^typedef struct EcsAlert {$/;"	s	file:
EcsAlert	./src/flecs.c	/^} EcsAlert;$/;"	t	typeref:struct:EcsAlert	file:
EcsAlertInstance	./src/flecs.h	/^typedef struct EcsAlertInstance {$/;"	s
EcsAlertInstance	./src/flecs.h	/^} EcsAlertInstance;$/;"	t	typeref:struct:EcsAlertInstance
EcsAlertTimeout	./src/flecs.c	/^typedef struct EcsAlertTimeout {$/;"	s	file:
EcsAlertTimeout	./src/flecs.c	/^} EcsAlertTimeout;$/;"	t	typeref:struct:EcsAlertTimeout	file:
EcsAlertsActive	./src/flecs.h	/^typedef struct EcsAlertsActive {$/;"	s
EcsAlertsActive	./src/flecs.h	/^} EcsAlertsActive;$/;"	t	typeref:struct:EcsAlertsActive
EcsAlias	./src/flecs.c	/^const ecs_entity_t EcsAlias =                       FLECS_HI_COMPONENT_ID + 35;$/;"	v	typeref:typename:const ecs_entity_t
EcsAlwaysOverride	./src/flecs.c	/^const ecs_entity_t EcsAlwaysOverride =              FLECS_HI_COMPONENT_ID + 19;$/;"	v	typeref:typename:const ecs_entity_t
EcsAnd	./src/flecs.h	/^    EcsAnd,           \/**< The term must match *\/$/;"	e	enum:ecs_oper_kind_t
EcsAndFrom	./src/flecs.h	/^    EcsAndFrom,       \/**< Term must match all components from term id *\/$/;"	e	enum:ecs_oper_kind_t
EcsAny	./src/flecs.c	/^const ecs_entity_t EcsAny =                         FLECS_HI_COMPONENT_ID + 11;$/;"	v	typeref:typename:const ecs_entity_t
EcsAperiodicComponentMonitors	./src/flecs.h	/^#define EcsAperiodicComponentMonitors /;"	d
EcsAperiodicEmptyQueries	./src/flecs.h	/^#define EcsAperiodicEmptyQueries /;"	d
EcsAperiodicEmptyTables	./src/flecs.h	/^#define EcsAperiodicEmptyTables /;"	d
EcsArray	./src/flecs.h	/^typedef struct EcsArray {$/;"	s
EcsArray	./src/flecs.h	/^} EcsArray;$/;"	t	typeref:struct:EcsArray
EcsArrayType	./src/flecs.h	/^    EcsArrayType,$/;"	e	enum:ecs_type_kind_t
EcsBitmask	./src/flecs.h	/^typedef struct EcsBitmask {$/;"	s
EcsBitmask	./src/flecs.h	/^} EcsBitmask;$/;"	t	typeref:struct:EcsBitmask
EcsBitmaskType	./src/flecs.h	/^    EcsBitmaskType,$/;"	e	enum:ecs_type_kind_t
EcsBool	./src/flecs.h	/^    EcsBool = 1,$/;"	e	enum:ecs_primitive_kind_t
EcsByte	./src/flecs.h	/^    EcsByte,$/;"	e	enum:ecs_primitive_kind_t
EcsCascade	./src/flecs.h	/^#define EcsCascade /;"	d
EcsChar	./src/flecs.h	/^    EcsChar,$/;"	e	enum:ecs_primitive_kind_t
EcsChildOf	./src/flecs.c	/^const ecs_entity_t EcsChildOf =                     FLECS_HI_COMPONENT_ID + 30;$/;"	v	typeref:typename:const ecs_entity_t
EcsCmdAdd	./src/flecs.c	/^    EcsCmdAdd,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdAddModified	./src/flecs.c	/^    EcsCmdAddModified,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdBulkNew	./src/flecs.c	/^    EcsCmdBulkNew,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdClear	./src/flecs.c	/^    EcsCmdClear,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdClone	./src/flecs.c	/^    EcsCmdClone,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdDelete	./src/flecs.c	/^    EcsCmdDelete,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdDisable	./src/flecs.c	/^    EcsCmdDisable,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdEmplace	./src/flecs.c	/^    EcsCmdEmplace,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdEnable	./src/flecs.c	/^    EcsCmdEnable,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdEnsure	./src/flecs.c	/^    EcsCmdEnsure,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdEvent	./src/flecs.c	/^    EcsCmdEvent,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdModified	./src/flecs.c	/^    EcsCmdModified,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdModifiedNoHook	./src/flecs.c	/^    EcsCmdModifiedNoHook,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdOnDeleteAction	./src/flecs.c	/^    EcsCmdOnDeleteAction,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdPath	./src/flecs.c	/^    EcsCmdPath,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdRemove	./src/flecs.c	/^    EcsCmdRemove,   $/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdSet	./src/flecs.c	/^    EcsCmdSet,$/;"	e	enum:ecs_cmd_kind_t	file:
EcsCmdSkip	./src/flecs.c	/^    EcsCmdSkip$/;"	e	enum:ecs_cmd_kind_t	file:
EcsComponent	./src/flecs.h	/^typedef struct EcsComponent {$/;"	s
EcsComponent	./src/flecs.h	/^} EcsComponent;$/;"	t	typeref:struct:EcsComponent
EcsCondAnd	./src/flecs.c	/^    EcsCondAnd,$/;"	e	enum:ecs_expr_oper_t	file:
EcsCondEq	./src/flecs.c	/^    EcsCondEq,$/;"	e	enum:ecs_expr_oper_t	file:
EcsCondGt	./src/flecs.c	/^    EcsCondGt,$/;"	e	enum:ecs_expr_oper_t	file:
EcsCondGtEq	./src/flecs.c	/^    EcsCondGtEq,$/;"	e	enum:ecs_expr_oper_t	file:
EcsCondLt	./src/flecs.c	/^    EcsCondLt,$/;"	e	enum:ecs_expr_oper_t	file:
EcsCondLtEq	./src/flecs.c	/^    EcsCondLtEq,$/;"	e	enum:ecs_expr_oper_t	file:
EcsCondNeq	./src/flecs.c	/^    EcsCondNeq,$/;"	e	enum:ecs_expr_oper_t	file:
EcsCondOr	./src/flecs.c	/^    EcsCondOr,$/;"	e	enum:ecs_expr_oper_t	file:
EcsConstant	./src/flecs.c	/^const ecs_entity_t EcsConstant =                    FLECS_HI_COMPONENT_ID + 111;$/;"	v	typeref:typename:const ecs_entity_t
EcsDefaultChildComponent	./src/flecs.c	/^const ecs_entity_t EcsDefaultChildComponent =       FLECS_HI_COMPONENT_ID + 55;$/;"	v	typeref:typename:const ecs_entity_t
EcsDelete	./src/flecs.c	/^const ecs_entity_t EcsDelete =                      FLECS_HI_COMPONENT_ID + 51;$/;"	v	typeref:typename:const ecs_entity_t
EcsDependsOn	./src/flecs.c	/^const ecs_entity_t EcsDependsOn =                   FLECS_HI_COMPONENT_ID + 32;$/;"	v	typeref:typename:const ecs_entity_t
EcsDesc	./src/flecs.h	/^#define EcsDesc /;"	d
EcsDisabled	./src/flecs.c	/^const ecs_entity_t EcsDisabled =                    FLECS_HI_COMPONENT_ID + 7;$/;"	v	typeref:typename:const ecs_entity_t
EcsDiv	./src/flecs.c	/^    EcsDiv,$/;"	e	enum:ecs_expr_oper_t	file:
EcsDocBrief	./src/flecs.c	/^const ecs_entity_t EcsDocBrief =                    FLECS_HI_COMPONENT_ID + 114;$/;"	v	typeref:typename:const ecs_entity_t
EcsDocColor	./src/flecs.c	/^const ecs_entity_t EcsDocColor =                    FLECS_HI_COMPONENT_ID + 117;$/;"	v	typeref:typename:const ecs_entity_t
EcsDocDescription	./src/flecs.h	/^typedef struct EcsDocDescription {$/;"	s
EcsDocDescription	./src/flecs.h	/^} EcsDocDescription;$/;"	t	typeref:struct:EcsDocDescription
EcsDocDetail	./src/flecs.c	/^const ecs_entity_t EcsDocDetail =                   FLECS_HI_COMPONENT_ID + 115;$/;"	v	typeref:typename:const ecs_entity_t
EcsDocLink	./src/flecs.c	/^const ecs_entity_t EcsDocLink =                     FLECS_HI_COMPONENT_ID + 116;$/;"	v	typeref:typename:const ecs_entity_t
EcsDontInherit	./src/flecs.c	/^const ecs_entity_t EcsDontInherit =                 FLECS_HI_COMPONENT_ID + 18;$/;"	v	typeref:typename:const ecs_entity_t
EcsDown	./src/flecs.h	/^#define EcsDown /;"	d
EcsEmpty	./src/flecs.c	/^const ecs_entity_t EcsEmpty =                       FLECS_HI_COMPONENT_ID + 62;$/;"	v	typeref:typename:const ecs_entity_t
EcsEntity	./src/flecs.h	/^    EcsEntity,$/;"	e	enum:ecs_primitive_kind_t
EcsEntityIsId	./src/flecs.h	/^#define EcsEntityIsId /;"	d
EcsEntityIsTarget	./src/flecs.h	/^#define EcsEntityIsTarget /;"	d
EcsEntityIsTraversable	./src/flecs.h	/^#define EcsEntityIsTraversable /;"	d
EcsEnum	./src/flecs.h	/^typedef struct EcsEnum {$/;"	s
EcsEnum	./src/flecs.h	/^} EcsEnum;$/;"	t	typeref:struct:EcsEnum
EcsEnumType	./src/flecs.h	/^    EcsEnumType,$/;"	e	enum:ecs_type_kind_t
EcsEventNoOnSet	./src/flecs.h	/^#define EcsEventNoOnSet /;"	d
EcsEventTableOnly	./src/flecs.h	/^#define EcsEventTableOnly /;"	d
EcsExclusive	./src/flecs.c	/^const ecs_entity_t EcsExclusive =                   FLECS_HI_COMPONENT_ID + 22;$/;"	v	typeref:typename:const ecs_entity_t
EcsExprOperUnknown	./src/flecs.c	/^    EcsExprOperUnknown,$/;"	e	enum:ecs_expr_oper_t	file:
EcsF32	./src/flecs.h	/^    EcsF32,$/;"	e	enum:ecs_primitive_kind_t
EcsF64	./src/flecs.h	/^    EcsF64,$/;"	e	enum:ecs_primitive_kind_t
EcsFilter	./src/flecs.h	/^#define EcsFilter /;"	d
EcsFilterHasCondSet	./src/flecs.h	/^#define EcsFilterHasCondSet /;"	d
EcsFilterHasPred	./src/flecs.h	/^#define EcsFilterHasPred /;"	d
EcsFilterHasScopes	./src/flecs.h	/^#define EcsFilterHasScopes /;"	d
EcsFilterHasWildcards	./src/flecs.h	/^#define EcsFilterHasWildcards /;"	d
EcsFilterIsInstanced	./src/flecs.h	/^#define EcsFilterIsInstanced /;"	d
EcsFilterIsTrivial	./src/flecs.h	/^#define EcsFilterIsTrivial /;"	d
EcsFilterMatchAnything	./src/flecs.h	/^#define EcsFilterMatchAnything /;"	d
EcsFilterMatchDisabled	./src/flecs.h	/^#define EcsFilterMatchDisabled /;"	d
EcsFilterMatchEmptyTables	./src/flecs.h	/^#define EcsFilterMatchEmptyTables /;"	d
EcsFilterMatchOnlySelf	./src/flecs.h	/^#define EcsFilterMatchOnlySelf /;"	d
EcsFilterMatchOnlyThis	./src/flecs.h	/^#define EcsFilterMatchOnlyThis /;"	d
EcsFilterMatchPrefab	./src/flecs.h	/^#define EcsFilterMatchPrefab /;"	d
EcsFilterMatchThis	./src/flecs.h	/^#define EcsFilterMatchThis /;"	d
EcsFilterNoData	./src/flecs.h	/^#define EcsFilterNoData /;"	d
EcsFilterOwnsStorage	./src/flecs.h	/^#define EcsFilterOwnsStorage /;"	d
EcsFilterOwnsTermsStorage	./src/flecs.h	/^#define EcsFilterOwnsTermsStorage /;"	d
EcsFilterPopulate	./src/flecs.h	/^#define EcsFilterPopulate /;"	d
EcsFilterUnresolvedByName	./src/flecs.h	/^#define EcsFilterUnresolvedByName /;"	d
EcsFinal	./src/flecs.c	/^const ecs_entity_t EcsFinal =                       FLECS_HI_COMPONENT_ID + 17;$/;"	v	typeref:typename:const ecs_entity_t
EcsFirstUserComponentId	./src/flecs.h	/^#define EcsFirstUserComponentId /;"	d
EcsFirstUserEntityId	./src/flecs.h	/^#define EcsFirstUserEntityId /;"	d
EcsFlag	./src/flecs.c	/^const ecs_entity_t EcsFlag =                        FLECS_HI_COMPONENT_ID + 9;$/;"	v	typeref:typename:const ecs_entity_t
EcsFlatten	./src/flecs.c	/^const ecs_entity_t EcsFlatten =                     FLECS_HI_COMPONENT_ID + 54;$/;"	v	typeref:typename:const ecs_entity_t
EcsFlattenTarget	./src/flecs.h	/^typedef struct EcsFlattenTarget {$/;"	s
EcsFlattenTarget	./src/flecs.h	/^} EcsFlattenTarget;$/;"	t	typeref:struct:EcsFlattenTarget
EcsFlecs	./src/flecs.c	/^const ecs_entity_t EcsFlecs =                       FLECS_HI_COMPONENT_ID + 1;$/;"	v	typeref:typename:const ecs_entity_t
EcsFlecsCore	./src/flecs.c	/^const ecs_entity_t EcsFlecsCore =                   FLECS_HI_COMPONENT_ID + 2;$/;"	v	typeref:typename:const ecs_entity_t
EcsFlecsInternals	./src/flecs.c	/^const ecs_entity_t EcsFlecsInternals =              FLECS_HI_COMPONENT_ID + 3;$/;"	v	typeref:typename:const ecs_entity_t
EcsHttpDelete	./src/flecs.h	/^    EcsHttpDelete,$/;"	e	enum:__anon7d4a417c0a03
EcsHttpGet	./src/flecs.h	/^    EcsHttpGet,$/;"	e	enum:__anon7d4a417c0a03
EcsHttpMethodUnsupported	./src/flecs.h	/^    EcsHttpMethodUnsupported$/;"	e	enum:__anon7d4a417c0a03
EcsHttpOptions	./src/flecs.h	/^    EcsHttpOptions,$/;"	e	enum:__anon7d4a417c0a03
EcsHttpPost	./src/flecs.h	/^    EcsHttpPost,$/;"	e	enum:__anon7d4a417c0a03
EcsHttpPut	./src/flecs.h	/^    EcsHttpPut,$/;"	e	enum:__anon7d4a417c0a03
EcsI16	./src/flecs.h	/^    EcsI16,$/;"	e	enum:ecs_primitive_kind_t
EcsI32	./src/flecs.h	/^    EcsI32,$/;"	e	enum:ecs_primitive_kind_t
EcsI64	./src/flecs.h	/^    EcsI64,$/;"	e	enum:ecs_primitive_kind_t
EcsI8	./src/flecs.h	/^    EcsI8,$/;"	e	enum:ecs_primitive_kind_t
EcsIPtr	./src/flecs.h	/^    EcsIPtr,$/;"	e	enum:ecs_primitive_kind_t
EcsId	./src/flecs.h	/^    EcsId,$/;"	e	enum:ecs_primitive_kind_t
EcsIdAlwaysOverride	./src/flecs.h	/^#define EcsIdAlwaysOverride /;"	d
EcsIdDontInherit	./src/flecs.h	/^#define EcsIdDontInherit /;"	d
EcsIdEventMask	./src/flecs.h	/^#define EcsIdEventMask\\/;"	d
EcsIdExclusive	./src/flecs.h	/^#define EcsIdExclusive /;"	d
EcsIdHasOnAdd	./src/flecs.h	/^#define EcsIdHasOnAdd /;"	d
EcsIdHasOnRemove	./src/flecs.h	/^#define EcsIdHasOnRemove /;"	d
EcsIdHasOnSet	./src/flecs.h	/^#define EcsIdHasOnSet /;"	d
EcsIdHasOnTableCreate	./src/flecs.h	/^#define EcsIdHasOnTableCreate /;"	d
EcsIdHasOnTableDelete	./src/flecs.h	/^#define EcsIdHasOnTableDelete /;"	d
EcsIdHasOnTableEmpty	./src/flecs.h	/^#define EcsIdHasOnTableEmpty /;"	d
EcsIdHasOnTableFill	./src/flecs.h	/^#define EcsIdHasOnTableFill /;"	d
EcsIdHasUnSet	./src/flecs.h	/^#define EcsIdHasUnSet /;"	d
EcsIdMarkedForDelete	./src/flecs.h	/^#define EcsIdMarkedForDelete /;"	d
EcsIdOnDeleteDelete	./src/flecs.h	/^#define EcsIdOnDeleteDelete /;"	d
EcsIdOnDeleteMask	./src/flecs.h	/^#define EcsIdOnDeleteMask\\/;"	d
EcsIdOnDeleteObjectDelete	./src/flecs.h	/^#define EcsIdOnDeleteObjectDelete /;"	d
EcsIdOnDeleteObjectMask	./src/flecs.h	/^#define EcsIdOnDeleteObjectMask\\/;"	d
EcsIdOnDeleteObjectPanic	./src/flecs.h	/^#define EcsIdOnDeleteObjectPanic /;"	d
EcsIdOnDeleteObjectRemove	./src/flecs.h	/^#define EcsIdOnDeleteObjectRemove /;"	d
EcsIdOnDeletePanic	./src/flecs.h	/^#define EcsIdOnDeletePanic /;"	d
EcsIdOnDeleteRemove	./src/flecs.h	/^#define EcsIdOnDeleteRemove /;"	d
EcsIdTag	./src/flecs.h	/^#define EcsIdTag /;"	d
EcsIdTraversable	./src/flecs.h	/^#define EcsIdTraversable /;"	d
EcsIdUnion	./src/flecs.h	/^#define EcsIdUnion /;"	d
EcsIdWith	./src/flecs.h	/^#define EcsIdWith /;"	d
EcsIdentifier	./src/flecs.h	/^typedef struct EcsIdentifier {$/;"	s
EcsIdentifier	./src/flecs.h	/^} EcsIdentifier;$/;"	t	typeref:struct:EcsIdentifier
EcsIn	./src/flecs.h	/^    EcsIn,            \/**< Term is only read *\/$/;"	e	enum:ecs_inout_kind_t
EcsInOut	./src/flecs.h	/^    EcsInOut,         \/**< Term is both read and written *\/$/;"	e	enum:ecs_inout_kind_t
EcsInOutDefault	./src/flecs.h	/^    EcsInOutDefault,  \/**< InOut for regular terms, In for shared terms *\/$/;"	e	enum:ecs_inout_kind_t
EcsInOutNone	./src/flecs.h	/^    EcsInOutNone,     \/**< Term is neither read nor written *\/$/;"	e	enum:ecs_inout_kind_t
EcsIsA	./src/flecs.c	/^const ecs_entity_t EcsIsA =                         FLECS_HI_COMPONENT_ID + 31;$/;"	v	typeref:typename:const ecs_entity_t
EcsIsEntity	./src/flecs.h	/^#define EcsIsEntity /;"	d
EcsIsName	./src/flecs.h	/^#define EcsIsName /;"	d
EcsIsVariable	./src/flecs.h	/^#define EcsIsVariable /;"	d
EcsIterCppEach	./src/flecs.h	/^#define EcsIterCppEach /;"	d
EcsIterEntityOptional	./src/flecs.h	/^#define EcsIterEntityOptional /;"	d
EcsIterEvalChain	./src/flecs.h	/^    EcsIterEvalChain,$/;"	e	enum:ecs_iter_kind_t
EcsIterEvalCondition	./src/flecs.h	/^    EcsIterEvalCondition,$/;"	e	enum:ecs_iter_kind_t
EcsIterEvalNone	./src/flecs.h	/^    EcsIterEvalNone$/;"	e	enum:ecs_iter_kind_t
EcsIterEvalTables	./src/flecs.h	/^    EcsIterEvalTables,$/;"	e	enum:ecs_iter_kind_t
EcsIterHasCondSet	./src/flecs.h	/^#define EcsIterHasCondSet /;"	d
EcsIterHasShared	./src/flecs.h	/^#define EcsIterHasShared /;"	d
EcsIterIgnoreThis	./src/flecs.h	/^#define EcsIterIgnoreThis /;"	d
EcsIterIsInstanced	./src/flecs.h	/^#define EcsIterIsInstanced /;"	d
EcsIterIsValid	./src/flecs.h	/^#define EcsIterIsValid /;"	d
EcsIterMatchVar	./src/flecs.h	/^#define EcsIterMatchVar /;"	d
EcsIterNext	./src/flecs.h	/^#define EcsIterNext /;"	d
EcsIterNextYield	./src/flecs.h	/^#define EcsIterNextYield /;"	d
EcsIterNoData	./src/flecs.h	/^#define EcsIterNoData /;"	d
EcsIterNoResults	./src/flecs.h	/^#define EcsIterNoResults /;"	d
EcsIterProfile	./src/flecs.h	/^#define EcsIterProfile /;"	d
EcsIterTableOnly	./src/flecs.h	/^#define EcsIterTableOnly /;"	d
EcsIterTrivialSearch	./src/flecs.h	/^#define EcsIterTrivialSearch /;"	d
EcsIterTrivialSearchNoData	./src/flecs.h	/^#define EcsIterTrivialSearchNoData /;"	d
EcsIterTrivialSearchWildcard	./src/flecs.h	/^#define EcsIterTrivialSearchWildcard /;"	d
EcsIterTrivialTest	./src/flecs.h	/^#define EcsIterTrivialTest /;"	d
EcsIterYield	./src/flecs.h	/^#define EcsIterYield /;"	d
EcsIterable	./src/flecs.h	/^typedef ecs_iterable_t EcsIterable;$/;"	t	typeref:typename:ecs_iterable_t
EcsJournalClear	./src/flecs.h	/^    EcsJournalClear,$/;"	e	enum:ecs_journal_kind_t
EcsJournalDelete	./src/flecs.h	/^    EcsJournalDelete,$/;"	e	enum:ecs_journal_kind_t
EcsJournalDeleteWith	./src/flecs.h	/^    EcsJournalDeleteWith,$/;"	e	enum:ecs_journal_kind_t
EcsJournalMove	./src/flecs.h	/^    EcsJournalMove,$/;"	e	enum:ecs_journal_kind_t
EcsJournalNew	./src/flecs.h	/^    EcsJournalNew,$/;"	e	enum:ecs_journal_kind_t
EcsJournalRemoveAll	./src/flecs.h	/^    EcsJournalRemoveAll,$/;"	e	enum:ecs_journal_kind_t
EcsJournalTableEvents	./src/flecs.h	/^    EcsJournalTableEvents$/;"	e	enum:ecs_journal_kind_t
EcsLastInternalComponentId	./src/flecs.h	/^#define EcsLastInternalComponentId /;"	d
EcsLeftParen	./src/flecs.c	/^    EcsLeftParen,$/;"	e	enum:ecs_expr_oper_t	file:
EcsMember	./src/flecs.h	/^typedef struct EcsMember {$/;"	s
EcsMember	./src/flecs.h	/^} EcsMember;$/;"	t	typeref:struct:EcsMember
EcsMemberRanges	./src/flecs.h	/^typedef struct EcsMemberRanges {$/;"	s
EcsMemberRanges	./src/flecs.h	/^} EcsMemberRanges;$/;"	t	typeref:struct:EcsMemberRanges
EcsMetaType	./src/flecs.h	/^typedef struct EcsMetaType {$/;"	s
EcsMetaType	./src/flecs.h	/^} EcsMetaType;$/;"	t	typeref:struct:EcsMetaType
EcsMetaTypeOpKindLast	./src/flecs.h	/^    EcsMetaTypeOpKindLast = EcsOpId$/;"	e	enum:ecs_meta_type_op_kind_t
EcsMetaTypeSerialized	./src/flecs.h	/^typedef struct EcsMetaTypeSerialized {$/;"	s
EcsMetaTypeSerialized	./src/flecs.h	/^} EcsMetaTypeSerialized;$/;"	t	typeref:struct:EcsMetaTypeSerialized
EcsMetricCountIds	./src/flecs.c	/^} EcsMetricCountIds;$/;"	t	typeref:struct:__anon7d4a41771308	file:
EcsMetricCountTargets	./src/flecs.c	/^} EcsMetricCountTargets;$/;"	t	typeref:struct:__anon7d4a41771408	file:
EcsMetricId	./src/flecs.c	/^} EcsMetricId;$/;"	t	typeref:struct:__anon7d4a41771108	file:
EcsMetricIdInstance	./src/flecs.c	/^} EcsMetricIdInstance;$/;"	t	typeref:struct:__anon7d4a41771608	file:
EcsMetricMember	./src/flecs.c	/^} EcsMetricMember;$/;"	t	typeref:struct:__anon7d4a41771008	file:
EcsMetricMemberInstance	./src/flecs.c	/^} EcsMetricMemberInstance;$/;"	t	typeref:struct:__anon7d4a41771508	file:
EcsMetricOneOf	./src/flecs.c	/^} EcsMetricOneOf;$/;"	t	typeref:struct:__anon7d4a41771208	file:
EcsMetricOneOfInstance	./src/flecs.c	/^} EcsMetricOneOfInstance;$/;"	t	typeref:struct:__anon7d4a41771708	file:
EcsMetricSource	./src/flecs.h	/^typedef struct EcsMetricSource {$/;"	s
EcsMetricSource	./src/flecs.h	/^} EcsMetricSource;$/;"	t	typeref:struct:EcsMetricSource
EcsMetricValue	./src/flecs.h	/^typedef struct EcsMetricValue {$/;"	s
EcsMetricValue	./src/flecs.h	/^} EcsMetricValue;$/;"	t	typeref:struct:EcsMetricValue
EcsMin	./src/flecs.c	/^    EcsMin$/;"	e	enum:ecs_expr_oper_t	file:
EcsMixinDtor	./src/flecs.c	/^    EcsMixinDtor,$/;"	e	enum:ecs_mixin_kind_t	file:
EcsMixinEntity	./src/flecs.c	/^    EcsMixinEntity,$/;"	e	enum:ecs_mixin_kind_t	file:
EcsMixinIterable	./src/flecs.c	/^    EcsMixinIterable,$/;"	e	enum:ecs_mixin_kind_t	file:
EcsMixinMax	./src/flecs.c	/^    EcsMixinMax$/;"	e	enum:ecs_mixin_kind_t	file:
EcsMixinObservable	./src/flecs.c	/^    EcsMixinObservable,$/;"	e	enum:ecs_mixin_kind_t	file:
EcsMixinWorld	./src/flecs.c	/^    EcsMixinWorld,$/;"	e	enum:ecs_mixin_kind_t	file:
EcsModule	./src/flecs.c	/^const ecs_entity_t EcsModule =                      FLECS_HI_COMPONENT_ID + 4;$/;"	v	typeref:typename:const ecs_entity_t
EcsMonitor	./src/flecs.c	/^const ecs_entity_t EcsMonitor =                     FLECS_HI_COMPONENT_ID + 61;$/;"	v	typeref:typename:const ecs_entity_t
EcsMul	./src/flecs.c	/^    EcsMul,$/;"	e	enum:ecs_expr_oper_t	file:
EcsName	./src/flecs.c	/^const ecs_entity_t EcsName =                        FLECS_HI_COMPONENT_ID + 33;$/;"	v	typeref:typename:const ecs_entity_t
EcsNot	./src/flecs.h	/^    EcsNot,           \/**< The term must not match *\/$/;"	e	enum:ecs_oper_kind_t
EcsNotFrom	./src/flecs.h	/^    EcsNotFrom,       \/**< Term must match none of the components from term id *\/$/;"	e	enum:ecs_oper_kind_t
EcsObserver	./src/flecs.c	/^const ecs_entity_t EcsObserver =                                            6;$/;"	v	typeref:typename:const ecs_entity_t
EcsObserverIsDisabled	./src/flecs.h	/^#define EcsObserverIsDisabled /;"	d
EcsObserverIsMonitor	./src/flecs.h	/^#define EcsObserverIsMonitor /;"	d
EcsObserverIsMulti	./src/flecs.h	/^#define EcsObserverIsMulti /;"	d
EcsObserverIsParentDisabled	./src/flecs.h	/^#define EcsObserverIsParentDisabled /;"	d
EcsOnAdd	./src/flecs.c	/^const ecs_entity_t EcsOnAdd =                       FLECS_HI_COMPONENT_ID + 36;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnDelete	./src/flecs.c	/^const ecs_entity_t EcsOnDelete =                    FLECS_HI_COMPONENT_ID + 40;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnDeleteTarget	./src/flecs.c	/^const ecs_entity_t EcsOnDeleteTarget =              FLECS_HI_COMPONENT_ID + 46;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnLoad	./src/flecs.c	/^const ecs_entity_t EcsOnLoad =                      FLECS_HI_COMPONENT_ID + 66;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnRemove	./src/flecs.c	/^const ecs_entity_t EcsOnRemove =                    FLECS_HI_COMPONENT_ID + 37;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnSet	./src/flecs.c	/^const ecs_entity_t EcsOnSet =                       FLECS_HI_COMPONENT_ID + 38;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnStart	./src/flecs.c	/^const ecs_entity_t EcsOnStart =                     FLECS_HI_COMPONENT_ID + 64;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnStore	./src/flecs.c	/^const ecs_entity_t EcsOnStore =                     FLECS_HI_COMPONENT_ID + 73;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnTableCreate	./src/flecs.c	/^const ecs_entity_t EcsOnTableCreate =               FLECS_HI_COMPONENT_ID + 41;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnTableDelete	./src/flecs.c	/^const ecs_entity_t EcsOnTableDelete =               FLECS_HI_COMPONENT_ID + 42;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnTableEmpty	./src/flecs.c	/^const ecs_entity_t EcsOnTableEmpty =                FLECS_HI_COMPONENT_ID + 43;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnTableFill	./src/flecs.c	/^const ecs_entity_t EcsOnTableFill =                 FLECS_HI_COMPONENT_ID + 44;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnUpdate	./src/flecs.c	/^const ecs_entity_t EcsOnUpdate =                    FLECS_HI_COMPONENT_ID + 69;$/;"	v	typeref:typename:const ecs_entity_t
EcsOnValidate	./src/flecs.c	/^const ecs_entity_t EcsOnValidate =                  FLECS_HI_COMPONENT_ID + 70;$/;"	v	typeref:typename:const ecs_entity_t
EcsOneOf	./src/flecs.c	/^const ecs_entity_t EcsOneOf =                       FLECS_HI_COMPONENT_ID + 26;$/;"	v	typeref:typename:const ecs_entity_t
EcsOpArray	./src/flecs.h	/^    EcsOpArray,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpBitmask	./src/flecs.h	/^    EcsOpBitmask,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpBool	./src/flecs.h	/^    EcsOpBool,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpByte	./src/flecs.h	/^    EcsOpByte,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpChar	./src/flecs.h	/^    EcsOpChar,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpEntity	./src/flecs.h	/^    EcsOpEntity,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpEnum	./src/flecs.h	/^    EcsOpEnum,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpF32	./src/flecs.h	/^    EcsOpF32,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpF64	./src/flecs.h	/^    EcsOpF64,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpI16	./src/flecs.h	/^    EcsOpI16,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpI32	./src/flecs.h	/^    EcsOpI32,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpI64	./src/flecs.h	/^    EcsOpI64,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpI8	./src/flecs.h	/^    EcsOpI8,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpIPtr	./src/flecs.h	/^    EcsOpIPtr,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpId	./src/flecs.h	/^    EcsOpId,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpOpaque	./src/flecs.h	/^    EcsOpOpaque,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpPop	./src/flecs.h	/^    EcsOpPop,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpPrimitive	./src/flecs.h	/^    EcsOpPrimitive, \/**< Marks first constant that's a primitive *\/$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpPush	./src/flecs.h	/^    EcsOpPush,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpScope	./src/flecs.h	/^    EcsOpScope, \/**< Marks last constant that can open\/close a scope *\/$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpString	./src/flecs.h	/^    EcsOpString,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpU16	./src/flecs.h	/^    EcsOpU16,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpU32	./src/flecs.h	/^    EcsOpU32,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpU64	./src/flecs.h	/^    EcsOpU64,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpU8	./src/flecs.h	/^    EcsOpU8,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpUPtr	./src/flecs.h	/^    EcsOpUPtr,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpVector	./src/flecs.h	/^    EcsOpVector,$/;"	e	enum:ecs_meta_type_op_kind_t
EcsOpaque	./src/flecs.h	/^typedef struct EcsOpaque {$/;"	s
EcsOpaque	./src/flecs.h	/^} EcsOpaque;$/;"	t	typeref:struct:EcsOpaque
EcsOpaqueType	./src/flecs.h	/^    EcsOpaqueType,$/;"	e	enum:ecs_type_kind_t
EcsOptional	./src/flecs.h	/^    EcsOptional,      \/**< The term may match *\/$/;"	e	enum:ecs_oper_kind_t
EcsOr	./src/flecs.h	/^    EcsOr,            \/**< One of the terms in an or chain must match *\/$/;"	e	enum:ecs_oper_kind_t
EcsOrFrom	./src/flecs.h	/^    EcsOrFrom,        \/**< Term must match at least one component from term id *\/$/;"	e	enum:ecs_oper_kind_t
EcsOsApiHighResolutionTimer	./src/flecs.h	/^#define EcsOsApiHighResolutionTimer /;"	d
EcsOsApiLogWithColors	./src/flecs.h	/^#define EcsOsApiLogWithColors /;"	d
EcsOsApiLogWithTimeDelta	./src/flecs.h	/^#define EcsOsApiLogWithTimeDelta /;"	d
EcsOsApiLogWithTimeStamp	./src/flecs.h	/^#define EcsOsApiLogWithTimeStamp /;"	d
EcsOut	./src/flecs.h	/^    EcsOut,           \/**< Term is only written *\/$/;"	e	enum:ecs_inout_kind_t
EcsPanic	./src/flecs.c	/^const ecs_entity_t EcsPanic =                       FLECS_HI_COMPONENT_ID + 52;$/;"	v	typeref:typename:const ecs_entity_t
EcsParent	./src/flecs.h	/^#define EcsParent /;"	d
EcsPeriod1d	./src/flecs.c	/^ecs_entity_t EcsPeriod1d = 0;$/;"	v	typeref:typename:ecs_entity_t
EcsPeriod1h	./src/flecs.c	/^ecs_entity_t EcsPeriod1h = 0;$/;"	v	typeref:typename:ecs_entity_t
EcsPeriod1m	./src/flecs.c	/^ecs_entity_t EcsPeriod1m = 0;$/;"	v	typeref:typename:ecs_entity_t
EcsPeriod1s	./src/flecs.c	/^ecs_entity_t EcsPeriod1s = 0;$/;"	v	typeref:typename:ecs_entity_t
EcsPeriod1w	./src/flecs.c	/^ecs_entity_t EcsPeriod1w = 0;$/;"	v	typeref:typename:ecs_entity_t
EcsPhase	./src/flecs.c	/^const ecs_entity_t EcsPhase =                       FLECS_HI_COMPONENT_ID + 75;$/;"	v	typeref:typename:const ecs_entity_t
EcsPipeline	./src/flecs.c	/^typedef struct EcsPipeline {$/;"	s	file:
EcsPipeline	./src/flecs.c	/^} EcsPipeline;$/;"	t	typeref:struct:EcsPipeline	file:
EcsPipelineStats	./src/flecs.h	/^} EcsPipelineStats;$/;"	t	typeref:struct:__anon7d4a417c1a08
EcsPoly	./src/flecs.h	/^typedef struct EcsPoly {$/;"	s
EcsPoly	./src/flecs.h	/^} EcsPoly;$/;"	t	typeref:struct:EcsPoly
EcsPostFrame	./src/flecs.c	/^const ecs_entity_t EcsPostFrame =                   FLECS_HI_COMPONENT_ID + 74;$/;"	v	typeref:typename:const ecs_entity_t
EcsPostLoad	./src/flecs.c	/^const ecs_entity_t EcsPostLoad =                    FLECS_HI_COMPONENT_ID + 67;$/;"	v	typeref:typename:const ecs_entity_t
EcsPostUpdate	./src/flecs.c	/^const ecs_entity_t EcsPostUpdate =                  FLECS_HI_COMPONENT_ID + 71;$/;"	v	typeref:typename:const ecs_entity_t
EcsPreFrame	./src/flecs.c	/^const ecs_entity_t EcsPreFrame =                    FLECS_HI_COMPONENT_ID + 65;$/;"	v	typeref:typename:const ecs_entity_t
EcsPreStore	./src/flecs.c	/^const ecs_entity_t EcsPreStore =                    FLECS_HI_COMPONENT_ID + 72;$/;"	v	typeref:typename:const ecs_entity_t
EcsPreUpdate	./src/flecs.c	/^const ecs_entity_t EcsPreUpdate =                   FLECS_HI_COMPONENT_ID + 68;$/;"	v	typeref:typename:const ecs_entity_t
EcsPredEq	./src/flecs.c	/^const ecs_entity_t EcsPredEq =                      FLECS_HI_COMPONENT_ID + 56;$/;"	v	typeref:typename:const ecs_entity_t
EcsPredLookup	./src/flecs.c	/^const ecs_entity_t EcsPredLookup =                  FLECS_HI_COMPONENT_ID + 58;$/;"	v	typeref:typename:const ecs_entity_t
EcsPredMatch	./src/flecs.c	/^const ecs_entity_t EcsPredMatch =                   FLECS_HI_COMPONENT_ID + 57;$/;"	v	typeref:typename:const ecs_entity_t
EcsPrefab	./src/flecs.c	/^const ecs_entity_t EcsPrefab =                      FLECS_HI_COMPONENT_ID + 6;$/;"	v	typeref:typename:const ecs_entity_t
EcsPrimitive	./src/flecs.h	/^typedef struct EcsPrimitive {$/;"	s
EcsPrimitive	./src/flecs.h	/^} EcsPrimitive;$/;"	t	typeref:struct:EcsPrimitive
EcsPrimitiveKindLast	./src/flecs.h	/^    EcsPrimitiveKindLast = EcsId$/;"	e	enum:ecs_primitive_kind_t
EcsPrimitiveType	./src/flecs.h	/^    EcsPrimitiveType,$/;"	e	enum:ecs_type_kind_t
EcsPrivate	./src/flecs.c	/^const ecs_entity_t EcsPrivate =                     FLECS_HI_COMPONENT_ID + 5;$/;"	v	typeref:typename:const ecs_entity_t
EcsQuantity	./src/flecs.c	/^const ecs_entity_t EcsQuantity =                    FLECS_HI_COMPONENT_ID + 112;$/;"	v	typeref:typename:const ecs_entity_t
EcsQuery	./src/flecs.c	/^const ecs_entity_t EcsQuery =                                               5;$/;"	v	typeref:typename:const ecs_entity_t
EcsQueryHasMonitor	./src/flecs.h	/^#define EcsQueryHasMonitor /;"	d
EcsQueryHasNonThisOutTerms	./src/flecs.h	/^#define EcsQueryHasNonThisOutTerms /;"	d
EcsQueryHasOutTerms	./src/flecs.h	/^#define EcsQueryHasOutTerms /;"	d
EcsQueryHasRefs	./src/flecs.h	/^#define EcsQueryHasRefs /;"	d
EcsQueryIsOrphaned	./src/flecs.h	/^#define EcsQueryIsOrphaned /;"	d
EcsQueryIsSubquery	./src/flecs.h	/^#define EcsQueryIsSubquery /;"	d
EcsQueryMatchEmptyTables	./src/flecs.h	/^#define EcsQueryMatchEmptyTables /;"	d
EcsQueryOrphan	./src/flecs.c	/^    EcsQueryOrphan$/;"	e	enum:ecs_query_eventkind_t	file:
EcsQueryTableMatch	./src/flecs.c	/^    EcsQueryTableMatch,$/;"	e	enum:ecs_query_eventkind_t	file:
EcsQueryTableRematch	./src/flecs.c	/^    EcsQueryTableRematch,$/;"	e	enum:ecs_query_eventkind_t	file:
EcsQueryTableUnmatch	./src/flecs.c	/^    EcsQueryTableUnmatch,$/;"	e	enum:ecs_query_eventkind_t	file:
EcsQueryTrivialIter	./src/flecs.h	/^#define EcsQueryTrivialIter /;"	d
EcsRateFilter	./src/flecs.h	/^typedef struct EcsRateFilter {$/;"	s
EcsRateFilter	./src/flecs.h	/^} EcsRateFilter;$/;"	t	typeref:struct:EcsRateFilter
EcsReflexive	./src/flecs.c	/^const ecs_entity_t EcsReflexive =                   FLECS_HI_COMPONENT_ID + 15;$/;"	v	typeref:typename:const ecs_entity_t
EcsRelationship	./src/flecs.c	/^const ecs_entity_t EcsRelationship =            FLECS_HI_COMPONENT_ID + 28;$/;"	v	typeref:typename:const ecs_entity_t
EcsRemove	./src/flecs.c	/^const ecs_entity_t EcsRemove =                      FLECS_HI_COMPONENT_ID + 50;$/;"	v	typeref:typename:const ecs_entity_t
EcsRest	./src/flecs.h	/^} EcsRest;$/;"	t	typeref:struct:__anon7d4a417c0e08
EcsRuleAnd	./src/flecs.c	/^    EcsRuleAnd,            \/* And operator: find or match id against variable source *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleAndAny	./src/flecs.c	/^    EcsRuleAndAny,         \/* And operator with support for matching Any src\/id *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleAndId	./src/flecs.c	/^    EcsRuleAndId,          \/* And operator for fixed id (no wildcards\/variables) *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleContain	./src/flecs.c	/^    EcsRuleContain,        \/* Test if table contains entity *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleEach	./src/flecs.c	/^    EcsRuleEach,           \/* Iterate entities in table, populate entity variable *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleEnd	./src/flecs.c	/^    EcsRuleEnd,            \/* End of control flow block *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleFirst	./src/flecs.c	/^#define EcsRuleFirst /;"	d	file:
EcsRuleIds	./src/flecs.c	/^    EcsRuleIds,            \/* Test for existence of ids matching wildcard *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleIdsLeft	./src/flecs.c	/^    EcsRuleIdsLeft,        \/* Find ids in use that match (*, T) wildcard *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleIdsRight	./src/flecs.c	/^    EcsRuleIdsRight,       \/* Find ids in use that match (R, *) wildcard *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleIf	./src/flecs.c	/^    EcsRuleIf,             \/* Conditional execution *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleIsEntity	./src/flecs.c	/^#define EcsRuleIsEntity /;"	d	file:
EcsRuleIsSelf	./src/flecs.c	/^#define EcsRuleIsSelf /;"	d	file:
EcsRuleIsVar	./src/flecs.c	/^#define EcsRuleIsVar /;"	d	file:
EcsRuleLookup	./src/flecs.c	/^    EcsRuleLookup,         \/* Lookup relative to variable *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleMaxVarCount	./src/flecs.c	/^#define EcsRuleMaxVarCount /;"	d	file:
EcsRuleNot	./src/flecs.c	/^    EcsRuleNot,            \/* Sets iterator state after term was not matched *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleNothing	./src/flecs.c	/^    EcsRuleNothing         \/* Must be last *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleOptional	./src/flecs.c	/^    EcsRuleOptional,       \/* Optional operator *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleOr	./src/flecs.c	/^    EcsRuleOr,             \/* Or operator *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRulePairEq	./src/flecs.c	/^    EcsRulePairEq,         \/* Test if both elements of pair are the same *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRulePopulate	./src/flecs.c	/^    EcsRulePopulate,       \/* Populate any data fields *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRulePopulateSelf	./src/flecs.c	/^    EcsRulePopulateSelf,   \/* Populate only self (owned) data fields *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRulePredEq	./src/flecs.c	/^    EcsRulePredEq,         \/* Test if variable is equal to, or assign to if not set *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRulePredEqMatch	./src/flecs.c	/^    EcsRulePredEqMatch,    \/* Same as EcsRulePredEq but with fuzzy matching by name *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRulePredEqName	./src/flecs.c	/^    EcsRulePredEqName,     \/* Same as EcsRulePredEq but with matching by name *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRulePredNeq	./src/flecs.c	/^    EcsRulePredNeq,        \/* Test if variable is not equal to *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRulePredNeqMatch	./src/flecs.c	/^    EcsRulePredNeqMatch,   \/* Same as EcsRulePredNeq but with fuzzy matching by name *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRulePredNeqName	./src/flecs.c	/^    EcsRulePredNeqName,    \/* Same as EcsRulePredNeq but with matching by name *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleReset	./src/flecs.c	/^    EcsRuleReset,          \/* Reset value of variable to wildcard (*) *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleSecond	./src/flecs.c	/^#define EcsRuleSecond /;"	d	file:
EcsRuleSelectAny	./src/flecs.c	/^    EcsRuleSelectAny,      \/* Dedicated instruction for _ queries where the src is unknown *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleSelfUp	./src/flecs.c	/^    EcsRuleSelfUp,         \/* Self|up traversal *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleSelfUpId	./src/flecs.c	/^    EcsRuleSelfUpId,       \/* Self|up traversal for fixed id (like AndId) *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleSetFixed	./src/flecs.c	/^    EcsRuleSetFixed,       \/* Set fixed source entity ids *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleSetId	./src/flecs.c	/^    EcsRuleSetId,          \/* Set id if not set *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleSetIds	./src/flecs.c	/^    EcsRuleSetIds,         \/* Set fixed (component) ids *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleSetThis	./src/flecs.c	/^    EcsRuleSetThis,        \/* Populate This entity variable *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleSetVars	./src/flecs.c	/^    EcsRuleSetVars,        \/* Populate it.sources from variables *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleSrc	./src/flecs.c	/^#define EcsRuleSrc /;"	d	file:
EcsRuleStore	./src/flecs.c	/^    EcsRuleStore,          \/* Store table or entity in variable *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleTrav	./src/flecs.c	/^    EcsRuleTrav,           \/* Support for transitive\/reflexive queries *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleTriv	./src/flecs.c	/^    EcsRuleTriv,           \/* Trivial search *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleTrivData	./src/flecs.c	/^    EcsRuleTrivData,       \/* Trivial search with setting data fields *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleTrivWildcard	./src/flecs.c	/^    EcsRuleTrivWildcard,   \/* Trivial search with (exclusive) wildcard ids *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleUp	./src/flecs.c	/^    EcsRuleUp,             \/* Up traversal *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleUpId	./src/flecs.c	/^    EcsRuleUpId,           \/* Up traversal for fixed id (like AndId) *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleWith	./src/flecs.c	/^    EcsRuleWith,           \/* Match id against fixed or variable source *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsRuleYield	./src/flecs.c	/^    EcsRuleYield,          \/* Yield result back to application *\/$/;"	e	enum:__anon7d4a41772303	file:
EcsScopeClose	./src/flecs.c	/^const ecs_entity_t EcsScopeClose =                  FLECS_HI_COMPONENT_ID + 60;$/;"	v	typeref:typename:const ecs_entity_t
EcsScopeOpen	./src/flecs.c	/^const ecs_entity_t EcsScopeOpen =                   FLECS_HI_COMPONENT_ID + 59;$/;"	v	typeref:typename:const ecs_entity_t
EcsScript	./src/flecs.h	/^typedef struct EcsScript {$/;"	s
EcsScript	./src/flecs.h	/^} EcsScript;$/;"	t	typeref:struct:EcsScript
EcsSelf	./src/flecs.h	/^#define EcsSelf /;"	d
EcsShiftLeft	./src/flecs.c	/^    EcsShiftLeft,$/;"	e	enum:ecs_expr_oper_t	file:
EcsShiftRight	./src/flecs.c	/^    EcsShiftRight,$/;"	e	enum:ecs_expr_oper_t	file:
EcsSlotOf	./src/flecs.c	/^const ecs_entity_t EcsSlotOf =                      FLECS_HI_COMPONENT_ID + 8;$/;"	v	typeref:typename:const ecs_entity_t
EcsStatsHeader	./src/flecs.h	/^} EcsStatsHeader;$/;"	t	typeref:struct:__anon7d4a417c1808
EcsString	./src/flecs.h	/^    EcsString,$/;"	e	enum:ecs_primitive_kind_t
EcsStruct	./src/flecs.h	/^typedef struct EcsStruct {$/;"	s
EcsStruct	./src/flecs.h	/^} EcsStruct;$/;"	t	typeref:struct:EcsStruct
EcsStructType	./src/flecs.h	/^    EcsStructType,$/;"	e	enum:ecs_type_kind_t
EcsSub	./src/flecs.c	/^    EcsSub,$/;"	e	enum:ecs_expr_oper_t	file:
EcsSymbol	./src/flecs.c	/^const ecs_entity_t EcsSymbol =                      FLECS_HI_COMPONENT_ID + 34;$/;"	v	typeref:typename:const ecs_entity_t
EcsSymmetric	./src/flecs.c	/^const ecs_entity_t EcsSymmetric =                   FLECS_HI_COMPONENT_ID + 16;$/;"	v	typeref:typename:const ecs_entity_t
EcsSystem	./src/flecs.c	/^const ecs_entity_t EcsSystem =                                              7;$/;"	v	typeref:typename:const ecs_entity_t
EcsTableHasAddActions	./src/flecs.h	/^#define EcsTableHasAddActions /;"	d
EcsTableHasBuiltins	./src/flecs.h	/^#define EcsTableHasBuiltins /;"	d
EcsTableHasChildOf	./src/flecs.h	/^#define EcsTableHasChildOf /;"	d
EcsTableHasCopy	./src/flecs.h	/^#define EcsTableHasCopy /;"	d
EcsTableHasCtors	./src/flecs.h	/^#define EcsTableHasCtors /;"	d
EcsTableHasDtors	./src/flecs.h	/^#define EcsTableHasDtors /;"	d
EcsTableHasIsA	./src/flecs.h	/^#define EcsTableHasIsA /;"	d
EcsTableHasLifecycle	./src/flecs.h	/^#define EcsTableHasLifecycle /;"	d
EcsTableHasModule	./src/flecs.h	/^#define EcsTableHasModule /;"	d
EcsTableHasMove	./src/flecs.h	/^#define EcsTableHasMove /;"	d
EcsTableHasName	./src/flecs.h	/^#define EcsTableHasName /;"	d
EcsTableHasOnAdd	./src/flecs.h	/^#define EcsTableHasOnAdd /;"	d
EcsTableHasOnRemove	./src/flecs.h	/^#define EcsTableHasOnRemove /;"	d
EcsTableHasOnSet	./src/flecs.h	/^#define EcsTableHasOnSet /;"	d
EcsTableHasOnTableCreate	./src/flecs.h	/^#define EcsTableHasOnTableCreate /;"	d
EcsTableHasOnTableDelete	./src/flecs.h	/^#define EcsTableHasOnTableDelete /;"	d
EcsTableHasOnTableEmpty	./src/flecs.h	/^#define EcsTableHasOnTableEmpty /;"	d
EcsTableHasOnTableFill	./src/flecs.h	/^#define EcsTableHasOnTableFill /;"	d
EcsTableHasOverrides	./src/flecs.h	/^#define EcsTableHasOverrides /;"	d
EcsTableHasPairs	./src/flecs.h	/^#define EcsTableHasPairs /;"	d
EcsTableHasRemoveActions	./src/flecs.h	/^#define EcsTableHasRemoveActions /;"	d
EcsTableHasTarget	./src/flecs.h	/^#define EcsTableHasTarget /;"	d
EcsTableHasToggle	./src/flecs.h	/^#define EcsTableHasToggle /;"	d
EcsTableHasTraversable	./src/flecs.h	/^#define EcsTableHasTraversable /;"	d
EcsTableHasUnSet	./src/flecs.h	/^#define EcsTableHasUnSet /;"	d
EcsTableHasUnion	./src/flecs.h	/^#define EcsTableHasUnion /;"	d
EcsTableIsComplex	./src/flecs.h	/^#define EcsTableIsComplex /;"	d
EcsTableIsDisabled	./src/flecs.h	/^#define EcsTableIsDisabled /;"	d
EcsTableIsPrefab	./src/flecs.h	/^#define EcsTableIsPrefab /;"	d
EcsTableMarkedForDelete	./src/flecs.h	/^#define EcsTableMarkedForDelete /;"	d
EcsTableNoTriggersForId	./src/flecs.c	/^    EcsTableNoTriggersForId,$/;"	e	enum:ecs_table_eventkind_t	file:
EcsTableTriggersForId	./src/flecs.c	/^    EcsTableTriggersForId,$/;"	e	enum:ecs_table_eventkind_t	file:
EcsTag	./src/flecs.c	/^const ecs_entity_t EcsTag =                         FLECS_HI_COMPONENT_ID + 20;$/;"	v	typeref:typename:const ecs_entity_t
EcsTarget	./src/flecs.c	/^const ecs_entity_t EcsTarget =                  FLECS_HI_COMPONENT_ID + 29;$/;"	v	typeref:typename:const ecs_entity_t
EcsTermIdInherited	./src/flecs.h	/^#define EcsTermIdInherited /;"	d
EcsTermIsTrivial	./src/flecs.h	/^#define EcsTermIsTrivial /;"	d
EcsTermMatchAny	./src/flecs.h	/^#define EcsTermMatchAny /;"	d
EcsTermMatchAnySrc	./src/flecs.h	/^#define EcsTermMatchAnySrc /;"	d
EcsTermMatchDisabled	./src/flecs.h	/^#define EcsTermMatchDisabled /;"	d
EcsTermMatchPrefab	./src/flecs.h	/^#define EcsTermMatchPrefab /;"	d
EcsTermNoData	./src/flecs.h	/^#define EcsTermNoData /;"	d
EcsTermReflexive	./src/flecs.h	/^#define EcsTermReflexive /;"	d
EcsTermSrcFirstEq	./src/flecs.h	/^#define EcsTermSrcFirstEq /;"	d
EcsTermSrcSecondEq	./src/flecs.h	/^#define EcsTermSrcSecondEq /;"	d
EcsTermTransitive	./src/flecs.h	/^#define EcsTermTransitive /;"	d
EcsThis	./src/flecs.c	/^const ecs_entity_t EcsThis =                        FLECS_HI_COMPONENT_ID + 12;$/;"	v	typeref:typename:const ecs_entity_t
EcsThisName	./src/flecs.c	/^#define EcsThisName /;"	d	file:
EcsTickSource	./src/flecs.h	/^typedef struct EcsTickSource {$/;"	s
EcsTickSource	./src/flecs.h	/^} EcsTickSource;$/;"	t	typeref:struct:EcsTickSource
EcsTimer	./src/flecs.h	/^typedef struct EcsTimer {$/;"	s
EcsTimer	./src/flecs.h	/^} EcsTimer;$/;"	t	typeref:struct:EcsTimer
EcsTrait	./src/flecs.c	/^const ecs_entity_t EcsTrait =                       FLECS_HI_COMPONENT_ID + 27;$/;"	v	typeref:typename:const ecs_entity_t
EcsTransitive	./src/flecs.c	/^const ecs_entity_t EcsTransitive =                  FLECS_HI_COMPONENT_ID + 14;$/;"	v	typeref:typename:const ecs_entity_t
EcsTraversable	./src/flecs.c	/^const ecs_entity_t EcsTraversable =                 FLECS_HI_COMPONENT_ID + 24;$/;"	v	typeref:typename:const ecs_entity_t
EcsTraverseAll	./src/flecs.h	/^#define EcsTraverseAll /;"	d
EcsTraverseFlags	./src/flecs.h	/^#define EcsTraverseFlags /;"	d
EcsTypeKindLast	./src/flecs.h	/^    EcsTypeKindLast = EcsOpaqueType$/;"	e	enum:ecs_type_kind_t
EcsU16	./src/flecs.h	/^    EcsU16,$/;"	e	enum:ecs_primitive_kind_t
EcsU32	./src/flecs.h	/^    EcsU32,$/;"	e	enum:ecs_primitive_kind_t
EcsU64	./src/flecs.h	/^    EcsU64,$/;"	e	enum:ecs_primitive_kind_t
EcsU8	./src/flecs.h	/^    EcsU8,$/;"	e	enum:ecs_primitive_kind_t
EcsUPtr	./src/flecs.h	/^    EcsUPtr,$/;"	e	enum:ecs_primitive_kind_t
EcsUnSet	./src/flecs.c	/^const ecs_entity_t EcsUnSet =                       FLECS_HI_COMPONENT_ID + 39;$/;"	v	typeref:typename:const ecs_entity_t
EcsUnion	./src/flecs.c	/^const ecs_entity_t EcsUnion =                       FLECS_HI_COMPONENT_ID + 21;$/;"	v	typeref:typename:const ecs_entity_t
EcsUnit	./src/flecs.h	/^typedef struct EcsUnit {$/;"	s
EcsUnit	./src/flecs.h	/^} EcsUnit;$/;"	t	typeref:struct:EcsUnit
EcsUnitPrefix	./src/flecs.h	/^typedef struct EcsUnitPrefix {$/;"	s
EcsUnitPrefix	./src/flecs.h	/^} EcsUnitPrefix;$/;"	t	typeref:struct:EcsUnitPrefix
EcsUp	./src/flecs.h	/^#define EcsUp /;"	d
EcsVarAny	./src/flecs.c	/^    EcsVarAny              \/* Used when requesting either entity or table var *\/$/;"	e	enum:__anon7d4a41772203	file:
EcsVarEntity	./src/flecs.c	/^    EcsVarEntity,          \/* Variable that stores an entity id *\/$/;"	e	enum:__anon7d4a41772203	file:
EcsVarNone	./src/flecs.c	/^#define EcsVarNone /;"	d	file:
EcsVarTable	./src/flecs.c	/^    EcsVarTable,           \/* Variable that stores a table *\/$/;"	e	enum:__anon7d4a41772203	file:
EcsVariable	./src/flecs.c	/^const ecs_entity_t EcsVariable =                    FLECS_HI_COMPONENT_ID + 13;$/;"	v	typeref:typename:const ecs_entity_t
EcsVector	./src/flecs.h	/^typedef struct EcsVector {$/;"	s
EcsVector	./src/flecs.h	/^} EcsVector;$/;"	t	typeref:struct:EcsVector
EcsVectorType	./src/flecs.h	/^    EcsVectorType,$/;"	e	enum:ecs_type_kind_t
EcsWildcard	./src/flecs.c	/^const ecs_entity_t EcsWildcard =                    FLECS_HI_COMPONENT_ID + 10;$/;"	v	typeref:typename:const ecs_entity_t
EcsWith	./src/flecs.c	/^const ecs_entity_t EcsWith =                        FLECS_HI_COMPONENT_ID + 25;$/;"	v	typeref:typename:const ecs_entity_t
EcsWorld	./src/flecs.c	/^const ecs_entity_t EcsWorld =                       FLECS_HI_COMPONENT_ID + 0;$/;"	v	typeref:typename:const ecs_entity_t
EcsWorldFini	./src/flecs.h	/^#define EcsWorldFini /;"	d
EcsWorldInit	./src/flecs.h	/^#define EcsWorldInit /;"	d
EcsWorldMeasureFrameTime	./src/flecs.h	/^#define EcsWorldMeasureFrameTime /;"	d
EcsWorldMeasureSystemTime	./src/flecs.h	/^#define EcsWorldMeasureSystemTime /;"	d
EcsWorldMultiThreaded	./src/flecs.h	/^#define EcsWorldMultiThreaded /;"	d
EcsWorldQuit	./src/flecs.h	/^#define EcsWorldQuit /;"	d
EcsWorldQuitWorkers	./src/flecs.h	/^#define EcsWorldQuitWorkers /;"	d
EcsWorldReadonly	./src/flecs.h	/^#define EcsWorldReadonly /;"	d
EcsWorldStats	./src/flecs.h	/^} EcsWorldStats;$/;"	t	typeref:struct:__anon7d4a417c1908
EcsWorldSummary	./src/flecs.h	/^} EcsWorldSummary;$/;"	t	typeref:struct:__anon7d4a417c1b08
ElectricCurrent	./src/flecs.h	/^struct ElectricCurrent { };$/;"	s	struct:flecs::units
Empty	./src/flecs.h	/^static const flecs::entity_t Empty = EcsEmpty;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Entity	./src/flecs.h	/^static const flecs::entity_t Entity = ecs_id(ecs_entity_t);$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Entity	./src/flecs.h	/^static const primitive_kind_t Entity = EcsEntity;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
Entry	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    using Entry = detailv3::sherwood_v3_entry<T>;$/;"	t	class:ska::detailv3::sherwood_v3_table	typeref:typename:detailv3::sherwood_v3_entry<T>
EntryPointer	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    using EntryPointer = typename AllocatorTraits::pointer;$/;"	t	class:ska::detailv3::sherwood_v3_table	typeref:typename:AllocatorTraits::pointer
Enum	./src/flecs.h	/^using Enum = EcsEnum;$/;"	t	namespace:flecs	typeref:typename:EcsEnum
EnumType	./src/flecs.h	/^static const type_kind_t EnumType = EcsEnumType;$/;"	v	namespace:flecs::meta	typeref:typename:const type_kind_t
Error	./src/flecs.h	/^    struct Error { };$/;"	s	struct:flecs::alerts
Error codes	./vendor/STC/docs/cregex_api.md	/^### Error codes$/;"	S	section:STC [cregex](../include/stc/cregex.h): Regular Expressions""Methods
Exa	./src/flecs.h	/^struct Exa { };$/;"	s	struct:flecs::units
Example	./vendor/STC/docs/arc_api.md	/^## Example$/;"	s	chapter:STC [arc](../include/stc/arc.h): Atomic Reference Counted Smart Pointer
Example	./vendor/STC/docs/box_api.md	/^## Example$/;"	s	chapter:STC [box](../include/stc/box.h): Smart Pointer (boxed object)
Example	./vendor/STC/docs/cbits_api.md	/^## Example$/;"	s	chapter:STC [cbits](../include/stc/cbits.h): Bitset
Example	./vendor/STC/docs/coption_api.md	/^## Example$/;"	s	chapter:STC [coption](../include/stc/coption.h): Command line argument parsing
Example	./vendor/STC/docs/crandom_api.md	/^## Example$/;"	s	chapter:STC [crand](../include/stc/crand.h): Pseudo Random Number Generator
Example	./vendor/STC/docs/cstr_api.md	/^## Example$/;"	s	chapter:STC [cstr](../include/stc/cstr.h): String
Example	./vendor/STC/docs/csview_api.md	/^## Example$/;"	s	chapter:STC [csview](../include/stc/csview.h): Sub-string View
Example	./vendor/STC/docs/hset_api.md	/^## Example$/;"	s	chapter:STC [hset](../include/stc/hset.h): HashSet (unordered)
Example	./vendor/STC/docs/list_api.md	/^## Example$/;"	s	chapter:STC [list](../include/stc/list.h): Forward List
Example	./vendor/STC/docs/pque_api.md	/^## Example$/;"	s	chapter:STC [pque](../include/stc/pque.h): Priority Queue
Example	./vendor/STC/docs/sset_api.md	/^## Example$/;"	s	chapter:STC [sset](../include/stc/sset.h): Sorted Set
Example	./vendor/STC/docs/stack_api.md	/^## Example$/;"	s	chapter:STC [stack](../include/stc/stack.h): Stack
Example 1	./vendor/STC/docs/cspan_api.md	/^## Example 1$/;"	s	chapter:STC [cspan](../include/stc/cspan.h): Multi-dimensional Array View
Example 2	./vendor/STC/docs/cspan_api.md	/^## Example 2$/;"	s	chapter:STC [cspan](../include/stc/cspan.h): Multi-dimensional Array View
Example 2	./vendor/STC/docs/hmap_api.md	/^### Example 2$/;"	S	section:STC [hmap](../include/stc/hmap.h): HashMap (unordered)""Examples
Example 2	./vendor/STC/docs/list_api.md	/^### Example 2$/;"	S	section:STC [list](../include/stc/list.h): Forward List""Example
Example 2	./vendor/STC/docs/smap_api.md	/^### Example 2$/;"	S	section:STC [smap](../include/stc/smap.h): Sorted Map""Examples
Example 2	./vendor/STC/docs/vec_api.md	/^### Example 2$/;"	S	section:STC [vec](../include/stc/vec.h): Vector""Examples
Example 2: UTF8 handling	./vendor/STC/docs/csview_api.md	/^### Example 2: UTF8 handling$/;"	S	section:STC [csview](../include/stc/csview.h): Sub-string View""Example
Example 3	./vendor/STC/docs/cspan_api.md	/^## Example 3$/;"	s	chapter:STC [cspan](../include/stc/cspan.h): Multi-dimensional Array View
Example 3	./vendor/STC/docs/hmap_api.md	/^### Example 3$/;"	S	section:STC [hmap](../include/stc/hmap.h): HashMap (unordered)""Examples
Example 3	./vendor/STC/docs/list_api.md	/^### Example 3$/;"	S	section:STC [list](../include/stc/list.h): Forward List""Example
Example 3	./vendor/STC/docs/smap_api.md	/^### Example 3$/;"	S	section:STC [smap](../include/stc/smap.h): Sorted Map""Examples
Example 3	./vendor/STC/docs/vec_api.md	/^### Example 3$/;"	S	section:STC [vec](../include/stc/vec.h): Vector""Examples
Example 3: csview tokenizer (string split)	./vendor/STC/docs/csview_api.md	/^### Example 3: csview tokenizer (string split)$/;"	S	section:STC [csview](../include/stc/csview.h): Sub-string View""Example
Example 4	./vendor/STC/docs/hmap_api.md	/^### Example 4$/;"	S	section:STC [hmap](../include/stc/hmap.h): HashMap (unordered)""Examples
Example 4	./vendor/STC/docs/smap_api.md	/^### Example 4$/;"	S	section:STC [smap](../include/stc/smap.h): Sorted Map""Examples
Example 5: Advanced	./vendor/STC/docs/hmap_api.md	/^### Example 5: Advanced$/;"	S	section:STC [hmap](../include/stc/hmap.h): HashMap (unordered)""Examples
Example 6: More advanced	./vendor/STC/docs/hmap_api.md	/^### Example 6: More advanced$/;"	S	section:STC [hmap](../include/stc/hmap.h): HashMap (unordered)""Examples
Example: UTF8 iteration and case conversion	./vendor/STC/docs/czview_api.md	/^## Example: UTF8 iteration and case conversion$/;"	s	chapter:STC [czview](../include/stc/czview.h): Null-terminated UTF8 String View
Examples	./vendor/STC/docs/deq_api.md	/^## Examples$/;"	s	chapter:STC [deq](../include/stc/deq.h): Double Ended Queue
Examples	./vendor/STC/docs/hmap_api.md	/^## Examples$/;"	s	chapter:STC [hmap](../include/stc/hmap.h): HashMap (unordered)
Examples	./vendor/STC/docs/queue_api.md	/^## Examples$/;"	s	chapter:STC [queue](../include/stc/queue.h): Queue
Examples	./vendor/STC/docs/smap_api.md	/^## Examples$/;"	s	chapter:STC [smap](../include/stc/smap.h): Sorted Map
Examples	./vendor/STC/docs/vec_api.md	/^## Examples$/;"	s	chapter:STC [vec](../include/stc/vec.h): Vector
Examples	./vendor/STC/misc/examples/README.md	/^Examples$/;"	c
Exbi	./src/flecs.h	/^struct Exbi { };$/;"	s	struct:flecs::units
Exclusive	./src/flecs.h	/^static const flecs::entity_t Exclusive = EcsExclusive;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
F	./vendor/fmt/include/chrono.h	/^  using F = std::numeric_limits<From>;$/;"	t	function:safe_duration_cast::lossless_integral_conversion	typeref:typename:std::numeric_limits<From>
F32	./src/flecs.h	/^static const flecs::entity_t F32 = ecs_id(ecs_f32_t);$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
F32	./src/flecs.h	/^static const primitive_kind_t F32 = EcsF32;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
F64	./src/flecs.h	/^static const flecs::entity_t F64 = ecs_id(ecs_f64_t);$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
F64	./src/flecs.h	/^static const primitive_kind_t F64 = EcsF64;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
FACE_DARK	./src/glyph.h	/^#define    FACE_DARK /;"	d
FACE_LIGHT	./src/glyph.h	/^#define    FACE_LIGHT /;"	d
FEMALE	./src/glyph.h	/^#define    FEMALE /;"	d
FILE_SEP	./src/glyph.h	/^#define    FILE_SEP /;"	d
FIND	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anonfac950030103	file:
FIND	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anonca721fef0103	file:
FIND	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anona03d81450103	file:
FIND	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anon0565975a0103	file:
FIND	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anon603333870103	file:
FINI_CACHE	./src/flecs.c	/^#define FINI_CACHE(/;"	d	file:
FLAG_BORDERLESS_WINDOWED_MODE	./vendor/raylib5/include/raylib.h	/^    FLAG_BORDERLESS_WINDOWED_MODE = 0x00008000, \/\/ Set to run program in borderless windowed m/;"	e	enum:__anon661bbe320203
FLAG_FULLSCREEN_MODE	./vendor/raylib5/include/raylib.h	/^    FLAG_FULLSCREEN_MODE    = 0x00000002,   \/\/ Set to run program in fullscreen$/;"	e	enum:__anon661bbe320203
FLAG_INTERLACED_HINT	./vendor/raylib5/include/raylib.h	/^    FLAG_INTERLACED_HINT    = 0x00010000    \/\/ Set to try enabling interlaced video format (fo/;"	e	enum:__anon661bbe320203
FLAG_MSAA_4X_HINT	./vendor/raylib5/include/raylib.h	/^    FLAG_MSAA_4X_HINT       = 0x00000020,   \/\/ Set to try enabling MSAA 4X$/;"	e	enum:__anon661bbe320203
FLAG_VSYNC_HINT	./vendor/raylib5/include/raylib.h	/^    FLAG_VSYNC_HINT         = 0x00000040,   \/\/ Set to try enabling V-Sync on GPU$/;"	e	enum:__anon661bbe320203
FLAG_WINDOW_ALWAYS_RUN	./vendor/raylib5/include/raylib.h	/^    FLAG_WINDOW_ALWAYS_RUN  = 0x00000100,   \/\/ Set to allow windows running while minimized$/;"	e	enum:__anon661bbe320203
FLAG_WINDOW_HIDDEN	./vendor/raylib5/include/raylib.h	/^    FLAG_WINDOW_HIDDEN      = 0x00000080,   \/\/ Set to hide window$/;"	e	enum:__anon661bbe320203
FLAG_WINDOW_HIGHDPI	./vendor/raylib5/include/raylib.h	/^    FLAG_WINDOW_HIGHDPI     = 0x00002000,   \/\/ Set to support HighDPI$/;"	e	enum:__anon661bbe320203
FLAG_WINDOW_MAXIMIZED	./vendor/raylib5/include/raylib.h	/^    FLAG_WINDOW_MAXIMIZED   = 0x00000400,   \/\/ Set to maximize window (expanded to monitor)$/;"	e	enum:__anon661bbe320203
FLAG_WINDOW_MINIMIZED	./vendor/raylib5/include/raylib.h	/^    FLAG_WINDOW_MINIMIZED   = 0x00000200,   \/\/ Set to minimize window (iconify)$/;"	e	enum:__anon661bbe320203
FLAG_WINDOW_MOUSE_PASSTHROUGH	./vendor/raylib5/include/raylib.h	/^    FLAG_WINDOW_MOUSE_PASSTHROUGH = 0x00004000, \/\/ Set to support mouse passthrough, only supp/;"	e	enum:__anon661bbe320203
FLAG_WINDOW_RESIZABLE	./vendor/raylib5/include/raylib.h	/^    FLAG_WINDOW_RESIZABLE   = 0x00000004,   \/\/ Set to allow resizable window$/;"	e	enum:__anon661bbe320203
FLAG_WINDOW_TOPMOST	./vendor/raylib5/include/raylib.h	/^    FLAG_WINDOW_TOPMOST     = 0x00001000,   \/\/ Set to window always on top$/;"	e	enum:__anon661bbe320203
FLAG_WINDOW_TRANSPARENT	./vendor/raylib5/include/raylib.h	/^    FLAG_WINDOW_TRANSPARENT = 0x00000010,   \/\/ Set to allow transparent framebuffer$/;"	e	enum:__anon661bbe320203
FLAG_WINDOW_UNDECORATED	./vendor/raylib5/include/raylib.h	/^    FLAG_WINDOW_UNDECORATED = 0x00000008,   \/\/ Set to disable window decoration (frame and but/;"	e	enum:__anon661bbe320203
FLAG_WINDOW_UNFOCUSED	./vendor/raylib5/include/raylib.h	/^    FLAG_WINDOW_UNFOCUSED   = 0x00000800,   \/\/ Set to window non focused$/;"	e	enum:__anon661bbe320203
FLECS_ADDONS_H	./src/flecs.h	/^#define FLECS_ADDONS_H$/;"	d
FLECS_ALERTS	./src/flecs.h	/^#define FLECS_ALERTS /;"	d
FLECS_ALERTS_H	./src/flecs.h	/^#define FLECS_ALERTS_H$/;"	d
FLECS_ALLOCATOR_H	./src/flecs.h	/^#define FLECS_ALLOCATOR_H$/;"	d
FLECS_API	./src/flecs.h	/^  #define FLECS_API /;"	d
FLECS_API	./src/flecs.h	/^  #define FLECS_API$/;"	d
FLECS_API_DEFINES_H	./src/flecs.h	/^#define FLECS_API_DEFINES_H$/;"	d
FLECS_API_FLAGS_H	./src/flecs.h	/^#define FLECS_API_FLAGS_H$/;"	d
FLECS_API_SUPPORT_H	./src/flecs.h	/^#define FLECS_API_SUPPORT_H$/;"	d
FLECS_API_TYPES_H	./src/flecs.h	/^#define FLECS_API_TYPES_H$/;"	d
FLECS_APP	./src/flecs.h	/^#define FLECS_APP /;"	d
FLECS_APP_H	./src/flecs.h	/^#define FLECS_APP_H$/;"	d
FLECS_BAKE_CONFIG_H	./src/flecs.h	/^#define FLECS_BAKE_CONFIG_H$/;"	d
FLECS_BITSET_H	./src/flecs.c	/^#define FLECS_BITSET_H$/;"	d	file:
FLECS_BLOCK_ALLOCATOR_H	./src/flecs.h	/^#define FLECS_BLOCK_ALLOCATOR_H$/;"	d
FLECS_CONVERSION_ERR	./src/flecs.c	/^#define FLECS_CONVERSION_ERR(/;"	d	file:
FLECS_CPP	./src/flecs.h	/^#define FLECS_CPP /;"	d
FLECS_CPP_ENUM_REFLECTION_SUPPORT	./src/flecs.h	/^#define FLECS_CPP_ENUM_REFLECTION_SUPPORT /;"	d
FLECS_CPP_H	./src/flecs.h	/^#define FLECS_CPP_H$/;"	d
FLECS_C_	./src/flecs.h	/^#define FLECS_C_$/;"	d
FLECS_DBG_API	./src/flecs.h	/^#define FLECS_DBG_API /;"	d
FLECS_DEBUG	./src/flecs.h	/^#define FLECS_DEBUG /;"	d
FLECS_DEBUG	./src/flecs.h	/^#define FLECS_DEBUG$/;"	d
FLECS_DELETE	./src/flecs.h	/^#define FLECS_DELETE(/;"	d
FLECS_DEPRECATED_H	./src/flecs.h	/^#define FLECS_DEPRECATED_H$/;"	d
FLECS_DOC	./src/flecs.h	/^#define FLECS_DOC /;"	d
FLECS_DOC_H	./src/flecs.h	/^#define FLECS_DOC_H$/;"	d
FLECS_ENTITY_INDEX_H	./src/flecs.c	/^#define FLECS_ENTITY_INDEX_H$/;"	d	file:
FLECS_ENTITY_PAGE_BITS	./src/flecs.h	/^#define FLECS_ENTITY_PAGE_BITS /;"	d
FLECS_ENTITY_PAGE_MASK	./src/flecs.c	/^#define FLECS_ENTITY_PAGE_MASK /;"	d	file:
FLECS_ENTITY_PAGE_SIZE	./src/flecs.c	/^#define FLECS_ENTITY_PAGE_SIZE /;"	d	file:
FLECS_ENUM_LAST	./src/flecs.h	/^#define FLECS_ENUM_LAST(/;"	d
FLECS_ENUM_MAX	./src/flecs.h	/^#define FLECS_ENUM_MAX(/;"	d
FLECS_ENUM_MAX_COUNT	./src/flecs.h	/^#define FLECS_ENUM_MAX_COUNT /;"	d
FLECS_EVENT_DESC_MAX	./src/flecs.h	/^#define FLECS_EVENT_DESC_MAX /;"	d
FLECS_EXPR	./src/flecs.h	/^#define FLECS_EXPR /;"	d
FLECS_EXPR	./src/flecs.h	/^#define FLECS_EXPR$/;"	d
FLECS_EXPR_H	./src/flecs.h	/^#define FLECS_EXPR_H$/;"	d
FLECS_FWD	./src/flecs.h	/^#define FLECS_FWD(/;"	d
FLECS_H	./src/flecs.h	/^#define FLECS_H$/;"	d
FLECS_HASHMAP_H	./src/flecs.h	/^#define FLECS_HASHMAP_H$/;"	d
FLECS_HI_COMPONENT_ID	./src/flecs.h	/^#define FLECS_HI_COMPONENT_ID /;"	d
FLECS_HI_ID_RECORD_ID	./src/flecs.h	/^#define FLECS_HI_ID_RECORD_ID /;"	d
FLECS_HTTP	./src/flecs.h	/^#define FLECS_HTTP /;"	d
FLECS_HTTP	./src/flecs.h	/^#define FLECS_HTTP$/;"	d
FLECS_HTTP_H	./src/flecs.h	/^#define FLECS_HTTP_H$/;"	d
FLECS_IBUILDER	./src/flecs.h	/^#define FLECS_IBUILDER /;"	d
FLECS_ID0ID_	./src/flecs.h	/^#define FLECS_ID0ID_ /;"	d
FLECS_ID_DESC_MAX	./src/flecs.h	/^#define FLECS_ID_DESC_MAX /;"	d
FLECS_ID_INDEX_H	./src/flecs.c	/^#define FLECS_ID_INDEX_H$/;"	d	file:
FLECS_ITER_H	./src/flecs.c	/^#define FLECS_ITER_H$/;"	d	file:
FLECS_JOURNAL_H	./src/flecs.h	/^#define FLECS_JOURNAL_H$/;"	d
FLECS_JOURNAL_LOG_LEVEL	./src/flecs.h	/^#define FLECS_JOURNAL_LOG_LEVEL /;"	d
FLECS_JSON	./src/flecs.h	/^#define FLECS_JSON /;"	d
FLECS_JSON	./src/flecs.h	/^#define FLECS_JSON$/;"	d
FLECS_JSON_H	./src/flecs.h	/^#define FLECS_JSON_H$/;"	d
FLECS_JSON_PRIVATE_H	./src/flecs.c	/^#define FLECS_JSON_PRIVATE_H$/;"	d	file:
FLECS_LEGACY	./src/flecs.h	/^#define FLECS_LEGACY$/;"	d
FLECS_LOG	./src/flecs.h	/^#define FLECS_LOG /;"	d
FLECS_LOG	./src/flecs.h	/^#define FLECS_LOG$/;"	d
FLECS_LOG_0	./src/flecs.h	/^#define FLECS_LOG_0 /;"	d
FLECS_LOG_0	./src/flecs.h	/^#define FLECS_LOG_0$/;"	d
FLECS_LOG_1	./src/flecs.h	/^#define FLECS_LOG_1$/;"	d
FLECS_LOG_2	./src/flecs.h	/^#define FLECS_LOG_2$/;"	d
FLECS_LOG_3	./src/flecs.h	/^#define FLECS_LOG_3 /;"	d
FLECS_LOG_H	./src/flecs.h	/^#define FLECS_LOG_H$/;"	d
FLECS_MAP_H	./src/flecs.h	/^#define FLECS_MAP_H$/;"	d
FLECS_META	./src/flecs.h	/^#define FLECS_META /;"	d
FLECS_META	./src/flecs.h	/^#define FLECS_META$/;"	d
FLECS_META_C	./src/flecs.h	/^#define FLECS_META_C /;"	d
FLECS_META_C_H	./src/flecs.h	/^#define FLECS_META_C_H$/;"	d
FLECS_META_H	./src/flecs.h	/^#define FLECS_META_H$/;"	d
FLECS_META_PRIVATE_H	./src/flecs.c	/^#define FLECS_META_PRIVATE_H$/;"	d	file:
FLECS_METRICS	./src/flecs.h	/^#define FLECS_METRICS /;"	d
FLECS_METRICS_H	./src/flecs.h	/^#define FLECS_METRICS_H$/;"	d
FLECS_MODULE	./src/flecs.h	/^#define FLECS_MODULE /;"	d
FLECS_MODULE	./src/flecs.h	/^#define FLECS_MODULE$/;"	d
FLECS_MODULE_H	./src/flecs.h	/^#define FLECS_MODULE_H$/;"	d
FLECS_MONITOR	./src/flecs.h	/^#define FLECS_MONITOR /;"	d
FLECS_MONITOR_H	./src/flecs.h	/^#define FLECS_MONITOR_H$/;"	d
FLECS_MOV	./src/flecs.h	/^#define FLECS_MOV(/;"	d
FLECS_NAME_INDEX_H	./src/flecs.c	/^#define FLECS_NAME_INDEX_H$/;"	d	file:
FLECS_NDEBUG	./src/flecs.h	/^#define FLECS_NDEBUG$/;"	d
FLECS_NEW	./src/flecs.h	/^#define FLECS_NEW(/;"	d
FLECS_NO_DEPRECATED_WARNINGS	./src/flecs.h	/^#define FLECS_NO_DEPRECATED_WARNINGS$/;"	d
FLECS_OBSERVABLE_H	./src/flecs.c	/^#define FLECS_OBSERVABLE_H$/;"	d	file:
FLECS_OS_API_H	./src/flecs.h	/^#define FLECS_OS_API_H$/;"	d
FLECS_OS_API_IMPL	./src/flecs.h	/^#define FLECS_OS_API_IMPL /;"	d
FLECS_OS_API_IMPL	./src/flecs.h	/^#define FLECS_OS_API_IMPL$/;"	d
FLECS_OS_API_IMPL_H	./src/flecs.h	/^#define FLECS_OS_API_IMPL_H$/;"	d
FLECS_PARSER	./src/flecs.h	/^#define FLECS_PARSER /;"	d
FLECS_PARSER	./src/flecs.h	/^#define FLECS_PARSER$/;"	d
FLECS_PARSER_H	./src/flecs.h	/^#define FLECS_PARSER_H$/;"	d
FLECS_PIPELINE	./src/flecs.h	/^#define FLECS_PIPELINE /;"	d
FLECS_PIPELINE	./src/flecs.h	/^#define FLECS_PIPELINE$/;"	d
FLECS_PIPELINE_H	./src/flecs.h	/^#define FLECS_PIPELINE_H$/;"	d
FLECS_PIPELINE_PRIVATE_H	./src/flecs.c	/^#define FLECS_PIPELINE_PRIVATE_H$/;"	d	file:
FLECS_PLACEMENT_NEW	./src/flecs.h	/^#define FLECS_PLACEMENT_NEW(/;"	d
FLECS_PLECS	./src/flecs.h	/^#define FLECS_PLECS /;"	d
FLECS_PLECS_H	./src/flecs.h	/^#define FLECS_PLECS_H$/;"	d
FLECS_POLY_H	./src/flecs.c	/^#define FLECS_POLY_H$/;"	d	file:
FLECS_PRIVATE_H	./src/flecs.c	/^#define FLECS_PRIVATE_H$/;"	d	file:
FLECS_PRIVATE_TYPES_H	./src/flecs.c	/^#define FLECS_PRIVATE_TYPES_H$/;"	d	file:
FLECS_QUERY_SCOPE_NESTING_MAX	./src/flecs.h	/^#define FLECS_QUERY_SCOPE_NESTING_MAX /;"	d
FLECS_REST	./src/flecs.h	/^#define FLECS_REST /;"	d
FLECS_REST_COMMAND_RETAIN_COUNT	./src/flecs.c	/^#define FLECS_REST_COMMAND_RETAIN_COUNT /;"	d	file:
FLECS_REST_H	./src/flecs.h	/^#define FLECS_REST_H$/;"	d
FLECS_RULES	./src/flecs.h	/^#define FLECS_RULES /;"	d
FLECS_RULES	./src/flecs.h	/^#define FLECS_RULES$/;"	d
FLECS_RULES_H	./src/flecs.h	/^#define FLECS_RULES_H$/;"	d
FLECS_RULES_PRIVATE_H	./src/flecs.c	/^#define FLECS_RULES_PRIVATE_H$/;"	d	file:
FLECS_SNAPSHOT	./src/flecs.h	/^#define FLECS_SNAPSHOT /;"	d
FLECS_SNAPSHOT_H	./src/flecs.h	/^#define FLECS_SNAPSHOT_H$/;"	d
FLECS_SPARSE_H	./src/flecs.h	/^#define FLECS_SPARSE_H$/;"	d
FLECS_SPARSE_PAGE_BITS	./src/flecs.h	/^#define FLECS_SPARSE_PAGE_BITS /;"	d
FLECS_SPARSE_PAGE_SIZE	./src/flecs.h	/^#define FLECS_SPARSE_PAGE_SIZE /;"	d
FLECS_STACK_ALLOCATOR_H	./src/flecs.c	/^#define FLECS_STACK_ALLOCATOR_H$/;"	d	file:
FLECS_STACK_PAGE_OFFSET	./src/flecs.c	/^#define FLECS_STACK_PAGE_OFFSET /;"	d	file:
FLECS_STAGE_H	./src/flecs.c	/^#define FLECS_STAGE_H$/;"	d	file:
FLECS_STATS	./src/flecs.h	/^#define FLECS_STATS /;"	d
FLECS_STATS	./src/flecs.h	/^#define FLECS_STATS$/;"	d
FLECS_STATS_H	./src/flecs.h	/^#define FLECS_STATS_H$/;"	d
FLECS_STRBUF_H_	./src/flecs.h	/^#define FLECS_STRBUF_H_$/;"	d
FLECS_SWITCH_LIST_H	./src/flecs.c	/^#define FLECS_SWITCH_LIST_H$/;"	d	file:
FLECS_SYSTEM	./src/flecs.h	/^#define FLECS_SYSTEM /;"	d
FLECS_SYSTEM	./src/flecs.h	/^#define FLECS_SYSTEM$/;"	d
FLECS_SYSTEM_H	./src/flecs.h	/^#define FLECS_SYSTEM_H$/;"	d
FLECS_SYSTEM_PRIVATE_H	./src/flecs.c	/^#define FLECS_SYSTEM_PRIVATE_H$/;"	d	file:
FLECS_TABLE_CACHE_H_	./src/flecs.c	/^#define FLECS_TABLE_CACHE_H_$/;"	d	file:
FLECS_TABLE_GRAPH_H	./src/flecs.c	/^#define FLECS_TABLE_GRAPH_H$/;"	d	file:
FLECS_TABLE_H	./src/flecs.c	/^#define FLECS_TABLE_H$/;"	d	file:
FLECS_TBUILDER	./src/flecs.h	/^#define FLECS_TBUILDER /;"	d
FLECS_TERM_DESC_MAX	./src/flecs.h	/^#define FLECS_TERM_DESC_MAX /;"	d
FLECS_TIMER	./src/flecs.h	/^#define FLECS_TIMER /;"	d
FLECS_TIMER	./src/flecs.h	/^#define FLECS_TIMER$/;"	d
FLECS_TIMER_H	./src/flecs.h	/^#define FLECS_TIMER_H$/;"	d
FLECS_UNITS	./src/flecs.h	/^#define FLECS_UNITS /;"	d
FLECS_UNITS	./src/flecs.h	/^#define FLECS_UNITS$/;"	d
FLECS_UNITS_H	./src/flecs.h	/^#define FLECS_UNITS_H$/;"	d
FLECS_USE_OS_ALLOC	./src/flecs.h	/^#define FLECS_USE_OS_ALLOC$/;"	d
FLECS_VARIABLE_COUNT_MAX	./src/flecs.h	/^#define FLECS_VARIABLE_COUNT_MAX /;"	d
FLECS_VEC_H	./src/flecs.h	/^#define FLECS_VEC_H$/;"	d
FLECS_VERSION	./src/flecs.h	/^#define FLECS_VERSION FLECS_VERSION_/;"	d
FLECS_VERSION_IMPL	./src/flecs.h	/^#define FLECS_VERSION_IMPL(/;"	d
FLECS_VERSION_IMPLSTR	./src/flecs.h	/^#define FLECS_VERSION_IMPLSTR(/;"	d
FLECS_VERSION_MAJOR	./src/flecs.h	/^#define FLECS_VERSION_MAJOR /;"	d
FLECS_VERSION_MINOR	./src/flecs.h	/^#define FLECS_VERSION_MINOR /;"	d
FLECS_VERSION_PATCH	./src/flecs.h	/^#define FLECS_VERSION_PATCH /;"	d
FLECS_WORLD_H	./src/flecs.c	/^#define FLECS_WORLD_H$/;"	d	file:
FMAP_BUCKETS	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define FMAP_BUCKETS(/;"	d	file:
FMAP_CLEAR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define FMAP_CLEAR(/;"	d	file:
FMAP_DTOR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define FMAP_DTOR(/;"	d	file:
FMAP_EMPLACE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define FMAP_EMPLACE(/;"	d	file:
FMAP_ERASE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define FMAP_ERASE(/;"	d	file:
FMAP_FIND	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define FMAP_FIND(/;"	d	file:
FMAP_FOR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define FMAP_FOR(/;"	d	file:
FMAP_ITEM	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define FMAP_ITEM(/;"	d	file:
FMAP_PUT	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define FMAP_PUT(/;"	d	file:
FMAP_SETUP	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define FMAP_SETUP(/;"	d	file:
FMAP_SIZE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define FMAP_SIZE(/;"	d	file:
FMT_ALWAYS_INLINE	./vendor/fmt/include/base.h	/^#  define FMT_ALWAYS_INLINE /;"	d
FMT_API	./vendor/STC/include/c11/fmt.h	/^  #define FMT_API /;"	d
FMT_API	./vendor/STC/include/c11/fmt.h	/^  #define FMT_API$/;"	d
FMT_API	./vendor/fmt/include/base.h	/^#    define FMT_API /;"	d
FMT_API	./vendor/fmt/include/base.h	/^#  define FMT_API /;"	d
FMT_API	./vendor/fmt/include/base.h	/^#  define FMT_API$/;"	d
FMT_ARGS_H_	./vendor/fmt/include/args.h	/^#define FMT_ARGS_H_$/;"	d
FMT_ASSERT	./vendor/fmt/include/base.h	/^#  define FMT_ASSERT(/;"	d
FMT_BASE_H_	./vendor/fmt/include/base.h	/^#define FMT_BASE_H_$/;"	d
FMT_BEGIN_EXPORT	./vendor/fmt/include/base.h	/^#  define FMT_BEGIN_EXPORT$/;"	d
FMT_BEGIN_NAMESPACE	./vendor/fmt/include/base.h	/^#  define FMT_BEGIN_NAMESPACE /;"	d
FMT_BUILTIN_CLZ	./vendor/fmt/include/format.h	/^#    define FMT_BUILTIN_CLZ(/;"	d
FMT_BUILTIN_CLZ	./vendor/fmt/include/format.h	/^#  define FMT_BUILTIN_CLZ(/;"	d
FMT_BUILTIN_CLZLL	./vendor/fmt/include/format.h	/^#    define FMT_BUILTIN_CLZLL(/;"	d
FMT_BUILTIN_CLZLL	./vendor/fmt/include/format.h	/^#  define FMT_BUILTIN_CLZLL(/;"	d
FMT_BUILTIN_CTZ	./vendor/fmt/include/format.h	/^#    define FMT_BUILTIN_CTZ(/;"	d
FMT_BUILTIN_CTZ	./vendor/fmt/include/format.h	/^#  define FMT_BUILTIN_CTZ(/;"	d
FMT_BUILTIN_CTZLL	./vendor/fmt/include/format.h	/^#    define FMT_BUILTIN_CTZLL(/;"	d
FMT_BUILTIN_CTZLL	./vendor/fmt/include/format.h	/^#  define FMT_BUILTIN_CTZLL(/;"	d
FMT_CATCH	./vendor/fmt/include/base.h	/^#  define FMT_CATCH(/;"	d
FMT_CHRONO_H_	./vendor/fmt/include/chrono.h	/^#define FMT_CHRONO_H_$/;"	d
FMT_CLANG_VERSION	./vendor/fmt/include/base.h	/^#  define FMT_CLANG_VERSION /;"	d
FMT_COLOR_H_	./vendor/fmt/include/color.h	/^#define FMT_COLOR_H_$/;"	d
FMT_COMPILE	./vendor/fmt/include/compile.h	/^#  define FMT_COMPILE(/;"	d
FMT_COMPILE_H_	./vendor/fmt/include/compile.h	/^#define FMT_COMPILE_H_$/;"	d
FMT_CONSTEVAL	./vendor/fmt/include/base.h	/^#  define FMT_CONSTEVAL /;"	d
FMT_CONSTEVAL	./vendor/fmt/include/base.h	/^#  define FMT_CONSTEVAL$/;"	d
FMT_CONSTEXPR	./vendor/fmt/include/base.h	/^#  define FMT_CONSTEXPR /;"	d
FMT_CONSTEXPR	./vendor/fmt/include/base.h	/^#  define FMT_CONSTEXPR$/;"	d
FMT_CONSTEXPR20	./vendor/fmt/include/base.h	/^#  define FMT_CONSTEXPR20 /;"	d
FMT_CONSTEXPR20	./vendor/fmt/include/base.h	/^#  define FMT_CONSTEXPR20$/;"	d
FMT_CPLUSPLUS	./vendor/fmt/include/base.h	/^#  define FMT_CPLUSPLUS /;"	d
FMT_CPP_LIB_FILESYSTEM	./vendor/fmt/include/std.h	/^#    define FMT_CPP_LIB_FILESYSTEM /;"	d
FMT_CPP_LIB_VARIANT	./vendor/fmt/include/std.h	/^#    define FMT_CPP_LIB_VARIANT /;"	d
FMT_DECLTYPE_RETURN	./vendor/fmt/include/ranges.h	/^#  define FMT_DECLTYPE_RETURN(/;"	d
FMT_DECLTYPE_THIS	./vendor/fmt/include/base.h	/^#  define FMT_DECLTYPE_THIS /;"	d
FMT_DECLTYPE_THIS	./vendor/fmt/include/base.h	/^#  define FMT_DECLTYPE_THIS$/;"	d
FMT_DEF	./vendor/STC/include/c11/fmt.h	/^  #define FMT_DEF /;"	d
FMT_DEF	./vendor/STC/include/c11/fmt.h	/^  #define FMT_DEF$/;"	d
FMT_DEPRECATED	./vendor/fmt/include/base.h	/^#  define FMT_DEPRECATED /;"	d
FMT_ENABLE_IF	./vendor/fmt/include/base.h	/^#  define FMT_ENABLE_IF(/;"	d
FMT_END_EXPORT	./vendor/fmt/include/base.h	/^#  define FMT_END_EXPORT$/;"	d
FMT_END_NAMESPACE	./vendor/fmt/include/base.h	/^#  define FMT_END_NAMESPACE /;"	d
FMT_ENUM_UNDERLYING_TYPE	./vendor/fmt/include/base.h	/^#  define FMT_ENUM_UNDERLYING_TYPE(/;"	d
FMT_ENUM_UNDERLYING_TYPE	./vendor/fmt/include/base.h	/^enum type FMT_ENUM_UNDERLYING_TYPE(unsigned char){none, left, right, center,$/;"	f	namespace:align	typeref:enum:type
FMT_ENUM_UNDERLYING_TYPE	./vendor/fmt/include/base.h	/^enum type FMT_ENUM_UNDERLYING_TYPE(unsigned char){none, minus, plus, space};$/;"	f	namespace:sign	typeref:enum:type
FMT_EXCEPTIONS	./vendor/fmt/include/base.h	/^#  define FMT_EXCEPTIONS /;"	d
FMT_EXPORT	./vendor/fmt/include/base.h	/^#  define FMT_EXPORT$/;"	d
FMT_FALLTHROUGH	./vendor/fmt/include/base.h	/^#  define FMT_FALLTHROUGH /;"	d
FMT_FALLTHROUGH	./vendor/fmt/include/base.h	/^#  define FMT_FALLTHROUGH$/;"	d
FMT_FORMAT_AS	./vendor/fmt/include/format.h	/^#define FMT_FORMAT_AS(/;"	d
FMT_FORMAT_H_	./vendor/fmt/include/format.h	/^#define FMT_FORMAT_H_$/;"	d
FMT_FORMAT_INL_H_	./vendor/fmt/include/format-inl.h	/^#define FMT_FORMAT_INL_H_$/;"	d
FMT_FUNC	./vendor/fmt/include/format.h	/^#  define FMT_FUNC /;"	d
FMT_FWD	./vendor/fmt/include/base.h	/^#define FMT_FWD(/;"	d
FMT_GCC_PRAGMA	./vendor/fmt/include/base.h	/^#    define FMT_GCC_PRAGMA(/;"	d
FMT_GCC_VERSION	./vendor/fmt/include/base.h	/^#  define FMT_GCC_VERSION /;"	d
FMT_GLIBCXX_RELEASE	./vendor/fmt/include/base.h	/^#  define FMT_GLIBCXX_RELEASE /;"	d
FMT_HAS_ABI_CXA_DEMANGLE	./vendor/fmt/include/std.h	/^#    define FMT_HAS_ABI_CXA_DEMANGLE$/;"	d
FMT_HAS_BUILTIN	./vendor/fmt/include/format.h	/^#  define FMT_HAS_BUILTIN(/;"	d
FMT_HAS_CPP14_ATTRIBUTE	./vendor/fmt/include/base.h	/^#define FMT_HAS_CPP14_ATTRIBUTE(/;"	d
FMT_HAS_CPP17_ATTRIBUTE	./vendor/fmt/include/base.h	/^#define FMT_HAS_CPP17_ATTRIBUTE(/;"	d
FMT_HAS_CPP_ATTRIBUTE	./vendor/fmt/include/base.h	/^#  define FMT_HAS_CPP_ATTRIBUTE(/;"	d
FMT_HAS_FEATURE	./vendor/fmt/include/base.h	/^#  define FMT_HAS_FEATURE(/;"	d
FMT_HAS_INCLUDE	./vendor/fmt/include/base.h	/^#  define FMT_HAS_INCLUDE(/;"	d
FMT_HAS_SYSTEM	./vendor/fmt/include/os.h	/^#  define FMT_HAS_SYSTEM$/;"	d
FMT_H_INCLUDED	./vendor/STC/include/c11/fmt.h	/^#define FMT_H_INCLUDED$/;"	d
FMT_ICC_VERSION	./vendor/fmt/include/base.h	/^#  define FMT_ICC_VERSION /;"	d
FMT_INC	./vendor/fmt/include/format.h	/^#  define FMT_INC(/;"	d
FMT_INLINE	./vendor/fmt/include/base.h	/^#  define FMT_INLINE /;"	d
FMT_INLINE_VARIABLE	./vendor/fmt/include/format.h	/^#  define FMT_INLINE_VARIABLE /;"	d
FMT_INLINE_VARIABLE	./vendor/fmt/include/format.h	/^#  define FMT_INLINE_VARIABLE$/;"	d
FMT_LIBCPP_VERSION	./vendor/fmt/include/base.h	/^#  define FMT_LIBCPP_VERSION /;"	d
FMT_MAP_API	./vendor/fmt/include/base.h	/^#define FMT_MAP_API /;"	d
FMT_MAX	./vendor/STC/include/c11/fmt.h	/^#define FMT_MAX /;"	d
FMT_MAYBE_UNUSED	./vendor/fmt/include/format.h	/^#    define FMT_MAYBE_UNUSED /;"	d
FMT_MODULE	./vendor/fmt/include/base.h	/^#  define FMT_MODULE$/;"	d
FMT_MSC_VERSION	./vendor/fmt/include/base.h	/^#  define FMT_MSC_VERSION /;"	d
FMT_MSC_WARNING	./vendor/fmt/include/base.h	/^#  define FMT_MSC_WARNING(/;"	d
FMT_NODISCARD	./vendor/fmt/include/base.h	/^#    define FMT_NODISCARD /;"	d
FMT_NODISCARD	./vendor/fmt/include/base.h	/^#    define FMT_NODISCARD$/;"	d
FMT_NOINLINE	./vendor/fmt/include/format.h	/^#  define FMT_NOINLINE /;"	d
FMT_NOINLINE	./vendor/fmt/include/format.h	/^#  define FMT_NOINLINE$/;"	d
FMT_NOMACRO	./vendor/fmt/include/chrono.h	/^#define FMT_NOMACRO$/;"	d
FMT_NOMACRO	./vendor/fmt/include/chrono.h	/^inline auto localtime_r FMT_NOMACRO(...) -> null<> { return null<>(); }$/;"	f	namespace:detail	typeref:typename:auto localtime_r
FMT_NORETURN	./vendor/fmt/include/base.h	/^#  define FMT_NORETURN /;"	d
FMT_NORETURN	./vendor/fmt/include/base.h	/^#  define FMT_NORETURN$/;"	d
FMT_NO_UNIQUE_ADDRESS	./vendor/fmt/include/format.h	/^#      define FMT_NO_UNIQUE_ADDRESS /;"	d
FMT_NO_UNIQUE_ADDRESS	./vendor/fmt/include/format.h	/^#  define FMT_NO_UNIQUE_ADDRESS$/;"	d
FMT_OSTREAM_H_	./vendor/fmt/include/ostream.h	/^#define FMT_OSTREAM_H_$/;"	d
FMT_OS_H_	./vendor/fmt/include/os.h	/^#define FMT_OS_H_$/;"	d
FMT_POSIX	./vendor/fmt/include/os.h	/^#    define FMT_POSIX(/;"	d
FMT_POSIX_CALL	./vendor/fmt/include/os.h	/^#    define FMT_POSIX_CALL(/;"	d
FMT_POSIX_CALL	./vendor/fmt/include/os.h	/^#  define FMT_POSIX_CALL(/;"	d
FMT_POWERS_OF_10	./vendor/fmt/include/format.h	/^#define FMT_POWERS_OF_10(/;"	d
FMT_PRINTF_H_	./vendor/fmt/include/printf.h	/^#define FMT_PRINTF_H_$/;"	d
FMT_RANGES_H_	./vendor/fmt/include/ranges.h	/^#define FMT_RANGES_H_$/;"	d
FMT_REDUCE_INT_INSTANTIATIONS	./vendor/fmt/include/format.h	/^#  define FMT_REDUCE_INT_INSTANTIATIONS /;"	d
FMT_REMOVE_TRANSITIVE_INCLUDES	./vendor/fmt/include/format.h	/^#  define FMT_REMOVE_TRANSITIVE_INCLUDES$/;"	d
FMT_RETRY	./vendor/fmt/include/os.h	/^#define FMT_RETRY(result, expression) FMT_RETRY_/;"	d
FMT_RETRY_VAL	./vendor/fmt/include/os.h	/^#  define FMT_RETRY_VAL(/;"	d
FMT_SAFE_DURATION_CAST	./vendor/fmt/include/chrono.h	/^#  define FMT_SAFE_DURATION_CAST /;"	d
FMT_SO_VISIBILITY	./vendor/fmt/include/format.h	/^#  define FMT_SO_VISIBILITY(/;"	d
FMT_STD_H_	./vendor/fmt/include/std.h	/^#define FMT_STD_H_$/;"	d
FMT_STRING	./vendor/fmt/include/format.h	/^#define FMT_STRING(s) FMT_STRING_/;"	d
FMT_STRING_IMPL	./vendor/fmt/include/format.h	/^#define FMT_STRING_IMPL(/;"	d
FMT_SYSTEM	./vendor/fmt/include/os.h	/^#  define FMT_SYSTEM(/;"	d
FMT_THROW	./vendor/fmt/include/format.h	/^#      define FMT_THROW(/;"	d
FMT_TRY	./vendor/fmt/include/base.h	/^#  define FMT_TRY /;"	d
FMT_TUPLE_JOIN_SPECIFIERS	./vendor/fmt/include/ranges.h	/^#  define FMT_TUPLE_JOIN_SPECIFIERS /;"	d
FMT_TYPE_CONSTANT	./vendor/fmt/include/base.h	/^#define FMT_TYPE_CONSTANT(/;"	d
FMT_UNCHECKED_ITERATOR	./vendor/fmt/include/base.h	/^#  define FMT_UNCHECKED_ITERATOR(/;"	d
FMT_UNICODE	./vendor/fmt/include/base.h	/^#  define FMT_UNICODE /;"	d
FMT_UNUSED	./vendor/STC/include/c11/fmt.h	/^  #define FMT_UNUSED /;"	d
FMT_UNUSED	./vendor/STC/include/c11/fmt.h	/^  #define FMT_UNUSED$/;"	d
FMT_USE_CONCEPTS	./vendor/fmt/include/base.h	/^#  define FMT_USE_CONCEPTS /;"	d
FMT_USE_CONSTEVAL	./vendor/fmt/include/base.h	/^#  define FMT_USE_CONSTEVAL /;"	d
FMT_USE_CONSTEXPR	./vendor/fmt/include/base.h	/^#  define FMT_USE_CONSTEXPR /;"	d
FMT_USE_DOUBLE	./vendor/fmt/include/format.h	/^#  define FMT_USE_DOUBLE /;"	d
FMT_USE_FALLBACK_FILE	./vendor/fmt/include/format-inl.h	/^#  define FMT_USE_FALLBACK_FILE /;"	d
FMT_USE_FCNTL	./vendor/fmt/include/os.h	/^#    define FMT_USE_FCNTL /;"	d
FMT_USE_FLOAT	./vendor/fmt/include/format.h	/^#  define FMT_USE_FLOAT /;"	d
FMT_USE_FLOAT128	./vendor/fmt/include/format.h	/^#  define FMT_USE_FLOAT128 /;"	d
FMT_USE_FULL_CACHE_DRAGONBOX	./vendor/fmt/include/format.h	/^#  define FMT_USE_FULL_CACHE_DRAGONBOX /;"	d
FMT_USE_INT128	./vendor/fmt/include/base.h	/^#  define FMT_USE_INT128 /;"	d
FMT_USE_LOCAL_TIME	./vendor/fmt/include/chrono.h	/^#    define FMT_USE_LOCAL_TIME /;"	d
FMT_USE_LONG_DOUBLE	./vendor/fmt/include/format.h	/^#  define FMT_USE_LONG_DOUBLE /;"	d
FMT_USE_NONTYPE_TEMPLATE_ARGS	./vendor/fmt/include/base.h	/^#  define FMT_USE_NONTYPE_TEMPLATE_ARGS /;"	d
FMT_USE_RTTI	./vendor/fmt/include/base.h	/^#    define FMT_USE_RTTI /;"	d
FMT_USE_STRING_VIEW	./vendor/fmt/include/format.h	/^#    define FMT_USE_STRING_VIEW$/;"	d
FMT_USE_TZSET	./vendor/fmt/include/chrono.h	/^#    define FMT_USE_TZSET /;"	d
FMT_USE_USER_DEFINED_LITERALS	./vendor/fmt/include/format.h	/^#    define FMT_USE_USER_DEFINED_LITERALS /;"	d
FMT_USE_UTC_TIME	./vendor/fmt/include/chrono.h	/^#    define FMT_USE_UTC_TIME /;"	d
FMT_VERSION	./vendor/fmt/include/base.h	/^#define FMT_VERSION /;"	d
FMT_VISIBILITY	./vendor/fmt/include/base.h	/^#  define FMT_VISIBILITY(/;"	d
FMT_XCHAR_H_	./vendor/fmt/include/xchar.h	/^#define FMT_XCHAR_H_$/;"	d
FONT_BITMAP	./vendor/raylib5/include/raylib.h	/^    FONT_BITMAP,                    \/\/ Bitmap font generation, no anti-aliasing$/;"	e	enum:__anon661bbe321103
FONT_DEFAULT	./vendor/raylib5/include/raylib.h	/^    FONT_DEFAULT = 0,               \/\/ Default font generation, anti-aliased$/;"	e	enum:__anon661bbe321103
FONT_SDF	./vendor/raylib5/include/raylib.h	/^    FONT_SDF                        \/\/ SDF font generation, requires external shader$/;"	e	enum:__anon661bbe321103
FREE_ARRAY	./src/memory.h	/^#define FREE_ARRAY(/;"	d
FSLASH	./src/glyph.h	/^#define    FSLASH /;"	d
FULL_BLOCK	./src/glyph.h	/^#define    FULL_BLOCK /;"	d
F_SLASH	./src/glyph.h	/^#define    F_SLASH /;"	d
Factor	./vendor/fmt/include/chrono.h	/^  struct Factor$/;"	s	function:safe_duration_cast::safe_duration_cast
Fahrenheit	./src/flecs.h	/^struct Fahrenheit { };$/;"	s	struct:flecs::units::temperature
Femto	./src/flecs.h	/^struct Femto { };$/;"	s	struct:flecs::units
File	./src/flecs.h	/^struct File { };$/;"	s	struct:flecs::units::uri
FilePathList	./vendor/raylib5/include/raylib.h	/^typedef struct FilePathList {$/;"	s
FilePathList	./vendor/raylib5/include/raylib.h	/^} FilePathList;$/;"	t	typeref:struct:FilePathList
Filter	./src/flecs.h	/^static const uint32_t Filter = EcsFilter;$/;"	v	namespace:flecs	typeref:typename:const uint32_t
Final	./src/flecs.h	/^static const flecs::entity_t Final = EcsFinal;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Flatten	./src/flecs.h	/^static const flecs::entity_t Flatten = EcsFlatten;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
FlattenTarget	./src/flecs.h	/^using FlattenTarget = EcsFlattenTarget;$/;"	t	namespace:flecs	typeref:typename:EcsFlattenTarget
Flecs	./src/flecs.h	/^static const flecs::entity_t Flecs = EcsFlecs;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
FlecsAlertsImport	./src/flecs.c	/^void FlecsAlertsImport(ecs_world_t *world) {$/;"	f	typeref:typename:void
FlecsCore	./src/flecs.h	/^static const flecs::entity_t FlecsCore = EcsFlecsCore;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
FlecsDocImport	./src/flecs.c	/^void FlecsDocImport($/;"	f	typeref:typename:void
FlecsMetaImport	./src/flecs.c	/^void FlecsMetaImport($/;"	f	typeref:typename:void
FlecsMetricsImport	./src/flecs.c	/^void FlecsMetricsImport(ecs_world_t *world) {$/;"	f	typeref:typename:void
FlecsMonitorImport	./src/flecs.c	/^void FlecsMonitorImport($/;"	f	typeref:typename:void
FlecsPipelineFini	./src/flecs.c	/^void FlecsPipelineFini($/;"	f	typeref:typename:void	file:
FlecsPipelineImport	./src/flecs.c	/^void FlecsPipelineImport($/;"	f	typeref:typename:void
FlecsRestImport	./src/flecs.c	/^void FlecsRestImport($/;"	f	typeref:typename:void
FlecsRuleOrMarker	./src/flecs.c	/^#define FlecsRuleOrMarker /;"	d	file:
FlecsScriptImport	./src/flecs.c	/^void FlecsScriptImport($/;"	f	typeref:typename:void
FlecsSystemImport	./src/flecs.c	/^void FlecsSystemImport($/;"	f	typeref:typename:void
FlecsTimerImport	./src/flecs.c	/^void FlecsTimerImport($/;"	f	typeref:typename:void
FlecsUnitsImport	./src/flecs.c	/^void FlecsUnitsImport($/;"	f	typeref:typename:void
FloatEquals	./vendor/raylib5/include/raymath.h	/^RMAPI int FloatEquals(float x, float y)$/;"	f	typeref:typename:RMAPI int
Font	./vendor/raylib5/include/raygui.h	/^    typedef struct Font {$/;"	s
Font	./vendor/raylib5/include/raygui.h	/^    } Font;$/;"	t	typeref:struct:Font
Font	./vendor/raylib5/include/raylib.h	/^typedef struct Font {$/;"	s
Font	./vendor/raylib5/include/raylib.h	/^} Font;$/;"	t	typeref:struct:Font
FontType	./vendor/raylib5/include/raylib.h	/^} FontType;$/;"	t	typeref:enum:__anon661bbe321103
Force	./src/flecs.h	/^struct Force { };$/;"	s	struct:flecs::units
Forward declarations	./vendor/STC/README.md	/^## Forward declarations$/;"	s	chapter:STC - Smart Template Containers
Frequency	./src/flecs.h	/^struct Frequency { };$/;"	s	struct:flecs::units
From	./vendor/fmt/include/chrono.h	/^  using From = std::chrono::duration<FromRep, FromPeriod>;$/;"	t	function:safe_duration_cast::safe_duration_cast	typeref:typename:std::chrono::duration<FromRep,FromPeriod>
GAMEPAD_AXIS_LEFT_TRIGGER	./vendor/raylib5/include/raylib.h	/^    GAMEPAD_AXIS_LEFT_TRIGGER  = 4,     \/\/ Gamepad back trigger left, pressure level: [1..-1]$/;"	e	enum:__anon661bbe320803
GAMEPAD_AXIS_LEFT_X	./vendor/raylib5/include/raylib.h	/^    GAMEPAD_AXIS_LEFT_X        = 0,     \/\/ Gamepad left stick X axis$/;"	e	enum:__anon661bbe320803
GAMEPAD_AXIS_LEFT_Y	./vendor/raylib5/include/raylib.h	/^    GAMEPAD_AXIS_LEFT_Y        = 1,     \/\/ Gamepad left stick Y axis$/;"	e	enum:__anon661bbe320803
GAMEPAD_AXIS_RIGHT_TRIGGER	./vendor/raylib5/include/raylib.h	/^    GAMEPAD_AXIS_RIGHT_TRIGGER = 5      \/\/ Gamepad back trigger right, pressure level: [1..-1]$/;"	e	enum:__anon661bbe320803
GAMEPAD_AXIS_RIGHT_X	./vendor/raylib5/include/raylib.h	/^    GAMEPAD_AXIS_RIGHT_X       = 2,     \/\/ Gamepad right stick X axis$/;"	e	enum:__anon661bbe320803
GAMEPAD_AXIS_RIGHT_Y	./vendor/raylib5/include/raylib.h	/^    GAMEPAD_AXIS_RIGHT_Y       = 3,     \/\/ Gamepad right stick Y axis$/;"	e	enum:__anon661bbe320803
GAMEPAD_BUTTON_LEFT_FACE_DOWN	./vendor/raylib5/include/raylib.h	/^    GAMEPAD_BUTTON_LEFT_FACE_DOWN,      \/\/ Gamepad left DPAD down button$/;"	e	enum:__anon661bbe320703
GAMEPAD_BUTTON_LEFT_FACE_LEFT	./vendor/raylib5/include/raylib.h	/^    GAMEPAD_BUTTON_LEFT_FACE_LEFT,      \/\/ Gamepad left DPAD left button$/;"	e	enum:__anon661bbe320703
GAMEPAD_BUTTON_LEFT_FACE_RIGHT	./vendor/raylib5/include/raylib.h	/^    GAMEPAD_BUTTON_LEFT_FACE_RIGHT,     \/\/ Gamepad left DPAD right button$/;"	e	enum:__anon661bbe320703
GAMEPAD_BUTTON_LEFT_FACE_UP	./vendor/raylib5/include/raylib.h	/^    GAMEPAD_BUTTON_LEFT_FACE_UP,        \/\/ Gamepad left DPAD up button$/;"	e	enum:__anon661bbe320703
GAMEPAD_BUTTON_LEFT_THUMB	./vendor/raylib5/include/raylib.h	/^    GAMEPAD_BUTTON_LEFT_THUMB,          \/\/ Gamepad joystick pressed button left$/;"	e	enum:__anon661bbe320703
GAMEPAD_BUTTON_LEFT_TRIGGER_1	./vendor/raylib5/include/raylib.h	/^    GAMEPAD_BUTTON_LEFT_TRIGGER_1,      \/\/ Gamepad top\/back trigger left (first), it could be/;"	e	enum:__anon661bbe320703
GAMEPAD_BUTTON_LEFT_TRIGGER_2	./vendor/raylib5/include/raylib.h	/^    GAMEPAD_BUTTON_LEFT_TRIGGER_2,      \/\/ Gamepad top\/back trigger left (second), it could b/;"	e	enum:__anon661bbe320703
GAMEPAD_BUTTON_MIDDLE	./vendor/raylib5/include/raylib.h	/^    GAMEPAD_BUTTON_MIDDLE,              \/\/ Gamepad center buttons, middle one (i.e. PS3: PS, X/;"	e	enum:__anon661bbe320703
GAMEPAD_BUTTON_MIDDLE_LEFT	./vendor/raylib5/include/raylib.h	/^    GAMEPAD_BUTTON_MIDDLE_LEFT,         \/\/ Gamepad center buttons, left one (i.e. PS3: Select)$/;"	e	enum:__anon661bbe320703
GAMEPAD_BUTTON_MIDDLE_RIGHT	./vendor/raylib5/include/raylib.h	/^    GAMEPAD_BUTTON_MIDDLE_RIGHT,        \/\/ Gamepad center buttons, right one (i.e. PS3: Start)$/;"	e	enum:__anon661bbe320703
GAMEPAD_BUTTON_RIGHT_FACE_DOWN	./vendor/raylib5/include/raylib.h	/^    GAMEPAD_BUTTON_RIGHT_FACE_DOWN,     \/\/ Gamepad right button down (i.e. PS3: Cross, Xbox: A/;"	e	enum:__anon661bbe320703
GAMEPAD_BUTTON_RIGHT_FACE_LEFT	./vendor/raylib5/include/raylib.h	/^    GAMEPAD_BUTTON_RIGHT_FACE_LEFT,     \/\/ Gamepad right button left (i.e. PS3: Square, Xbox: /;"	e	enum:__anon661bbe320703
GAMEPAD_BUTTON_RIGHT_FACE_RIGHT	./vendor/raylib5/include/raylib.h	/^    GAMEPAD_BUTTON_RIGHT_FACE_RIGHT,    \/\/ Gamepad right button right (i.e. PS3: Circle, Xbox:/;"	e	enum:__anon661bbe320703
GAMEPAD_BUTTON_RIGHT_FACE_UP	./vendor/raylib5/include/raylib.h	/^    GAMEPAD_BUTTON_RIGHT_FACE_UP,       \/\/ Gamepad right button up (i.e. PS3: Triangle, Xbox: /;"	e	enum:__anon661bbe320703
GAMEPAD_BUTTON_RIGHT_THUMB	./vendor/raylib5/include/raylib.h	/^    GAMEPAD_BUTTON_RIGHT_THUMB          \/\/ Gamepad joystick pressed button right$/;"	e	enum:__anon661bbe320703
GAMEPAD_BUTTON_RIGHT_TRIGGER_1	./vendor/raylib5/include/raylib.h	/^    GAMEPAD_BUTTON_RIGHT_TRIGGER_1,     \/\/ Gamepad top\/back trigger right (first), it could b/;"	e	enum:__anon661bbe320703
GAMEPAD_BUTTON_RIGHT_TRIGGER_2	./vendor/raylib5/include/raylib.h	/^    GAMEPAD_BUTTON_RIGHT_TRIGGER_2,     \/\/ Gamepad top\/back trigger right (second), it could /;"	e	enum:__anon661bbe320703
GAMEPAD_BUTTON_UNKNOWN	./vendor/raylib5/include/raylib.h	/^    GAMEPAD_BUTTON_UNKNOWN = 0,         \/\/ Unknown button, just for error checking$/;"	e	enum:__anon661bbe320703
GAMMA	./src/glyph.h	/^#define    GAMMA /;"	d
GESTURE_DOUBLETAP	./vendor/raylib5/include/raylib.h	/^    GESTURE_DOUBLETAP   = 2,        \/\/ Double tap gesture$/;"	e	enum:__anon661bbe321303
GESTURE_DRAG	./vendor/raylib5/include/raylib.h	/^    GESTURE_DRAG        = 8,        \/\/ Drag gesture$/;"	e	enum:__anon661bbe321303
GESTURE_HOLD	./vendor/raylib5/include/raylib.h	/^    GESTURE_HOLD        = 4,        \/\/ Hold gesture$/;"	e	enum:__anon661bbe321303
GESTURE_NONE	./vendor/raylib5/include/raylib.h	/^    GESTURE_NONE        = 0,        \/\/ No gesture$/;"	e	enum:__anon661bbe321303
GESTURE_PINCH_IN	./vendor/raylib5/include/raylib.h	/^    GESTURE_PINCH_IN    = 256,      \/\/ Pinch in gesture$/;"	e	enum:__anon661bbe321303
GESTURE_PINCH_OUT	./vendor/raylib5/include/raylib.h	/^    GESTURE_PINCH_OUT   = 512       \/\/ Pinch out gesture$/;"	e	enum:__anon661bbe321303
GESTURE_SWIPE_DOWN	./vendor/raylib5/include/raylib.h	/^    GESTURE_SWIPE_DOWN  = 128,      \/\/ Swipe down gesture$/;"	e	enum:__anon661bbe321303
GESTURE_SWIPE_LEFT	./vendor/raylib5/include/raylib.h	/^    GESTURE_SWIPE_LEFT  = 32,       \/\/ Swipe left gesture$/;"	e	enum:__anon661bbe321303
GESTURE_SWIPE_RIGHT	./vendor/raylib5/include/raylib.h	/^    GESTURE_SWIPE_RIGHT = 16,       \/\/ Swipe right gesture$/;"	e	enum:__anon661bbe321303
GESTURE_SWIPE_UP	./vendor/raylib5/include/raylib.h	/^    GESTURE_SWIPE_UP    = 64,       \/\/ Swipe up gesture$/;"	e	enum:__anon661bbe321303
GESTURE_TAP	./vendor/raylib5/include/raylib.h	/^    GESTURE_TAP         = 1,        \/\/ Tap gesture$/;"	e	enum:__anon661bbe321303
GLYPH_H	./src/glyph.h	/^#define GLYPH_H$/;"	d
GOLD	./vendor/raylib5/include/raylib.h	/^#define GOLD /;"	d
GRAVE	./src/glyph.h	/^#define    GRAVE /;"	d
GRAY	./vendor/raylib5/include/raylib.h	/^#define GRAY /;"	d
GREATERTHAN	./src/glyph.h	/^#define    GREATERTHAN /;"	d
GREEK_PI	./src/glyph.h	/^#define    GREEK_PI /;"	d
GREEN	./vendor/raylib5/include/raylib.h	/^#define GREEN /;"	d
GRID_H	./src/grid.h	/^#define GRID_H$/;"	d
GROUP_PADDING	./vendor/raylib5/include/raygui.h	/^    GROUP_PADDING = 16,         \/\/ ToggleGroup separation between toggles$/;"	e	enum:__anon65c7f6000903
GROW_ARRAY	./src/memory.h	/^#define GROW_ARRAY(/;"	d
GROW_CAPACITY	./src/memory.h	/^#define GROW_CAPACITY(/;"	d
GamepadAxis	./vendor/raylib5/include/raylib.h	/^} GamepadAxis;$/;"	t	typeref:enum:__anon661bbe320803
GamepadButton	./vendor/raylib5/include/raylib.h	/^} GamepadButton;$/;"	t	typeref:enum:__anon661bbe320703
Gauge	./src/flecs.h	/^    struct Gauge { };$/;"	s	struct:flecs::metrics
GenValue	./vendor/STC/misc/examples/coroutines/cointerleave.c	/^struct GenValue {$/;"	s	file:
Generator	./vendor/STC/misc/examples/coroutines/cointerleave.c	/^struct Generator {$/;"	s	file:
Generic algorithms	./vendor/STC/docs/algorithm_api.md	/^## Generic algorithms$/;"	s	chapter:STC Algorithms
Gesture	./vendor/raylib5/include/raylib.h	/^} Gesture;$/;"	t	typeref:enum:__anon661bbe321303
GetCodepointNext	./vendor/raylib5/include/raygui.h	/^static int GetCodepointNext(const char *text, int *codepointSize)$/;"	f	typeref:typename:int
GetColor	./vendor/raylib5/include/raygui.h	/^static Color GetColor(int hexValue)$/;"	f	typeref:typename:Color
GetMouseRay	./vendor/raylib5/include/raylib.h	/^#define GetMouseRay /;"	d
GetNextSpaceWidth	./vendor/raylib5/include/raygui.h	/^static float GetNextSpaceWidth(const char *text, int *nextSpaceIndex)$/;"	f	typeref:typename:float
GetTextBounds	./vendor/raylib5/include/raygui.h	/^static Rectangle GetTextBounds(int control, Rectangle bounds)$/;"	f	typeref:typename:Rectangle
GetTextIcon	./vendor/raylib5/include/raygui.h	/^static const char *GetTextIcon(const char *text, int *iconId)$/;"	f	typeref:typename:const char *
GetTextLines	./vendor/raylib5/include/raygui.h	/^const char **GetTextLines(const char *text, int *count)$/;"	f	typeref:typename:const char **
GetTextWidth	./vendor/raylib5/include/raygui.h	/^static int GetTextWidth(const char *text)$/;"	f	typeref:typename:int
Getting the first match and making text replacements	./vendor/STC/docs/cregex_api.md	/^### Getting the first match and making text replacements$/;"	S	section:STC [cregex](../include/stc/cregex.h): Regular Expressions""Usage
Gibi	./src/flecs.h	/^struct Gibi { };$/;"	s	struct:flecs::units
GibiBytes	./src/flecs.h	/^struct GibiBytes { };$/;"	s	struct:flecs::units::data
Giga	./src/flecs.h	/^struct Giga { };$/;"	s	struct:flecs::units
GigaBits	./src/flecs.h	/^struct GigaBits { };$/;"	s	struct:flecs::units::data
GigaBitsPerSecond	./src/flecs.h	/^struct GigaBitsPerSecond { };$/;"	s	struct:flecs::units::datarate
GigaBytes	./src/flecs.h	/^struct GigaBytes { };$/;"	s	struct:flecs::units::data
GigaBytesPerSecond	./src/flecs.h	/^struct GigaBytesPerSecond { };$/;"	s	struct:flecs::units::datarate
GigaHertz	./src/flecs.h	/^struct GigaHertz { };$/;"	s	struct:flecs::units::frequency
Glyph	./src/glyph.h	/^typedef struct Glyph {$/;"	s
Glyph	./src/glyph.h	/^} Glyph;$/;"	t	typeref:struct:Glyph
GlyphInfo	./vendor/raylib5/include/raygui.h	/^    typedef struct GlyphInfo {$/;"	s
GlyphInfo	./vendor/raylib5/include/raygui.h	/^    } GlyphInfo;$/;"	t	typeref:struct:GlyphInfo
GlyphInfo	./vendor/raylib5/include/raylib.h	/^typedef struct GlyphInfo {$/;"	s
GlyphInfo	./vendor/raylib5/include/raylib.h	/^} GlyphInfo;$/;"	t	typeref:struct:GlyphInfo
Grams	./src/flecs.h	/^struct Grams { };$/;"	s	struct:flecs::units::mass
Greek_range16	./vendor/STC/include/stc/priv/utf8_prv.c	/^static const URange16 Greek_range16[] = {$/;"	v	typeref:typename:const URange16[]	file:
Grid	./src/grid.h	/^typedef struct Grid {$/;"	s
Grid	./src/grid.h	/^} Grid;$/;"	t	typeref:struct:Grid
GridComponent	./src/grid.h	/^typedef struct GridComponent {$/;"	s
GridComponent	./src/grid.h	/^} GridComponent;$/;"	t	typeref:struct:GridComponent
GridComponentData	./src/grid.h	/^typedef struct GridComponentData {$/;"	s
GridComponentData	./src/grid.h	/^} GridComponentData;$/;"	t	typeref:struct:GridComponentData
GridPosition	./src/components.h	/^typedef Vector2 GridPosition;$/;"	t	typeref:typename:Vector2
GridVelocity	./src/components.h	/^typedef Vector2 GridVelocity;$/;"	t	typeref:typename:Vector2
GuiButton	./vendor/raylib5/include/raygui.h	/^int GuiButton(Rectangle bounds, const char *text)$/;"	f	typeref:typename:int
GuiCheckBox	./vendor/raylib5/include/raygui.h	/^int GuiCheckBox(Rectangle bounds, const char *text, bool *checked)$/;"	f	typeref:typename:int
GuiCheckBoxProperty	./vendor/raylib5/include/raygui.h	/^} GuiCheckBoxProperty;$/;"	t	typeref:enum:__anon65c7f6000d03
GuiColorBarAlpha	./vendor/raylib5/include/raygui.h	/^int GuiColorBarAlpha(Rectangle bounds, const char *text, float *alpha)$/;"	f	typeref:typename:int
GuiColorBarHue	./vendor/raylib5/include/raygui.h	/^int GuiColorBarHue(Rectangle bounds, const char *text, float *hue)$/;"	f	typeref:typename:int
GuiColorPanel	./vendor/raylib5/include/raygui.h	/^int GuiColorPanel(Rectangle bounds, const char *text, Color *color)$/;"	f	typeref:typename:int
GuiColorPanelHSV	./vendor/raylib5/include/raygui.h	/^int GuiColorPanelHSV(Rectangle bounds, const char *text, Vector3 *colorHsv)$/;"	f	typeref:typename:int
GuiColorPicker	./vendor/raylib5/include/raygui.h	/^int GuiColorPicker(Rectangle bounds, const char *text, Color *color)$/;"	f	typeref:typename:int
GuiColorPickerHSV	./vendor/raylib5/include/raygui.h	/^int GuiColorPickerHSV(Rectangle bounds, const char *text, Vector3 *colorHsv)$/;"	f	typeref:typename:int
GuiColorPickerProperty	./vendor/raylib5/include/raygui.h	/^} GuiColorPickerProperty;$/;"	t	typeref:enum:__anon65c7f6001303
GuiComboBox	./vendor/raylib5/include/raygui.h	/^int GuiComboBox(Rectangle bounds, const char *text, int *active)$/;"	f	typeref:typename:int
GuiComboBoxProperty	./vendor/raylib5/include/raygui.h	/^} GuiComboBoxProperty;$/;"	t	typeref:enum:__anon65c7f6000e03
GuiControl	./vendor/raylib5/include/raygui.h	/^} GuiControl;$/;"	t	typeref:enum:__anon65c7f6000603
GuiControlProperty	./vendor/raylib5/include/raygui.h	/^} GuiControlProperty;$/;"	t	typeref:enum:__anon65c7f6000703
GuiDefaultProperty	./vendor/raylib5/include/raygui.h	/^} GuiDefaultProperty;$/;"	t	typeref:enum:__anon65c7f6000803
GuiDisable	./vendor/raylib5/include/raygui.h	/^void GuiDisable(void) { if (guiState == STATE_NORMAL) guiState = STATE_DISABLED; }$/;"	f	typeref:typename:void
GuiDisableTooltip	./vendor/raylib5/include/raygui.h	/^void GuiDisableTooltip(void) { guiTooltip = false; }$/;"	f	typeref:typename:void
GuiDrawIcon	./vendor/raylib5/include/raygui.h	/^void GuiDrawIcon(int iconId, int posX, int posY, int pixelSize, Color color)$/;"	f	typeref:typename:void
GuiDrawRectangle	./vendor/raylib5/include/raygui.h	/^static void GuiDrawRectangle(Rectangle rec, int borderWidth, Color borderColor, Color color)$/;"	f	typeref:typename:void
GuiDrawText	./vendor/raylib5/include/raygui.h	/^static void GuiDrawText(const char *text, Rectangle textBounds, int alignment, Color tint)$/;"	f	typeref:typename:void
GuiDropdownBox	./vendor/raylib5/include/raygui.h	/^int GuiDropdownBox(Rectangle bounds, const char *text, int *active, bool editMode)$/;"	f	typeref:typename:int
GuiDropdownBoxProperty	./vendor/raylib5/include/raygui.h	/^} GuiDropdownBoxProperty;$/;"	t	typeref:enum:__anon65c7f6000f03
GuiDummyRec	./vendor/raylib5/include/raygui.h	/^int GuiDummyRec(Rectangle bounds, const char *text)$/;"	f	typeref:typename:int
GuiEnable	./vendor/raylib5/include/raygui.h	/^void GuiEnable(void) { if (guiState == STATE_DISABLED) guiState = STATE_NORMAL; }$/;"	f	typeref:typename:void
GuiEnableTooltip	./vendor/raylib5/include/raygui.h	/^void GuiEnableTooltip(void) { guiTooltip = true; }$/;"	f	typeref:typename:void
GuiFade	./vendor/raylib5/include/raygui.h	/^static Color GuiFade(Color color, float alpha)$/;"	f	typeref:typename:Color
GuiGetFont	./vendor/raylib5/include/raygui.h	/^Font GuiGetFont(void)$/;"	f	typeref:typename:Font
GuiGetIcons	./vendor/raylib5/include/raygui.h	/^unsigned int *GuiGetIcons(void) { return guiIconsPtr; }$/;"	f	typeref:typename:unsigned int *
GuiGetState	./vendor/raylib5/include/raygui.h	/^int GuiGetState(void) { return guiState; }$/;"	f	typeref:typename:int
GuiGetStyle	./vendor/raylib5/include/raygui.h	/^int GuiGetStyle(int control, int property)$/;"	f	typeref:typename:int
GuiGrid	./vendor/raylib5/include/raygui.h	/^int GuiGrid(Rectangle bounds, const char *text, float spacing, int subdivs, Vector2 *mouseCell)$/;"	f	typeref:typename:int
GuiGroupBox	./vendor/raylib5/include/raygui.h	/^int GuiGroupBox(Rectangle bounds, const char *text)$/;"	f	typeref:typename:int
GuiIconName	./vendor/raylib5/include/raygui.h	/^} GuiIconName;$/;"	t	typeref:enum:__anon65c7f6001403
GuiIconText	./vendor/raylib5/include/raygui.h	/^const char *GuiIconText(int iconId, const char *text)$/;"	f	typeref:typename:const char *
GuiIsLocked	./vendor/raylib5/include/raygui.h	/^bool GuiIsLocked(void) { return guiLocked; }$/;"	f	typeref:typename:bool
GuiLabel	./vendor/raylib5/include/raygui.h	/^int GuiLabel(Rectangle bounds, const char *text)$/;"	f	typeref:typename:int
GuiLabelButton	./vendor/raylib5/include/raygui.h	/^int GuiLabelButton(Rectangle bounds, const char *text)$/;"	f	typeref:typename:int
GuiLine	./vendor/raylib5/include/raygui.h	/^int GuiLine(Rectangle bounds, const char *text)$/;"	f	typeref:typename:int
GuiListView	./vendor/raylib5/include/raygui.h	/^int GuiListView(Rectangle bounds, const char *text, int *scrollIndex, int *active)$/;"	f	typeref:typename:int
GuiListViewEx	./vendor/raylib5/include/raygui.h	/^int GuiListViewEx(Rectangle bounds, const char **text, int count, int *scrollIndex, int *active,/;"	f	typeref:typename:int
GuiListViewProperty	./vendor/raylib5/include/raygui.h	/^} GuiListViewProperty;$/;"	t	typeref:enum:__anon65c7f6001203
GuiLoadIcons	./vendor/raylib5/include/raygui.h	/^char **GuiLoadIcons(const char *fileName, bool loadIconsName)$/;"	f	typeref:typename:char **
GuiLoadStyle	./vendor/raylib5/include/raygui.h	/^void GuiLoadStyle(const char *fileName)$/;"	f	typeref:typename:void
GuiLoadStyleDefault	./vendor/raylib5/include/raygui.h	/^void GuiLoadStyleDefault(void)$/;"	f	typeref:typename:void
GuiLoadStyleFromMemory	./vendor/raylib5/include/raygui.h	/^static void GuiLoadStyleFromMemory(const unsigned char *fileData, int dataSize)$/;"	f	typeref:typename:void
GuiLock	./vendor/raylib5/include/raygui.h	/^void GuiLock(void) { guiLocked = true; }$/;"	f	typeref:typename:void
GuiMessageBox	./vendor/raylib5/include/raygui.h	/^int GuiMessageBox(Rectangle bounds, const char *title, const char *message, const char *buttons)$/;"	f	typeref:typename:int
GuiPanel	./vendor/raylib5/include/raygui.h	/^int GuiPanel(Rectangle bounds, const char *text)$/;"	f	typeref:typename:int
GuiProgressBar	./vendor/raylib5/include/raygui.h	/^int GuiProgressBar(Rectangle bounds, const char *textLeft, const char *textRight, float *value, /;"	f	typeref:typename:int
GuiProgressBarProperty	./vendor/raylib5/include/raygui.h	/^} GuiProgressBarProperty;$/;"	t	typeref:enum:__anon65c7f6000b03
GuiPropertyElement	./vendor/raylib5/include/raygui.h	/^typedef enum { BORDER = 0, BASE, TEXT, OTHER } GuiPropertyElement;$/;"	t	typeref:enum:__anon65c7f6001503
GuiScrollBar	./vendor/raylib5/include/raygui.h	/^static int GuiScrollBar(Rectangle bounds, int value, int minValue, int maxValue)$/;"	f	typeref:typename:int
GuiScrollBarProperty	./vendor/raylib5/include/raygui.h	/^} GuiScrollBarProperty;$/;"	t	typeref:enum:__anon65c7f6000c03
GuiScrollPanel	./vendor/raylib5/include/raygui.h	/^int GuiScrollPanel(Rectangle bounds, const char *text, Rectangle content, Vector2 *scroll, Recta/;"	f	typeref:typename:int
GuiSetAlpha	./vendor/raylib5/include/raygui.h	/^void GuiSetAlpha(float alpha)$/;"	f	typeref:typename:void
GuiSetFont	./vendor/raylib5/include/raygui.h	/^void GuiSetFont(Font font)$/;"	f	typeref:typename:void
GuiSetIconScale	./vendor/raylib5/include/raygui.h	/^void GuiSetIconScale(int scale)$/;"	f	typeref:typename:void
GuiSetState	./vendor/raylib5/include/raygui.h	/^void GuiSetState(int state) { guiState = (GuiState)state; }$/;"	f	typeref:typename:void
GuiSetStyle	./vendor/raylib5/include/raygui.h	/^void GuiSetStyle(int control, int property, int value)$/;"	f	typeref:typename:void
GuiSetTooltip	./vendor/raylib5/include/raygui.h	/^void GuiSetTooltip(const char *tooltip) { guiTooltipPtr = tooltip; }$/;"	f	typeref:typename:void
GuiSlider	./vendor/raylib5/include/raygui.h	/^int GuiSlider(Rectangle bounds, const char *textLeft, const char *textRight, float *value, float/;"	f	typeref:typename:int
GuiSliderBar	./vendor/raylib5/include/raygui.h	/^int GuiSliderBar(Rectangle bounds, const char *textLeft, const char *textRight, float *value, fl/;"	f	typeref:typename:int
GuiSliderPro	./vendor/raylib5/include/raygui.h	/^int GuiSliderPro(Rectangle bounds, const char *textLeft, const char *textRight, float *value, fl/;"	f	typeref:typename:int
GuiSliderProperty	./vendor/raylib5/include/raygui.h	/^} GuiSliderProperty;$/;"	t	typeref:enum:__anon65c7f6000a03
GuiSpinner	./vendor/raylib5/include/raygui.h	/^int GuiSpinner(Rectangle bounds, const char *text, int *value, int minValue, int maxValue, bool /;"	f	typeref:typename:int
GuiSpinnerProperty	./vendor/raylib5/include/raygui.h	/^} GuiSpinnerProperty;$/;"	t	typeref:enum:__anon65c7f6001103
GuiState	./vendor/raylib5/include/raygui.h	/^} GuiState;$/;"	t	typeref:enum:__anon65c7f6000203
GuiStatusBar	./vendor/raylib5/include/raygui.h	/^int GuiStatusBar(Rectangle bounds, const char *text)$/;"	f	typeref:typename:int
GuiStyleProp	./vendor/raylib5/include/raygui.h	/^typedef struct GuiStyleProp {$/;"	s
GuiStyleProp	./vendor/raylib5/include/raygui.h	/^} GuiStyleProp;$/;"	t	typeref:struct:GuiStyleProp
GuiTabBar	./vendor/raylib5/include/raygui.h	/^int GuiTabBar(Rectangle bounds, const char **text, int count, int *active)$/;"	f	typeref:typename:int
GuiTextAlignment	./vendor/raylib5/include/raygui.h	/^} GuiTextAlignment;$/;"	t	typeref:enum:__anon65c7f6000303
GuiTextAlignmentVertical	./vendor/raylib5/include/raygui.h	/^} GuiTextAlignmentVertical;$/;"	t	typeref:enum:__anon65c7f6000403
GuiTextBox	./vendor/raylib5/include/raygui.h	/^int GuiTextBox(Rectangle bounds, char *text, int textSize, bool editMode)$/;"	f	typeref:typename:int
GuiTextBoxProperty	./vendor/raylib5/include/raygui.h	/^} GuiTextBoxProperty;$/;"	t	typeref:enum:__anon65c7f6001003
GuiTextInputBox	./vendor/raylib5/include/raygui.h	/^int GuiTextInputBox(Rectangle bounds, const char *title, const char *message, const char *button/;"	f	typeref:typename:int
GuiTextSplit	./vendor/raylib5/include/raygui.h	/^static const char **GuiTextSplit(const char *text, char delimiter, int *count, int *textRow)$/;"	f	typeref:typename:const char **
GuiTextWrapMode	./vendor/raylib5/include/raygui.h	/^} GuiTextWrapMode;$/;"	t	typeref:enum:__anon65c7f6000503
GuiToggle	./vendor/raylib5/include/raygui.h	/^int GuiToggle(Rectangle bounds, const char *text, bool *active)$/;"	f	typeref:typename:int
GuiToggleGroup	./vendor/raylib5/include/raygui.h	/^int GuiToggleGroup(Rectangle bounds, const char *text, int *active)$/;"	f	typeref:typename:int
GuiToggleProperty	./vendor/raylib5/include/raygui.h	/^} GuiToggleProperty;$/;"	t	typeref:enum:__anon65c7f6000903
GuiToggleSlider	./vendor/raylib5/include/raygui.h	/^int GuiToggleSlider(Rectangle bounds, const char *text, int *active)$/;"	f	typeref:typename:int
GuiTooltip	./vendor/raylib5/include/raygui.h	/^static void GuiTooltip(Rectangle controlRec)$/;"	f	typeref:typename:void
GuiUnlock	./vendor/raylib5/include/raygui.h	/^void GuiUnlock(void) { guiLocked = false; }$/;"	f	typeref:typename:void
GuiValueBox	./vendor/raylib5/include/raygui.h	/^int GuiValueBox(Rectangle bounds, const char *text, int *value, int minValue, int maxValue, bool/;"	f	typeref:typename:int
GuiValueBoxFloat	./vendor/raylib5/include/raygui.h	/^int GuiValueBoxFloat(Rectangle bounds, const char *text, char *textValue, float *value, bool edi/;"	f	typeref:typename:int
GuiWindowBox	./vendor/raylib5/include/raygui.h	/^int GuiWindowBox(Rectangle bounds, const char *title)$/;"	f	typeref:typename:int
HALF_BLOCK_D	./src/glyph.h	/^#define    HALF_BLOCK_D /;"	d
HALF_BLOCK_L	./src/glyph.h	/^#define    HALF_BLOCK_L /;"	d
HALF_BLOCK_R	./src/glyph.h	/^#define    HALF_BLOCK_R /;"	d
HALF_BLOCK_U	./src/glyph.h	/^#define    HALF_BLOCK_U /;"	d
HASH	./src/glyph.h	/^#define    HASH /;"	d
HAVE_EXECINFO	./src/flecs.c	/^#define HAVE_EXECINFO /;"	d	file:
HEART	./src/glyph.h	/^#define    HEART /;"	d
HOLE_SQUARE	./src/glyph.h	/^#define    HOLE_SQUARE /;"	d
HTTP_SOCKET_INVALID	./src/flecs.c	/^#define HTTP_SOCKET_INVALID /;"	d	file:
HUEBAR_PADDING	./vendor/raylib5/include/raygui.h	/^    HUEBAR_PADDING,             \/\/ ColorPicker right hue bar separation from panel$/;"	e	enum:__anon65c7f6001303
HUEBAR_SELECTOR_HEIGHT	./vendor/raylib5/include/raygui.h	/^    HUEBAR_SELECTOR_HEIGHT,     \/\/ ColorPicker right hue bar selector height$/;"	e	enum:__anon65c7f6001303
HUEBAR_SELECTOR_OVERFLOW	./vendor/raylib5/include/raygui.h	/^    HUEBAR_SELECTOR_OVERFLOW    \/\/ ColorPicker right hue bar selector overflow$/;"	e	enum:__anon65c7f6001303
HUEBAR_WIDTH	./vendor/raylib5/include/raygui.h	/^    HUEBAR_WIDTH,               \/\/ ColorPicker right hue bar width$/;"	e	enum:__anon65c7f6001303
Han_range16	./vendor/STC/include/stc/priv/utf8_prv.c	/^static const URange16 Han_range16[] = {$/;"	v	typeref:typename:const URange16[]	file:
HashMap	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    HashMap(HashMap&& rhs) noexcept$/;"	f	class:emhash7::HashMap
HashMap	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    HashMap(InputIt first, InputIt last, size_type bucket_count=4)$/;"	f	class:emhash7::HashMap
HashMap	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    HashMap(const HashMap& rhs) noexcept$/;"	f	class:emhash7::HashMap
HashMap	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    HashMap(size_type bucket = 2, float mlf = EMH_DEFAULT_LOAD_FACTOR) noexcept$/;"	f	class:emhash7::HashMap
HashMap	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    HashMap(std::initializer_list<value_type> ilist)$/;"	f	class:emhash7::HashMap
HashMap	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^class HashMap$/;"	c	namespace:emhash7
HashPolicySelector	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^struct HashPolicySelector$/;"	s	namespace:ska::detailv3
HashPolicySelector	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^struct HashPolicySelector<T, void_t<typename T::hash_policy>>$/;"	s	namespace:ska::detailv3
Header file	./vendor/STC/docs/cbits_api.md	/^## Header file$/;"	s	chapter:STC [cbits](../include/stc/cbits.h): Bitset
Header file	./vendor/STC/docs/crandom_api.md	/^## Header file$/;"	s	chapter:STC [crand](../include/stc/crand.h): Pseudo Random Number Generator
Header file	./vendor/STC/docs/cstr_api.md	/^## Header file$/;"	s	chapter:STC [cstr](../include/stc/cstr.h): String
Header file	./vendor/STC/docs/csview_api.md	/^## Header file$/;"	s	chapter:STC [csview](../include/stc/csview.h): Sub-string View
Header file	./vendor/STC/docs/czview_api.md	/^## Header file$/;"	s	chapter:STC [czview](../include/stc/czview.h): Null-terminated UTF8 String View
Header file and declaration	./vendor/STC/docs/arc_api.md	/^## Header file and declaration$/;"	s	chapter:STC [arc](../include/stc/arc.h): Atomic Reference Counted Smart Pointer
Header file and declaration	./vendor/STC/docs/box_api.md	/^## Header file and declaration$/;"	s	chapter:STC [box](../include/stc/box.h): Smart Pointer (boxed object)
Header file and declaration	./vendor/STC/docs/cspan_api.md	/^## Header file and declaration$/;"	s	chapter:STC [cspan](../include/stc/cspan.h): Multi-dimensional Array View
Header file and declaration	./vendor/STC/docs/deq_api.md	/^## Header file and declaration$/;"	s	chapter:STC [deq](../include/stc/deq.h): Double Ended Queue
Header file and declaration	./vendor/STC/docs/hmap_api.md	/^## Header file and declaration$/;"	s	chapter:STC [hmap](../include/stc/hmap.h): HashMap (unordered)
Header file and declaration	./vendor/STC/docs/hset_api.md	/^## Header file and declaration$/;"	s	chapter:STC [hset](../include/stc/hset.h): HashSet (unordered)
Header file and declaration	./vendor/STC/docs/list_api.md	/^## Header file and declaration$/;"	s	chapter:STC [list](../include/stc/list.h): Forward List
Header file and declaration	./vendor/STC/docs/pque_api.md	/^## Header file and declaration$/;"	s	chapter:STC [pque](../include/stc/pque.h): Priority Queue
Header file and declaration	./vendor/STC/docs/queue_api.md	/^## Header file and declaration$/;"	s	chapter:STC [queue](../include/stc/queue.h): Queue
Header file and declaration	./vendor/STC/docs/smap_api.md	/^## Header file and declaration$/;"	s	chapter:STC [smap](../include/stc/smap.h): Sorted Map
Header file and declaration	./vendor/STC/docs/sset_api.md	/^## Header file and declaration$/;"	s	chapter:STC [sset](../include/stc/sset.h): Sorted Set
Header file and declaration	./vendor/STC/docs/stack_api.md	/^## Header file and declaration$/;"	s	chapter:STC [stack](../include/stc/stack.h): Stack
Header file and declaration	./vendor/STC/docs/vec_api.md	/^## Header file and declaration$/;"	s	chapter:STC [vec](../include/stc/vec.h): Vector
Hecto	./src/flecs.h	/^struct Hecto { };$/;"	s	struct:flecs::units
Helper methods	./vendor/STC/docs/csview_api.md	/^#### Helper methods$/;"	t	section:STC [csview](../include/stc/csview.h): Sub-string View""Methods
Helper methods for usage in containers	./vendor/STC/docs/czview_api.md	/^#### Helper methods for usage in containers$/;"	t	section:STC [czview](../include/stc/czview.h): Null-terminated UTF8 String View""Methods
Helper methods:	./vendor/STC/docs/cstr_api.md	/^#### Helper methods:$/;"	t	section:STC [cstr](../include/stc/cstr.h): String""Methods
Hertz	./src/flecs.h	/^struct Hertz { };$/;"	s	struct:flecs::units::frequency
Highlights	./vendor/STC/README.md	/^## Highlights$/;"	s	chapter:STC - Smart Template Containers
Hours	./src/flecs.h	/^struct Hours { };$/;"	s	struct:flecs::units::duration
HttpFragState	./src/flecs.c	/^} HttpFragState;$/;"	t	typeref:enum:__anon7d4a41770603	file:
HttpFragStateBegin	./src/flecs.c	/^    HttpFragStateBegin,$/;"	e	enum:__anon7d4a41770603	file:
HttpFragStateBody	./src/flecs.c	/^    HttpFragStateBody,$/;"	e	enum:__anon7d4a41770603	file:
HttpFragStateCR	./src/flecs.c	/^    HttpFragStateCR,$/;"	e	enum:__anon7d4a41770603	file:
HttpFragStateCRLF	./src/flecs.c	/^    HttpFragStateCRLF,$/;"	e	enum:__anon7d4a41770603	file:
HttpFragStateCRLFCR	./src/flecs.c	/^    HttpFragStateCRLFCR,$/;"	e	enum:__anon7d4a41770603	file:
HttpFragStateDone	./src/flecs.c	/^    HttpFragStateDone$/;"	e	enum:__anon7d4a41770603	file:
HttpFragStateHeaderName	./src/flecs.c	/^    HttpFragStateHeaderName,$/;"	e	enum:__anon7d4a41770603	file:
HttpFragStateHeaderStart	./src/flecs.c	/^    HttpFragStateHeaderStart,$/;"	e	enum:__anon7d4a41770603	file:
HttpFragStateHeaderValue	./src/flecs.c	/^    HttpFragStateHeaderValue,$/;"	e	enum:__anon7d4a41770603	file:
HttpFragStateHeaderValueStart	./src/flecs.c	/^    HttpFragStateHeaderValueStart,$/;"	e	enum:__anon7d4a41770603	file:
HttpFragStateMethod	./src/flecs.c	/^    HttpFragStateMethod,$/;"	e	enum:__anon7d4a41770603	file:
HttpFragStatePath	./src/flecs.c	/^    HttpFragStatePath,$/;"	e	enum:__anon7d4a41770603	file:
HttpFragStateVersion	./src/flecs.c	/^    HttpFragStateVersion,$/;"	e	enum:__anon7d4a41770603	file:
Hyperlink	./src/flecs.h	/^struct Hyperlink { };$/;"	s	struct:flecs::units::uri
I16	./src/flecs.h	/^static const flecs::entity_t I16 = ecs_id(ecs_i16_t);$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
I16	./src/flecs.h	/^static const primitive_kind_t I16 = EcsI16;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
I32	./src/flecs.h	/^static const flecs::entity_t I32 = ecs_id(ecs_i32_t);$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
I32	./src/flecs.h	/^static const primitive_kind_t I32 = EcsI32;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
I64	./src/flecs.h	/^static const flecs::entity_t I64 = ecs_id(ecs_i64_t);$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
I64	./src/flecs.h	/^static const primitive_kind_t I64 = EcsI64;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
I8	./src/flecs.h	/^static const flecs::entity_t I8 = ecs_id(ecs_i8_t);$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
I8	./src/flecs.h	/^static const primitive_kind_t I8 = EcsI8;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
IBase	./src/flecs.h	/^    using IBase = IBuilder<Base, Components ...>;$/;"	t	struct:flecs::_::builder	typeref:typename:IBuilder<Base,Components...>
IBase	./src/flecs.h	/^    using IBase = IBuilder<Base, Components ...>;$/;"	t	struct:flecs::_::node_builder	typeref:typename:IBuilder<Base,Components...>
ICON_1UP	./vendor/raylib5/include/raygui.h	/^    ICON_1UP                      = 148,$/;"	e	enum:__anon65c7f6001403
ICON_223	./vendor/raylib5/include/raygui.h	/^    ICON_223                      = 223,$/;"	e	enum:__anon65c7f6001403
ICON_224	./vendor/raylib5/include/raygui.h	/^    ICON_224                      = 224,$/;"	e	enum:__anon65c7f6001403
ICON_225	./vendor/raylib5/include/raygui.h	/^    ICON_225                      = 225,$/;"	e	enum:__anon65c7f6001403
ICON_226	./vendor/raylib5/include/raygui.h	/^    ICON_226                      = 226,$/;"	e	enum:__anon65c7f6001403
ICON_227	./vendor/raylib5/include/raygui.h	/^    ICON_227                      = 227,$/;"	e	enum:__anon65c7f6001403
ICON_228	./vendor/raylib5/include/raygui.h	/^    ICON_228                      = 228,$/;"	e	enum:__anon65c7f6001403
ICON_229	./vendor/raylib5/include/raygui.h	/^    ICON_229                      = 229,$/;"	e	enum:__anon65c7f6001403
ICON_230	./vendor/raylib5/include/raygui.h	/^    ICON_230                      = 230,$/;"	e	enum:__anon65c7f6001403
ICON_231	./vendor/raylib5/include/raygui.h	/^    ICON_231                      = 231,$/;"	e	enum:__anon65c7f6001403
ICON_232	./vendor/raylib5/include/raygui.h	/^    ICON_232                      = 232,$/;"	e	enum:__anon65c7f6001403
ICON_233	./vendor/raylib5/include/raygui.h	/^    ICON_233                      = 233,$/;"	e	enum:__anon65c7f6001403
ICON_234	./vendor/raylib5/include/raygui.h	/^    ICON_234                      = 234,$/;"	e	enum:__anon65c7f6001403
ICON_235	./vendor/raylib5/include/raygui.h	/^    ICON_235                      = 235,$/;"	e	enum:__anon65c7f6001403
ICON_236	./vendor/raylib5/include/raygui.h	/^    ICON_236                      = 236,$/;"	e	enum:__anon65c7f6001403
ICON_237	./vendor/raylib5/include/raygui.h	/^    ICON_237                      = 237,$/;"	e	enum:__anon65c7f6001403
ICON_238	./vendor/raylib5/include/raygui.h	/^    ICON_238                      = 238,$/;"	e	enum:__anon65c7f6001403
ICON_239	./vendor/raylib5/include/raygui.h	/^    ICON_239                      = 239,$/;"	e	enum:__anon65c7f6001403
ICON_240	./vendor/raylib5/include/raygui.h	/^    ICON_240                      = 240,$/;"	e	enum:__anon65c7f6001403
ICON_241	./vendor/raylib5/include/raygui.h	/^    ICON_241                      = 241,$/;"	e	enum:__anon65c7f6001403
ICON_242	./vendor/raylib5/include/raygui.h	/^    ICON_242                      = 242,$/;"	e	enum:__anon65c7f6001403
ICON_243	./vendor/raylib5/include/raygui.h	/^    ICON_243                      = 243,$/;"	e	enum:__anon65c7f6001403
ICON_244	./vendor/raylib5/include/raygui.h	/^    ICON_244                      = 244,$/;"	e	enum:__anon65c7f6001403
ICON_245	./vendor/raylib5/include/raygui.h	/^    ICON_245                      = 245,$/;"	e	enum:__anon65c7f6001403
ICON_246	./vendor/raylib5/include/raygui.h	/^    ICON_246                      = 246,$/;"	e	enum:__anon65c7f6001403
ICON_247	./vendor/raylib5/include/raygui.h	/^    ICON_247                      = 247,$/;"	e	enum:__anon65c7f6001403
ICON_248	./vendor/raylib5/include/raygui.h	/^    ICON_248                      = 248,$/;"	e	enum:__anon65c7f6001403
ICON_249	./vendor/raylib5/include/raygui.h	/^    ICON_249                      = 249,$/;"	e	enum:__anon65c7f6001403
ICON_250	./vendor/raylib5/include/raygui.h	/^    ICON_250                      = 250,$/;"	e	enum:__anon65c7f6001403
ICON_251	./vendor/raylib5/include/raygui.h	/^    ICON_251                      = 251,$/;"	e	enum:__anon65c7f6001403
ICON_252	./vendor/raylib5/include/raygui.h	/^    ICON_252                      = 252,$/;"	e	enum:__anon65c7f6001403
ICON_253	./vendor/raylib5/include/raygui.h	/^    ICON_253                      = 253,$/;"	e	enum:__anon65c7f6001403
ICON_254	./vendor/raylib5/include/raygui.h	/^    ICON_254                      = 254,$/;"	e	enum:__anon65c7f6001403
ICON_255	./vendor/raylib5/include/raygui.h	/^    ICON_255                      = 255,$/;"	e	enum:__anon65c7f6001403
ICON_ALARM	./vendor/raylib5/include/raygui.h	/^    ICON_ALARM                    = 205,$/;"	e	enum:__anon65c7f6001403
ICON_ALPHA_CLEAR	./vendor/raylib5/include/raygui.h	/^    ICON_ALPHA_CLEAR              = 93,$/;"	e	enum:__anon65c7f6001403
ICON_ALPHA_MULTIPLY	./vendor/raylib5/include/raygui.h	/^    ICON_ALPHA_MULTIPLY           = 92,$/;"	e	enum:__anon65c7f6001403
ICON_ARROW_DOWN	./vendor/raylib5/include/raygui.h	/^    ICON_ARROW_DOWN               = 116,$/;"	e	enum:__anon65c7f6001403
ICON_ARROW_DOWN_FILL	./vendor/raylib5/include/raygui.h	/^    ICON_ARROW_DOWN_FILL          = 120,$/;"	e	enum:__anon65c7f6001403
ICON_ARROW_LEFT	./vendor/raylib5/include/raygui.h	/^    ICON_ARROW_LEFT               = 114,$/;"	e	enum:__anon65c7f6001403
ICON_ARROW_LEFT_FILL	./vendor/raylib5/include/raygui.h	/^    ICON_ARROW_LEFT_FILL          = 118,$/;"	e	enum:__anon65c7f6001403
ICON_ARROW_RIGHT	./vendor/raylib5/include/raygui.h	/^    ICON_ARROW_RIGHT              = 115,$/;"	e	enum:__anon65c7f6001403
ICON_ARROW_RIGHT_FILL	./vendor/raylib5/include/raygui.h	/^    ICON_ARROW_RIGHT_FILL         = 119,$/;"	e	enum:__anon65c7f6001403
ICON_ARROW_UP	./vendor/raylib5/include/raygui.h	/^    ICON_ARROW_UP                 = 117,$/;"	e	enum:__anon65c7f6001403
ICON_ARROW_UP_FILL	./vendor/raylib5/include/raygui.h	/^    ICON_ARROW_UP_FILL            = 121,$/;"	e	enum:__anon65c7f6001403
ICON_AUDIO	./vendor/raylib5/include/raygui.h	/^    ICON_AUDIO                    = 122,$/;"	e	enum:__anon65c7f6001403
ICON_BIN	./vendor/raylib5/include/raygui.h	/^    ICON_BIN                      = 143,$/;"	e	enum:__anon65c7f6001403
ICON_BOX	./vendor/raylib5/include/raygui.h	/^    ICON_BOX                      = 80,$/;"	e	enum:__anon65c7f6001403
ICON_BOX_BOTTOM	./vendor/raylib5/include/raygui.h	/^    ICON_BOX_BOTTOM               = 85,$/;"	e	enum:__anon65c7f6001403
ICON_BOX_BOTTOM_LEFT	./vendor/raylib5/include/raygui.h	/^    ICON_BOX_BOTTOM_LEFT          = 86,$/;"	e	enum:__anon65c7f6001403
ICON_BOX_BOTTOM_RIGHT	./vendor/raylib5/include/raygui.h	/^    ICON_BOX_BOTTOM_RIGHT         = 84,$/;"	e	enum:__anon65c7f6001403
ICON_BOX_CENTER	./vendor/raylib5/include/raygui.h	/^    ICON_BOX_CENTER               = 89,$/;"	e	enum:__anon65c7f6001403
ICON_BOX_CIRCLE_MASK	./vendor/raylib5/include/raygui.h	/^    ICON_BOX_CIRCLE_MASK          = 90,$/;"	e	enum:__anon65c7f6001403
ICON_BOX_CONCENTRIC	./vendor/raylib5/include/raygui.h	/^    ICON_BOX_CONCENTRIC           = 110,$/;"	e	enum:__anon65c7f6001403
ICON_BOX_CORNERS_BIG	./vendor/raylib5/include/raygui.h	/^    ICON_BOX_CORNERS_BIG          = 99,$/;"	e	enum:__anon65c7f6001403
ICON_BOX_CORNERS_SMALL	./vendor/raylib5/include/raygui.h	/^    ICON_BOX_CORNERS_SMALL        = 98,$/;"	e	enum:__anon65c7f6001403
ICON_BOX_DOTS_BIG	./vendor/raylib5/include/raygui.h	/^    ICON_BOX_DOTS_BIG             = 109,$/;"	e	enum:__anon65c7f6001403
ICON_BOX_DOTS_SMALL	./vendor/raylib5/include/raygui.h	/^    ICON_BOX_DOTS_SMALL           = 108,$/;"	e	enum:__anon65c7f6001403
ICON_BOX_GRID	./vendor/raylib5/include/raygui.h	/^    ICON_BOX_GRID                 = 96,$/;"	e	enum:__anon65c7f6001403
ICON_BOX_GRID_BIG	./vendor/raylib5/include/raygui.h	/^    ICON_BOX_GRID_BIG             = 111,$/;"	e	enum:__anon65c7f6001403
ICON_BOX_LEFT	./vendor/raylib5/include/raygui.h	/^    ICON_BOX_LEFT                 = 87,$/;"	e	enum:__anon65c7f6001403
ICON_BOX_MULTISIZE	./vendor/raylib5/include/raygui.h	/^    ICON_BOX_MULTISIZE            = 102,$/;"	e	enum:__anon65c7f6001403
ICON_BOX_RIGHT	./vendor/raylib5/include/raygui.h	/^    ICON_BOX_RIGHT                = 83,$/;"	e	enum:__anon65c7f6001403
ICON_BOX_TOP	./vendor/raylib5/include/raygui.h	/^    ICON_BOX_TOP                  = 81,$/;"	e	enum:__anon65c7f6001403
ICON_BOX_TOP_LEFT	./vendor/raylib5/include/raygui.h	/^    ICON_BOX_TOP_LEFT             = 88,$/;"	e	enum:__anon65c7f6001403
ICON_BOX_TOP_RIGHT	./vendor/raylib5/include/raygui.h	/^    ICON_BOX_TOP_RIGHT            = 82,$/;"	e	enum:__anon65c7f6001403
ICON_BREAKPOINT_OFF	./vendor/raylib5/include/raygui.h	/^    ICON_BREAKPOINT_OFF           = 213,$/;"	e	enum:__anon65c7f6001403
ICON_BREAKPOINT_ON	./vendor/raylib5/include/raygui.h	/^    ICON_BREAKPOINT_ON            = 212,$/;"	e	enum:__anon65c7f6001403
ICON_BRUSH_CLASSIC	./vendor/raylib5/include/raygui.h	/^    ICON_BRUSH_CLASSIC            = 24,$/;"	e	enum:__anon65c7f6001403
ICON_BRUSH_PAINTER	./vendor/raylib5/include/raygui.h	/^    ICON_BRUSH_PAINTER            = 25,$/;"	e	enum:__anon65c7f6001403
ICON_BURGER_MENU	./vendor/raylib5/include/raygui.h	/^    ICON_BURGER_MENU              = 214,$/;"	e	enum:__anon65c7f6001403
ICON_CAMERA	./vendor/raylib5/include/raygui.h	/^    ICON_CAMERA                   = 169,$/;"	e	enum:__anon65c7f6001403
ICON_CASE_SENSITIVE	./vendor/raylib5/include/raygui.h	/^    ICON_CASE_SENSITIVE           = 215,$/;"	e	enum:__anon65c7f6001403
ICON_CLOCK	./vendor/raylib5/include/raygui.h	/^    ICON_CLOCK                    = 139,$/;"	e	enum:__anon65c7f6001403
ICON_COIN	./vendor/raylib5/include/raygui.h	/^    ICON_COIN                     = 146,$/;"	e	enum:__anon65c7f6001403
ICON_COLOR_BUCKET	./vendor/raylib5/include/raygui.h	/^    ICON_COLOR_BUCKET             = 29,$/;"	e	enum:__anon65c7f6001403
ICON_COLOR_PICKER	./vendor/raylib5/include/raygui.h	/^    ICON_COLOR_PICKER             = 27,$/;"	e	enum:__anon65c7f6001403
ICON_CORNER	./vendor/raylib5/include/raygui.h	/^    ICON_CORNER                   = 187,$/;"	e	enum:__anon65c7f6001403
ICON_CPU	./vendor/raylib5/include/raygui.h	/^    ICON_CPU                      = 206,$/;"	e	enum:__anon65c7f6001403
ICON_CRACK	./vendor/raylib5/include/raygui.h	/^    ICON_CRACK                    = 155,$/;"	e	enum:__anon65c7f6001403
ICON_CRACK_POINTS	./vendor/raylib5/include/raygui.h	/^    ICON_CRACK_POINTS             = 156,$/;"	e	enum:__anon65c7f6001403
ICON_CROP	./vendor/raylib5/include/raygui.h	/^    ICON_CROP                     = 36,$/;"	e	enum:__anon65c7f6001403
ICON_CROP_ALPHA	./vendor/raylib5/include/raygui.h	/^    ICON_CROP_ALPHA               = 37,$/;"	e	enum:__anon65c7f6001403
ICON_CROSS	./vendor/raylib5/include/raygui.h	/^    ICON_CROSS                    = 113,$/;"	e	enum:__anon65c7f6001403
ICON_CROSSLINE	./vendor/raylib5/include/raygui.h	/^    ICON_CROSSLINE                = 192,$/;"	e	enum:__anon65c7f6001403
ICON_CROSS_SMALL	./vendor/raylib5/include/raygui.h	/^    ICON_CROSS_SMALL              = 128,$/;"	e	enum:__anon65c7f6001403
ICON_CUBE	./vendor/raylib5/include/raygui.h	/^    ICON_CUBE                     = 162,$/;"	e	enum:__anon65c7f6001403
ICON_CUBE_FACE_BACK	./vendor/raylib5/include/raygui.h	/^    ICON_CUBE_FACE_BACK           = 168,$/;"	e	enum:__anon65c7f6001403
ICON_CUBE_FACE_BOTTOM	./vendor/raylib5/include/raygui.h	/^    ICON_CUBE_FACE_BOTTOM         = 166,$/;"	e	enum:__anon65c7f6001403
ICON_CUBE_FACE_FRONT	./vendor/raylib5/include/raygui.h	/^    ICON_CUBE_FACE_FRONT          = 165,$/;"	e	enum:__anon65c7f6001403
ICON_CUBE_FACE_LEFT	./vendor/raylib5/include/raygui.h	/^    ICON_CUBE_FACE_LEFT           = 164,$/;"	e	enum:__anon65c7f6001403
ICON_CUBE_FACE_RIGHT	./vendor/raylib5/include/raygui.h	/^    ICON_CUBE_FACE_RIGHT          = 167,$/;"	e	enum:__anon65c7f6001403
ICON_CUBE_FACE_TOP	./vendor/raylib5/include/raygui.h	/^    ICON_CUBE_FACE_TOP            = 163,$/;"	e	enum:__anon65c7f6001403
ICON_CURSOR_CLASSIC	./vendor/raylib5/include/raygui.h	/^    ICON_CURSOR_CLASSIC           = 21,$/;"	e	enum:__anon65c7f6001403
ICON_CURSOR_HAND	./vendor/raylib5/include/raygui.h	/^    ICON_CURSOR_HAND              = 19,$/;"	e	enum:__anon65c7f6001403
ICON_CURSOR_MOVE	./vendor/raylib5/include/raygui.h	/^    ICON_CURSOR_MOVE              = 52,$/;"	e	enum:__anon65c7f6001403
ICON_CURSOR_MOVE_FILL	./vendor/raylib5/include/raygui.h	/^    ICON_CURSOR_MOVE_FILL         = 68,$/;"	e	enum:__anon65c7f6001403
ICON_CURSOR_POINTER	./vendor/raylib5/include/raygui.h	/^    ICON_CURSOR_POINTER           = 20,$/;"	e	enum:__anon65c7f6001403
ICON_CURSOR_SCALE	./vendor/raylib5/include/raygui.h	/^    ICON_CURSOR_SCALE             = 53,$/;"	e	enum:__anon65c7f6001403
ICON_CURSOR_SCALE_FILL	./vendor/raylib5/include/raygui.h	/^    ICON_CURSOR_SCALE_FILL        = 69,$/;"	e	enum:__anon65c7f6001403
ICON_CURSOR_SCALE_LEFT	./vendor/raylib5/include/raygui.h	/^    ICON_CURSOR_SCALE_LEFT        = 55,$/;"	e	enum:__anon65c7f6001403
ICON_CURSOR_SCALE_LEFT_FILL	./vendor/raylib5/include/raygui.h	/^    ICON_CURSOR_SCALE_LEFT_FILL   = 71,$/;"	e	enum:__anon65c7f6001403
ICON_CURSOR_SCALE_RIGHT	./vendor/raylib5/include/raygui.h	/^    ICON_CURSOR_SCALE_RIGHT       = 54,$/;"	e	enum:__anon65c7f6001403
ICON_CURSOR_SCALE_RIGHT_FILL	./vendor/raylib5/include/raygui.h	/^    ICON_CURSOR_SCALE_RIGHT_FILL  = 70,$/;"	e	enum:__anon65c7f6001403
ICON_DEMON	./vendor/raylib5/include/raygui.h	/^    ICON_DEMON                    = 152,$/;"	e	enum:__anon65c7f6001403
ICON_DITHERING	./vendor/raylib5/include/raygui.h	/^    ICON_DITHERING                = 94,$/;"	e	enum:__anon65c7f6001403
ICON_DOOR	./vendor/raylib5/include/raygui.h	/^    ICON_DOOR                     = 158,$/;"	e	enum:__anon65c7f6001403
ICON_EMPTYBOX	./vendor/raylib5/include/raygui.h	/^    ICON_EMPTYBOX                 = 63,$/;"	e	enum:__anon65c7f6001403
ICON_EMPTYBOX_SMALL	./vendor/raylib5/include/raygui.h	/^    ICON_EMPTYBOX_SMALL           = 79,$/;"	e	enum:__anon65c7f6001403
ICON_EXIT	./vendor/raylib5/include/raygui.h	/^    ICON_EXIT                     = 159,$/;"	e	enum:__anon65c7f6001403
ICON_EXPLOSION	./vendor/raylib5/include/raygui.h	/^    ICON_EXPLOSION                = 147,$/;"	e	enum:__anon65c7f6001403
ICON_EYE_OFF	./vendor/raylib5/include/raygui.h	/^    ICON_EYE_OFF                  = 45,$/;"	e	enum:__anon65c7f6001403
ICON_EYE_ON	./vendor/raylib5/include/raygui.h	/^    ICON_EYE_ON                   = 44,$/;"	e	enum:__anon65c7f6001403
ICON_FILE	./vendor/raylib5/include/raygui.h	/^    ICON_FILE                     = 218,$/;"	e	enum:__anon65c7f6001403
ICON_FILETYPE_ALPHA	./vendor/raylib5/include/raygui.h	/^    ICON_FILETYPE_ALPHA           = 194,$/;"	e	enum:__anon65c7f6001403
ICON_FILETYPE_AUDIO	./vendor/raylib5/include/raygui.h	/^    ICON_FILETYPE_AUDIO           = 11,$/;"	e	enum:__anon65c7f6001403
ICON_FILETYPE_BINARY	./vendor/raylib5/include/raygui.h	/^    ICON_FILETYPE_BINARY          = 200,$/;"	e	enum:__anon65c7f6001403
ICON_FILETYPE_HOME	./vendor/raylib5/include/raygui.h	/^    ICON_FILETYPE_HOME            = 195,$/;"	e	enum:__anon65c7f6001403
ICON_FILETYPE_IMAGE	./vendor/raylib5/include/raygui.h	/^    ICON_FILETYPE_IMAGE           = 12,$/;"	e	enum:__anon65c7f6001403
ICON_FILETYPE_INFO	./vendor/raylib5/include/raygui.h	/^    ICON_FILETYPE_INFO            = 15,$/;"	e	enum:__anon65c7f6001403
ICON_FILETYPE_PLAY	./vendor/raylib5/include/raygui.h	/^    ICON_FILETYPE_PLAY            = 13,$/;"	e	enum:__anon65c7f6001403
ICON_FILETYPE_TEXT	./vendor/raylib5/include/raygui.h	/^    ICON_FILETYPE_TEXT            = 10,$/;"	e	enum:__anon65c7f6001403
ICON_FILETYPE_VIDEO	./vendor/raylib5/include/raygui.h	/^    ICON_FILETYPE_VIDEO           = 14,$/;"	e	enum:__anon65c7f6001403
ICON_FILE_ADD	./vendor/raylib5/include/raygui.h	/^    ICON_FILE_ADD                 = 8,$/;"	e	enum:__anon65c7f6001403
ICON_FILE_COPY	./vendor/raylib5/include/raygui.h	/^    ICON_FILE_COPY                = 16,$/;"	e	enum:__anon65c7f6001403
ICON_FILE_CUT	./vendor/raylib5/include/raygui.h	/^    ICON_FILE_CUT                 = 17,$/;"	e	enum:__anon65c7f6001403
ICON_FILE_DELETE	./vendor/raylib5/include/raygui.h	/^    ICON_FILE_DELETE              = 9,$/;"	e	enum:__anon65c7f6001403
ICON_FILE_EXPORT	./vendor/raylib5/include/raygui.h	/^    ICON_FILE_EXPORT              = 7,$/;"	e	enum:__anon65c7f6001403
ICON_FILE_NEW	./vendor/raylib5/include/raygui.h	/^    ICON_FILE_NEW                 = 203,$/;"	e	enum:__anon65c7f6001403
ICON_FILE_OPEN	./vendor/raylib5/include/raygui.h	/^    ICON_FILE_OPEN                = 5,$/;"	e	enum:__anon65c7f6001403
ICON_FILE_PASTE	./vendor/raylib5/include/raygui.h	/^    ICON_FILE_PASTE               = 18,$/;"	e	enum:__anon65c7f6001403
ICON_FILE_SAVE	./vendor/raylib5/include/raygui.h	/^    ICON_FILE_SAVE                = 6,$/;"	e	enum:__anon65c7f6001403
ICON_FILE_SAVE_CLASSIC	./vendor/raylib5/include/raygui.h	/^    ICON_FILE_SAVE_CLASSIC        = 2,$/;"	e	enum:__anon65c7f6001403
ICON_FILTER	./vendor/raylib5/include/raygui.h	/^    ICON_FILTER                   = 47,$/;"	e	enum:__anon65c7f6001403
ICON_FILTER_BILINEAR	./vendor/raylib5/include/raygui.h	/^    ICON_FILTER_BILINEAR          = 35,$/;"	e	enum:__anon65c7f6001403
ICON_FILTER_POINT	./vendor/raylib5/include/raygui.h	/^    ICON_FILTER_POINT             = 34,$/;"	e	enum:__anon65c7f6001403
ICON_FILTER_TOP	./vendor/raylib5/include/raygui.h	/^    ICON_FILTER_TOP               = 46,$/;"	e	enum:__anon65c7f6001403
ICON_FOLDER	./vendor/raylib5/include/raygui.h	/^    ICON_FOLDER                   = 217,$/;"	e	enum:__anon65c7f6001403
ICON_FOLDER_ADD	./vendor/raylib5/include/raygui.h	/^    ICON_FOLDER_ADD               = 204,$/;"	e	enum:__anon65c7f6001403
ICON_FOLDER_FILE_OPEN	./vendor/raylib5/include/raygui.h	/^    ICON_FOLDER_FILE_OPEN         = 1,$/;"	e	enum:__anon65c7f6001403
ICON_FOLDER_OPEN	./vendor/raylib5/include/raygui.h	/^    ICON_FOLDER_OPEN              = 3,$/;"	e	enum:__anon65c7f6001403
ICON_FOLDER_SAVE	./vendor/raylib5/include/raygui.h	/^    ICON_FOLDER_SAVE              = 4,$/;"	e	enum:__anon65c7f6001403
ICON_FOUR_BOXES	./vendor/raylib5/include/raygui.h	/^    ICON_FOUR_BOXES               = 100,$/;"	e	enum:__anon65c7f6001403
ICON_FX	./vendor/raylib5/include/raygui.h	/^    ICON_FX                       = 123,$/;"	e	enum:__anon65c7f6001403
ICON_GEAR	./vendor/raylib5/include/raygui.h	/^    ICON_GEAR                     = 141,$/;"	e	enum:__anon65c7f6001403
ICON_GEAR_BIG	./vendor/raylib5/include/raygui.h	/^    ICON_GEAR_BIG                 = 142,$/;"	e	enum:__anon65c7f6001403
ICON_GEAR_EX	./vendor/raylib5/include/raygui.h	/^    ICON_GEAR_EX                  = 154,$/;"	e	enum:__anon65c7f6001403
ICON_GRID	./vendor/raylib5/include/raygui.h	/^    ICON_GRID                     = 97,$/;"	e	enum:__anon65c7f6001403
ICON_GRID_FILL	./vendor/raylib5/include/raygui.h	/^    ICON_GRID_FILL                = 101,$/;"	e	enum:__anon65c7f6001403
ICON_HAND_POINTER	./vendor/raylib5/include/raygui.h	/^    ICON_HAND_POINTER             = 144,$/;"	e	enum:__anon65c7f6001403
ICON_HEART	./vendor/raylib5/include/raygui.h	/^    ICON_HEART                    = 186,$/;"	e	enum:__anon65c7f6001403
ICON_HELP	./vendor/raylib5/include/raygui.h	/^    ICON_HELP                     = 193,$/;"	e	enum:__anon65c7f6001403
ICON_HELP_BOX	./vendor/raylib5/include/raygui.h	/^    ICON_HELP_BOX                 = 221,$/;"	e	enum:__anon65c7f6001403
ICON_HEX	./vendor/raylib5/include/raygui.h	/^    ICON_HEX                      = 201,$/;"	e	enum:__anon65c7f6001403
ICON_HIDPI	./vendor/raylib5/include/raygui.h	/^    ICON_HIDPI                    = 199,$/;"	e	enum:__anon65c7f6001403
ICON_HOUSE	./vendor/raylib5/include/raygui.h	/^    ICON_HOUSE                    = 185,$/;"	e	enum:__anon65c7f6001403
ICON_INFO	./vendor/raylib5/include/raygui.h	/^    ICON_INFO                     = 191,$/;"	e	enum:__anon65c7f6001403
ICON_INFO_BOX	./vendor/raylib5/include/raygui.h	/^    ICON_INFO_BOX                 = 222,$/;"	e	enum:__anon65c7f6001403
ICON_KEY	./vendor/raylib5/include/raygui.h	/^    ICON_KEY                      = 151,$/;"	e	enum:__anon65c7f6001403
ICON_LASER	./vendor/raylib5/include/raygui.h	/^    ICON_LASER                    = 145,$/;"	e	enum:__anon65c7f6001403
ICON_LAYERS	./vendor/raylib5/include/raygui.h	/^    ICON_LAYERS                   = 197,$/;"	e	enum:__anon65c7f6001403
ICON_LAYERS_VISIBLE	./vendor/raylib5/include/raygui.h	/^    ICON_LAYERS_VISIBLE           = 196,$/;"	e	enum:__anon65c7f6001403
ICON_LENS	./vendor/raylib5/include/raygui.h	/^    ICON_LENS                     = 42,$/;"	e	enum:__anon65c7f6001403
ICON_LENS_BIG	./vendor/raylib5/include/raygui.h	/^    ICON_LENS_BIG                 = 43,$/;"	e	enum:__anon65c7f6001403
ICON_LIFE_BARS	./vendor/raylib5/include/raygui.h	/^    ICON_LIFE_BARS                = 190,$/;"	e	enum:__anon65c7f6001403
ICON_LINK	./vendor/raylib5/include/raygui.h	/^    ICON_LINK                     = 174,$/;"	e	enum:__anon65c7f6001403
ICON_LINK_BOXES	./vendor/raylib5/include/raygui.h	/^    ICON_LINK_BOXES               = 172,$/;"	e	enum:__anon65c7f6001403
ICON_LINK_BROKE	./vendor/raylib5/include/raygui.h	/^    ICON_LINK_BROKE               = 175,$/;"	e	enum:__anon65c7f6001403
ICON_LINK_MULTI	./vendor/raylib5/include/raygui.h	/^    ICON_LINK_MULTI               = 173,$/;"	e	enum:__anon65c7f6001403
ICON_LINK_NET	./vendor/raylib5/include/raygui.h	/^    ICON_LINK_NET                 = 171,$/;"	e	enum:__anon65c7f6001403
ICON_LOCK_CLOSE	./vendor/raylib5/include/raygui.h	/^    ICON_LOCK_CLOSE               = 137,$/;"	e	enum:__anon65c7f6001403
ICON_LOCK_OPEN	./vendor/raylib5/include/raygui.h	/^    ICON_LOCK_OPEN                = 138,$/;"	e	enum:__anon65c7f6001403
ICON_MAGNET	./vendor/raylib5/include/raygui.h	/^    ICON_MAGNET                   = 136,$/;"	e	enum:__anon65c7f6001403
ICON_MAILBOX	./vendor/raylib5/include/raygui.h	/^    ICON_MAILBOX                  = 180,$/;"	e	enum:__anon65c7f6001403
ICON_MIPMAPS	./vendor/raylib5/include/raygui.h	/^    ICON_MIPMAPS                  = 95,$/;"	e	enum:__anon65c7f6001403
ICON_MODE_2D	./vendor/raylib5/include/raygui.h	/^    ICON_MODE_2D                  = 160,$/;"	e	enum:__anon65c7f6001403
ICON_MODE_3D	./vendor/raylib5/include/raygui.h	/^    ICON_MODE_3D                  = 161,$/;"	e	enum:__anon65c7f6001403
ICON_MONITOR	./vendor/raylib5/include/raygui.h	/^    ICON_MONITOR                  = 181,$/;"	e	enum:__anon65c7f6001403
ICON_MUTATE	./vendor/raylib5/include/raygui.h	/^    ICON_MUTATE                   = 59,$/;"	e	enum:__anon65c7f6001403
ICON_MUTATE_FILL	./vendor/raylib5/include/raygui.h	/^    ICON_MUTATE_FILL              = 75,$/;"	e	enum:__anon65c7f6001403
ICON_NONE	./vendor/raylib5/include/raygui.h	/^    ICON_NONE                     = 0,$/;"	e	enum:__anon65c7f6001403
ICON_NOTEBOOK	./vendor/raylib5/include/raygui.h	/^    ICON_NOTEBOOK                 = 177,$/;"	e	enum:__anon65c7f6001403
ICON_OK_TICK	./vendor/raylib5/include/raygui.h	/^    ICON_OK_TICK                  = 112,$/;"	e	enum:__anon65c7f6001403
ICON_PENCIL	./vendor/raylib5/include/raygui.h	/^    ICON_PENCIL                   = 22,$/;"	e	enum:__anon65c7f6001403
ICON_PENCIL_BIG	./vendor/raylib5/include/raygui.h	/^    ICON_PENCIL_BIG               = 23,$/;"	e	enum:__anon65c7f6001403
ICON_PHOTO_CAMERA	./vendor/raylib5/include/raygui.h	/^    ICON_PHOTO_CAMERA             = 183,$/;"	e	enum:__anon65c7f6001403
ICON_PHOTO_CAMERA_FLASH	./vendor/raylib5/include/raygui.h	/^    ICON_PHOTO_CAMERA_FLASH       = 184,$/;"	e	enum:__anon65c7f6001403
ICON_PLAYER	./vendor/raylib5/include/raygui.h	/^    ICON_PLAYER                   = 149,$/;"	e	enum:__anon65c7f6001403
ICON_PLAYER_JUMP	./vendor/raylib5/include/raygui.h	/^    ICON_PLAYER_JUMP              = 150,$/;"	e	enum:__anon65c7f6001403
ICON_PLAYER_NEXT	./vendor/raylib5/include/raygui.h	/^    ICON_PLAYER_NEXT              = 134,$/;"	e	enum:__anon65c7f6001403
ICON_PLAYER_PAUSE	./vendor/raylib5/include/raygui.h	/^    ICON_PLAYER_PAUSE             = 132,$/;"	e	enum:__anon65c7f6001403
ICON_PLAYER_PLAY	./vendor/raylib5/include/raygui.h	/^    ICON_PLAYER_PLAY              = 131,$/;"	e	enum:__anon65c7f6001403
ICON_PLAYER_PLAY_BACK	./vendor/raylib5/include/raygui.h	/^    ICON_PLAYER_PLAY_BACK         = 130,$/;"	e	enum:__anon65c7f6001403
ICON_PLAYER_PREVIOUS	./vendor/raylib5/include/raygui.h	/^    ICON_PLAYER_PREVIOUS          = 129,$/;"	e	enum:__anon65c7f6001403
ICON_PLAYER_RECORD	./vendor/raylib5/include/raygui.h	/^    ICON_PLAYER_RECORD            = 135,$/;"	e	enum:__anon65c7f6001403
ICON_PLAYER_STOP	./vendor/raylib5/include/raygui.h	/^    ICON_PLAYER_STOP              = 133,$/;"	e	enum:__anon65c7f6001403
ICON_POT	./vendor/raylib5/include/raygui.h	/^    ICON_POT                      = 91,$/;"	e	enum:__anon65c7f6001403
ICON_PRINTER	./vendor/raylib5/include/raygui.h	/^    ICON_PRINTER                  = 182,$/;"	e	enum:__anon65c7f6001403
ICON_REDO	./vendor/raylib5/include/raygui.h	/^    ICON_REDO                     = 57,$/;"	e	enum:__anon65c7f6001403
ICON_REDO_FILL	./vendor/raylib5/include/raygui.h	/^    ICON_REDO_FILL                = 73,$/;"	e	enum:__anon65c7f6001403
ICON_REG_EXP	./vendor/raylib5/include/raygui.h	/^    ICON_REG_EXP                  = 216,$/;"	e	enum:__anon65c7f6001403
ICON_REPEAT	./vendor/raylib5/include/raygui.h	/^    ICON_REPEAT                   = 61,$/;"	e	enum:__anon65c7f6001403
ICON_REPEAT_FILL	./vendor/raylib5/include/raygui.h	/^    ICON_REPEAT_FILL              = 77,$/;"	e	enum:__anon65c7f6001403
ICON_REREDO	./vendor/raylib5/include/raygui.h	/^    ICON_REREDO                   = 58,$/;"	e	enum:__anon65c7f6001403
ICON_REREDO_FILL	./vendor/raylib5/include/raygui.h	/^    ICON_REREDO_FILL              = 74,$/;"	e	enum:__anon65c7f6001403
ICON_RESIZE	./vendor/raylib5/include/raygui.h	/^    ICON_RESIZE                   = 33,$/;"	e	enum:__anon65c7f6001403
ICON_RESTART	./vendor/raylib5/include/raygui.h	/^    ICON_RESTART                  = 211,$/;"	e	enum:__anon65c7f6001403
ICON_ROM	./vendor/raylib5/include/raygui.h	/^    ICON_ROM                      = 207,$/;"	e	enum:__anon65c7f6001403
ICON_ROTATE	./vendor/raylib5/include/raygui.h	/^    ICON_ROTATE                   = 60,$/;"	e	enum:__anon65c7f6001403
ICON_ROTATE_FILL	./vendor/raylib5/include/raygui.h	/^    ICON_ROTATE_FILL              = 76,$/;"	e	enum:__anon65c7f6001403
ICON_RUBBER	./vendor/raylib5/include/raygui.h	/^    ICON_RUBBER                   = 28,$/;"	e	enum:__anon65c7f6001403
ICON_SAND_TIMER	./vendor/raylib5/include/raygui.h	/^    ICON_SAND_TIMER               = 219,$/;"	e	enum:__anon65c7f6001403
ICON_SCALE	./vendor/raylib5/include/raygui.h	/^    ICON_SCALE                    = 32,$/;"	e	enum:__anon65c7f6001403
ICON_SHIELD	./vendor/raylib5/include/raygui.h	/^    ICON_SHIELD                   = 202,$/;"	e	enum:__anon65c7f6001403
ICON_SHUFFLE	./vendor/raylib5/include/raygui.h	/^    ICON_SHUFFLE                  = 62,$/;"	e	enum:__anon65c7f6001403
ICON_SHUFFLE_FILL	./vendor/raylib5/include/raygui.h	/^    ICON_SHUFFLE_FILL             = 78,$/;"	e	enum:__anon65c7f6001403
ICON_SPECIAL	./vendor/raylib5/include/raygui.h	/^    ICON_SPECIAL                  = 170,$/;"	e	enum:__anon65c7f6001403
ICON_SQUARE_TOGGLE	./vendor/raylib5/include/raygui.h	/^    ICON_SQUARE_TOGGLE            = 38,$/;"	e	enum:__anon65c7f6001403
ICON_STAR	./vendor/raylib5/include/raygui.h	/^    ICON_STAR                     = 157,$/;"	e	enum:__anon65c7f6001403
ICON_STEP_INTO	./vendor/raylib5/include/raygui.h	/^    ICON_STEP_INTO                = 209,$/;"	e	enum:__anon65c7f6001403
ICON_STEP_OUT	./vendor/raylib5/include/raygui.h	/^    ICON_STEP_OUT                 = 210,$/;"	e	enum:__anon65c7f6001403
ICON_STEP_OVER	./vendor/raylib5/include/raygui.h	/^    ICON_STEP_OVER                = 208,$/;"	e	enum:__anon65c7f6001403
ICON_SUITCASE	./vendor/raylib5/include/raygui.h	/^    ICON_SUITCASE                 = 178,$/;"	e	enum:__anon65c7f6001403
ICON_SUITCASE_ZIP	./vendor/raylib5/include/raygui.h	/^    ICON_SUITCASE_ZIP             = 179,$/;"	e	enum:__anon65c7f6001403
ICON_SYMMETRY	./vendor/raylib5/include/raygui.h	/^    ICON_SYMMETRY                 = 39,$/;"	e	enum:__anon65c7f6001403
ICON_SYMMETRY_HORIZONTAL	./vendor/raylib5/include/raygui.h	/^    ICON_SYMMETRY_HORIZONTAL      = 40,$/;"	e	enum:__anon65c7f6001403
ICON_SYMMETRY_VERTICAL	./vendor/raylib5/include/raygui.h	/^    ICON_SYMMETRY_VERTICAL        = 41,$/;"	e	enum:__anon65c7f6001403
ICON_TARGET	./vendor/raylib5/include/raygui.h	/^    ICON_TARGET                   = 64,$/;"	e	enum:__anon65c7f6001403
ICON_TARGET_BIG	./vendor/raylib5/include/raygui.h	/^    ICON_TARGET_BIG               = 50,$/;"	e	enum:__anon65c7f6001403
ICON_TARGET_BIG_FILL	./vendor/raylib5/include/raygui.h	/^    ICON_TARGET_BIG_FILL          = 66,$/;"	e	enum:__anon65c7f6001403
ICON_TARGET_MOVE	./vendor/raylib5/include/raygui.h	/^    ICON_TARGET_MOVE              = 51,$/;"	e	enum:__anon65c7f6001403
ICON_TARGET_MOVE_FILL	./vendor/raylib5/include/raygui.h	/^    ICON_TARGET_MOVE_FILL         = 67,$/;"	e	enum:__anon65c7f6001403
ICON_TARGET_POINT	./vendor/raylib5/include/raygui.h	/^    ICON_TARGET_POINT             = 48,$/;"	e	enum:__anon65c7f6001403
ICON_TARGET_SMALL	./vendor/raylib5/include/raygui.h	/^    ICON_TARGET_SMALL             = 49,$/;"	e	enum:__anon65c7f6001403
ICON_TARGET_SMALL_FILL	./vendor/raylib5/include/raygui.h	/^    ICON_TARGET_SMALL_FILL        = 65,$/;"	e	enum:__anon65c7f6001403
ICON_TEXT_A	./vendor/raylib5/include/raygui.h	/^    ICON_TEXT_A                   = 31,$/;"	e	enum:__anon65c7f6001403
ICON_TEXT_NOTES	./vendor/raylib5/include/raygui.h	/^    ICON_TEXT_NOTES               = 176,$/;"	e	enum:__anon65c7f6001403
ICON_TEXT_PADDING	./vendor/raylib5/include/raygui.h	/^        #define ICON_TEXT_PADDING /;"	d
ICON_TEXT_POPUP	./vendor/raylib5/include/raygui.h	/^    ICON_TEXT_POPUP               = 153,$/;"	e	enum:__anon65c7f6001403
ICON_TEXT_T	./vendor/raylib5/include/raygui.h	/^    ICON_TEXT_T                   = 30,$/;"	e	enum:__anon65c7f6001403
ICON_TOOLS	./vendor/raylib5/include/raygui.h	/^    ICON_TOOLS                    = 140,$/;"	e	enum:__anon65c7f6001403
ICON_UNDO	./vendor/raylib5/include/raygui.h	/^    ICON_UNDO                     = 56,$/;"	e	enum:__anon65c7f6001403
ICON_UNDO_FILL	./vendor/raylib5/include/raygui.h	/^    ICON_UNDO_FILL                = 72,$/;"	e	enum:__anon65c7f6001403
ICON_VERTICAL_BARS	./vendor/raylib5/include/raygui.h	/^    ICON_VERTICAL_BARS            = 188,$/;"	e	enum:__anon65c7f6001403
ICON_VERTICAL_BARS_FILL	./vendor/raylib5/include/raygui.h	/^    ICON_VERTICAL_BARS_FILL       = 189,$/;"	e	enum:__anon65c7f6001403
ICON_WARNING	./vendor/raylib5/include/raygui.h	/^    ICON_WARNING                  = 220,$/;"	e	enum:__anon65c7f6001403
ICON_WATER_DROP	./vendor/raylib5/include/raygui.h	/^    ICON_WATER_DROP               = 26,$/;"	e	enum:__anon65c7f6001403
ICON_WAVE	./vendor/raylib5/include/raygui.h	/^    ICON_WAVE                     = 124,$/;"	e	enum:__anon65c7f6001403
ICON_WAVE_SINUS	./vendor/raylib5/include/raygui.h	/^    ICON_WAVE_SINUS               = 125,$/;"	e	enum:__anon65c7f6001403
ICON_WAVE_SQUARE	./vendor/raylib5/include/raygui.h	/^    ICON_WAVE_SQUARE              = 126,$/;"	e	enum:__anon65c7f6001403
ICON_WAVE_TRIANGULAR	./vendor/raylib5/include/raygui.h	/^    ICON_WAVE_TRIANGULAR          = 127,$/;"	e	enum:__anon65c7f6001403
ICON_WINDOW	./vendor/raylib5/include/raygui.h	/^    ICON_WINDOW                   = 198,$/;"	e	enum:__anon65c7f6001403
ICON_ZOOM_ALL	./vendor/raylib5/include/raygui.h	/^    ICON_ZOOM_ALL                 = 106,$/;"	e	enum:__anon65c7f6001403
ICON_ZOOM_BIG	./vendor/raylib5/include/raygui.h	/^    ICON_ZOOM_BIG                 = 105,$/;"	e	enum:__anon65c7f6001403
ICON_ZOOM_CENTER	./vendor/raylib5/include/raygui.h	/^    ICON_ZOOM_CENTER              = 107,$/;"	e	enum:__anon65c7f6001403
ICON_ZOOM_MEDIUM	./vendor/raylib5/include/raygui.h	/^    ICON_ZOOM_MEDIUM              = 104,$/;"	e	enum:__anon65c7f6001403
ICON_ZOOM_SMALL	./vendor/raylib5/include/raygui.h	/^    ICON_ZOOM_SMALL               = 103,$/;"	e	enum:__anon65c7f6001403
IKey	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^typedef int64_t IKey;$/;"	t	typeref:typename:int64_t	file:
INACTIVE	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    static constexpr size_type INACTIVE = 0xFFFF;$/;"	v	namespace:emhash7	typeref:typename:size_type
INCLUDE_PATHS	./Makefile	/^INCLUDE_PATHS = \\$/;"	m
INIT_CACHE	./src/flecs.c	/^#define INIT_CACHE(/;"	d	file:
INSERT	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anonfac950030103	file:
INSERT	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anonca721fef0103	file:
INSERT	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anona03d81450103	file:
INSERT	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anon0565975a0103	file:
INSERT	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anon603333870103	file:
INT64_MAX_F	./src/flecs.c	/^#define INT64_MAX_F /;"	d	file:
IPtr	./src/flecs.h	/^static const primitive_kind_t IPtr = EcsIPtr;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
ITER	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anonfac950030103	file:
ITER	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anonca721fef0103	file:
ITER	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anona03d81450103	file:
ITER	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anon0565975a0103	file:
ITER	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anon603333870103	file:
IValue	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^typedef int64_t IValue;$/;"	t	typeref:typename:int64_t	file:
I_PICOBENCH_ASSERT	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^#   define I_PICOBENCH_ASSERT /;"	d
I_PICOBENCH_ASSERT	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^#   define I_PICOBENCH_ASSERT(/;"	d
I_PICOBENCH_PP_CAT	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^#define I_PICOBENCH_PP_CAT(/;"	d
I_PICOBENCH_PP_INTERNAL_CAT	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^#define I_PICOBENCH_PP_INTERNAL_CAT(/;"	d
IdArray	./src/flecs.h	/^    using IdArray = flecs::array<id_t, sizeof...(Args)>;$/;"	t	struct:flecs::_::entity_with_delegate_impl
Identifier	./src/flecs.h	/^using Identifier = EcsIdentifier;$/;"	t	namespace:flecs	typeref:typename:EcsIdentifier
Image	./src/flecs.h	/^struct Image { };$/;"	s	struct:flecs::units::uri
Image	./vendor/raylib5/include/raygui.h	/^    typedef struct Image {$/;"	s
Image	./vendor/raylib5/include/raygui.h	/^    } Image;$/;"	t	typeref:struct:Image
Image	./vendor/raylib5/include/raylib.h	/^typedef struct Image {$/;"	s
Image	./vendor/raylib5/include/raylib.h	/^} Image;$/;"	t	typeref:struct:Image
Implementation and examples	./vendor/STC/docs/coroutine_api.md	/^## Implementation and examples$/;"	s	chapter:STC [coroutine](../include/stc/coroutine.h): Coroutines
In	./src/flecs.h	/^    In = EcsIn,$/;"	e	enum:flecs::inout_kind_t
InOut	./src/flecs.h	/^    InOut = EcsInOut,$/;"	e	enum:flecs::inout_kind_t
InOutDefault	./src/flecs.h	/^    InOutDefault = EcsInOutDefault,$/;"	e	enum:flecs::inout_kind_t
InOutNone	./src/flecs.h	/^    InOutNone = EcsInOutNone,$/;"	e	enum:flecs::inout_kind_t
Info	./src/flecs.h	/^    struct Info { };$/;"	s	struct:flecs::alerts
InfoMask	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    static constexpr size_t InfoMask = InitialInfoInc - 1U;$/;"	m	class:robin_hood::detail::Table	typeref:typename:size_t
InfoType	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    using InfoType = uint32_t;$/;"	t	class:robin_hood::detail::Table	typeref:typename:uint32_t
InitialInfoHashShift	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    static constexpr uint8_t InitialInfoHashShift = 0;$/;"	m	class:robin_hood::detail::Table	typeref:typename:uint8_t
InitialInfoInc	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    static constexpr uint8_t InitialInfoInc = 1U << InitialInfoNumBits;$/;"	m	class:robin_hood::detail::Table	typeref:typename:uint8_t
InitialInfoNumBits	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    static constexpr uint32_t InitialInfoNumBits = 5;$/;"	m	class:robin_hood::detail::Table	typeref:typename:uint32_t
InitialNumElements	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    static constexpr size_t InitialNumElements = sizeof(uint64_t);$/;"	m	class:robin_hood::detail::Table	typeref:typename:size_t
InsertionState	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    enum class InsertionState { overflow_error, key_found, new_node, overwrite_node };$/;"	g	class:robin_hood::detail::Table
Installation	./vendor/STC/README.md	/^## Installation$/;"	s	chapter:STC - Smart Template Containers
Instance	./src/flecs.h	/^    struct Instance { };$/;"	s	struct:flecs::metrics
Instance	./src/flecs.h	/^    using Instance = EcsAlertInstance;$/;"	t	struct:flecs::alerts	typeref:typename:EcsAlertInstance
Integer range loops	./vendor/STC/docs/algorithm_api.md	/^## Integer range loops$/;"	s	chapter:STC Algorithms
IntermediateRep	./vendor/fmt/include/chrono.h	/^  using IntermediateRep =$/;"	t	function:safe_duration_cast::safe_duration_cast
Iptr	./src/flecs.h	/^static const flecs::entity_t Iptr = ecs_id(ecs_iptr_t);$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
IsA	./src/flecs.h	/^static const flecs::entity_t IsA = EcsIsA;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
IsEntity	./src/flecs.h	/^static const uint32_t IsEntity = EcsIsEntity;$/;"	v	namespace:flecs	typeref:typename:const uint32_t
IsVariable	./src/flecs.h	/^static const uint32_t IsVariable = EcsIsVariable;$/;"	v	namespace:flecs	typeref:typename:const uint32_t
Iter	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        Iter(Iter<OtherIsConst> const& other) noexcept$/;"	f	class:robin_hood::detail::Table::Iter
Iter	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        Iter(NodePtr valPtr, uint8_t const* infoPtr) noexcept$/;"	f	class:robin_hood::detail::Table::Iter
Iter	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        Iter(NodePtr valPtr, uint8_t const* infoPtr,$/;"	f	class:robin_hood::detail::Table::Iter
Iter	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    class Iter {$/;"	c	class:robin_hood::detail::Table
IterOnly	./src/flecs.h	/^    static constexpr bool IterOnly = arity<Func>::value == 1;$/;"	m	struct:flecs::_::iter_delegate	typeref:typename:bool
Iterable	./src/flecs.h	/^using Iterable = EcsIterable;$/;"	t	namespace:flecs	typeref:typename:EcsIterable
Iterate through regex matches, *c_formatch*	./vendor/STC/docs/cregex_api.md	/^### Iterate through regex matches, *c_formatch*$/;"	S	section:STC [cregex](../include/stc/cregex.h): Regular Expressions""Usage
Iterate tokens with *c_fortoken*, *c_fortoken_sv*	./vendor/STC/docs/csview_api.md	/^#### Iterate tokens with *c_fortoken*, *c_fortoken_sv*$/;"	t	section:STC [csview](../include/stc/csview.h): Sub-string View""Methods
JsonArrayClose	./src/flecs.c	/^    JsonArrayClose,$/;"	e	enum:ecs_json_token_t	file:
JsonArrayOpen	./src/flecs.c	/^    JsonArrayOpen,$/;"	e	enum:ecs_json_token_t	file:
JsonBoolean	./src/flecs.c	/^    JsonBoolean,$/;"	e	enum:ecs_json_token_t	file:
JsonColon	./src/flecs.c	/^    JsonColon,$/;"	e	enum:ecs_json_token_t	file:
JsonComma	./src/flecs.c	/^    JsonComma,$/;"	e	enum:ecs_json_token_t	file:
JsonFalse	./src/flecs.c	/^    JsonFalse,$/;"	e	enum:ecs_json_token_t	file:
JsonInvalid	./src/flecs.c	/^    JsonInvalid$/;"	e	enum:ecs_json_token_t	file:
JsonLargeInt	./src/flecs.c	/^    JsonLargeInt,$/;"	e	enum:ecs_json_token_t	file:
JsonLargeString	./src/flecs.c	/^    JsonLargeString,$/;"	e	enum:ecs_json_token_t	file:
JsonNull	./src/flecs.c	/^    JsonNull,$/;"	e	enum:ecs_json_token_t	file:
JsonNumber	./src/flecs.c	/^    JsonNumber,$/;"	e	enum:ecs_json_token_t	file:
JsonObjectClose	./src/flecs.c	/^    JsonObjectClose,$/;"	e	enum:ecs_json_token_t	file:
JsonObjectOpen	./src/flecs.c	/^    JsonObjectOpen,$/;"	e	enum:ecs_json_token_t	file:
JsonString	./src/flecs.c	/^    JsonString,$/;"	e	enum:ecs_json_token_t	file:
JsonTrue	./src/flecs.c	/^    JsonTrue,$/;"	e	enum:ecs_json_token_t	file:
KC	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    static constexpr uint64_t KC = UINT64_C(11400714819323198485);$/;"	m	class:emhash7::HashMap	typeref:typename:uint64_t
KEY_A	./vendor/raylib5/include/raylib.h	/^    KEY_A               = 65,       \/\/ Key: A | a$/;"	e	enum:__anon661bbe320403
KEY_APOSTROPHE	./vendor/raylib5/include/raylib.h	/^    KEY_APOSTROPHE      = 39,       \/\/ Key: '$/;"	e	enum:__anon661bbe320403
KEY_B	./vendor/raylib5/include/raylib.h	/^    KEY_B               = 66,       \/\/ Key: B | b$/;"	e	enum:__anon661bbe320403
KEY_BACK	./vendor/raylib5/include/raylib.h	/^    KEY_BACK            = 4,        \/\/ Key: Android back button$/;"	e	enum:__anon661bbe320403
KEY_BACKSLASH	./vendor/raylib5/include/raylib.h	/^    KEY_BACKSLASH       = 92,       \/\/ Key: '\\'$/;"	e	enum:__anon661bbe320403
KEY_BACKSPACE	./vendor/raylib5/include/raygui.h	/^#define KEY_BACKSPACE /;"	d
KEY_BACKSPACE	./vendor/raylib5/include/raylib.h	/^    KEY_BACKSPACE       = 259,      \/\/ Key: Backspace$/;"	e	enum:__anon661bbe320403
KEY_C	./vendor/raylib5/include/raylib.h	/^    KEY_C               = 67,       \/\/ Key: C | c$/;"	e	enum:__anon661bbe320403
KEY_CAPS_LOCK	./vendor/raylib5/include/raylib.h	/^    KEY_CAPS_LOCK       = 280,      \/\/ Key: Caps lock$/;"	e	enum:__anon661bbe320403
KEY_COMMA	./vendor/raylib5/include/raylib.h	/^    KEY_COMMA           = 44,       \/\/ Key: ,$/;"	e	enum:__anon661bbe320403
KEY_D	./vendor/raylib5/include/raylib.h	/^    KEY_D               = 68,       \/\/ Key: D | d$/;"	e	enum:__anon661bbe320403
KEY_DELETE	./vendor/raylib5/include/raylib.h	/^    KEY_DELETE          = 261,      \/\/ Key: Del$/;"	e	enum:__anon661bbe320403
KEY_DOWN	./vendor/raylib5/include/raygui.h	/^#define KEY_DOWN /;"	d
KEY_DOWN	./vendor/raylib5/include/raylib.h	/^    KEY_DOWN            = 264,      \/\/ Key: Cursor down$/;"	e	enum:__anon661bbe320403
KEY_E	./vendor/raylib5/include/raylib.h	/^    KEY_E               = 69,       \/\/ Key: E | e$/;"	e	enum:__anon661bbe320403
KEY_EIGHT	./vendor/raylib5/include/raylib.h	/^    KEY_EIGHT           = 56,       \/\/ Key: 8$/;"	e	enum:__anon661bbe320403
KEY_END	./vendor/raylib5/include/raylib.h	/^    KEY_END             = 269,      \/\/ Key: End$/;"	e	enum:__anon661bbe320403
KEY_ENTER	./vendor/raylib5/include/raygui.h	/^#define KEY_ENTER /;"	d
KEY_ENTER	./vendor/raylib5/include/raylib.h	/^    KEY_ENTER           = 257,      \/\/ Key: Enter$/;"	e	enum:__anon661bbe320403
KEY_EQUAL	./vendor/raylib5/include/raylib.h	/^    KEY_EQUAL           = 61,       \/\/ Key: =$/;"	e	enum:__anon661bbe320403
KEY_ESCAPE	./vendor/raylib5/include/raylib.h	/^    KEY_ESCAPE          = 256,      \/\/ Key: Esc$/;"	e	enum:__anon661bbe320403
KEY_F	./vendor/raylib5/include/raylib.h	/^    KEY_F               = 70,       \/\/ Key: F | f$/;"	e	enum:__anon661bbe320403
KEY_F1	./vendor/raylib5/include/raylib.h	/^    KEY_F1              = 290,      \/\/ Key: F1$/;"	e	enum:__anon661bbe320403
KEY_F10	./vendor/raylib5/include/raylib.h	/^    KEY_F10             = 299,      \/\/ Key: F10$/;"	e	enum:__anon661bbe320403
KEY_F11	./vendor/raylib5/include/raylib.h	/^    KEY_F11             = 300,      \/\/ Key: F11$/;"	e	enum:__anon661bbe320403
KEY_F12	./vendor/raylib5/include/raylib.h	/^    KEY_F12             = 301,      \/\/ Key: F12$/;"	e	enum:__anon661bbe320403
KEY_F2	./vendor/raylib5/include/raylib.h	/^    KEY_F2              = 291,      \/\/ Key: F2$/;"	e	enum:__anon661bbe320403
KEY_F3	./vendor/raylib5/include/raylib.h	/^    KEY_F3              = 292,      \/\/ Key: F3$/;"	e	enum:__anon661bbe320403
KEY_F4	./vendor/raylib5/include/raylib.h	/^    KEY_F4              = 293,      \/\/ Key: F4$/;"	e	enum:__anon661bbe320403
KEY_F5	./vendor/raylib5/include/raylib.h	/^    KEY_F5              = 294,      \/\/ Key: F5$/;"	e	enum:__anon661bbe320403
KEY_F6	./vendor/raylib5/include/raylib.h	/^    KEY_F6              = 295,      \/\/ Key: F6$/;"	e	enum:__anon661bbe320403
KEY_F7	./vendor/raylib5/include/raylib.h	/^    KEY_F7              = 296,      \/\/ Key: F7$/;"	e	enum:__anon661bbe320403
KEY_F8	./vendor/raylib5/include/raylib.h	/^    KEY_F8              = 297,      \/\/ Key: F8$/;"	e	enum:__anon661bbe320403
KEY_F9	./vendor/raylib5/include/raylib.h	/^    KEY_F9              = 298,      \/\/ Key: F9$/;"	e	enum:__anon661bbe320403
KEY_FIVE	./vendor/raylib5/include/raylib.h	/^    KEY_FIVE            = 53,       \/\/ Key: 5$/;"	e	enum:__anon661bbe320403
KEY_FOUR	./vendor/raylib5/include/raylib.h	/^    KEY_FOUR            = 52,       \/\/ Key: 4$/;"	e	enum:__anon661bbe320403
KEY_G	./vendor/raylib5/include/raylib.h	/^    KEY_G               = 71,       \/\/ Key: G | g$/;"	e	enum:__anon661bbe320403
KEY_GRAVE	./vendor/raylib5/include/raylib.h	/^    KEY_GRAVE           = 96,       \/\/ Key: `$/;"	e	enum:__anon661bbe320403
KEY_H	./vendor/raylib5/include/raylib.h	/^    KEY_H               = 72,       \/\/ Key: H | h$/;"	e	enum:__anon661bbe320403
KEY_HOME	./vendor/raylib5/include/raylib.h	/^    KEY_HOME            = 268,      \/\/ Key: Home$/;"	e	enum:__anon661bbe320403
KEY_I	./vendor/raylib5/include/raylib.h	/^    KEY_I               = 73,       \/\/ Key: I | i$/;"	e	enum:__anon661bbe320403
KEY_INSERT	./vendor/raylib5/include/raylib.h	/^    KEY_INSERT          = 260,      \/\/ Key: Ins$/;"	e	enum:__anon661bbe320403
KEY_J	./vendor/raylib5/include/raylib.h	/^    KEY_J               = 74,       \/\/ Key: J | j$/;"	e	enum:__anon661bbe320403
KEY_K	./vendor/raylib5/include/raylib.h	/^    KEY_K               = 75,       \/\/ Key: K | k$/;"	e	enum:__anon661bbe320403
KEY_KB_MENU	./vendor/raylib5/include/raylib.h	/^    KEY_KB_MENU         = 348,      \/\/ Key: KB menu$/;"	e	enum:__anon661bbe320403
KEY_KP_0	./vendor/raylib5/include/raylib.h	/^    KEY_KP_0            = 320,      \/\/ Key: Keypad 0$/;"	e	enum:__anon661bbe320403
KEY_KP_1	./vendor/raylib5/include/raylib.h	/^    KEY_KP_1            = 321,      \/\/ Key: Keypad 1$/;"	e	enum:__anon661bbe320403
KEY_KP_2	./vendor/raylib5/include/raylib.h	/^    KEY_KP_2            = 322,      \/\/ Key: Keypad 2$/;"	e	enum:__anon661bbe320403
KEY_KP_3	./vendor/raylib5/include/raylib.h	/^    KEY_KP_3            = 323,      \/\/ Key: Keypad 3$/;"	e	enum:__anon661bbe320403
KEY_KP_4	./vendor/raylib5/include/raylib.h	/^    KEY_KP_4            = 324,      \/\/ Key: Keypad 4$/;"	e	enum:__anon661bbe320403
KEY_KP_5	./vendor/raylib5/include/raylib.h	/^    KEY_KP_5            = 325,      \/\/ Key: Keypad 5$/;"	e	enum:__anon661bbe320403
KEY_KP_6	./vendor/raylib5/include/raylib.h	/^    KEY_KP_6            = 326,      \/\/ Key: Keypad 6$/;"	e	enum:__anon661bbe320403
KEY_KP_7	./vendor/raylib5/include/raylib.h	/^    KEY_KP_7            = 327,      \/\/ Key: Keypad 7$/;"	e	enum:__anon661bbe320403
KEY_KP_8	./vendor/raylib5/include/raylib.h	/^    KEY_KP_8            = 328,      \/\/ Key: Keypad 8$/;"	e	enum:__anon661bbe320403
KEY_KP_9	./vendor/raylib5/include/raylib.h	/^    KEY_KP_9            = 329,      \/\/ Key: Keypad 9$/;"	e	enum:__anon661bbe320403
KEY_KP_ADD	./vendor/raylib5/include/raylib.h	/^    KEY_KP_ADD          = 334,      \/\/ Key: Keypad +$/;"	e	enum:__anon661bbe320403
KEY_KP_DECIMAL	./vendor/raylib5/include/raylib.h	/^    KEY_KP_DECIMAL      = 330,      \/\/ Key: Keypad .$/;"	e	enum:__anon661bbe320403
KEY_KP_DIVIDE	./vendor/raylib5/include/raylib.h	/^    KEY_KP_DIVIDE       = 331,      \/\/ Key: Keypad \/$/;"	e	enum:__anon661bbe320403
KEY_KP_ENTER	./vendor/raylib5/include/raylib.h	/^    KEY_KP_ENTER        = 335,      \/\/ Key: Keypad Enter$/;"	e	enum:__anon661bbe320403
KEY_KP_EQUAL	./vendor/raylib5/include/raylib.h	/^    KEY_KP_EQUAL        = 336,      \/\/ Key: Keypad =$/;"	e	enum:__anon661bbe320403
KEY_KP_MULTIPLY	./vendor/raylib5/include/raylib.h	/^    KEY_KP_MULTIPLY     = 332,      \/\/ Key: Keypad *$/;"	e	enum:__anon661bbe320403
KEY_KP_SUBTRACT	./vendor/raylib5/include/raylib.h	/^    KEY_KP_SUBTRACT     = 333,      \/\/ Key: Keypad -$/;"	e	enum:__anon661bbe320403
KEY_L	./vendor/raylib5/include/raylib.h	/^    KEY_L               = 76,       \/\/ Key: L | l$/;"	e	enum:__anon661bbe320403
KEY_LEFT	./vendor/raylib5/include/raygui.h	/^#define KEY_LEFT /;"	d
KEY_LEFT	./vendor/raylib5/include/raylib.h	/^    KEY_LEFT            = 263,      \/\/ Key: Cursor left$/;"	e	enum:__anon661bbe320403
KEY_LEFT_ALT	./vendor/raylib5/include/raylib.h	/^    KEY_LEFT_ALT        = 342,      \/\/ Key: Alt left$/;"	e	enum:__anon661bbe320403
KEY_LEFT_BRACKET	./vendor/raylib5/include/raylib.h	/^    KEY_LEFT_BRACKET    = 91,       \/\/ Key: [$/;"	e	enum:__anon661bbe320403
KEY_LEFT_CONTROL	./vendor/raylib5/include/raylib.h	/^    KEY_LEFT_CONTROL    = 341,      \/\/ Key: Control left$/;"	e	enum:__anon661bbe320403
KEY_LEFT_SHIFT	./vendor/raylib5/include/raylib.h	/^    KEY_LEFT_SHIFT      = 340,      \/\/ Key: Shift left$/;"	e	enum:__anon661bbe320403
KEY_LEFT_SUPER	./vendor/raylib5/include/raylib.h	/^    KEY_LEFT_SUPER      = 343,      \/\/ Key: Super left$/;"	e	enum:__anon661bbe320403
KEY_M	./vendor/raylib5/include/raylib.h	/^    KEY_M               = 77,       \/\/ Key: M | m$/;"	e	enum:__anon661bbe320403
KEY_MENU	./vendor/raylib5/include/raylib.h	/^    KEY_MENU            = 5,        \/\/ Key: Android menu button$/;"	e	enum:__anon661bbe320403
KEY_MINUS	./vendor/raylib5/include/raylib.h	/^    KEY_MINUS           = 45,       \/\/ Key: -$/;"	e	enum:__anon661bbe320403
KEY_N	./vendor/raylib5/include/raylib.h	/^    KEY_N               = 78,       \/\/ Key: N | n$/;"	e	enum:__anon661bbe320403
KEY_NINE	./vendor/raylib5/include/raylib.h	/^    KEY_NINE            = 57,       \/\/ Key: 9$/;"	e	enum:__anon661bbe320403
KEY_NULL	./vendor/raylib5/include/raylib.h	/^    KEY_NULL            = 0,        \/\/ Key: NULL, used for no key pressed$/;"	e	enum:__anon661bbe320403
KEY_NUM_LOCK	./vendor/raylib5/include/raylib.h	/^    KEY_NUM_LOCK        = 282,      \/\/ Key: Num lock$/;"	e	enum:__anon661bbe320403
KEY_O	./vendor/raylib5/include/raylib.h	/^    KEY_O               = 79,       \/\/ Key: O | o$/;"	e	enum:__anon661bbe320403
KEY_ONE	./vendor/raylib5/include/raylib.h	/^    KEY_ONE             = 49,       \/\/ Key: 1$/;"	e	enum:__anon661bbe320403
KEY_P	./vendor/raylib5/include/raylib.h	/^    KEY_P               = 80,       \/\/ Key: P | p$/;"	e	enum:__anon661bbe320403
KEY_PAGE_DOWN	./vendor/raylib5/include/raylib.h	/^    KEY_PAGE_DOWN       = 267,      \/\/ Key: Page down$/;"	e	enum:__anon661bbe320403
KEY_PAGE_UP	./vendor/raylib5/include/raylib.h	/^    KEY_PAGE_UP         = 266,      \/\/ Key: Page up$/;"	e	enum:__anon661bbe320403
KEY_PAUSE	./vendor/raylib5/include/raylib.h	/^    KEY_PAUSE           = 284,      \/\/ Key: Pause$/;"	e	enum:__anon661bbe320403
KEY_PERIOD	./vendor/raylib5/include/raylib.h	/^    KEY_PERIOD          = 46,       \/\/ Key: .$/;"	e	enum:__anon661bbe320403
KEY_PRINT_SCREEN	./vendor/raylib5/include/raylib.h	/^    KEY_PRINT_SCREEN    = 283,      \/\/ Key: Print screen$/;"	e	enum:__anon661bbe320403
KEY_Q	./vendor/raylib5/include/raylib.h	/^    KEY_Q               = 81,       \/\/ Key: Q | q$/;"	e	enum:__anon661bbe320403
KEY_R	./vendor/raylib5/include/raylib.h	/^    KEY_R               = 82,       \/\/ Key: R | r$/;"	e	enum:__anon661bbe320403
KEY_RIGHT	./vendor/raylib5/include/raygui.h	/^#define KEY_RIGHT /;"	d
KEY_RIGHT	./vendor/raylib5/include/raylib.h	/^    KEY_RIGHT           = 262,      \/\/ Key: Cursor right$/;"	e	enum:__anon661bbe320403
KEY_RIGHT_ALT	./vendor/raylib5/include/raylib.h	/^    KEY_RIGHT_ALT       = 346,      \/\/ Key: Alt right$/;"	e	enum:__anon661bbe320403
KEY_RIGHT_BRACKET	./vendor/raylib5/include/raylib.h	/^    KEY_RIGHT_BRACKET   = 93,       \/\/ Key: ]$/;"	e	enum:__anon661bbe320403
KEY_RIGHT_CONTROL	./vendor/raylib5/include/raylib.h	/^    KEY_RIGHT_CONTROL   = 345,      \/\/ Key: Control right$/;"	e	enum:__anon661bbe320403
KEY_RIGHT_SHIFT	./vendor/raylib5/include/raylib.h	/^    KEY_RIGHT_SHIFT     = 344,      \/\/ Key: Shift right$/;"	e	enum:__anon661bbe320403
KEY_RIGHT_SUPER	./vendor/raylib5/include/raylib.h	/^    KEY_RIGHT_SUPER     = 347,      \/\/ Key: Super right$/;"	e	enum:__anon661bbe320403
KEY_S	./vendor/raylib5/include/raylib.h	/^    KEY_S               = 83,       \/\/ Key: S | s$/;"	e	enum:__anon661bbe320403
KEY_SCROLL_LOCK	./vendor/raylib5/include/raylib.h	/^    KEY_SCROLL_LOCK     = 281,      \/\/ Key: Scroll down$/;"	e	enum:__anon661bbe320403
KEY_SEMICOLON	./vendor/raylib5/include/raylib.h	/^    KEY_SEMICOLON       = 59,       \/\/ Key: ;$/;"	e	enum:__anon661bbe320403
KEY_SEVEN	./vendor/raylib5/include/raylib.h	/^    KEY_SEVEN           = 55,       \/\/ Key: 7$/;"	e	enum:__anon661bbe320403
KEY_SIX	./vendor/raylib5/include/raylib.h	/^    KEY_SIX             = 54,       \/\/ Key: 6$/;"	e	enum:__anon661bbe320403
KEY_SLASH	./vendor/raylib5/include/raylib.h	/^    KEY_SLASH           = 47,       \/\/ Key: \/$/;"	e	enum:__anon661bbe320403
KEY_SPACE	./vendor/raylib5/include/raylib.h	/^    KEY_SPACE           = 32,       \/\/ Key: Space$/;"	e	enum:__anon661bbe320403
KEY_T	./vendor/raylib5/include/raylib.h	/^    KEY_T               = 84,       \/\/ Key: T | t$/;"	e	enum:__anon661bbe320403
KEY_TAB	./vendor/raylib5/include/raylib.h	/^    KEY_TAB             = 258,      \/\/ Key: Tab$/;"	e	enum:__anon661bbe320403
KEY_THREE	./vendor/raylib5/include/raylib.h	/^    KEY_THREE           = 51,       \/\/ Key: 3$/;"	e	enum:__anon661bbe320403
KEY_TWO	./vendor/raylib5/include/raylib.h	/^    KEY_TWO             = 50,       \/\/ Key: 2$/;"	e	enum:__anon661bbe320403
KEY_U	./vendor/raylib5/include/raylib.h	/^    KEY_U               = 85,       \/\/ Key: U | u$/;"	e	enum:__anon661bbe320403
KEY_UP	./vendor/raylib5/include/raygui.h	/^#define KEY_UP /;"	d
KEY_UP	./vendor/raylib5/include/raylib.h	/^    KEY_UP              = 265,      \/\/ Key: Cursor up$/;"	e	enum:__anon661bbe320403
KEY_V	./vendor/raylib5/include/raylib.h	/^    KEY_V               = 86,       \/\/ Key: V | v$/;"	e	enum:__anon661bbe320403
KEY_VOLUME_DOWN	./vendor/raylib5/include/raylib.h	/^    KEY_VOLUME_DOWN     = 25        \/\/ Key: Android volume down button$/;"	e	enum:__anon661bbe320403
KEY_VOLUME_UP	./vendor/raylib5/include/raylib.h	/^    KEY_VOLUME_UP       = 24,       \/\/ Key: Android volume up button$/;"	e	enum:__anon661bbe320403
KEY_W	./vendor/raylib5/include/raylib.h	/^    KEY_W               = 87,       \/\/ Key: W | w$/;"	e	enum:__anon661bbe320403
KEY_X	./vendor/raylib5/include/raylib.h	/^    KEY_X               = 88,       \/\/ Key: X | x$/;"	e	enum:__anon661bbe320403
KEY_Y	./vendor/raylib5/include/raylib.h	/^    KEY_Y               = 89,       \/\/ Key: Y | y$/;"	e	enum:__anon661bbe320403
KEY_Z	./vendor/raylib5/include/raylib.h	/^    KEY_Z               = 90,       \/\/ Key: Z | z$/;"	e	enum:__anon661bbe320403
KEY_ZERO	./vendor/raylib5/include/raylib.h	/^    KEY_ZERO            = 48,       \/\/ Key: 0$/;"	e	enum:__anon661bbe320403
KHASH_DECLARE	./vendor/STC/misc/benchmarks/external/khash.h	/^#define KHASH_DECLARE(/;"	d
KHASH_INIT	./vendor/STC/misc/benchmarks/external/khash.h	/^#define KHASH_INIT(/;"	d
KHASH_INIT2	./vendor/STC/misc/benchmarks/external/khash.h	/^#define KHASH_INIT2(/;"	d
KHASH_MAP_INIT_INT	./vendor/STC/misc/benchmarks/external/khash.h	/^#define KHASH_MAP_INIT_INT(/;"	d
KHASH_MAP_INIT_INT64	./vendor/STC/misc/benchmarks/external/khash.h	/^#define KHASH_MAP_INIT_INT64(/;"	d
KHASH_MAP_INIT_STR	./vendor/STC/misc/benchmarks/external/khash.h	/^#define KHASH_MAP_INIT_STR(/;"	d
KHASH_SET_INIT_INT	./vendor/STC/misc/benchmarks/external/khash.h	/^#define KHASH_SET_INIT_INT(/;"	d
KHASH_SET_INIT_INT64	./vendor/STC/misc/benchmarks/external/khash.h	/^#define KHASH_SET_INIT_INT64(/;"	d
KHASH_SET_INIT_STR	./vendor/STC/misc/benchmarks/external/khash.h	/^#define KHASH_SET_INIT_STR(/;"	d
KMAP_BUCKETS	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define KMAP_BUCKETS(/;"	d	file:
KMAP_CLEAR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define KMAP_CLEAR(/;"	d	file:
KMAP_DTOR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define KMAP_DTOR(/;"	d	file:
KMAP_EMPLACE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define KMAP_EMPLACE(/;"	d	file:
KMAP_ERASE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define KMAP_ERASE(/;"	d	file:
KMAP_FIND	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define KMAP_FIND(/;"	d	file:
KMAP_FOR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define KMAP_FOR(/;"	d	file:
KMAP_ITEM	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define KMAP_ITEM(/;"	d	file:
KMAP_PUT	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define KMAP_PUT(/;"	d	file:
KMAP_SETUP	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define KMAP_SETUP(/;"	d	file:
KMAP_SIZE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define KMAP_SIZE(/;"	d	file:
Kelvin	./src/flecs.h	/^struct Kelvin { };$/;"	s	struct:flecs::units::temperature
KeyOrValueEquality	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    KeyOrValueEquality(const key_equal & equality)$/;"	f	struct:ska::detailv3::KeyOrValueEquality
KeyOrValueEquality	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^struct KeyOrValueEquality : functor_storage<bool, key_equal>$/;"	s	namespace:ska::detailv3
KeyOrValueHasher	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    KeyOrValueHasher(const hasher & hash)$/;"	f	struct:ska::detailv3::KeyOrValueHasher
KeyOrValueHasher	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^struct KeyOrValueHasher : functor_storage<size_t, hasher>$/;"	s	namespace:ska::detailv3
KeySelect	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  class KeySelect {$/;"	c	class:tsl::robin_map
KeyboardKey	./vendor/raylib5/include/raylib.h	/^} KeyboardKey;$/;"	t	typeref:enum:__anon661bbe320403
Kibi	./src/flecs.h	/^struct Kibi { };$/;"	s	struct:flecs::units
KibiBytes	./src/flecs.h	/^struct KibiBytes { };$/;"	s	struct:flecs::units::data
Kilo	./src/flecs.h	/^struct Kilo { };$/;"	s	struct:flecs::units
KiloBits	./src/flecs.h	/^struct KiloBits { };$/;"	s	struct:flecs::units::data
KiloBitsPerSecond	./src/flecs.h	/^struct KiloBitsPerSecond { };$/;"	s	struct:flecs::units::datarate
KiloBytes	./src/flecs.h	/^struct KiloBytes { };$/;"	s	struct:flecs::units::data
KiloBytesPerSecond	./src/flecs.h	/^struct KiloBytesPerSecond { };$/;"	s	struct:flecs::units::datarate
KiloGrams	./src/flecs.h	/^struct KiloGrams { };$/;"	s	struct:flecs::units::mass
KiloHertz	./src/flecs.h	/^struct KiloHertz { };$/;"	s	struct:flecs::units::frequency
KiloMeters	./src/flecs.h	/^struct KiloMeters { };$/;"	s	struct:flecs::units::length
KiloMetersPerHour	./src/flecs.h	/^struct KiloMetersPerHour { };$/;"	s	struct:flecs::units::speed
KiloMetersPerSecond	./src/flecs.h	/^struct KiloMetersPerSecond { };$/;"	s	struct:flecs::units::speed
L	./src/log.c	/^} L;$/;"	v	typeref:struct:__anon6383736c0208	file:
LABEL	./vendor/STC/misc/benchmarks/various/binsearch_bench.c	/^        #define LABEL /;"	d	file:
LABEL	./vendor/raylib5/include/raygui.h	/^    LABEL,          \/\/ Used also for: LABELBUTTON$/;"	e	enum:__anon65c7f6000603
LBRACE	./src/glyph.h	/^#define    LBRACE /;"	d
LBRACKET	./src/glyph.h	/^#define    LBRACKET /;"	d
LDFLAGS	./Makefile	/^LDFLAGS = $(foreach path, $(LIBRARY_PATHS), -L$(path)) $(LIBRARIES)$/;"	m
LESSTHAN	./src/glyph.h	/^#define    LESSTHAN /;"	d
LIBRARIES	./Makefile	/^LIBRARIES = \\$/;"	m
LIBRARY_PATHS	./Makefile	/^LIBRARY_PATHS = \\$/;"	m
LIGHTGRAY	./vendor/raylib5/include/raylib.h	/^#define LIGHTGRAY /;"	d
LIME	./vendor/raylib5/include/raylib.h	/^#define LIME /;"	d
LINE_COLOR	./vendor/raylib5/include/raygui.h	/^    LINE_COLOR,                 \/\/ Line control color$/;"	e	enum:__anon65c7f6000803
LISTVIEW	./vendor/raylib5/include/raygui.h	/^    LISTVIEW,$/;"	e	enum:__anon65c7f6000603
LIST_ITEMS_BORDER_WIDTH	./vendor/raylib5/include/raygui.h	/^    LIST_ITEMS_BORDER_WIDTH     \/\/ ListView items border width$/;"	e	enum:__anon65c7f6001203
LIST_ITEMS_HEIGHT	./vendor/raylib5/include/raygui.h	/^    LIST_ITEMS_HEIGHT = 16,     \/\/ ListView items height$/;"	e	enum:__anon65c7f6001203
LIST_ITEMS_SPACING	./vendor/raylib5/include/raygui.h	/^    LIST_ITEMS_SPACING,         \/\/ ListView items separation$/;"	e	enum:__anon65c7f6001203
LM	./src/mt19937-64.c	/^#define LM /;"	d	file:
LOGC_DEBUG	./src/log.h	/^enum { LOGC_TRACE, LOGC_DEBUG, LOGC_INFO, LOGC_WARN, LOGC_ERROR, LOGC_FATAL };$/;"	e	enum:__anon638373710203
LOGC_ERROR	./src/log.h	/^enum { LOGC_TRACE, LOGC_DEBUG, LOGC_INFO, LOGC_WARN, LOGC_ERROR, LOGC_FATAL };$/;"	e	enum:__anon638373710203
LOGC_FATAL	./src/log.h	/^enum { LOGC_TRACE, LOGC_DEBUG, LOGC_INFO, LOGC_WARN, LOGC_ERROR, LOGC_FATAL };$/;"	e	enum:__anon638373710203
LOGC_INFO	./src/log.h	/^enum { LOGC_TRACE, LOGC_DEBUG, LOGC_INFO, LOGC_WARN, LOGC_ERROR, LOGC_FATAL };$/;"	e	enum:__anon638373710203
LOGC_TRACE	./src/log.h	/^enum { LOGC_TRACE, LOGC_DEBUG, LOGC_INFO, LOGC_WARN, LOGC_ERROR, LOGC_FATAL };$/;"	e	enum:__anon638373710203
LOGC_WARN	./src/log.h	/^enum { LOGC_TRACE, LOGC_DEBUG, LOGC_INFO, LOGC_WARN, LOGC_ERROR, LOGC_FATAL };$/;"	e	enum:__anon638373710203
LOG_ALL	./vendor/raylib5/include/raylib.h	/^    LOG_ALL = 0,        \/\/ Display all logs$/;"	e	enum:__anon661bbe320303
LOG_DEBUG	./vendor/raylib5/include/raylib.h	/^    LOG_DEBUG,          \/\/ Debug logging, used for internal debugging, it should be disabled o/;"	e	enum:__anon661bbe320303
LOG_ERROR	./vendor/raylib5/include/raylib.h	/^    LOG_ERROR,          \/\/ Error logging, used on unrecoverable failures$/;"	e	enum:__anon661bbe320303
LOG_FATAL	./vendor/raylib5/include/raylib.h	/^    LOG_FATAL,          \/\/ Fatal logging, used to abort program: exit(EXIT_FAILURE)$/;"	e	enum:__anon661bbe320303
LOG_H	./src/log.h	/^#define LOG_H$/;"	d
LOG_INFO	./vendor/raylib5/include/raylib.h	/^    LOG_INFO,           \/\/ Info logging, used for program execution info$/;"	e	enum:__anon661bbe320303
LOG_NONE	./vendor/raylib5/include/raylib.h	/^    LOG_NONE            \/\/ Disable logging$/;"	e	enum:__anon661bbe320303
LOG_TRACE	./vendor/raylib5/include/raylib.h	/^    LOG_TRACE,          \/\/ Trace logging, intended for internal use only$/;"	e	enum:__anon661bbe320303
LOG_VERSION	./src/log.h	/^#define LOG_VERSION /;"	d
LOG_WARNING	./vendor/raylib5/include/raylib.h	/^    LOG_WARNING,        \/\/ Warning logging, used on recoverable failures$/;"	e	enum:__anon661bbe320303
LOWER_A	./src/glyph.h	/^#define    LOWER_A /;"	d
LOWER_B	./src/glyph.h	/^#define    LOWER_B /;"	d
LOWER_C	./src/glyph.h	/^#define    LOWER_C /;"	d
LOWER_D	./src/glyph.h	/^#define    LOWER_D /;"	d
LOWER_E	./src/glyph.h	/^#define    LOWER_E /;"	d
LOWER_F	./src/glyph.h	/^#define    LOWER_F /;"	d
LOWER_G	./src/glyph.h	/^#define    LOWER_G /;"	d
LOWER_H	./src/glyph.h	/^#define    LOWER_H /;"	d
LOWER_I	./src/glyph.h	/^#define    LOWER_I /;"	d
LOWER_J	./src/glyph.h	/^#define    LOWER_J /;"	d
LOWER_K	./src/glyph.h	/^#define    LOWER_K /;"	d
LOWER_L	./src/glyph.h	/^#define    LOWER_L /;"	d
LOWER_M	./src/glyph.h	/^#define    LOWER_M /;"	d
LOWER_N	./src/glyph.h	/^#define    LOWER_N /;"	d
LOWER_O	./src/glyph.h	/^#define    LOWER_O /;"	d
LOWER_P	./src/glyph.h	/^#define    LOWER_P /;"	d
LOWER_Q	./src/glyph.h	/^#define    LOWER_Q /;"	d
LOWER_R	./src/glyph.h	/^#define    LOWER_R /;"	d
LOWER_S	./src/glyph.h	/^#define    LOWER_S /;"	d
LOWER_T	./src/glyph.h	/^#define    LOWER_T /;"	d
LOWER_U	./src/glyph.h	/^#define    LOWER_U /;"	d
LOWER_V	./src/glyph.h	/^#define    LOWER_V /;"	d
LOWER_W	./src/glyph.h	/^#define    LOWER_W /;"	d
LOWER_X	./src/glyph.h	/^#define    LOWER_X /;"	d
LOWER_Y	./src/glyph.h	/^#define    LOWER_Y /;"	d
LOWER_Z	./src/glyph.h	/^#define    LOWER_Z /;"	d
LPAREN	./src/glyph.h	/^#define    LPAREN /;"	d
LR_ARROW	./src/glyph.h	/^#define    LR_ARROW /;"	d
L_ARROW	./src/glyph.h	/^#define    L_ARROW /;"	d
L_BRACE	./src/glyph.h	/^#define    L_BRACE /;"	d
L_BRACKET	./src/glyph.h	/^#define    L_BRACKET /;"	d
L_PAREN	./src/glyph.h	/^#define    L_PAREN /;"	d
Latin_range16	./vendor/STC/include/stc/priv/utf8_prv.c	/^static const URange16 Latin_range16[] = {$/;"	v	typeref:typename:const URange16[]	file:
Length	./src/flecs.h	/^struct Length { };$/;"	s	struct:flecs::units
Lerp	./vendor/raylib5/include/raymath.h	/^RMAPI float Lerp(float start, float end, float amount)$/;"	f	typeref:typename:RMAPI float
Limitations	./vendor/STC/docs/cregex_api.md	/^## Limitations$/;"	s	chapter:STC [cregex](../include/stc/cregex.h): Regular Expressions
Limits	./vendor/STC/docs/cregex_api.md	/^### Limits$/;"	S	section:STC [cregex](../include/stc/cregex.h): Regular Expressions""Methods
Link	./src/flecs.h	/^static const flecs::entity_t Link = EcsDocLink;$/;"	v	namespace:flecs::doc	typeref:typename:const flecs::entity_t
List of contents	./vendor/STC/README.md	/^List of contents$/;"	s	chapter:STC - Smart Template Containers
LoadFileDataCallback	./vendor/raylib5/include/raylib.h	/^typedef unsigned char *(*LoadFileDataCallback)(const char *fileName, int *dataSize);    \/\/ Fil/;"	t	typeref:typename:unsigned char * (*)(const char * fileName,int * dataSize)
LoadFileTextCallback	./vendor/raylib5/include/raylib.h	/^typedef char *(*LoadFileTextCallback)(const char *fileName);            \/\/ FileIO: Load text d/;"	t	typeref:typename:char * (*)(const char * fileName)
Lt_range16	./vendor/STC/include/stc/priv/utf8_prv.c	/^static const URange16 Lt_range16[] = { \/\/ Title case$/;"	v	typeref:typename:const URange16[]	file:
LuminousIntensity	./src/flecs.h	/^struct LuminousIntensity { };$/;"	s	struct:flecs::units
MAGENTA	./vendor/raylib5/include/raylib.h	/^#define MAGENTA /;"	d
MAIN_H	./src/main.h	/^#define MAIN_H$/;"	d
MALE	./src/glyph.h	/^#define    MALE /;"	d
MAP_TEST1	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define MAP_TEST1(/;"	d	file:
MAP_TEST2	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define MAP_TEST2(/;"	d	file:
MAP_TEST3	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define MAP_TEST3(/;"	d	file:
MAP_TEST4	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define MAP_TEST4(/;"	d	file:
MAP_TEST5	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define MAP_TEST5(/;"	d	file:
MAP_TEST_BOOST	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define MAP_TEST_BOOST(/;"	d	file:
MAROON	./vendor/raylib5/include/raylib.h	/^#define MAROON /;"	d
MASK_BIT	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    static constexpr uint32_t MASK_BIT = sizeof(_bitmask[0]) * 8;$/;"	m	class:emhash7::HashMap	typeref:typename:uint32_t
MATERIAL_MAP_ALBEDO	./vendor/raylib5/include/raylib.h	/^    MATERIAL_MAP_ALBEDO = 0,        \/\/ Albedo material (same as: MATERIAL_MAP_DIFFUSE)$/;"	e	enum:__anon661bbe320903
MATERIAL_MAP_BRDF	./vendor/raylib5/include/raylib.h	/^    MATERIAL_MAP_BRDF               \/\/ Brdf material$/;"	e	enum:__anon661bbe320903
MATERIAL_MAP_CUBEMAP	./vendor/raylib5/include/raylib.h	/^    MATERIAL_MAP_CUBEMAP,           \/\/ Cubemap material (NOTE: Uses GL_TEXTURE_CUBE_MAP)$/;"	e	enum:__anon661bbe320903
MATERIAL_MAP_DIFFUSE	./vendor/raylib5/include/raylib.h	/^#define MATERIAL_MAP_DIFFUSE /;"	d
MATERIAL_MAP_EMISSION	./vendor/raylib5/include/raylib.h	/^    MATERIAL_MAP_EMISSION,          \/\/ Emission material$/;"	e	enum:__anon661bbe320903
MATERIAL_MAP_HEIGHT	./vendor/raylib5/include/raylib.h	/^    MATERIAL_MAP_HEIGHT,            \/\/ Heightmap material$/;"	e	enum:__anon661bbe320903
MATERIAL_MAP_IRRADIANCE	./vendor/raylib5/include/raylib.h	/^    MATERIAL_MAP_IRRADIANCE,        \/\/ Irradiance material (NOTE: Uses GL_TEXTURE_CUBE_MAP)$/;"	e	enum:__anon661bbe320903
MATERIAL_MAP_METALNESS	./vendor/raylib5/include/raylib.h	/^    MATERIAL_MAP_METALNESS,         \/\/ Metalness material (same as: MATERIAL_MAP_SPECULAR)$/;"	e	enum:__anon661bbe320903
MATERIAL_MAP_NORMAL	./vendor/raylib5/include/raylib.h	/^    MATERIAL_MAP_NORMAL,            \/\/ Normal material$/;"	e	enum:__anon661bbe320903
MATERIAL_MAP_OCCLUSION	./vendor/raylib5/include/raylib.h	/^    MATERIAL_MAP_OCCLUSION,         \/\/ Ambient occlusion material$/;"	e	enum:__anon661bbe320903
MATERIAL_MAP_PREFILTER	./vendor/raylib5/include/raylib.h	/^    MATERIAL_MAP_PREFILTER,         \/\/ Prefilter material (NOTE: Uses GL_TEXTURE_CUBE_MAP)$/;"	e	enum:__anon661bbe320903
MATERIAL_MAP_ROUGHNESS	./vendor/raylib5/include/raylib.h	/^    MATERIAL_MAP_ROUGHNESS,         \/\/ Roughness material$/;"	e	enum:__anon661bbe320903
MATERIAL_MAP_SPECULAR	./vendor/raylib5/include/raylib.h	/^#define MATERIAL_MAP_SPECULAR /;"	d
MATHS_H	./src/maths.h	/^#define MATHS_H$/;"	d
MATRIX_A	./src/mt19937-64.c	/^#define MATRIX_A /;"	d	file:
MAXIMUM_MAX_LOAD_FACTOR	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  static constexpr float MAXIMUM_MAX_LOAD_FACTOR = 0.95f;$/;"	m	class:tsl::detail_robin_hash::robin_hash	typeref:typename:float
MAXIMUM_MIN_LOAD_FACTOR	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  static constexpr float MAXIMUM_MIN_LOAD_FACTOR = 0.15f;$/;"	m	class:tsl::detail_robin_hash::robin_hash	typeref:typename:float
MAX_BUCKET_COUNT	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^  static const std::size_t MAX_BUCKET_COUNT =$/;"	m	class:tsl::rh::mod_growth_policy	typeref:typename:const std::size_t
MAX_CALLBACKS	./src/log.c	/^#define MAX_CALLBACKS /;"	d	file:
MAX_LINE_BUFFER_SIZE	./vendor/raylib5/include/raygui.h	/^    #define MAX_LINE_BUFFER_SIZE /;"	d
MAX_LOAD_FACTOR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define MAX_LOAD_FACTOR /;"	d	file:
MAX_LOOP	./vendor/STC/misc/benchmarks/various/string_bench_STC.cpp	/^const size_t MAX_LOOP = 2000;$/;"	v	typeref:typename:const size_t
MAX_LOOP	./vendor/STC/misc/benchmarks/various/string_bench_STD.cpp	/^const size_t MAX_LOOP = 2000;$/;"	v	typeref:typename:const size_t
MAX_PRECISION	./src/flecs.c	/^#define MAX_PRECISION	/;"	d	file:
MAX_STRING_SIZE	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^static const int MAX_STRING_SIZE = 100;$/;"	v	typeref:typename:const int	file:
MDRanges_loop_over_joined	./vendor/STC/misc/benchmarks/various/cspan_bench.c	/^static void MDRanges_loop_over_joined(intptr_t n)$/;"	f	typeref:typename:void	file:
MDRanges_nested_loop	./vendor/STC/misc/benchmarks/various/cspan_bench.c	/^static void MDRanges_nested_loop(intptr_t n)$/;"	f	typeref:typename:void	file:
MEMORY_H	./src/memory.h	/^#define MEMORY_H$/;"	d
MIDDLE_DOT	./src/glyph.h	/^#define    MIDDLE_DOT /;"	d
MINIMUM_MAX_LOAD_FACTOR	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  static constexpr float MINIMUM_MAX_LOAD_FACTOR = 0.2f;$/;"	m	class:tsl::detail_robin_hash::robin_hash	typeref:typename:float
MINIMUM_MIN_LOAD_FACTOR	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  static constexpr float MINIMUM_MIN_LOAD_FACTOR = 0.0f;$/;"	m	class:tsl::detail_robin_hash::robin_hash	typeref:typename:float
MINUS	./src/glyph.h	/^#define    MINUS /;"	d
MM	./src/mt19937-64.c	/^#define MM /;"	d	file:
MOD_PRIME	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^    MOD_PRIME = {{$/;"	v	namespace:tsl::rh::detail	typeref:typename:const std::array<std::size_t (*)(std::size_t),TSL_RH_NB_PRIMES>
MORETHAN	./src/glyph.h	/^#define    MORETHAN /;"	d
MOUSE_BUTTON_BACK	./vendor/raylib5/include/raylib.h	/^    MOUSE_BUTTON_BACK    = 6,       \/\/ Mouse button back (advanced mouse device)$/;"	e	enum:__anon661bbe320503
MOUSE_BUTTON_EXTRA	./vendor/raylib5/include/raylib.h	/^    MOUSE_BUTTON_EXTRA   = 4,       \/\/ Mouse button extra (advanced mouse device)$/;"	e	enum:__anon661bbe320503
MOUSE_BUTTON_FORWARD	./vendor/raylib5/include/raylib.h	/^    MOUSE_BUTTON_FORWARD = 5,       \/\/ Mouse button forward (advanced mouse device)$/;"	e	enum:__anon661bbe320503
MOUSE_BUTTON_LEFT	./vendor/raylib5/include/raylib.h	/^    MOUSE_BUTTON_LEFT    = 0,       \/\/ Mouse button left$/;"	e	enum:__anon661bbe320503
MOUSE_BUTTON_MIDDLE	./vendor/raylib5/include/raylib.h	/^    MOUSE_BUTTON_MIDDLE  = 2,       \/\/ Mouse button middle (pressed wheel)$/;"	e	enum:__anon661bbe320503
MOUSE_BUTTON_RIGHT	./vendor/raylib5/include/raylib.h	/^    MOUSE_BUTTON_RIGHT   = 1,       \/\/ Mouse button right$/;"	e	enum:__anon661bbe320503
MOUSE_BUTTON_SIDE	./vendor/raylib5/include/raylib.h	/^    MOUSE_BUTTON_SIDE    = 3,       \/\/ Mouse button side (advanced mouse device)$/;"	e	enum:__anon661bbe320503
MOUSE_CURSOR_ARROW	./vendor/raylib5/include/raylib.h	/^    MOUSE_CURSOR_ARROW         = 1,     \/\/ Arrow shape$/;"	e	enum:__anon661bbe320603
MOUSE_CURSOR_CROSSHAIR	./vendor/raylib5/include/raylib.h	/^    MOUSE_CURSOR_CROSSHAIR     = 3,     \/\/ Cross shape$/;"	e	enum:__anon661bbe320603
MOUSE_CURSOR_DEFAULT	./vendor/raylib5/include/raylib.h	/^    MOUSE_CURSOR_DEFAULT       = 0,     \/\/ Default pointer shape$/;"	e	enum:__anon661bbe320603
MOUSE_CURSOR_IBEAM	./vendor/raylib5/include/raylib.h	/^    MOUSE_CURSOR_IBEAM         = 2,     \/\/ Text writing cursor shape$/;"	e	enum:__anon661bbe320603
MOUSE_CURSOR_NOT_ALLOWED	./vendor/raylib5/include/raylib.h	/^    MOUSE_CURSOR_NOT_ALLOWED   = 10     \/\/ The operation-not-allowed shape$/;"	e	enum:__anon661bbe320603
MOUSE_CURSOR_POINTING_HAND	./vendor/raylib5/include/raylib.h	/^    MOUSE_CURSOR_POINTING_HAND = 4,     \/\/ Pointing hand cursor$/;"	e	enum:__anon661bbe320603
MOUSE_CURSOR_RESIZE_ALL	./vendor/raylib5/include/raylib.h	/^    MOUSE_CURSOR_RESIZE_ALL    = 9,     \/\/ The omnidirectional resize\/move cursor shape$/;"	e	enum:__anon661bbe320603
MOUSE_CURSOR_RESIZE_EW	./vendor/raylib5/include/raylib.h	/^    MOUSE_CURSOR_RESIZE_EW     = 5,     \/\/ Horizontal resize\/move arrow shape$/;"	e	enum:__anon661bbe320603
MOUSE_CURSOR_RESIZE_NESW	./vendor/raylib5/include/raylib.h	/^    MOUSE_CURSOR_RESIZE_NESW   = 8,     \/\/ The top-right to bottom-left diagonal resize\/move /;"	e	enum:__anon661bbe320603
MOUSE_CURSOR_RESIZE_NS	./vendor/raylib5/include/raylib.h	/^    MOUSE_CURSOR_RESIZE_NS     = 6,     \/\/ Vertical resize\/move arrow shape$/;"	e	enum:__anon661bbe320603
MOUSE_CURSOR_RESIZE_NWSE	./vendor/raylib5/include/raylib.h	/^    MOUSE_CURSOR_RESIZE_NWSE   = 7,     \/\/ Top-left to bottom-right diagonal resize\/move arro/;"	e	enum:__anon661bbe320603
MOUSE_LEFT_BUTTON	./vendor/raylib5/include/raygui.h	/^#define MOUSE_LEFT_BUTTON /;"	d
MOUSE_LEFT_BUTTON	./vendor/raylib5/include/raylib.h	/^#define MOUSE_LEFT_BUTTON /;"	d
MOUSE_MIDDLE_BUTTON	./vendor/raylib5/include/raylib.h	/^#define MOUSE_MIDDLE_BUTTON /;"	d
MOUSE_RIGHT_BUTTON	./vendor/raylib5/include/raylib.h	/^#define MOUSE_RIGHT_BUTTON /;"	d
MSG_NOSIGNAL	./src/flecs.c	/^#define MSG_NOSIGNAL /;"	d	file:
MSG_SIZE	./vendor/STC/misc/tests/ctest.h	/^#define MSG_SIZE /;"	d
MUSIC_NOTE_1	./src/glyph.h	/^#define    MUSIC_NOTE_1 /;"	d
MUSIC_NOTE_2	./src/glyph.h	/^#define    MUSIC_NOTE_2 /;"	d
M_END	./vendor/STC/misc/tests/cregex_test.c	/^#define M_END(/;"	d	file:
M_START	./vendor/STC/misc/tests/cregex_test.c	/^#define M_START(/;"	d	file:
Mass	./src/flecs.h	/^struct Mass { };$/;"	s	struct:flecs::units
Material	./vendor/raylib5/include/raylib.h	/^typedef struct Material {$/;"	s
Material	./vendor/raylib5/include/raylib.h	/^} Material;$/;"	t	typeref:struct:Material
MaterialMap	./vendor/raylib5/include/raylib.h	/^typedef struct MaterialMap {$/;"	s
MaterialMap	./vendor/raylib5/include/raylib.h	/^} MaterialMap;$/;"	t	typeref:struct:MaterialMap
MaterialMapIndex	./vendor/raylib5/include/raylib.h	/^} MaterialMapIndex;$/;"	t	typeref:enum:__anon661bbe320903
Matrix	./vendor/raylib5/include/raylib.h	/^typedef struct Matrix {$/;"	s
Matrix	./vendor/raylib5/include/raylib.h	/^} Matrix;$/;"	t	typeref:struct:Matrix
Matrix	./vendor/raylib5/include/raymath.h	/^typedef struct Matrix {$/;"	s
Matrix	./vendor/raylib5/include/raymath.h	/^} Matrix;$/;"	t	typeref:struct:Matrix
MatrixAdd	./vendor/raylib5/include/raymath.h	/^RMAPI Matrix MatrixAdd(Matrix left, Matrix right)$/;"	f	typeref:typename:RMAPI Matrix
MatrixDeterminant	./vendor/raylib5/include/raymath.h	/^RMAPI float MatrixDeterminant(Matrix mat)$/;"	f	typeref:typename:RMAPI float
MatrixFrustum	./vendor/raylib5/include/raymath.h	/^RMAPI Matrix MatrixFrustum(double left, double right, double bottom, double top, double near, do/;"	f	typeref:typename:RMAPI Matrix
MatrixIdentity	./vendor/raylib5/include/raymath.h	/^RMAPI Matrix MatrixIdentity(void)$/;"	f	typeref:typename:RMAPI Matrix
MatrixInvert	./vendor/raylib5/include/raymath.h	/^RMAPI Matrix MatrixInvert(Matrix mat)$/;"	f	typeref:typename:RMAPI Matrix
MatrixLookAt	./vendor/raylib5/include/raymath.h	/^RMAPI Matrix MatrixLookAt(Vector3 eye, Vector3 target, Vector3 up)$/;"	f	typeref:typename:RMAPI Matrix
MatrixMultiply	./vendor/raylib5/include/raymath.h	/^RMAPI Matrix MatrixMultiply(Matrix left, Matrix right)$/;"	f	typeref:typename:RMAPI Matrix
MatrixOrtho	./vendor/raylib5/include/raymath.h	/^RMAPI Matrix MatrixOrtho(double left, double right, double bottom, double top, double nearPlane,/;"	f	typeref:typename:RMAPI Matrix
MatrixPerspective	./vendor/raylib5/include/raymath.h	/^RMAPI Matrix MatrixPerspective(double fovY, double aspect, double nearPlane, double farPlane)$/;"	f	typeref:typename:RMAPI Matrix
MatrixRotate	./vendor/raylib5/include/raymath.h	/^RMAPI Matrix MatrixRotate(Vector3 axis, float angle)$/;"	f	typeref:typename:RMAPI Matrix
MatrixRotateX	./vendor/raylib5/include/raymath.h	/^RMAPI Matrix MatrixRotateX(float angle)$/;"	f	typeref:typename:RMAPI Matrix
MatrixRotateXYZ	./vendor/raylib5/include/raymath.h	/^RMAPI Matrix MatrixRotateXYZ(Vector3 angle)$/;"	f	typeref:typename:RMAPI Matrix
MatrixRotateY	./vendor/raylib5/include/raymath.h	/^RMAPI Matrix MatrixRotateY(float angle)$/;"	f	typeref:typename:RMAPI Matrix
MatrixRotateZ	./vendor/raylib5/include/raymath.h	/^RMAPI Matrix MatrixRotateZ(float angle)$/;"	f	typeref:typename:RMAPI Matrix
MatrixRotateZYX	./vendor/raylib5/include/raymath.h	/^RMAPI Matrix MatrixRotateZYX(Vector3 angle)$/;"	f	typeref:typename:RMAPI Matrix
MatrixScale	./vendor/raylib5/include/raymath.h	/^RMAPI Matrix MatrixScale(float x, float y, float z)$/;"	f	typeref:typename:RMAPI Matrix
MatrixSubtract	./vendor/raylib5/include/raymath.h	/^RMAPI Matrix MatrixSubtract(Matrix left, Matrix right)$/;"	f	typeref:typename:RMAPI Matrix
MatrixToFloat	./vendor/raylib5/include/raymath.h	/^    #define MatrixToFloat(mat) (MatrixToFloatV/;"	d
MatrixToFloatV	./vendor/raylib5/include/raymath.h	/^RMAPI float16 MatrixToFloatV(Matrix mat)$/;"	f	typeref:typename:RMAPI float16
MatrixTrace	./vendor/raylib5/include/raymath.h	/^RMAPI float MatrixTrace(Matrix mat)$/;"	f	typeref:typename:RMAPI float
MatrixTranslate	./vendor/raylib5/include/raymath.h	/^RMAPI Matrix MatrixTranslate(float x, float y, float z)$/;"	f	typeref:typename:RMAPI Matrix
MatrixTranspose	./vendor/raylib5/include/raymath.h	/^RMAPI Matrix MatrixTranspose(Matrix mat)$/;"	f	typeref:typename:RMAPI Matrix
MaxLoadFactor100	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^enum {N1 = 4000000, S1 = 1, MaxLoadFactor100 = 80};$/;"	e	enum:__anon08c2d9bb0103	file:
Mebi	./src/flecs.h	/^struct Mebi { };$/;"	s	struct:flecs::units
MebiBytes	./src/flecs.h	/^struct MebiBytes { };$/;"	s	struct:flecs::units::data
Mega	./src/flecs.h	/^struct Mega { };$/;"	s	struct:flecs::units
MegaBits	./src/flecs.h	/^struct MegaBits { };$/;"	s	struct:flecs::units::data
MegaBitsPerSecond	./src/flecs.h	/^struct MegaBitsPerSecond { };$/;"	s	struct:flecs::units::datarate
MegaBytes	./src/flecs.h	/^struct MegaBytes { };$/;"	s	struct:flecs::units::data
MegaBytesPerSecond	./src/flecs.h	/^struct MegaBytesPerSecond { };$/;"	s	struct:flecs::units::datarate
MegaHertz	./src/flecs.h	/^struct MegaHertz { };$/;"	s	struct:flecs::units::frequency
Member	./src/flecs.h	/^using Member = EcsMember;$/;"	t	namespace:flecs	typeref:typename:EcsMember
MemberRanges	./src/flecs.h	/^using MemberRanges = EcsMemberRanges;$/;"	t	namespace:flecs	typeref:typename:EcsMemberRanges
Memory efficiency	./vendor/STC/README.md	/^## Memory efficiency$/;"	s	chapter:STC - Smart Template Containers
Mesh	./vendor/raylib5/include/raylib.h	/^typedef struct Mesh {$/;"	s
Mesh	./vendor/raylib5/include/raylib.h	/^} Mesh;$/;"	t	typeref:struct:Mesh
MetaType	./src/flecs.h	/^using MetaType = EcsMetaType;$/;"	t	namespace:flecs	typeref:typename:EcsMetaType
MetaTypeSerialized	./src/flecs.h	/^using MetaTypeSerialized = EcsMetaTypeSerialized;$/;"	t	namespace:flecs	typeref:typename:EcsMetaTypeSerialized
Meters	./src/flecs.h	/^struct Meters { };$/;"	s	struct:flecs::units::length
MetersPerSecond	./src/flecs.h	/^struct MetersPerSecond { };$/;"	s	struct:flecs::units::speed
Methods	./vendor/STC/docs/arc_api.md	/^## Methods$/;"	s	chapter:STC [arc](../include/stc/arc.h): Atomic Reference Counted Smart Pointer
Methods	./vendor/STC/docs/box_api.md	/^## Methods$/;"	s	chapter:STC [box](../include/stc/box.h): Smart Pointer (boxed object)
Methods	./vendor/STC/docs/cbits_api.md	/^## Methods$/;"	s	chapter:STC [cbits](../include/stc/cbits.h): Bitset
Methods	./vendor/STC/docs/coption_api.md	/^## Methods$/;"	s	chapter:STC [coption](../include/stc/coption.h): Command line argument parsing
Methods	./vendor/STC/docs/crandom_api.md	/^## Methods$/;"	s	chapter:STC [crand](../include/stc/crand.h): Pseudo Random Number Generator
Methods	./vendor/STC/docs/cregex_api.md	/^## Methods$/;"	s	chapter:STC [cregex](../include/stc/cregex.h): Regular Expressions
Methods	./vendor/STC/docs/cspan_api.md	/^## Methods$/;"	s	chapter:STC [cspan](../include/stc/cspan.h): Multi-dimensional Array View
Methods	./vendor/STC/docs/cstr_api.md	/^## Methods$/;"	s	chapter:STC [cstr](../include/stc/cstr.h): String
Methods	./vendor/STC/docs/csview_api.md	/^## Methods$/;"	s	chapter:STC [csview](../include/stc/csview.h): Sub-string View
Methods	./vendor/STC/docs/czview_api.md	/^## Methods$/;"	s	chapter:STC [czview](../include/stc/czview.h): Null-terminated UTF8 String View
Methods	./vendor/STC/docs/deq_api.md	/^## Methods$/;"	s	chapter:STC [deq](../include/stc/deq.h): Double Ended Queue
Methods	./vendor/STC/docs/hmap_api.md	/^## Methods$/;"	s	chapter:STC [hmap](../include/stc/hmap.h): HashMap (unordered)
Methods	./vendor/STC/docs/hset_api.md	/^## Methods$/;"	s	chapter:STC [hset](../include/stc/hset.h): HashSet (unordered)
Methods	./vendor/STC/docs/list_api.md	/^## Methods$/;"	s	chapter:STC [list](../include/stc/list.h): Forward List
Methods	./vendor/STC/docs/pque_api.md	/^## Methods$/;"	s	chapter:STC [pque](../include/stc/pque.h): Priority Queue
Methods	./vendor/STC/docs/queue_api.md	/^## Methods$/;"	s	chapter:STC [queue](../include/stc/queue.h): Queue
Methods	./vendor/STC/docs/smap_api.md	/^## Methods$/;"	s	chapter:STC [smap](../include/stc/smap.h): Sorted Map
Methods	./vendor/STC/docs/sset_api.md	/^## Methods$/;"	s	chapter:STC [sset](../include/stc/sset.h): Sorted Set
Methods	./vendor/STC/docs/stack_api.md	/^## Methods$/;"	s	chapter:STC [stack](../include/stc/stack.h): Stack
Methods	./vendor/STC/docs/vec_api.md	/^## Methods$/;"	s	chapter:STC [vec](../include/stc/vec.h): Vector
Metric	./src/flecs.h	/^    struct Metric { };$/;"	s	struct:flecs::metrics
Micro	./src/flecs.h	/^struct Micro { };$/;"	s	struct:flecs::units
MicroMeters	./src/flecs.h	/^struct MicroMeters { };$/;"	s	struct:flecs::units::length
MicroSeconds	./src/flecs.h	/^struct MicroSeconds { };$/;"	s	struct:flecs::units::duration
Miles	./src/flecs.h	/^struct Miles { };$/;"	s	struct:flecs::units::length
MilesPerHour	./src/flecs.h	/^struct MilesPerHour { };$/;"	s	struct:flecs::units::speed
Milli	./src/flecs.h	/^struct Milli { };$/;"	s	struct:flecs::units
MilliMeters	./src/flecs.h	/^struct MilliMeters { };$/;"	s	struct:flecs::units::length
MilliSeconds	./src/flecs.h	/^struct MilliSeconds { };$/;"	s	struct:flecs::units::duration
Minutes	./src/flecs.h	/^struct Minutes { };$/;"	s	struct:flecs::units::duration
Model	./vendor/raylib5/include/raylib.h	/^typedef struct Model {$/;"	s
Model	./vendor/raylib5/include/raylib.h	/^} Model;$/;"	t	typeref:struct:Model
ModelAnimation	./vendor/raylib5/include/raylib.h	/^typedef struct ModelAnimation {$/;"	s
ModelAnimation	./vendor/raylib5/include/raylib.h	/^} ModelAnimation;$/;"	t	typeref:struct:ModelAnimation
Module	./src/flecs.h	/^static const flecs::entity_t Module = EcsModule;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Mole	./src/flecs.h	/^struct Mole { };$/;"	s	struct:flecs::units::amount
Monitor	./src/flecs.h	/^static const flecs::entity_t Monitor = EcsMonitor;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
MonitorAlertInstances	./src/flecs.c	/^void MonitorAlertInstances(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
MonitorAlerts	./src/flecs.c	/^void MonitorAlerts(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
MonitorStats	./src/flecs.c	/^void MonitorStats(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
MouseButton	./vendor/raylib5/include/raylib.h	/^} MouseButton;$/;"	t	typeref:enum:__anon661bbe320503
MouseCursor	./vendor/raylib5/include/raylib.h	/^} MouseCursor;$/;"	t	typeref:enum:__anon661bbe320603
Music	./vendor/raylib5/include/raylib.h	/^typedef struct Music {$/;"	s
Music	./vendor/raylib5/include/raylib.h	/^} Music;$/;"	t	typeref:struct:Music
MyBuildHasher	./vendor/STC/misc/benchmarks/various/rust_hashmap.rs	/^type MyBuildHasher = BuildHasherDefault<MyHasher>;$/;"	t
MyEqual	./vendor/STC/misc/benchmarks/various/string_bench_STD.cpp	/^struct MyEqual : public std::equal_to<>$/;"	s	file:
MyHasher	./vendor/STC/misc/benchmarks/various/rust_hashmap.rs	/^impl Default for MyHasher {$/;"	c
MyHasher	./vendor/STC/misc/benchmarks/various/rust_hashmap.rs	/^impl Hasher for MyHasher {$/;"	c
MyHasher	./vendor/STC/misc/benchmarks/various/rust_hashmap.rs	/^struct MyHasher {$/;"	s
MyStruct	./vendor/STC/misc/examples/hashmaps/new_map.c	/^typedef struct MyStruct {$/;"	s	file:
MyStruct	./vendor/STC/misc/examples/hashmaps/new_map.c	/^} MyStruct;$/;"	t	typeref:struct:MyStruct	file:
MyStruct	./vendor/STC/misc/examples/linkedlists/new_list.c	/^} MyStruct;$/;"	t	typeref:struct:__anonb8bcd80c0108	file:
MyStruct	./vendor/STC/misc/examples/sortedmaps/new_smap.c	/^} MyStruct;$/;"	t	typeref:struct:__anon6b61945d0108	file:
MyStruct	./vendor/STC/misc/examples/vectors/new_vec.c	/^typedef struct MyStruct {$/;"	s	file:
MyStruct	./vendor/STC/misc/examples/vectors/new_vec.c	/^} MyStruct;$/;"	t	typeref:struct:MyStruct	file:
MyStruct_drop	./vendor/STC/misc/examples/linkedlists/new_list.c	/^void MyStruct_drop(MyStruct* s) {$/;"	f	typeref:typename:void
N	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^enum {SAMPLES = 2, N = 60000000, R = 4};$/;"	e	enum:__anonfac950030403	file:
N	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^enum {SAMPLES = 2, N = 2000000, R = 4};$/;"	e	enum:__anonca721fef0403	file:
N	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^enum {SAMPLES = 2, N = 10000000, R = 4};$/;"	e	enum:__anona03d81450403	file:
N	./vendor/STC/misc/benchmarks/plotbench/pque_benchmark.cpp	/^static const int N = 2500000;$/;"	v	typeref:typename:const int	file:
N	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^enum {SAMPLES = 2, N = 1000000, R = 4};$/;"	e	enum:__anon0565975a0403	file:
N	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^enum {SAMPLES = 2, N = 60000000, R = 4};$/;"	e	enum:__anon603333870403	file:
N	./vendor/STC/misc/benchmarks/various/cbits_benchmark.cpp	/^enum{ N=1<<22 }; \/\/ 4.2 mill.$/;"	e	enum:__anond23e84280103	file:
N	./vendor/STC/misc/benchmarks/various/prng_bench.cpp	/^    enum {N = 500000000};$/;"	e	enum:main::__anon65de2fff0103	file:
N	./vendor/STC/misc/examples/sortedmaps/gauss2.c	/^    enum {N = 5000000};$/;"	e	enum:main::__anon30576d180103	file:
N	./vendor/STC/misc/examples/spans/matmult.c	/^  enum {N = 10, D1 = 256, D2 = D1};$/;"	e	enum:main::__anonc4048f0a0303	file:
N	./vendor/STC/misc/tests/cspan_test.c	/^    enum {TSIZE=4, CUBE=64, N=CUBE*CUBE*CUBE};$/;"	e	enum:CTEST_SETUP::__anonc003a19a0103	file:
N1	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^enum {N1 = 4000000, S1 = 1, MaxLoadFactor100 = 80};$/;"	e	enum:__anon08c2d9bb0103	file:
N1	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^enum {N1 = 1000000, S1 = 1};$/;"	e	enum:__anon2f96ff660103	file:
NBSP	./src/glyph.h	/^#define    NBSP /;"	d
NDEBUG	./vendor/STC/misc/benchmarks/various/cspan_bench.c	/^#define NDEBUG$/;"	d	file:
NDEBUG	./vendor/STC/misc/benchmarks/various/quicksort_bench.c	/^#define NDEBUG$/;"	d	file:
NN	./src/mt19937-64.c	/^#define NN /;"	d	file:
NONE	./src/glyph.h	/^#define    NONE /;"	d
NPATCH_NINE_PATCH	./vendor/raylib5/include/raylib.h	/^    NPATCH_NINE_PATCH = 0,          \/\/ Npatch layout: 3x3 tiles$/;"	e	enum:__anon661bbe321603
NPATCH_THREE_PATCH_HORIZONTAL	./vendor/raylib5/include/raylib.h	/^    NPATCH_THREE_PATCH_HORIZONTAL   \/\/ Npatch layout: 3x1 tiles$/;"	e	enum:__anon661bbe321603
NPATCH_THREE_PATCH_VERTICAL	./vendor/raylib5/include/raylib.h	/^    NPATCH_THREE_PATCH_VERTICAL,    \/\/ Npatch layout: 1x3 tiles$/;"	e	enum:__anon661bbe321603
NPatchInfo	./vendor/raylib5/include/raylib.h	/^typedef struct NPatchInfo {$/;"	s
NPatchInfo	./vendor/raylib5/include/raylib.h	/^} NPatchInfo;$/;"	t	typeref:struct:NPatchInfo
NPatchLayout	./vendor/raylib5/include/raylib.h	/^} NPatchLayout;$/;"	t	typeref:enum:__anon661bbe321603
NULL	./src/flecs.h	/^#define NULL /;"	d
NUM_0	./src/glyph.h	/^#define    NUM_0 /;"	d
NUM_1	./src/glyph.h	/^#define    NUM_1 /;"	d
NUM_2	./src/glyph.h	/^#define    NUM_2 /;"	d
NUM_3	./src/glyph.h	/^#define    NUM_3 /;"	d
NUM_4	./src/glyph.h	/^#define    NUM_4 /;"	d
NUM_5	./src/glyph.h	/^#define    NUM_5 /;"	d
NUM_6	./src/glyph.h	/^#define    NUM_6 /;"	d
NUM_7	./src/glyph.h	/^#define    NUM_7 /;"	d
NUM_8	./src/glyph.h	/^#define    NUM_8 /;"	d
NUM_9	./src/glyph.h	/^#define    NUM_9 /;"	d
N_TESTS	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anonfac950030103	file:
N_TESTS	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anonca721fef0103	file:
N_TESTS	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anona03d81450103	file:
N_TESTS	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anon0565975a0103	file:
N_TESTS	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	e	enum:__anon603333870103	file:
Name	./src/flecs.h	/^static const flecs::entity_t Name = EcsName;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Naming conventions	./vendor/STC/README.md	/^## Naming conventions$/;"	s	chapter:STC - Smart Template Containers
Nano	./src/flecs.h	/^struct Nano { };$/;"	s	struct:flecs::units
NanoMeters	./src/flecs.h	/^struct NanoMeters { };$/;"	s	struct:flecs::units::length
NanoSeconds	./src/flecs.h	/^struct NanoSeconds { };$/;"	s	struct:flecs::units::duration
Nd_range16	./vendor/STC/include/stc/priv/utf8_prv.c	/^static const URange16 Nd_range16[] = { \/\/ Decimal number$/;"	v	typeref:typename:const URange16[]	file:
Newton	./src/flecs.h	/^struct Newton { };$/;"	s	struct:flecs::units::force
Nl_range16	./vendor/STC/include/stc/priv/utf8_prv.c	/^static const URange16 Nl_range16[] = { \/\/ Number letter$/;"	v	typeref:typename:const URange16[]	file:
Node	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    using Node = DataNode<Self, IsFlat>;$/;"	t	class:robin_hood::detail::Table	typeref:typename:DataNode<Self,IsFlat>
NodeAllocator	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^struct NodeAllocator<T, MinSize, MaxSize, false> : public BulkPoolAllocator<T, MinSize, MaxSize>/;"	s	namespace:robin_hood::detail
NodeAllocator	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^struct NodeAllocator<T, MinSize, MaxSize, true> {$/;"	s	namespace:robin_hood::detail
NodePtr	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        using NodePtr = typename std::conditional<IsConst, Node const*, Node*>::type;$/;"	t	class:robin_hood::detail::Table::Iter	typeref:typename:std::conditional<IsConst,Node const *,Node * >::type
Normalize	./vendor/raylib5/include/raymath.h	/^RMAPI float Normalize(float value, float start, float end)$/;"	f	typeref:typename:RMAPI float
Not	./src/flecs.h	/^    Not = EcsNot,$/;"	e	enum:flecs::oper_kind_t
NotFrom	./src/flecs.h	/^    NotFrom = EcsNotFrom$/;"	e	enum:flecs::oper_kind_t
OBJ	./Makefile	/^OBJ = $(OBJ_C) $(OBJ_ASM)$/;"	m
OBJCONV	./Makefile	/^OBJCONV = objconv$/;"	m
OBJ_ASM	./Makefile	/^OBJ_ASM = $(patsubst .\/src\/%.asm, .\/bin-int\/%.o, $(SRC_ASM))$/;"	m
OBJ_C	./Makefile	/^OBJ_C = $(patsubst .\/src\/%.c, .\/bin-int\/%.o, $(SRC_C))$/;"	m
OFFSET	./src/flecs.c	/^#define OFFSET(/;"	d	file:
OMEGA	./src/glyph.h	/^#define    OMEGA /;"	d
ORANGE	./vendor/raylib5/include/raylib.h	/^#define ORANGE /;"	d
OTHER	./vendor/raylib5/include/raygui.h	/^typedef enum { BORDER = 0, BASE, TEXT, OTHER } GuiPropertyElement;$/;"	e	enum:__anon65c7f6001503
Observer	./src/flecs.h	/^static const flecs::entity_t Observer = EcsObserver;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OlympicLoc	./vendor/STC/misc/examples/sortedmaps/multimap.c	/^typedef struct { int year; cstr city, date; } OlympicLoc;$/;"	t	typeref:struct:__anonc17d532c0108	file:
OlympicLoc_clone	./vendor/STC/misc/examples/sortedmaps/multimap.c	/^OlympicLoc OlympicLoc_clone(OlympicLoc loc) {$/;"	f	typeref:typename:OlympicLoc
OlympicLoc_cmp	./vendor/STC/misc/examples/sortedmaps/multimap.c	/^int OlympicLoc_cmp(const OlympicLoc* a, const OlympicLoc* b) {$/;"	f	typeref:typename:int
OlympicLoc_drop	./vendor/STC/misc/examples/sortedmaps/multimap.c	/^void OlympicLoc_drop(OlympicLoc* self) {$/;"	f	typeref:typename:void
OlympicsData	./vendor/STC/misc/examples/sortedmaps/multimap.c	/^struct OlympicsData { int year; const char *city, *country, *date; } ol_data[] = {$/;"	s	file:
OnAdd	./src/flecs.h	/^static const flecs::entity_t OnAdd = EcsOnAdd;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OnDelete	./src/flecs.h	/^static const flecs::entity_t OnDelete = EcsOnDelete;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OnDeleteTarget	./src/flecs.h	/^static const flecs::entity_t OnDeleteTarget = EcsOnDeleteTarget;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OnLoad	./src/flecs.h	/^static const flecs::entity_t OnLoad = EcsOnLoad;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OnRemove	./src/flecs.h	/^static const flecs::entity_t OnRemove = EcsOnRemove;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OnSet	./src/flecs.h	/^static const flecs::entity_t OnSet = EcsOnSet;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OnStart	./src/flecs.h	/^static const flecs::entity_t OnStart = EcsOnStart;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OnStore	./src/flecs.h	/^static const flecs::entity_t OnStore = EcsOnStore;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OnTableCreate	./src/flecs.h	/^static const flecs::entity_t OnTableCreate = EcsOnTableCreate;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OnTableDelete	./src/flecs.h	/^static const flecs::entity_t OnTableDelete = EcsOnTableDelete;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OnUpdate	./src/flecs.h	/^static const flecs::entity_t OnUpdate = EcsOnUpdate;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OnValidate	./src/flecs.h	/^static const flecs::entity_t OnValidate = EcsOnValidate;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
OneOf	./src/flecs.h	/^static const flecs::entity_t OneOf = EcsOneOf;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Optional	./src/flecs.h	/^    Optional = EcsOptional,$/;"	e	enum:flecs::oper_kind_t
Or	./src/flecs.h	/^    Or = EcsOr,$/;"	e	enum:flecs::oper_kind_t
OrFrom	./src/flecs.h	/^    OrFrom = EcsOrFrom,$/;"	e	enum:flecs::oper_kind_t
Out	./src/flecs.h	/^    Out = EcsOut$/;"	e	enum:flecs::inout_kind_t
OutMat	./vendor/STC/misc/examples/spans/matmult.c	/^typedef Mat2 OutMat;$/;"	t	typeref:typename:Mat2	file:
Override	./src/flecs.h	/^static const flecs::entity_t Override = ECS_OVERRIDE;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
P	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^#define P /;"	d	file:
P	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^#define P /;"	d	file:
PAGE	./src/flecs.c	/^#define PAGE(index) ((int32_t)((uint32_t)index >> FLECS_SPARSE_PAGE_/;"	d	file:
PARAGRAPH	./src/glyph.h	/^#define    PARAGRAPH /;"	d
PAREN_L	./src/glyph.h	/^#define    PAREN_L /;"	d
PAREN_R	./src/glyph.h	/^#define    PAREN_R /;"	d
PERCENT	./src/glyph.h	/^#define    PERCENT /;"	d
PERIOD	./src/glyph.h	/^#define    PERIOD /;"	d
PHI_LOWER	./src/glyph.h	/^#define    PHI_LOWER /;"	d
PHI_UPPER	./src/glyph.h	/^#define    PHI_UPPER /;"	d
PI	./vendor/raylib5/include/raylib.h	/^    #define PI /;"	d
PI	./vendor/raylib5/include/raymath.h	/^    #define PI /;"	d
PICOBENCH	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^#define PICOBENCH(/;"	d
PICOBENCH_DEFAULT_ITERATIONS	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^#   define PICOBENCH_DEFAULT_ITERATIONS /;"	d
PICOBENCH_DEFAULT_SAMPLES	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^#   define PICOBENCH_DEFAULT_SAMPLES /;"	d
PICOBENCH_IMPLEMENT	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^#   define PICOBENCH_IMPLEMENT$/;"	d
PICOBENCH_IMPLEMENT_MAIN	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^#   define PICOBENCH_IMPLEMENT_MAIN$/;"	d
PICOBENCH_IMPLEMENT_WITH_MAIN	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^#define PICOBENCH_IMPLEMENT_WITH_MAIN$/;"	d	file:
PICOBENCH_IMPLEMENT_WITH_MAIN	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^#define PICOBENCH_IMPLEMENT_WITH_MAIN$/;"	d	file:
PICOBENCH_INLINE	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^#   define PICOBENCH_INLINE /;"	d
PICOBENCH_SUITE	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^#define PICOBENCH_SUITE(/;"	d
PICOBENCH_VERSION	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^#define PICOBENCH_VERSION /;"	d
PICOBENCH_VERSION_STR	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^#define PICOBENCH_VERSION_STR /;"	d
PINK	./vendor/raylib5/include/raylib.h	/^#define PINK /;"	d
PIPE	./src/glyph.h	/^#define    PIPE /;"	d
PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA	./vendor/raylib5/include/raylib.h	/^    PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA,   \/\/ 8 bpp$/;"	e	enum:__anon661bbe320d03
PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA	./vendor/raylib5/include/raylib.h	/^    PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA    \/\/ 2 bpp$/;"	e	enum:__anon661bbe320d03
PIXELFORMAT_COMPRESSED_DXT1_RGB	./vendor/raylib5/include/raylib.h	/^    PIXELFORMAT_COMPRESSED_DXT1_RGB,        \/\/ 4 bpp (no alpha)$/;"	e	enum:__anon661bbe320d03
PIXELFORMAT_COMPRESSED_DXT1_RGBA	./vendor/raylib5/include/raylib.h	/^    PIXELFORMAT_COMPRESSED_DXT1_RGBA,       \/\/ 4 bpp (1 bit alpha)$/;"	e	enum:__anon661bbe320d03
PIXELFORMAT_COMPRESSED_DXT3_RGBA	./vendor/raylib5/include/raylib.h	/^    PIXELFORMAT_COMPRESSED_DXT3_RGBA,       \/\/ 8 bpp$/;"	e	enum:__anon661bbe320d03
PIXELFORMAT_COMPRESSED_DXT5_RGBA	./vendor/raylib5/include/raylib.h	/^    PIXELFORMAT_COMPRESSED_DXT5_RGBA,       \/\/ 8 bpp$/;"	e	enum:__anon661bbe320d03
PIXELFORMAT_COMPRESSED_ETC1_RGB	./vendor/raylib5/include/raylib.h	/^    PIXELFORMAT_COMPRESSED_ETC1_RGB,        \/\/ 4 bpp$/;"	e	enum:__anon661bbe320d03
PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA	./vendor/raylib5/include/raylib.h	/^    PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA,   \/\/ 8 bpp$/;"	e	enum:__anon661bbe320d03
PIXELFORMAT_COMPRESSED_ETC2_RGB	./vendor/raylib5/include/raylib.h	/^    PIXELFORMAT_COMPRESSED_ETC2_RGB,        \/\/ 4 bpp$/;"	e	enum:__anon661bbe320d03
PIXELFORMAT_COMPRESSED_PVRT_RGB	./vendor/raylib5/include/raylib.h	/^    PIXELFORMAT_COMPRESSED_PVRT_RGB,        \/\/ 4 bpp$/;"	e	enum:__anon661bbe320d03
PIXELFORMAT_COMPRESSED_PVRT_RGBA	./vendor/raylib5/include/raylib.h	/^    PIXELFORMAT_COMPRESSED_PVRT_RGBA,       \/\/ 4 bpp$/;"	e	enum:__anon661bbe320d03
PIXELFORMAT_UNCOMPRESSED_GRAYSCALE	./vendor/raylib5/include/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_GRAYSCALE = 1, \/\/ 8 bit per pixel (no alpha)$/;"	e	enum:__anon661bbe320d03
PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA	./vendor/raylib5/include/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA,    \/\/ 8*2 bpp (2 channels)$/;"	e	enum:__anon661bbe320d03
PIXELFORMAT_UNCOMPRESSED_R16	./vendor/raylib5/include/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R16,           \/\/ 16 bpp (1 channel - half float)$/;"	e	enum:__anon661bbe320d03
PIXELFORMAT_UNCOMPRESSED_R16G16B16	./vendor/raylib5/include/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R16G16B16,     \/\/ 16*3 bpp (3 channels - half float)$/;"	e	enum:__anon661bbe320d03
PIXELFORMAT_UNCOMPRESSED_R16G16B16A16	./vendor/raylib5/include/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R16G16B16A16,  \/\/ 16*4 bpp (4 channels - half float)$/;"	e	enum:__anon661bbe320d03
PIXELFORMAT_UNCOMPRESSED_R32	./vendor/raylib5/include/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R32,           \/\/ 32 bpp (1 channel - float)$/;"	e	enum:__anon661bbe320d03
PIXELFORMAT_UNCOMPRESSED_R32G32B32	./vendor/raylib5/include/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R32G32B32,     \/\/ 32*3 bpp (3 channels - float)$/;"	e	enum:__anon661bbe320d03
PIXELFORMAT_UNCOMPRESSED_R32G32B32A32	./vendor/raylib5/include/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R32G32B32A32,  \/\/ 32*4 bpp (4 channels - float)$/;"	e	enum:__anon661bbe320d03
PIXELFORMAT_UNCOMPRESSED_R4G4B4A4	./vendor/raylib5/include/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R4G4B4A4,      \/\/ 16 bpp (4 bit alpha)$/;"	e	enum:__anon661bbe320d03
PIXELFORMAT_UNCOMPRESSED_R5G5B5A1	./vendor/raylib5/include/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R5G5B5A1,      \/\/ 16 bpp (1 bit alpha)$/;"	e	enum:__anon661bbe320d03
PIXELFORMAT_UNCOMPRESSED_R5G6B5	./vendor/raylib5/include/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R5G6B5,        \/\/ 16 bpp$/;"	e	enum:__anon661bbe320d03
PIXELFORMAT_UNCOMPRESSED_R8G8B8	./vendor/raylib5/include/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R8G8B8,        \/\/ 24 bpp$/;"	e	enum:__anon661bbe320d03
PIXELFORMAT_UNCOMPRESSED_R8G8B8A8	./vendor/raylib5/include/raylib.h	/^    PIXELFORMAT_UNCOMPRESSED_R8G8B8A8,      \/\/ 32 bpp$/;"	e	enum:__anon661bbe320d03
PLUS	./src/glyph.h	/^#define    PLUS /;"	d
PMAP_BUCKETS	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define PMAP_BUCKETS(/;"	d	file:
PMAP_CLEAR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define PMAP_CLEAR(/;"	d	file:
PMAP_DTOR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define PMAP_DTOR(/;"	d	file:
PMAP_EMPLACE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define PMAP_EMPLACE(/;"	d	file:
PMAP_ERASE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define PMAP_ERASE(/;"	d	file:
PMAP_FIND	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define PMAP_FIND(/;"	d	file:
PMAP_FOR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define PMAP_FOR(/;"	d	file:
PMAP_ITEM	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define PMAP_ITEM(/;"	d	file:
PMAP_PUT	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define PMAP_PUT(/;"	d	file:
PMAP_SETUP	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define PMAP_SETUP(/;"	d	file:
PMAP_SIZE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define PMAP_SIZE(/;"	d	file:
PRIMES	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^static constexpr const std::array<std::size_t, TSL_RH_NB_PRIMES> PRIMES = {{$/;"	v	namespace:tsl::rh::detail	typeref:typename:const std::array<std::size_t,TSL_RH_NB_PRIMES>
PROGRESSBAR	./vendor/raylib5/include/raygui.h	/^    PROGRESSBAR,$/;"	e	enum:__anon65c7f6000603
PROGRESS_PADDING	./vendor/raylib5/include/raygui.h	/^    PROGRESS_PADDING = 16,      \/\/ ProgressBar internal padding$/;"	e	enum:__anon65c7f6000b03
PURPLE	./vendor/raylib5/include/raylib.h	/^#define PURPLE /;"	d
Pair	./src/flecs.h	/^static const flecs::entity_t Pair = ECS_PAIR;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
PairT	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    typedef entry<KeyT, ValueT>               PairT;$/;"	t	class:emhash7::HashMap	typeref:typename:entry<KeyT,ValueT>
PairT	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    typedef std::pair<size_type, value_type>  PairT;$/;"	t	class:emhash7::HashMap	typeref:typename:std::pair<size_type,value_type>
PairT	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    typedef std::pair<value_type, size_type>  PairT;$/;"	t	class:emhash7::HashMap	typeref:typename:std::pair<value_type,size_type>
Panic	./src/flecs.h	/^static const flecs::entity_t Panic = EcsPanic;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Parent	./src/flecs.h	/^static const uint32_t Parent = EcsParent;$/;"	v	namespace:flecs	typeref:typename:const uint32_t
Partition	./vendor/STC/misc/examples/spans/matmult.c	/^typedef struct { Mat2 m00, m01, m10, m11; } Partition;$/;"	t	typeref:struct:__anonc4048f0a0108	file:
Pascal	./src/flecs.h	/^struct Pascal { };$/;"	s	struct:flecs::units::pressure
PassEntity	./src/flecs.h	/^    static constexpr bool PassEntity = $/;"	m	struct:flecs::_::each_delegate	typeref:typename:bool
PassEntity	./src/flecs.h	/^    static constexpr bool PassEntity = $/;"	m	struct:flecs::_::find_delegate	typeref:typename:bool
PassIter	./src/flecs.h	/^    static constexpr bool PassIter = $/;"	m	struct:flecs::_::each_delegate	typeref:typename:bool
PassIter	./src/flecs.h	/^    static constexpr bool PassIter = $/;"	m	struct:flecs::_::find_delegate	typeref:typename:bool
Pc_range16	./vendor/STC/include/stc/priv/utf8_prv.c	/^static const URange16 Pc_range16[] = { \/\/ Connector punctuation$/;"	v	typeref:typename:const URange16[]	file:
Pd_range16	./vendor/STC/include/stc/priv/utf8_prv.c	/^static const URange16 Pd_range16[] = { \/\/ Dash punctuation$/;"	v	typeref:typename:const URange16[]	file:
Pebi	./src/flecs.h	/^struct Pebi { };$/;"	s	struct:flecs::units
Per container-instance customization	./vendor/STC/README.md	/^## Per container-instance customization$/;"	s	chapter:STC - Smart Template Containers
Percentage	./src/flecs.h	/^struct Percentage { };$/;"	s	struct:flecs::units
Performance	./vendor/STC/README.md	/^## Performance$/;"	s	chapter:STC - Smart Template Containers
Person	./vendor/STC/misc/examples/smartpointers/box.c	/^typedef struct { cstr name, last; } Person;$/;"	t	typeref:struct:__anon71539ea50108	file:
Person	./vendor/STC/misc/examples/smartpointers/new_sptr.c	/^typedef struct { cstr name, last; } Person;$/;"	t	typeref:struct:__anonedee870e0108	file:
Person	./vendor/STC/misc/examples/smartpointers/person_arc.c	/^typedef struct { cstr name, last; } Person;$/;"	t	typeref:struct:__anon0e10c9080108	file:
Person_clone	./vendor/STC/misc/examples/smartpointers/box.c	/^Person Person_clone(Person p) {$/;"	f	typeref:typename:Person
Person_clone	./vendor/STC/misc/examples/smartpointers/new_sptr.c	/^Person Person_clone(Person p) {$/;"	f	typeref:typename:Person
Person_clone	./vendor/STC/misc/examples/smartpointers/person_arc.c	/^Person Person_clone(Person p) {$/;"	f	typeref:typename:Person
Person_cmp	./vendor/STC/misc/examples/smartpointers/box.c	/^int Person_cmp(const Person* a, const Person* b) {$/;"	f	typeref:typename:int
Person_cmp	./vendor/STC/misc/examples/smartpointers/new_sptr.c	/^int Person_cmp(const Person* a, const Person* b) {$/;"	f	typeref:typename:int
Person_cmp	./vendor/STC/misc/examples/smartpointers/person_arc.c	/^int Person_cmp(const Person* a, const Person* b) {$/;"	f	typeref:typename:int
Person_drop	./vendor/STC/misc/examples/smartpointers/box.c	/^void Person_drop(Person* p) {$/;"	f	typeref:typename:void
Person_drop	./vendor/STC/misc/examples/smartpointers/new_sptr.c	/^void Person_drop(Person* p) {$/;"	f	typeref:typename:void
Person_drop	./vendor/STC/misc/examples/smartpointers/person_arc.c	/^void Person_drop(Person* p) {$/;"	f	typeref:typename:void
Person_hash	./vendor/STC/misc/examples/smartpointers/box.c	/^uint64_t Person_hash(const Person* a) {$/;"	f	typeref:typename:uint64_t
Person_hash	./vendor/STC/misc/examples/smartpointers/new_sptr.c	/^uint64_t Person_hash(const Person* p) {$/;"	f	typeref:typename:uint64_t
Person_hash	./vendor/STC/misc/examples/smartpointers/person_arc.c	/^uint64_t Person_hash(const Person* a) {$/;"	f	typeref:typename:uint64_t
Person_make	./vendor/STC/misc/examples/smartpointers/box.c	/^Person Person_make(const char* name, const char* last) {$/;"	f	typeref:typename:Person
Person_make	./vendor/STC/misc/examples/smartpointers/new_sptr.c	/^Person Person_make(const char* name, const char* last) {$/;"	f	typeref:typename:Person
Person_make	./vendor/STC/misc/examples/smartpointers/person_arc.c	/^Person Person_make(const char* name, const char* last) {$/;"	f	typeref:typename:Person
Peta	./src/flecs.h	/^struct Peta { };$/;"	s	struct:flecs::units
Pf_range16	./vendor/STC/include/stc/priv/utf8_prv.c	/^static const URange16 Pf_range16[] = { \/\/ Final punctuation$/;"	v	typeref:typename:const URange16[]	file:
Phase	./src/flecs.h	/^static const flecs::entity_t Phase = EcsPhase;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Philosopher	./vendor/STC/misc/examples/coroutines/dining_philosophers.c	/^struct Philosopher {$/;"	s	file:
Pi_range16	./vendor/STC/include/stc/priv/utf8_prv.c	/^static const URange16 Pi_range16[] = { \/\/ Initial punctuation$/;"	v	typeref:typename:const URange16[]	file:
Pico	./src/flecs.h	/^struct Pico { };$/;"	s	struct:flecs::units
PicoMeters	./src/flecs.h	/^struct PicoMeters { };$/;"	s	struct:flecs::units::length
PicoSeconds	./src/flecs.h	/^struct PicoSeconds { };$/;"	s	struct:flecs::units::duration
Pipeline	./src/flecs.h	/^static const flecs::entity_t Pipeline = ecs_id(EcsPipeline);$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
PipelineStats	./src/flecs.h	/^using PipelineStats = EcsPipelineStats;$/;"	t	namespace:flecs	typeref:typename:EcsPipelineStats
PixelFormat	./vendor/raylib5/include/raylib.h	/^} PixelFormat;$/;"	t	typeref:enum:__anon661bbe320d03
Pixels	./src/flecs.h	/^struct Pixels { };$/;"	s	struct:flecs::units::length
Point	./vendor/STC/misc/examples/algorithms/shape.c	/^} Point;$/;"	t	typeref:struct:__anon6b1a6e6c0108	file:
Point	./vendor/STC/misc/examples/algorithms/shape.cpp	/^struct Point {$/;"	s	file:
Point	./vendor/STC/misc/examples/hashmaps/new_map.c	/^typedef struct Point { int x, y; } Point;$/;"	s	file:
Point	./vendor/STC/misc/examples/hashmaps/new_map.c	/^typedef struct Point { int x, y; } Point;$/;"	t	typeref:struct:Point	file:
Point	./vendor/STC/misc/examples/linkedlists/new_list.c	/^typedef struct Point { int x, y; } Point;$/;"	s	file:
Point	./vendor/STC/misc/examples/linkedlists/new_list.c	/^typedef struct Point { int x, y; } Point;$/;"	t	typeref:struct:Point	file:
Point	./vendor/STC/misc/examples/priorityqueues/new_pque.c	/^typedef struct Point { int x, y; } Point;$/;"	s	file:
Point	./vendor/STC/misc/examples/priorityqueues/new_pque.c	/^typedef struct Point { int x, y; } Point;$/;"	t	typeref:struct:Point	file:
Point	./vendor/STC/misc/examples/queues/new_queue.c	/^typedef struct Point { int x, y; } Point;$/;"	s	file:
Point	./vendor/STC/misc/examples/queues/new_queue.c	/^typedef struct Point { int x, y; } Point;$/;"	t	typeref:struct:Point	file:
Point	./vendor/STC/misc/examples/smartpointers/box2.c	/^} Point;$/;"	t	typeref:struct:__anon9bc77dd70108	file:
Point	./vendor/STC/misc/examples/sortedmaps/new_smap.c	/^typedef struct Point { int x, y; } Point;$/;"	s	file:
Point	./vendor/STC/misc/examples/sortedmaps/new_smap.c	/^typedef struct Point { int x, y; } Point;$/;"	t	typeref:struct:Point	file:
Point	./vendor/STC/misc/examples/vectors/new_vec.c	/^typedef struct Point { int x, y; } Point;$/;"	s	file:
Point	./vendor/STC/misc/examples/vectors/new_vec.c	/^typedef struct Point { int x, y; } Point;$/;"	t	typeref:struct:Point	file:
Poly	./src/flecs.h	/^using Poly = EcsPoly;$/;"	t	namespace:flecs	typeref:typename:EcsPoly
Polygon	./vendor/STC/misc/examples/algorithms/shape.c	/^} Polygon;$/;"	t	typeref:struct:__anon6b1a6e6c0308	file:
Polygon	./vendor/STC/misc/examples/algorithms/shape.cpp	/^struct Polygon : public Shape$/;"	s	file:
Polygon_addPoint	./vendor/STC/misc/examples/algorithms/shape.c	/^void Polygon_addPoint(Polygon* self, Point p)$/;"	f	typeref:typename:void
Polygon_api	./vendor/STC/misc/examples/algorithms/shape.c	/^struct ShapeAPI Polygon_api = {$/;"	v	typeref:struct:ShapeAPI
Polygon_draw	./vendor/STC/misc/examples/algorithms/shape.c	/^static void Polygon_draw(const Shape* shape)$/;"	f	typeref:typename:void	file:
Polygon_drop	./vendor/STC/misc/examples/algorithms/shape.c	/^static void Polygon_drop(Shape* shape)$/;"	f	typeref:typename:void	file:
Polygon_init	./vendor/STC/misc/examples/algorithms/shape.c	/^Polygon Polygon_init(void) {$/;"	f	typeref:typename:Polygon
Position	./src/components.h	/^typedef Vector2 Position;$/;"	t	typeref:typename:Vector2
PostFrame	./src/flecs.h	/^static const flecs::entity_t PostFrame = EcsPostFrame;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
PostLoad	./src/flecs.h	/^static const flecs::entity_t PostLoad = EcsPostLoad;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
PostUpdate	./src/flecs.h	/^static const flecs::entity_t PostUpdate = EcsPostUpdate;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
PreFrame	./src/flecs.h	/^static const flecs::entity_t PreFrame = EcsPreFrame;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
PreStore	./src/flecs.h	/^static const flecs::entity_t PreStore = EcsPreStore;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
PreUpdate	./src/flecs.h	/^static const flecs::entity_t PreUpdate = EcsPreUpdate;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
PredEq	./src/flecs.h	/^static const flecs::entity_t PredEq = EcsPredEq;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
PredLookup	./src/flecs.h	/^static const flecs::entity_t PredLookup = EcsPredLookup;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
PredMatch	./src/flecs.h	/^static const flecs::entity_t PredMatch = EcsPredMatch;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Predefined template parameter functions	./vendor/STC/docs/algorithm_api.md	/^### Predefined template parameter functions$/;"	S	section:STC Algorithms""Generic algorithms
Prefab	./src/flecs.h	/^static const flecs::entity_t Prefab = EcsPrefab;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Prefixes	./src/flecs.h	/^struct Prefixes { };$/;"	s	struct:flecs::units
Pressure	./src/flecs.h	/^struct Pressure { };$/;"	s	struct:flecs::units
Primitive	./src/flecs.h	/^using Primitive = EcsPrimitive;$/;"	t	namespace:flecs	typeref:typename:EcsPrimitive
PrimitiveKindLast	./src/flecs.h	/^static const primitive_kind_t PrimitiveKindLast = EcsPrimitiveKindLast;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
PrimitiveType	./src/flecs.h	/^static const type_kind_t PrimitiveType = EcsPrimitiveType;$/;"	v	namespace:flecs::meta	typeref:typename:const type_kind_t
Private	./src/flecs.h	/^static const flecs::entity_t Private = EcsPrivate;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
ProgressRateFilters	./src/flecs.c	/^void ProgressRateFilters(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
ProgressTickSource	./src/flecs.c	/^void ProgressTickSource(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
ProgressTimers	./src/flecs.c	/^void ProgressTimers(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
QUESTION	./src/glyph.h	/^#define    QUESTION /;"	d
QUOTE_D	./src/glyph.h	/^#define    QUOTE_D /;"	d
QUOTE_S	./src/glyph.h	/^#define    QUOTE_S /;"	d
Quantity	./src/flecs.h	/^static const flecs::entity_t Quantity = EcsQuantity;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Quaternion	./vendor/raylib5/include/raylib.h	/^typedef Vector4 Quaternion;$/;"	t	typeref:typename:Vector4
Quaternion	./vendor/raylib5/include/raymath.h	/^typedef Vector4 Quaternion;$/;"	t	typeref:typename:Vector4
QuaternionAdd	./vendor/raylib5/include/raymath.h	/^RMAPI Quaternion QuaternionAdd(Quaternion q1, Quaternion q2)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionAddValue	./vendor/raylib5/include/raymath.h	/^RMAPI Quaternion QuaternionAddValue(Quaternion q, float add)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionCubicHermiteSpline	./vendor/raylib5/include/raymath.h	/^RMAPI Quaternion QuaternionCubicHermiteSpline(Quaternion q1, Quaternion outTangent1, Quaternion /;"	f	typeref:typename:RMAPI Quaternion
QuaternionDivide	./vendor/raylib5/include/raymath.h	/^RMAPI Quaternion QuaternionDivide(Quaternion q1, Quaternion q2)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionEquals	./vendor/raylib5/include/raymath.h	/^RMAPI int QuaternionEquals(Quaternion p, Quaternion q)$/;"	f	typeref:typename:RMAPI int
QuaternionFromAxisAngle	./vendor/raylib5/include/raymath.h	/^RMAPI Quaternion QuaternionFromAxisAngle(Vector3 axis, float angle)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionFromEuler	./vendor/raylib5/include/raymath.h	/^RMAPI Quaternion QuaternionFromEuler(float pitch, float yaw, float roll)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionFromMatrix	./vendor/raylib5/include/raymath.h	/^RMAPI Quaternion QuaternionFromMatrix(Matrix mat)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionFromVector3ToVector3	./vendor/raylib5/include/raymath.h	/^RMAPI Quaternion QuaternionFromVector3ToVector3(Vector3 from, Vector3 to)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionIdentity	./vendor/raylib5/include/raymath.h	/^RMAPI Quaternion QuaternionIdentity(void)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionInvert	./vendor/raylib5/include/raymath.h	/^RMAPI Quaternion QuaternionInvert(Quaternion q)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionLength	./vendor/raylib5/include/raymath.h	/^RMAPI float QuaternionLength(Quaternion q)$/;"	f	typeref:typename:RMAPI float
QuaternionLerp	./vendor/raylib5/include/raymath.h	/^RMAPI Quaternion QuaternionLerp(Quaternion q1, Quaternion q2, float amount)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionMultiply	./vendor/raylib5/include/raymath.h	/^RMAPI Quaternion QuaternionMultiply(Quaternion q1, Quaternion q2)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionNlerp	./vendor/raylib5/include/raymath.h	/^RMAPI Quaternion QuaternionNlerp(Quaternion q1, Quaternion q2, float amount)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionNormalize	./vendor/raylib5/include/raymath.h	/^RMAPI Quaternion QuaternionNormalize(Quaternion q)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionScale	./vendor/raylib5/include/raymath.h	/^RMAPI Quaternion QuaternionScale(Quaternion q, float mul)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionSlerp	./vendor/raylib5/include/raymath.h	/^RMAPI Quaternion QuaternionSlerp(Quaternion q1, Quaternion q2, float amount)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionSubtract	./vendor/raylib5/include/raymath.h	/^RMAPI Quaternion QuaternionSubtract(Quaternion q1, Quaternion q2)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionSubtractValue	./vendor/raylib5/include/raymath.h	/^RMAPI Quaternion QuaternionSubtractValue(Quaternion q, float sub)$/;"	f	typeref:typename:RMAPI Quaternion
QuaternionToAxisAngle	./vendor/raylib5/include/raymath.h	/^RMAPI void QuaternionToAxisAngle(Quaternion q, Vector3 *outAxis, float *outAngle)$/;"	f	typeref:typename:RMAPI void
QuaternionToEuler	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 QuaternionToEuler(Quaternion q)$/;"	f	typeref:typename:RMAPI Vector3
QuaternionToMatrix	./vendor/raylib5/include/raymath.h	/^RMAPI Matrix QuaternionToMatrix(Quaternion q)$/;"	f	typeref:typename:RMAPI Matrix
QuaternionTransform	./vendor/raylib5/include/raymath.h	/^RMAPI Quaternion QuaternionTransform(Quaternion q, Matrix mat)$/;"	f	typeref:typename:RMAPI Quaternion
Query	./src/flecs.h	/^static const flecs::entity_t Query = EcsQuery;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
R	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^enum {SAMPLES = 2, N = 60000000, R = 4};$/;"	e	enum:__anonfac950030403	file:
R	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^enum {SAMPLES = 2, N = 2000000, R = 4};$/;"	e	enum:__anonca721fef0403	file:
R	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^enum {SAMPLES = 2, N = 10000000, R = 4};$/;"	e	enum:__anona03d81450403	file:
R	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^enum {SAMPLES = 2, N = 1000000, R = 4};$/;"	e	enum:__anon0565975a0403	file:
R	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^enum {SAMPLES = 2, N = 60000000, R = 4};$/;"	e	enum:__anon603333870403	file:
RAD2DEG	./vendor/raylib5/include/raylib.h	/^    #define RAD2DEG /;"	d
RAD2DEG	./vendor/raylib5/include/raymath.h	/^    #define RAD2DEG /;"	d
RAII scope macros	./vendor/STC/docs/algorithm_api.md	/^## RAII scope macros$/;"	s	chapter:STC Algorithms
RAND	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define RAND(/;"	d	file:
RAYGUIAPI	./vendor/raylib5/include/raygui.h	/^        #define RAYGUIAPI /;"	d
RAYGUIAPI	./vendor/raylib5/include/raygui.h	/^    #define RAYGUIAPI /;"	d
RAYGUI_CALLOC	./vendor/raylib5/include/raygui.h	/^    #define RAYGUI_CALLOC(/;"	d
RAYGUI_CLITERAL	./vendor/raylib5/include/raygui.h	/^    #define RAYGUI_CLITERAL(/;"	d
RAYGUI_COLORBARALPHA_CHECKED_SIZE	./vendor/raylib5/include/raygui.h	/^        #define RAYGUI_COLORBARALPHA_CHECKED_SIZE /;"	d
RAYGUI_FREE	./vendor/raylib5/include/raygui.h	/^    #define RAYGUI_FREE(/;"	d
RAYGUI_GRID_ALPHA	./vendor/raylib5/include/raygui.h	/^        #define RAYGUI_GRID_ALPHA /;"	d
RAYGUI_GROUPBOX_LINE_THICK	./vendor/raylib5/include/raygui.h	/^        #define RAYGUI_GROUPBOX_LINE_THICK /;"	d
RAYGUI_H	./vendor/raylib5/include/raygui.h	/^#define RAYGUI_H$/;"	d
RAYGUI_ICON_DATA_ELEMENTS	./vendor/raylib5/include/raygui.h	/^#define RAYGUI_ICON_DATA_ELEMENTS /;"	d
RAYGUI_ICON_MAX_ICONS	./vendor/raylib5/include/raygui.h	/^#define RAYGUI_ICON_MAX_ICONS /;"	d
RAYGUI_ICON_MAX_NAME_LENGTH	./vendor/raylib5/include/raygui.h	/^#define RAYGUI_ICON_MAX_NAME_LENGTH /;"	d
RAYGUI_ICON_SIZE	./vendor/raylib5/include/raygui.h	/^    #define RAYGUI_ICON_SIZE /;"	d
RAYGUI_ICON_SIZE	./vendor/raylib5/include/raygui.h	/^#define RAYGUI_ICON_SIZE /;"	d
RAYGUI_IMPLEMENTATION	./src/main.c	/^#define RAYGUI_IMPLEMENTATION$/;"	d	file:
RAYGUI_LINE_MARGIN_TEXT	./vendor/raylib5/include/raygui.h	/^        #define RAYGUI_LINE_MARGIN_TEXT /;"	d
RAYGUI_LINE_TEXT_PADDING	./vendor/raylib5/include/raygui.h	/^        #define RAYGUI_LINE_TEXT_PADDING /;"	d
RAYGUI_LOG	./vendor/raylib5/include/raygui.h	/^  #define RAYGUI_LOG(/;"	d
RAYGUI_MALLOC	./vendor/raylib5/include/raygui.h	/^    #define RAYGUI_MALLOC(/;"	d
RAYGUI_MAX_CONTROLS	./vendor/raylib5/include/raygui.h	/^#define RAYGUI_MAX_CONTROLS /;"	d
RAYGUI_MAX_PROPS_BASE	./vendor/raylib5/include/raygui.h	/^#define RAYGUI_MAX_PROPS_BASE /;"	d
RAYGUI_MAX_PROPS_EXTENDED	./vendor/raylib5/include/raygui.h	/^#define RAYGUI_MAX_PROPS_EXTENDED /;"	d
RAYGUI_MAX_TEXT_LINES	./vendor/raylib5/include/raygui.h	/^    #define RAYGUI_MAX_TEXT_LINES /;"	d
RAYGUI_MESSAGEBOX_BUTTON_HEIGHT	./vendor/raylib5/include/raygui.h	/^        #define RAYGUI_MESSAGEBOX_BUTTON_HEIGHT /;"	d
RAYGUI_MESSAGEBOX_BUTTON_PADDING	./vendor/raylib5/include/raygui.h	/^        #define RAYGUI_MESSAGEBOX_BUTTON_PADDING /;"	d
RAYGUI_MIN_MOUSE_WHEEL_SPEED	./vendor/raylib5/include/raygui.h	/^    #define RAYGUI_MIN_MOUSE_WHEEL_SPEED /;"	d
RAYGUI_MIN_SCROLLBAR_HEIGHT	./vendor/raylib5/include/raygui.h	/^    #define RAYGUI_MIN_SCROLLBAR_HEIGHT /;"	d
RAYGUI_MIN_SCROLLBAR_WIDTH	./vendor/raylib5/include/raygui.h	/^    #define RAYGUI_MIN_SCROLLBAR_WIDTH /;"	d
RAYGUI_PANEL_BORDER_WIDTH	./vendor/raylib5/include/raygui.h	/^        #define RAYGUI_PANEL_BORDER_WIDTH /;"	d
RAYGUI_SUPPORT_LOG_INFO	./vendor/raylib5/include/raygui.h	/^#define RAYGUI_SUPPORT_LOG_INFO$/;"	d
RAYGUI_TABBAR_ITEM_WIDTH	./vendor/raylib5/include/raygui.h	/^    #define RAYGUI_TABBAR_ITEM_WIDTH /;"	d
RAYGUI_TEXTBOX_AUTO_CURSOR_COOLDOWN	./vendor/raylib5/include/raygui.h	/^        #define RAYGUI_TEXTBOX_AUTO_CURSOR_COOLDOWN /;"	d
RAYGUI_TEXTBOX_AUTO_CURSOR_DELAY	./vendor/raylib5/include/raygui.h	/^        #define RAYGUI_TEXTBOX_AUTO_CURSOR_DELAY /;"	d
RAYGUI_TEXTFORMAT_MAX_SIZE	./vendor/raylib5/include/raygui.h	/^        #define RAYGUI_TEXTFORMAT_MAX_SIZE /;"	d
RAYGUI_TEXTINPUTBOX_BUTTON_HEIGHT	./vendor/raylib5/include/raygui.h	/^        #define RAYGUI_TEXTINPUTBOX_BUTTON_HEIGHT /;"	d
RAYGUI_TEXTINPUTBOX_BUTTON_PADDING	./vendor/raylib5/include/raygui.h	/^        #define RAYGUI_TEXTINPUTBOX_BUTTON_PADDING /;"	d
RAYGUI_TEXTINPUTBOX_HEIGHT	./vendor/raylib5/include/raygui.h	/^        #define RAYGUI_TEXTINPUTBOX_HEIGHT /;"	d
RAYGUI_TEXTSPLIT_MAX_ITEMS	./vendor/raylib5/include/raygui.h	/^        #define RAYGUI_TEXTSPLIT_MAX_ITEMS /;"	d
RAYGUI_TEXTSPLIT_MAX_TEXT_SIZE	./vendor/raylib5/include/raygui.h	/^        #define RAYGUI_TEXTSPLIT_MAX_TEXT_SIZE /;"	d
RAYGUI_TOGGLEGROUP_MAX_ITEMS	./vendor/raylib5/include/raygui.h	/^        #define RAYGUI_TOGGLEGROUP_MAX_ITEMS /;"	d
RAYGUI_VALUEBOX_MAX_CHARS	./vendor/raylib5/include/raygui.h	/^        #define RAYGUI_VALUEBOX_MAX_CHARS /;"	d
RAYGUI_VERSION	./vendor/raylib5/include/raygui.h	/^#define RAYGUI_VERSION /;"	d
RAYGUI_VERSION_MAJOR	./vendor/raylib5/include/raygui.h	/^#define RAYGUI_VERSION_MAJOR /;"	d
RAYGUI_VERSION_MINOR	./vendor/raylib5/include/raygui.h	/^#define RAYGUI_VERSION_MINOR /;"	d
RAYGUI_VERSION_PATCH	./vendor/raylib5/include/raygui.h	/^#define RAYGUI_VERSION_PATCH /;"	d
RAYGUI_WINDOWBOX_STATUSBAR_HEIGHT	./vendor/raylib5/include/raygui.h	/^        #define RAYGUI_WINDOWBOX_STATUSBAR_HEIGHT /;"	d
RAYLIB_H	./vendor/raylib5/include/raylib.h	/^#define RAYLIB_H$/;"	d
RAYLIB_VERSION	./vendor/raylib5/include/raylib.h	/^#define RAYLIB_VERSION /;"	d
RAYLIB_VERSION_MAJOR	./vendor/raylib5/include/raylib.h	/^#define RAYLIB_VERSION_MAJOR /;"	d
RAYLIB_VERSION_MINOR	./vendor/raylib5/include/raylib.h	/^#define RAYLIB_VERSION_MINOR /;"	d
RAYLIB_VERSION_PATCH	./vendor/raylib5/include/raylib.h	/^#define RAYLIB_VERSION_PATCH /;"	d
RAYMATH_H	./vendor/raylib5/include/raymath.h	/^#define RAYMATH_H$/;"	d
RAYWHITE	./vendor/raylib5/include/raylib.h	/^#define RAYWHITE /;"	d
RBRACE	./src/glyph.h	/^#define    RBRACE /;"	d
RBRACKET	./src/glyph.h	/^#define    RBRACKET /;"	d
RDONLY	./vendor/fmt/include/os.h	/^    RDONLY = FMT_POSIX(O_RDONLY),  \/\/ Open for reading only.$/;"	e	enum:file::__anon511c5d600103
RDWR	./vendor/fmt/include/os.h	/^    RDWR = FMT_POSIX(O_RDWR),      \/\/ Open for reading and writing.$/;"	e	enum:file::__anon511c5d600103
RED	./vendor/raylib5/include/raylib.h	/^#define RED /;"	d
REHASH_SIZE_MULTIPLICATION_FACTOR	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^  static constexpr double REHASH_SIZE_MULTIPLICATION_FACTOR =$/;"	m	class:tsl::rh::mod_growth_policy	typeref:typename:double
RLAPI	./vendor/raylib5/include/raylib.h	/^        #define RLAPI /;"	d
RLAPI	./vendor/raylib5/include/raylib.h	/^    #define RLAPI /;"	d
RL_BOOL_TYPE	./vendor/raylib5/include/raylib.h	/^    #define RL_BOOL_TYPE$/;"	d
RL_CALLOC	./vendor/raylib5/include/raylib.h	/^    #define RL_CALLOC(/;"	d
RL_COLOR_TYPE	./vendor/raylib5/include/raylib.h	/^#define RL_COLOR_TYPE$/;"	d
RL_FREE	./vendor/raylib5/include/raylib.h	/^    #define RL_FREE(/;"	d
RL_MALLOC	./vendor/raylib5/include/raylib.h	/^    #define RL_MALLOC(/;"	d
RL_MATRIX_TYPE	./vendor/raylib5/include/raylib.h	/^#define RL_MATRIX_TYPE$/;"	d
RL_MATRIX_TYPE	./vendor/raylib5/include/raymath.h	/^#define RL_MATRIX_TYPE$/;"	d
RL_QUATERNION_TYPE	./vendor/raylib5/include/raylib.h	/^#define RL_QUATERNION_TYPE$/;"	d
RL_QUATERNION_TYPE	./vendor/raylib5/include/raymath.h	/^#define RL_QUATERNION_TYPE$/;"	d
RL_REALLOC	./vendor/raylib5/include/raylib.h	/^    #define RL_REALLOC(/;"	d
RL_RECTANGLE_TYPE	./vendor/raylib5/include/raylib.h	/^#define RL_RECTANGLE_TYPE$/;"	d
RL_VECTOR2_TYPE	./vendor/raylib5/include/raylib.h	/^#define RL_VECTOR2_TYPE$/;"	d
RL_VECTOR2_TYPE	./vendor/raylib5/include/raymath.h	/^#define RL_VECTOR2_TYPE$/;"	d
RL_VECTOR3_TYPE	./vendor/raylib5/include/raylib.h	/^#define RL_VECTOR3_TYPE$/;"	d
RL_VECTOR3_TYPE	./vendor/raylib5/include/raymath.h	/^#define RL_VECTOR3_TYPE$/;"	d
RL_VECTOR4_TYPE	./vendor/raylib5/include/raylib.h	/^#define RL_VECTOR4_TYPE$/;"	d
RL_VECTOR4_TYPE	./vendor/raylib5/include/raymath.h	/^#define RL_VECTOR4_TYPE$/;"	d
RMAPI	./vendor/raylib5/include/raymath.h	/^        #define RMAPI /;"	d
RMAPI	./vendor/raylib5/include/raymath.h	/^    #define RMAPI /;"	d
RMAP_BUCKETS	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define RMAP_BUCKETS(/;"	d	file:
RMAP_CLEAR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define RMAP_CLEAR(/;"	d	file:
RMAP_DTOR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define RMAP_DTOR(/;"	d	file:
RMAP_EMPLACE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define RMAP_EMPLACE(/;"	d	file:
RMAP_ERASE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define RMAP_ERASE(/;"	d	file:
RMAP_FIND	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define RMAP_FIND(/;"	d	file:
RMAP_FOR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define RMAP_FOR(/;"	d	file:
RMAP_ITEM	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define RMAP_ITEM(/;"	d	file:
RMAP_PUT	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define RMAP_PUT(/;"	d	file:
RMAP_SETUP	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define RMAP_SETUP(/;"	d	file:
RMAP_SIZE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define RMAP_SIZE(/;"	d	file:
ROBIN_HOOD	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        ROBIN_HOOD(NODISCARD)$/;"	f	class:robin_hood::detail::Table::DataNode
ROBIN_HOOD	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    ROBIN_HOOD(NODISCARD) bool empty() const noexcept {$/;"	f	class:robin_hood::detail::Table
ROBIN_HOOD	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    ROBIN_HOOD(NODISCARD) key_type const& getFirstConst(Node const& n) const noexcept {$/;"	f	class:robin_hood::detail::Table
ROBIN_HOOD	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    ROBIN_HOOD(NODISCARD) key_type const& getFirstConst(key_type const& k) const noexcept {$/;"	f	class:robin_hood::detail::Table
ROBIN_HOOD	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    ROBIN_HOOD(NODISCARD) size_t calcMaxNumElementsAllowed(size_t maxElements) const noexcept {$/;"	f	class:robin_hood::detail::Table
ROBIN_HOOD	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    ROBIN_HOOD(NODISCARD) size_t calcNumBytesInfo(size_t numElements) const noexcept {$/;"	f	class:robin_hood::detail::Table
ROBIN_HOOD	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    ROBIN_HOOD(NODISCARD) size_t calcNumBytesTotal(size_t numElements) const {$/;"	f	class:robin_hood::detail::Table
ROBIN_HOOD	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    ROBIN_HOOD(NODISCARD) size_t calcNumElementsToAlloc() const noexcept {$/;"	f	class:robin_hood::detail::BulkPoolAllocator
ROBIN_HOOD	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    ROBIN_HOOD(NODISCARD) size_t mask() const noexcept {$/;"	f	class:robin_hood::detail::Table
ROBIN_HOOD	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    ROBIN_HOOD(NODISCARD)$/;"	f	class:robin_hood::detail::Table
ROBIN_HOOD	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    ROBIN_HOOD(NOINLINE) T* performAllocation() {$/;"	f	class:robin_hood::detail::BulkPoolAllocator
ROBIN_HOOD	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    ROBIN_HOOD(NOINLINE) void throwOverflowError() const {$/;"	f	class:robin_hood::detail::Table
ROBIN_HOOD	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#define ROBIN_HOOD(x) ROBIN_HOOD_/;"	d
ROBIN_HOOD	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^[[noreturn]] ROBIN_HOOD(NOINLINE)$/;"	f	namespace:robin_hood::detail
ROBIN_HOOD_COUNT	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#    define ROBIN_HOOD_COUNT(/;"	d
ROBIN_HOOD_COUNT_LEADING_ZEROES	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#        define ROBIN_HOOD_COUNT_LEADING_ZEROES(/;"	d
ROBIN_HOOD_COUNT_TRAILING_ZEROES	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#        define ROBIN_HOOD_COUNT_TRAILING_ZEROES(/;"	d
ROBIN_HOOD_HASH_INT	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#define ROBIN_HOOD_HASH_INT(/;"	d
ROBIN_HOOD_H_INCLUDED	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#define ROBIN_HOOD_H_INCLUDED$/;"	d
ROBIN_HOOD_IS_TRIVIALLY_COPYABLE	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#    define ROBIN_HOOD_IS_TRIVIALLY_COPYABLE(/;"	d
ROBIN_HOOD_LIKELY	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#    define ROBIN_HOOD_LIKELY(/;"	d
ROBIN_HOOD_LOG	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#    define ROBIN_HOOD_LOG(/;"	d
ROBIN_HOOD_PRIVATE_DEFINITION_BIG_ENDIAN	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#    define ROBIN_HOOD_PRIVATE_DEFINITION_BIG_ENDIAN(/;"	d
ROBIN_HOOD_PRIVATE_DEFINITION_BITNESS	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#    define ROBIN_HOOD_PRIVATE_DEFINITION_BITNESS(/;"	d
ROBIN_HOOD_PRIVATE_DEFINITION_BITSCANFORWARD	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#            define ROBIN_HOOD_PRIVATE_DEFINITION_BITSCANFORWARD(/;"	d
ROBIN_HOOD_PRIVATE_DEFINITION_BROKEN_CONSTEXPR	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#        define ROBIN_HOOD_PRIVATE_DEFINITION_BROKEN_CONSTEXPR(/;"	d
ROBIN_HOOD_PRIVATE_DEFINITION_BROKEN_CONSTEXPR	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#    define ROBIN_HOOD_PRIVATE_DEFINITION_BROKEN_CONSTEXPR(/;"	d
ROBIN_HOOD_PRIVATE_DEFINITION_CLZ	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#            define ROBIN_HOOD_PRIVATE_DEFINITION_CLZ(/;"	d
ROBIN_HOOD_PRIVATE_DEFINITION_CTZ	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#            define ROBIN_HOOD_PRIVATE_DEFINITION_CTZ(/;"	d
ROBIN_HOOD_PRIVATE_DEFINITION_CXX	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#define ROBIN_HOOD_PRIVATE_DEFINITION_CXX(/;"	d
ROBIN_HOOD_PRIVATE_DEFINITION_CXX11	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#define ROBIN_HOOD_PRIVATE_DEFINITION_CXX11(/;"	d
ROBIN_HOOD_PRIVATE_DEFINITION_CXX14	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#define ROBIN_HOOD_PRIVATE_DEFINITION_CXX14(/;"	d
ROBIN_HOOD_PRIVATE_DEFINITION_CXX17	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#define ROBIN_HOOD_PRIVATE_DEFINITION_CXX17(/;"	d
ROBIN_HOOD_PRIVATE_DEFINITION_CXX98	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#define ROBIN_HOOD_PRIVATE_DEFINITION_CXX98(/;"	d
ROBIN_HOOD_PRIVATE_DEFINITION_FALLTHROUGH	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#    define ROBIN_HOOD_PRIVATE_DEFINITION_FALLTHROUGH(/;"	d
ROBIN_HOOD_PRIVATE_DEFINITION_HAS_EXCEPTIONS	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#    define ROBIN_HOOD_PRIVATE_DEFINITION_HAS_EXCEPTIONS(/;"	d
ROBIN_HOOD_PRIVATE_DEFINITION_HAS_NATIVE_WCHART	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#        define ROBIN_HOOD_PRIVATE_DEFINITION_HAS_NATIVE_WCHART(/;"	d
ROBIN_HOOD_PRIVATE_DEFINITION_HAS_NATIVE_WCHART	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#    define ROBIN_HOOD_PRIVATE_DEFINITION_HAS_NATIVE_WCHART(/;"	d
ROBIN_HOOD_PRIVATE_DEFINITION_LITTLE_ENDIAN	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#    define ROBIN_HOOD_PRIVATE_DEFINITION_LITTLE_ENDIAN(/;"	d
ROBIN_HOOD_PRIVATE_DEFINITION_NODISCARD	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#    define ROBIN_HOOD_PRIVATE_DEFINITION_NODISCARD(/;"	d
ROBIN_HOOD_PRIVATE_DEFINITION_NOINLINE	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#    define ROBIN_HOOD_PRIVATE_DEFINITION_NOINLINE(/;"	d
ROBIN_HOOD_STD	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#    define ROBIN_HOOD_STD /;"	d
ROBIN_HOOD_TRACE	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#    define ROBIN_HOOD_TRACE(/;"	d
ROBIN_HOOD_UNLIKELY	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#    define ROBIN_HOOD_UNLIKELY(/;"	d
ROBIN_HOOD_UNUSED	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#define ROBIN_HOOD_UNUSED(/;"	d
ROBIN_HOOD_VERSION_MAJOR	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#define ROBIN_HOOD_VERSION_MAJOR /;"	d
ROBIN_HOOD_VERSION_MINOR	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#define ROBIN_HOOD_VERSION_MINOR /;"	d
ROBIN_HOOD_VERSION_PATCH	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#define ROBIN_HOOD_VERSION_PATCH /;"	d
ROTL	./vendor/STC/misc/benchmarks/various/quicksort_bench.c	/^#define ROTL(/;"	d	file:
RPAREN	./src/glyph.h	/^#define    RPAREN /;"	d
RUN_TEST	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define RUN_TEST(/;"	d	file:
RViking	./vendor/STC/misc/examples/hashmaps/vikings.c	/^typedef struct RViking {$/;"	s	file:
RViking	./vendor/STC/misc/examples/hashmaps/vikings.c	/^} RViking;$/;"	t	typeref:struct:RViking	file:
RViking_eq	./vendor/STC/misc/examples/hashmaps/vikings.c	/^static inline bool RViking_eq(const RViking* rx, const RViking* ry) {$/;"	f	typeref:typename:bool	file:
R_ARROW	./src/glyph.h	/^#define    R_ARROW /;"	d
R_BRACE	./src/glyph.h	/^#define    R_BRACE /;"	d
R_BRACKET	./src/glyph.h	/^#define    R_BRACKET /;"	d
R_PAREN	./src/glyph.h	/^#define    R_PAREN /;"	d
Radians	./src/flecs.h	/^struct Radians { };$/;"	s	struct:flecs::units::angle
RandomizeTimers	./src/flecs.c	/^void RandomizeTimers(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
Range	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	t	typeref:struct:__anonfac950030208	file:
Range	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	t	typeref:struct:__anonca721fef0208	file:
Range	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	t	typeref:struct:__anona03d81450208	file:
Range	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	t	typeref:struct:__anon0565975a0208	file:
Range	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	t	typeref:struct:__anon603333870208	file:
Ranged for-loops	./vendor/STC/docs/algorithm_api.md	/^## Ranged for-loops$/;"	s	chapter:STC Algorithms
RateFilter	./src/flecs.h	/^using RateFilter = EcsRateFilter;$/;"	t	namespace:flecs	typeref:typename:EcsRateFilter
Ray	./vendor/raylib5/include/raylib.h	/^typedef struct Ray {$/;"	s
Ray	./vendor/raylib5/include/raylib.h	/^} Ray;$/;"	t	typeref:struct:Ray
RayCollision	./vendor/raylib5/include/raylib.h	/^typedef struct RayCollision {$/;"	s
RayCollision	./vendor/raylib5/include/raylib.h	/^} RayCollision;$/;"	t	typeref:struct:RayCollision
Rectangle	./vendor/STC/misc/examples/smartpointers/box2.c	/^} Rectangle;$/;"	t	typeref:struct:__anon9bc77dd70208	file:
Rectangle	./vendor/raylib5/include/raygui.h	/^    typedef struct Rectangle {$/;"	s
Rectangle	./vendor/raylib5/include/raygui.h	/^    } Rectangle;$/;"	t	typeref:struct:Rectangle
Rectangle	./vendor/raylib5/include/raylib.h	/^typedef struct Rectangle {$/;"	s
Rectangle	./vendor/raylib5/include/raylib.h	/^} Rectangle;$/;"	t	typeref:struct:Rectangle
ReduceStats	./src/flecs.c	/^void ReduceStats(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
Reflexive	./src/flecs.h	/^static const flecs::entity_t Reflexive = EcsReflexive;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Regex Cheatsheet	./vendor/STC/docs/cregex_api.md	/^## Regex Cheatsheet$/;"	s	chapter:STC [cregex](../include/stc/cregex.h): Regular Expressions
Relationship	./src/flecs.h	/^static const flecs::entity_t Relationship = EcsRelationship;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Remap	./vendor/raylib5/include/raymath.h	/^RMAPI float Remap(float value, float inputStart, float inputEnd, float outputStart, float output/;"	f	typeref:typename:RMAPI float
Remove	./src/flecs.h	/^static const flecs::entity_t Remove = EcsRemove;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
RenderTexture	./vendor/raylib5/include/raylib.h	/^typedef struct RenderTexture {$/;"	s
RenderTexture	./vendor/raylib5/include/raylib.h	/^} RenderTexture;$/;"	t	typeref:struct:RenderTexture
RenderTexture2D	./vendor/raylib5/include/raylib.h	/^typedef RenderTexture RenderTexture2D;$/;"	t	typeref:typename:RenderTexture
Rest	./src/flecs.h	/^using Rest = EcsRest;$/;"	t	namespace:flecs	typeref:typename:EcsRest
S1	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^enum {N1 = 4000000, S1 = 1, MaxLoadFactor100 = 80};$/;"	e	enum:__anon08c2d9bb0103	file:
S1	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^enum {N1 = 1000000, S1 = 1};$/;"	e	enum:__anon2f96ff660103	file:
SAMPLES	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^enum {SAMPLES = 2, N = 60000000, R = 4};$/;"	e	enum:__anonfac950030403	file:
SAMPLES	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^enum {SAMPLES = 2, N = 2000000, R = 4};$/;"	e	enum:__anonca721fef0403	file:
SAMPLES	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^enum {SAMPLES = 2, N = 10000000, R = 4};$/;"	e	enum:__anona03d81450403	file:
SAMPLES	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^enum {SAMPLES = 2, N = 1000000, R = 4};$/;"	e	enum:__anon0565975a0403	file:
SAMPLES	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^enum {SAMPLES = 2, N = 60000000, R = 4};$/;"	e	enum:__anon603333870403	file:
SBOX_BL	./src/glyph.h	/^#define    SBOX_BL /;"	d
SBOX_BR	./src/glyph.h	/^#define    SBOX_BR /;"	d
SBOX_TE	./src/glyph.h	/^#define    SBOX_TE /;"	d
SBOX_TL	./src/glyph.h	/^#define    SBOX_TL /;"	d
SBOX_TN	./src/glyph.h	/^#define    SBOX_TN /;"	d
SBOX_TR	./src/glyph.h	/^#define    SBOX_TR /;"	d
SBOX_TS	./src/glyph.h	/^#define    SBOX_TS /;"	d
SBOX_TW	./src/glyph.h	/^#define    SBOX_TW /;"	d
SBOX_VH	./src/glyph.h	/^#define    SBOX_VH /;"	d
SBOX_WE	./src/glyph.h	/^#define    SBOX_WE /;"	d
SBOX_WN	./src/glyph.h	/^#define    SBOX_WN /;"	d
SBOX_WS	./src/glyph.h	/^#define    SBOX_WS /;"	d
SBOX_WW	./src/glyph.h	/^#define    SBOX_WW /;"	d
SCROLLBAR	./vendor/raylib5/include/raygui.h	/^    SCROLLBAR,$/;"	e	enum:__anon65c7f6000603
SCROLLBAR_LEFT_SIDE	./vendor/raylib5/include/raygui.h	/^#define SCROLLBAR_LEFT_SIDE /;"	d
SCROLLBAR_RIGHT_SIDE	./vendor/raylib5/include/raygui.h	/^#define SCROLLBAR_RIGHT_SIDE /;"	d
SCROLLBAR_SIDE	./vendor/raylib5/include/raygui.h	/^    SCROLLBAR_SIDE,             \/\/ ListView scrollbar side (0-SCROLLBAR_LEFT_SIDE, 1-SCROLLBAR/;"	e	enum:__anon65c7f6001203
SCROLLBAR_WIDTH	./vendor/raylib5/include/raygui.h	/^    SCROLLBAR_WIDTH,            \/\/ ListView scrollbar size (usually width)$/;"	e	enum:__anon65c7f6001203
SCROLL_PADDING	./vendor/raylib5/include/raygui.h	/^    SCROLL_PADDING,             \/\/ ScrollBar scroll padding from arrows$/;"	e	enum:__anon65c7f6000c03
SCROLL_SLIDER_PADDING	./vendor/raylib5/include/raygui.h	/^    SCROLL_SLIDER_PADDING,      \/\/ ScrollBar slider internal padding$/;"	e	enum:__anon65c7f6000c03
SCROLL_SLIDER_SIZE	./vendor/raylib5/include/raygui.h	/^    SCROLL_SLIDER_SIZE,         \/\/ ScrollBar slider size$/;"	e	enum:__anon65c7f6000c03
SCROLL_SPEED	./vendor/raylib5/include/raygui.h	/^    SCROLL_SPEED,               \/\/ ScrollBar scrolling speed$/;"	e	enum:__anon65c7f6000c03
SEED	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define SEED(/;"	d	file:
SEMICOLON	./src/glyph.h	/^#define    SEMICOLON /;"	d
SERIALIZATION_PROTOCOL_VERSION	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  static const slz_size_type SERIALIZATION_PROTOCOL_VERSION = 1;$/;"	m	class:tsl::detail_robin_hash::robin_hash	typeref:typename:const slz_size_type
SHADER_ATTRIB_FLOAT	./vendor/raylib5/include/raylib.h	/^    SHADER_ATTRIB_FLOAT = 0,        \/\/ Shader attribute type: float$/;"	e	enum:__anon661bbe320c03
SHADER_ATTRIB_VEC2	./vendor/raylib5/include/raylib.h	/^    SHADER_ATTRIB_VEC2,             \/\/ Shader attribute type: vec2 (2 float)$/;"	e	enum:__anon661bbe320c03
SHADER_ATTRIB_VEC3	./vendor/raylib5/include/raylib.h	/^    SHADER_ATTRIB_VEC3,             \/\/ Shader attribute type: vec3 (3 float)$/;"	e	enum:__anon661bbe320c03
SHADER_ATTRIB_VEC4	./vendor/raylib5/include/raylib.h	/^    SHADER_ATTRIB_VEC4              \/\/ Shader attribute type: vec4 (4 float)$/;"	e	enum:__anon661bbe320c03
SHADER_LOC_COLOR_AMBIENT	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_COLOR_AMBIENT,       \/\/ Shader location: vector uniform: ambient color$/;"	e	enum:__anon661bbe320a03
SHADER_LOC_COLOR_DIFFUSE	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_COLOR_DIFFUSE,       \/\/ Shader location: vector uniform: diffuse color$/;"	e	enum:__anon661bbe320a03
SHADER_LOC_COLOR_SPECULAR	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_COLOR_SPECULAR,      \/\/ Shader location: vector uniform: specular color$/;"	e	enum:__anon661bbe320a03
SHADER_LOC_MAP_ALBEDO	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_MAP_ALBEDO,          \/\/ Shader location: sampler2d texture: albedo (same as: SH/;"	e	enum:__anon661bbe320a03
SHADER_LOC_MAP_BRDF	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_MAP_BRDF             \/\/ Shader location: sampler2d texture: brdf$/;"	e	enum:__anon661bbe320a03
SHADER_LOC_MAP_CUBEMAP	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_MAP_CUBEMAP,         \/\/ Shader location: samplerCube texture: cubemap$/;"	e	enum:__anon661bbe320a03
SHADER_LOC_MAP_DIFFUSE	./vendor/raylib5/include/raylib.h	/^#define SHADER_LOC_MAP_DIFFUSE /;"	d
SHADER_LOC_MAP_EMISSION	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_MAP_EMISSION,        \/\/ Shader location: sampler2d texture: emission$/;"	e	enum:__anon661bbe320a03
SHADER_LOC_MAP_HEIGHT	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_MAP_HEIGHT,          \/\/ Shader location: sampler2d texture: height$/;"	e	enum:__anon661bbe320a03
SHADER_LOC_MAP_IRRADIANCE	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_MAP_IRRADIANCE,      \/\/ Shader location: samplerCube texture: irradiance$/;"	e	enum:__anon661bbe320a03
SHADER_LOC_MAP_METALNESS	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_MAP_METALNESS,       \/\/ Shader location: sampler2d texture: metalness (same as:/;"	e	enum:__anon661bbe320a03
SHADER_LOC_MAP_NORMAL	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_MAP_NORMAL,          \/\/ Shader location: sampler2d texture: normal$/;"	e	enum:__anon661bbe320a03
SHADER_LOC_MAP_OCCLUSION	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_MAP_OCCLUSION,       \/\/ Shader location: sampler2d texture: occlusion$/;"	e	enum:__anon661bbe320a03
SHADER_LOC_MAP_PREFILTER	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_MAP_PREFILTER,       \/\/ Shader location: samplerCube texture: prefilter$/;"	e	enum:__anon661bbe320a03
SHADER_LOC_MAP_ROUGHNESS	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_MAP_ROUGHNESS,       \/\/ Shader location: sampler2d texture: roughness$/;"	e	enum:__anon661bbe320a03
SHADER_LOC_MAP_SPECULAR	./vendor/raylib5/include/raylib.h	/^#define SHADER_LOC_MAP_SPECULAR /;"	d
SHADER_LOC_MATRIX_MODEL	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_MATRIX_MODEL,        \/\/ Shader location: matrix uniform: model (transform)$/;"	e	enum:__anon661bbe320a03
SHADER_LOC_MATRIX_MVP	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_MATRIX_MVP,          \/\/ Shader location: matrix uniform: model-view-projection$/;"	e	enum:__anon661bbe320a03
SHADER_LOC_MATRIX_NORMAL	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_MATRIX_NORMAL,       \/\/ Shader location: matrix uniform: normal$/;"	e	enum:__anon661bbe320a03
SHADER_LOC_MATRIX_PROJECTION	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_MATRIX_PROJECTION,   \/\/ Shader location: matrix uniform: projection$/;"	e	enum:__anon661bbe320a03
SHADER_LOC_MATRIX_VIEW	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_MATRIX_VIEW,         \/\/ Shader location: matrix uniform: view (camera transform/;"	e	enum:__anon661bbe320a03
SHADER_LOC_VECTOR_VIEW	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_VECTOR_VIEW,         \/\/ Shader location: vector uniform: view$/;"	e	enum:__anon661bbe320a03
SHADER_LOC_VERTEX_COLOR	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_VERTEX_COLOR,        \/\/ Shader location: vertex attribute: color$/;"	e	enum:__anon661bbe320a03
SHADER_LOC_VERTEX_NORMAL	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_VERTEX_NORMAL,       \/\/ Shader location: vertex attribute: normal$/;"	e	enum:__anon661bbe320a03
SHADER_LOC_VERTEX_POSITION	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_VERTEX_POSITION = 0, \/\/ Shader location: vertex attribute: position$/;"	e	enum:__anon661bbe320a03
SHADER_LOC_VERTEX_TANGENT	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_VERTEX_TANGENT,      \/\/ Shader location: vertex attribute: tangent$/;"	e	enum:__anon661bbe320a03
SHADER_LOC_VERTEX_TEXCOORD01	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_VERTEX_TEXCOORD01,   \/\/ Shader location: vertex attribute: texcoord01$/;"	e	enum:__anon661bbe320a03
SHADER_LOC_VERTEX_TEXCOORD02	./vendor/raylib5/include/raylib.h	/^    SHADER_LOC_VERTEX_TEXCOORD02,   \/\/ Shader location: vertex attribute: texcoord02$/;"	e	enum:__anon661bbe320a03
SHADER_UNIFORM_FLOAT	./vendor/raylib5/include/raylib.h	/^    SHADER_UNIFORM_FLOAT = 0,       \/\/ Shader uniform type: float$/;"	e	enum:__anon661bbe320b03
SHADER_UNIFORM_INT	./vendor/raylib5/include/raylib.h	/^    SHADER_UNIFORM_INT,             \/\/ Shader uniform type: int$/;"	e	enum:__anon661bbe320b03
SHADER_UNIFORM_IVEC2	./vendor/raylib5/include/raylib.h	/^    SHADER_UNIFORM_IVEC2,           \/\/ Shader uniform type: ivec2 (2 int)$/;"	e	enum:__anon661bbe320b03
SHADER_UNIFORM_IVEC3	./vendor/raylib5/include/raylib.h	/^    SHADER_UNIFORM_IVEC3,           \/\/ Shader uniform type: ivec3 (3 int)$/;"	e	enum:__anon661bbe320b03
SHADER_UNIFORM_IVEC4	./vendor/raylib5/include/raylib.h	/^    SHADER_UNIFORM_IVEC4,           \/\/ Shader uniform type: ivec4 (4 int)$/;"	e	enum:__anon661bbe320b03
SHADER_UNIFORM_SAMPLER2D	./vendor/raylib5/include/raylib.h	/^    SHADER_UNIFORM_SAMPLER2D        \/\/ Shader uniform type: sampler2d$/;"	e	enum:__anon661bbe320b03
SHADER_UNIFORM_VEC2	./vendor/raylib5/include/raylib.h	/^    SHADER_UNIFORM_VEC2,            \/\/ Shader uniform type: vec2 (2 float)$/;"	e	enum:__anon661bbe320b03
SHADER_UNIFORM_VEC3	./vendor/raylib5/include/raylib.h	/^    SHADER_UNIFORM_VEC3,            \/\/ Shader uniform type: vec3 (3 float)$/;"	e	enum:__anon661bbe320b03
SHADER_UNIFORM_VEC4	./vendor/raylib5/include/raylib.h	/^    SHADER_UNIFORM_VEC4,            \/\/ Shader uniform type: vec4 (4 float)$/;"	e	enum:__anon661bbe320b03
SHADE_DARK	./src/glyph.h	/^#define    SHADE_DARK /;"	d
SHADE_LIGHT	./src/glyph.h	/^#define    SHADE_LIGHT /;"	d
SHADE_MEDIUM	./src/glyph.h	/^#define    SHADE_MEDIUM /;"	d
SHARP	./src/glyph.h	/^#define    SHARP /;"	d
SHIFT_LEFT	./src/glyph.h	/^#define    SHIFT_LEFT /;"	d
SHIFT_RIGHT	./src/glyph.h	/^#define    SHIFT_RIGHT /;"	d
SHRINK_CAPACITY	./src/memory.h	/^#define SHRINK_CAPACITY(/;"	d
SIGMA_LOWER	./src/glyph.h	/^#define    SIGMA_LOWER /;"	d
SIGMA_UPPER	./src/glyph.h	/^#define    SIGMA_UPPER /;"	d
SIMOLEON	./src/glyph.h	/^#define    SIMOLEON /;"	d
SIZE_BIT	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    static constexpr uint32_t SIZE_BIT = sizeof(size_t) * 8;$/;"	m	class:emhash7::HashMap	typeref:typename:uint32_t
SKA_NOINLINE	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    SKA_NOINLINE(std::pair<iterator, bool>) emplace_new_key(int8_t distance_from_desired, EntryP/;"	f	class:ska::detailv3::sherwood_v3_table
SKA_NOINLINE	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^#define SKA_NOINLINE(/;"	d
SKYBLUE	./vendor/raylib5/include/raylib.h	/^#define SKYBLUE /;"	d
SLASH_B	./src/glyph.h	/^#define    SLASH_B /;"	d
SLASH_F	./src/glyph.h	/^#define    SLASH_F /;"	d
SLIDER	./vendor/raylib5/include/raygui.h	/^    SLIDER,         \/\/ Used also for: SLIDERBAR, TOGGLESLIDER$/;"	e	enum:__anon65c7f6000603
SLIDER_PADDING	./vendor/raylib5/include/raygui.h	/^    SLIDER_PADDING              \/\/ Slider\/SliderBar internal bar padding$/;"	e	enum:__anon65c7f6000a03
SLIDER_WIDTH	./vendor/raylib5/include/raygui.h	/^    SLIDER_WIDTH = 16,          \/\/ Slider size of internal bar$/;"	e	enum:__anon65c7f6000a03
SPACE	./src/glyph.h	/^#define    SPACE /;"	d
SPADE	./src/glyph.h	/^#define    SPADE /;"	d
SPINNER	./vendor/raylib5/include/raygui.h	/^    SPINNER,        \/\/ Uses: BUTTON, VALUEBOX$/;"	e	enum:__anon65c7f6000603
SPIN_BUTTON_SPACING	./vendor/raylib5/include/raygui.h	/^    SPIN_BUTTON_SPACING,        \/\/ Spinner buttons separation$/;"	e	enum:__anon65c7f6001103
SPIN_BUTTON_WIDTH	./vendor/raylib5/include/raygui.h	/^    SPIN_BUTTON_WIDTH = 16,     \/\/ Spinner left\/right buttons width$/;"	e	enum:__anon65c7f6001103
SRC_ASM	./Makefile	/^SRC_ASM = $(wildcard .\/src\/*.asm)$/;"	m
SRC_C	./Makefile	/^SRC_C = $(wildcard .\/src\/*.c)$/;"	m
SSO_CALL	./vendor/STC/include/stc/priv/cstr_prv.h	/^#define SSO_CALL(/;"	d
STACK_MAX_SIZE	./src/flecs.c	/^#define STACK_MAX_SIZE /;"	d	file:
STAR	./src/glyph.h	/^#define    STAR /;"	d
STATE_DISABLED	./vendor/raylib5/include/raygui.h	/^    STATE_DISABLED$/;"	e	enum:__anon65c7f6000203
STATE_FOCUSED	./vendor/raylib5/include/raygui.h	/^    STATE_FOCUSED,$/;"	e	enum:__anon65c7f6000203
STATE_NORMAL	./vendor/raylib5/include/raygui.h	/^    STATE_NORMAL = 0,$/;"	e	enum:__anon65c7f6000203
STATE_PRESSED	./vendor/raylib5/include/raygui.h	/^    STATE_PRESSED,$/;"	e	enum:__anon65c7f6000203
STATUSBAR	./vendor/raylib5/include/raygui.h	/^    STATUSBAR$/;"	e	enum:__anon65c7f6000603
STC - Smart Template Containers	./vendor/STC/README.md	/^STC - Smart Template Containers$/;"	c
STC Algorithms	./vendor/STC/docs/algorithm_api.md	/^# STC Algorithms$/;"	c
STC [arc](../include/stc/arc.h): Atomic Reference Counted Smart Pointer	./vendor/STC/docs/arc_api.md	/^# STC [arc](..\/include\/stc\/arc.h): Atomic Reference Counted Smart Pointer$/;"	c
STC [box](../include/stc/box.h): Smart Pointer (boxed object)	./vendor/STC/docs/box_api.md	/^# STC [box](..\/include\/stc\/box.h): Smart Pointer (boxed object)$/;"	c
STC [cbits](../include/stc/cbits.h): Bitset	./vendor/STC/docs/cbits_api.md	/^# STC [cbits](..\/include\/stc\/cbits.h): Bitset$/;"	c
STC [coption](../include/stc/coption.h): Command line argument parsing	./vendor/STC/docs/coption_api.md	/^# STC [coption](..\/include\/stc\/coption.h): Command line argument parsing$/;"	c
STC [coroutine](../include/stc/coroutine.h): Coroutines	./vendor/STC/docs/coroutine_api.md	/^# STC [coroutine](..\/include\/stc\/coroutine.h): Coroutines$/;"	c
STC [crand](../include/stc/crand.h): Pseudo Random Number Generator	./vendor/STC/docs/crandom_api.md	/^# STC [crand](..\/include\/stc\/crand.h): Pseudo Random Number Generator$/;"	c
STC [cregex](../include/stc/cregex.h): Regular Expressions	./vendor/STC/docs/cregex_api.md	/^# STC [cregex](..\/include\/stc\/cregex.h): Regular Expressions$/;"	c
STC [cspan](../include/stc/cspan.h): Multi-dimensional Array View	./vendor/STC/docs/cspan_api.md	/^# STC [cspan](..\/include\/stc\/cspan.h): Multi-dimensional Array View$/;"	c
STC [cstr](../include/stc/cstr.h): String	./vendor/STC/docs/cstr_api.md	/^# STC [cstr](..\/include\/stc\/cstr.h): String$/;"	c
STC [csview](../include/stc/csview.h): Sub-string View	./vendor/STC/docs/csview_api.md	/^# STC [csview](..\/include\/stc\/csview.h): Sub-string View$/;"	c
STC [czview](../include/stc/czview.h): Null-terminated UTF8 String View	./vendor/STC/docs/czview_api.md	/^# STC [czview](..\/include\/stc\/czview.h): Null-terminated UTF8 String View$/;"	c
STC [deq](../include/stc/deq.h): Double Ended Queue	./vendor/STC/docs/deq_api.md	/^# STC [deq](..\/include\/stc\/deq.h): Double Ended Queue$/;"	c
STC [hmap](../include/stc/hmap.h): HashMap (unordered)	./vendor/STC/docs/hmap_api.md	/^# STC [hmap](..\/include\/stc\/hmap.h): HashMap (unordered)$/;"	c
STC [hset](../include/stc/hset.h): HashSet (unordered)	./vendor/STC/docs/hset_api.md	/^# STC [hset](..\/include\/stc\/hset.h): HashSet (unordered)$/;"	c
STC [list](../include/stc/list.h): Forward List	./vendor/STC/docs/list_api.md	/^# STC [list](..\/include\/stc\/list.h): Forward List$/;"	c
STC [pque](../include/stc/pque.h): Priority Queue	./vendor/STC/docs/pque_api.md	/^# STC [pque](..\/include\/stc\/pque.h): Priority Queue$/;"	c
STC [queue](../include/stc/queue.h): Queue	./vendor/STC/docs/queue_api.md	/^# STC [queue](..\/include\/stc\/queue.h): Queue$/;"	c
STC [smap](../include/stc/smap.h): Sorted Map	./vendor/STC/docs/smap_api.md	/^# STC [smap](..\/include\/stc\/smap.h): Sorted Map$/;"	c
STC [sset](../include/stc/sset.h): Sorted Set	./vendor/STC/docs/sset_api.md	/^# STC [sset](..\/include\/stc\/sset.h): Sorted Set$/;"	c
STC [stack](../include/stc/stack.h): Stack	./vendor/STC/docs/stack_api.md	/^# STC [stack](..\/include\/stc\/stack.h): Stack$/;"	c
STC [vec](../include/stc/vec.h): Vector	./vendor/STC/docs/vec_api.md	/^# STC [vec](..\/include\/stc\/vec.h): Vector$/;"	c
STC is unique!	./vendor/STC/README.md	/^## STC is unique!$/;"	s	chapter:STC - Smart Template Containers
STC_ALGORITHM_H_INCLUDED	./vendor/STC/include/stc/algorithm.h	/^#define STC_ALGORITHM_H_INCLUDED$/;"	d
STC_API	./vendor/STC/include/stc/priv/linkage.h	/^    #define STC_API /;"	d
STC_API	./vendor/STC/include/stc/priv/linkage.h	/^  #define STC_API /;"	d
STC_ARC_H_INCLUDED	./vendor/STC/include/stc/arc.h	/^#define STC_ARC_H_INCLUDED$/;"	d
STC_BOX_H_INCLUDED	./vendor/STC/include/stc/box.h	/^#define STC_BOX_H_INCLUDED$/;"	d
STC_CBITS_H_INCLUDED	./vendor/STC/include/stc/cbits.h	/^#define STC_CBITS_H_INCLUDED$/;"	d
STC_COMMON_H_INCLUDED	./vendor/STC/include/stc/common.h	/^#define STC_COMMON_H_INCLUDED$/;"	d
STC_COPTION_H_INCLUDED	./vendor/STC/include/stc/coption.h	/^#define STC_COPTION_H_INCLUDED$/;"	d
STC_COROUTINE_H_INCLUDED	./vendor/STC/include/stc/coroutine.h	/^#define STC_COROUTINE_H_INCLUDED$/;"	d
STC_CRAND_H_INCLUDED	./vendor/STC/include/stc/crand.h	/^#define STC_CRAND_H_INCLUDED$/;"	d
STC_CRANGE_H_INCLUDED	./vendor/STC/include/stc/algo/crange.h	/^#define STC_CRANGE_H_INCLUDED$/;"	d
STC_CREGEX_H_INCLUDED	./vendor/STC/include/stc/cregex.h	/^#define STC_CREGEX_H_INCLUDED$/;"	d
STC_CREGEX_PRV_C_INCLUDED	./vendor/STC/include/stc/priv/cregex_prv.c	/^#define STC_CREGEX_PRV_C_INCLUDED$/;"	d	file:
STC_CSPAN_H_INCLUDED	./vendor/STC/include/stc/cspan.h	/^#define STC_CSPAN_H_INCLUDED$/;"	d
STC_CSPAN_INDEX_TYPE	./vendor/STC/include/stc/cspan.h	/^  #define STC_CSPAN_INDEX_TYPE /;"	d
STC_CSTR_H_INCLUDED	./vendor/STC/include/stc/cstr.h	/^#define STC_CSTR_H_INCLUDED$/;"	d
STC_CSTR_PRV_C_INCLUDED	./vendor/STC/include/stc/priv/cstr_prv.c	/^#define STC_CSTR_PRV_C_INCLUDED$/;"	d	file:
STC_CSTR_PRV_H_INCLUDED	./vendor/STC/include/stc/priv/cstr_prv.h	/^#define STC_CSTR_PRV_H_INCLUDED$/;"	d
STC_CSTR_UTF8_INCLUDED	./vendor/STC/include/stc/priv/cstr_prv.c	/^#define STC_CSTR_UTF8_INCLUDED$/;"	d	file:
STC_CSVIEW_C_INCLUDED	./vendor/STC/include/stc/csview.h	/^#define STC_CSVIEW_C_INCLUDED$/;"	d
STC_CSVIEW_H_INCLUDED	./vendor/STC/include/stc/csview.h	/^#define STC_CSVIEW_H_INCLUDED$/;"	d
STC_CZVIEW_H_INCLUDED	./vendor/STC/include/stc/czview.h	/^#define STC_CZVIEW_H_INCLUDED$/;"	d
STC_DEF	./vendor/STC/include/stc/priv/linkage.h	/^  #define STC_DEF /;"	d
STC_DEF	./vendor/STC/include/stc/priv/linkage.h	/^  #define STC_DEF$/;"	d
STC_DEQ_H_INCLUDED	./vendor/STC/include/stc/deq.h	/^#define STC_DEQ_H_INCLUDED$/;"	d
STC_HMAP_H_INCLUDED	./vendor/STC/include/stc/hmap.h	/^#define STC_HMAP_H_INCLUDED$/;"	d
STC_IMPLEMENT	./vendor/STC/src/libstc.c	/^#define STC_IMPLEMENT$/;"	d	file:
STC_INLINE	./vendor/STC/include/stc/common.h	/^    #define STC_INLINE /;"	d
STC_LIST_H_INCLUDED	./vendor/STC/include/stc/list.h	/^#define STC_LIST_H_INCLUDED$/;"	d
STC_PQUE_H_INCLUDED	./vendor/STC/include/stc/pque.h	/^#define STC_PQUE_H_INCLUDED$/;"	d
STC_QUEUE_H_INCLUDED	./vendor/STC/include/stc/queue.h	/^#define STC_QUEUE_H_INCLUDED$/;"	d
STC_SMAP_H_INCLUDED	./vendor/STC/include/stc/smap.h	/^#define STC_SMAP_H_INCLUDED$/;"	d
STC_STACK_H_INCLUDED	./vendor/STC/include/stc/stack.h	/^#define STC_STACK_H_INCLUDED$/;"	d
STC_TEMPLATE_H_INCLUDED	./vendor/STC/include/stc/priv/template.h	/^#define STC_TEMPLATE_H_INCLUDED$/;"	d
STC_TRANSFORM_H_INCLUDED	./vendor/STC/include/stc/algo/filter.h	/^#define STC_TRANSFORM_H_INCLUDED$/;"	d
STC_TYPES_H_INCLUDED	./vendor/STC/include/stc/types.h	/^#define STC_TYPES_H_INCLUDED$/;"	d
STC_UTF8_H_INCLUDED	./vendor/STC/include/stc/utf8.h	/^#define STC_UTF8_H_INCLUDED$/;"	d
STC_UTF8_PRV_C_INCLUDED	./vendor/STC/include/stc/priv/utf8_prv.c	/^#define STC_UTF8_PRV_C_INCLUDED$/;"	d	file:
STC_UTF8_PRV_H_INCLUDED	./vendor/STC/include/stc/priv/utf8_prv.h	/^#define STC_UTF8_PRV_H_INCLUDED$/;"	d
STC_UTILITY_H_INCLUDED	./vendor/STC/include/stc/algo/utility.h	/^#define STC_UTILITY_H_INCLUDED$/;"	d
STC_VEC_H_INCLUDED	./vendor/STC/include/stc/vec.h	/^#define STC_VEC_H_INCLUDED$/;"	d
STORE_HASH	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  static constexpr bool STORE_HASH =$/;"	m	class:tsl::detail_robin_hash::robin_hash	typeref:typename:bool
SUN	./src/glyph.h	/^#define    SUN /;"	d
SYM_0	./src/glyph.h	/^#define    SYM_0 /;"	d
SYM_1	./src/glyph.h	/^#define    SYM_1 /;"	d
SYM_2	./src/glyph.h	/^#define    SYM_2 /;"	d
SYM_3	./src/glyph.h	/^#define    SYM_3 /;"	d
SYM_4	./src/glyph.h	/^#define    SYM_4 /;"	d
SYM_5	./src/glyph.h	/^#define    SYM_5 /;"	d
SYM_6	./src/glyph.h	/^#define    SYM_6 /;"	d
SYM_7	./src/glyph.h	/^#define    SYM_7 /;"	d
SYM_8	./src/glyph.h	/^#define    SYM_8 /;"	d
SYM_9	./src/glyph.h	/^#define    SYM_9 /;"	d
S_QUOTE	./src/glyph.h	/^#define    S_QUOTE /;"	d
Sample	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^typedef struct { const char* name; Range test[N_TESTS]; } Sample;$/;"	t	typeref:struct:__anonfac950030308	file:
Sample	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^typedef struct { const char* name; Range test[N_TESTS]; } Sample;$/;"	t	typeref:struct:__anonca721fef0308	file:
Sample	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^typedef struct { const char* name; Range test[N_TESTS]; } Sample;$/;"	t	typeref:struct:__anona03d81450308	file:
Sample	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^typedef struct { const char* name; Range test[N_TESTS]; } Sample;$/;"	t	typeref:struct:__anon0565975a0308	file:
Sample	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^typedef struct { const char* name; Range test[N_TESTS]; } Sample;$/;"	t	typeref:struct:__anon603333870308	file:
SaveFileDataCallback	./vendor/raylib5/include/raylib.h	/^typedef bool (*SaveFileDataCallback)(const char *fileName, void *data, int dataSize);   \/\/ Fil/;"	t	typeref:typename:bool (*)(const char * fileName,void * data,int dataSize)
SaveFileTextCallback	./vendor/raylib5/include/raylib.h	/^typedef bool (*SaveFileTextCallback)(const char *fileName, char *text); \/\/ FileIO: Save text d/;"	t	typeref:typename:bool (*)(const char * fileName,char * text)
Sc_range16	./vendor/STC/include/stc/priv/utf8_prv.c	/^static const URange16 Sc_range16[] = { \/\/ Currency symbol$/;"	v	typeref:typename:const URange16[]	file:
ScopeClose	./src/flecs.h	/^static const flecs::entity_t ScopeClose = EcsScopeClose;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
ScopeOpen	./src/flecs.h	/^static const flecs::entity_t ScopeOpen = EcsScopeOpen;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Seconds	./src/flecs.h	/^struct Seconds { };$/;"	s	struct:flecs::units::duration
Self	./src/flecs.h	/^static const uint32_t Self = EcsSelf;$/;"	v	namespace:flecs	typeref:typename:const uint32_t
Self	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    using Self = Table<IsFlat, MaxLoadFactor100, key_type, mapped_type, hasher, key_equal>;$/;"	t	class:robin_hood::detail::Table	typeref:typename:Table<IsFlat,MaxLoadFactor100,key_type,mapped_type,hasher,key_equal>
SetMetricDocName	./src/flecs.c	/^static void SetMetricDocName(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
Shader	./vendor/raylib5/include/raylib.h	/^typedef struct Shader {$/;"	s
Shader	./vendor/raylib5/include/raylib.h	/^} Shader;$/;"	t	typeref:struct:Shader
ShaderAttributeDataType	./vendor/raylib5/include/raylib.h	/^} ShaderAttributeDataType;$/;"	t	typeref:enum:__anon661bbe320c03
ShaderLocationIndex	./vendor/raylib5/include/raylib.h	/^} ShaderLocationIndex;$/;"	t	typeref:enum:__anon661bbe320a03
ShaderUniformDataType	./vendor/raylib5/include/raylib.h	/^} ShaderUniformDataType;$/;"	t	typeref:enum:__anon661bbe320b03
Shape	./vendor/STC/misc/examples/algorithms/shape.c	/^struct Shape {$/;"	s	file:
Shape	./vendor/STC/misc/examples/algorithms/shape.c	/^typedef struct Shape Shape;$/;"	t	typeref:struct:Shape	file:
Shape	./vendor/STC/misc/examples/algorithms/shape.cpp	/^struct Shape {$/;"	s	file:
ShapeAPI	./vendor/STC/misc/examples/algorithms/shape.c	/^struct ShapeAPI {$/;"	s	file:
Shape_delete	./vendor/STC/misc/examples/algorithms/shape.c	/^void Shape_delete(Shape* shape)$/;"	f	typeref:typename:void
Shape_drop	./vendor/STC/misc/examples/algorithms/shape.c	/^void Shape_drop(Shape* shape)$/;"	f	typeref:typename:void
SizeT	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^using SizeT = uint64_t;$/;"	t	namespace:robin_hood::detail	typeref:typename:uint64_t
SlotOf	./src/flecs.h	/^static const flecs::entity_t SlotOf = EcsSlotOf;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Song	./vendor/STC/misc/examples/smartpointers/music_arc.c	/^} Song;$/;"	t	typeref:struct:__anond709dd120108	file:
Song_cmp	./vendor/STC/misc/examples/smartpointers/music_arc.c	/^int Song_cmp(const Song* x, const Song* y)$/;"	f	typeref:typename:int
Song_drop	./vendor/STC/misc/examples/smartpointers/music_arc.c	/^void Song_drop(Song* s) {$/;"	f	typeref:typename:void
Song_init	./vendor/STC/misc/examples/smartpointers/music_arc.c	/^Song Song_init(const char* artist, const char* title)$/;"	f	typeref:typename:Song
Sound	./vendor/raylib5/include/raylib.h	/^typedef struct Sound {$/;"	s
Sound	./vendor/raylib5/include/raylib.h	/^} Sound;$/;"	t	typeref:struct:Sound
Source	./src/flecs.h	/^    using Source = EcsMetricSource;$/;"	t	struct:flecs::metrics	typeref:typename:EcsMetricSource
Specifying comparison parameters	./vendor/STC/README.md	/^## Specifying comparison parameters$/;"	s	chapter:STC - Smart Template Containers
Specifying template parameters	./vendor/STC/README.md	/^## Specifying template parameters$/;"	s	chapter:STC - Smart Template Containers
Speed	./src/flecs.h	/^struct Speed { };$/;"	s	struct:flecs::units
StdSet	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^using StdSet = robin_hood::unordered_flat_set<std::string, string_hash, std::equal_to<>>;$/;"	t	typeref:typename:robin_hood::unordered_flat_set<std::string,string_hash,std::equal_to<>>	file:
StdVec	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^using StdVec = std::vector<std::string>;$/;"	t	typeref:typename:std::vector<std::string>	file:
String	./src/flecs.h	/^static const flecs::entity_t String = ecs_id(ecs_string_t);$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
String	./src/flecs.h	/^static const primitive_kind_t String = EcsString;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
Struct	./src/flecs.h	/^using Struct = EcsStruct;$/;"	t	namespace:flecs	typeref:typename:EcsStruct
StructType	./src/flecs.h	/^static const type_kind_t StructType = EcsStructType;$/;"	v	namespace:flecs::meta	typeref:typename:const type_kind_t
Symbol	./src/flecs.h	/^static const flecs::entity_t Symbol = EcsSymbol;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Symmetric	./src/flecs.h	/^static const flecs::entity_t Symmetric = EcsSymmetric;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
System	./src/flecs.h	/^static const flecs::entity_t System = EcsSystem;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
T	./vendor/fmt/include/chrono.h	/^  using T = std::numeric_limits<To>;$/;"	t	function:safe_duration_cast::lossless_integral_conversion	typeref:typename:std::numeric_limits<To>
T	./vendor/fmt/include/chrono.h	/^  using T = std::numeric_limits<To>;$/;"	t	function:safe_duration_cast::safe_float_conversion	typeref:typename:std::numeric_limits<To>
TAG_Player	./src/components.h	/^struct TAG_Player{ int empty; } ;$/;"	s
TAG_TCEnable	./src/turnbasedsystem.h	/^typedef struct TAG_TCEnable { int empty; } TAG_TCEnable;$/;"	s
TAG_TCEnable	./src/turnbasedsystem.h	/^typedef struct TAG_TCEnable { int empty; } TAG_TCEnable;$/;"	t	typeref:struct:TAG_TCEnable
TAG_TurnActive	./src/components.h	/^struct TAG_TurnActive{ int empty; } ;$/;"	s
TAG_TurnIdle	./src/components.h	/^struct TAG_TurnIdle{ int empty; } ;$/;"	s
TARGET	./Makefile	/^TARGET = bin\/main.exe$/;"	m
TAU	./src/glyph.h	/^#define    TAU /;"	d
TEXT	./vendor/raylib5/include/raygui.h	/^typedef enum { BORDER = 0, BASE, TEXT, OTHER } GuiPropertyElement;$/;"	e	enum:__anon65c7f6001503
TEXTBOX	./vendor/raylib5/include/raygui.h	/^    TEXTBOX,        \/\/ Used also for: TEXTBOXMULTI$/;"	e	enum:__anon65c7f6000603
TEXTURE_FILTER_ANISOTROPIC_16X	./vendor/raylib5/include/raylib.h	/^    TEXTURE_FILTER_ANISOTROPIC_16X,         \/\/ Anisotropic filtering 16x$/;"	e	enum:__anon661bbe320e03
TEXTURE_FILTER_ANISOTROPIC_4X	./vendor/raylib5/include/raylib.h	/^    TEXTURE_FILTER_ANISOTROPIC_4X,          \/\/ Anisotropic filtering 4x$/;"	e	enum:__anon661bbe320e03
TEXTURE_FILTER_ANISOTROPIC_8X	./vendor/raylib5/include/raylib.h	/^    TEXTURE_FILTER_ANISOTROPIC_8X,          \/\/ Anisotropic filtering 8x$/;"	e	enum:__anon661bbe320e03
TEXTURE_FILTER_BILINEAR	./vendor/raylib5/include/raylib.h	/^    TEXTURE_FILTER_BILINEAR,                \/\/ Linear filtering$/;"	e	enum:__anon661bbe320e03
TEXTURE_FILTER_POINT	./vendor/raylib5/include/raylib.h	/^    TEXTURE_FILTER_POINT = 0,               \/\/ No filter, just pixel approximation$/;"	e	enum:__anon661bbe320e03
TEXTURE_FILTER_TRILINEAR	./vendor/raylib5/include/raylib.h	/^    TEXTURE_FILTER_TRILINEAR,               \/\/ Trilinear filtering (linear with mipmaps)$/;"	e	enum:__anon661bbe320e03
TEXTURE_WRAP_CLAMP	./vendor/raylib5/include/raylib.h	/^    TEXTURE_WRAP_CLAMP,                     \/\/ Clamps texture to edge pixel in tiled mode$/;"	e	enum:__anon661bbe320f03
TEXTURE_WRAP_MIRROR_CLAMP	./vendor/raylib5/include/raylib.h	/^    TEXTURE_WRAP_MIRROR_CLAMP               \/\/ Mirrors and clamps to border the texture in til/;"	e	enum:__anon661bbe320f03
TEXTURE_WRAP_MIRROR_REPEAT	./vendor/raylib5/include/raylib.h	/^    TEXTURE_WRAP_MIRROR_REPEAT,             \/\/ Mirrors and repeats the texture in tiled mode$/;"	e	enum:__anon661bbe320f03
TEXTURE_WRAP_REPEAT	./vendor/raylib5/include/raylib.h	/^    TEXTURE_WRAP_REPEAT = 0,                \/\/ Repeats texture in tiled mode$/;"	e	enum:__anon661bbe320f03
TEXT_ALIGNMENT	./vendor/raylib5/include/raygui.h	/^    TEXT_ALIGNMENT,             \/\/ Control text horizontal alignment inside control text bound/;"	e	enum:__anon65c7f6000703
TEXT_ALIGNMENT_VERTICAL	./vendor/raylib5/include/raygui.h	/^    TEXT_ALIGNMENT_VERTICAL,    \/\/ Text vertical alignment inside text bounds (after border an/;"	e	enum:__anon65c7f6000803
TEXT_ALIGN_BOTTOM	./vendor/raylib5/include/raygui.h	/^    TEXT_ALIGN_BOTTOM$/;"	e	enum:__anon65c7f6000403
TEXT_ALIGN_CENTER	./vendor/raylib5/include/raygui.h	/^    TEXT_ALIGN_CENTER,$/;"	e	enum:__anon65c7f6000303
TEXT_ALIGN_LEFT	./vendor/raylib5/include/raygui.h	/^    TEXT_ALIGN_LEFT = 0,$/;"	e	enum:__anon65c7f6000303
TEXT_ALIGN_MIDDLE	./vendor/raylib5/include/raygui.h	/^    TEXT_ALIGN_MIDDLE,$/;"	e	enum:__anon65c7f6000403
TEXT_ALIGN_RIGHT	./vendor/raylib5/include/raygui.h	/^    TEXT_ALIGN_RIGHT$/;"	e	enum:__anon65c7f6000303
TEXT_ALIGN_TOP	./vendor/raylib5/include/raygui.h	/^    TEXT_ALIGN_TOP = 0,$/;"	e	enum:__anon65c7f6000403
TEXT_COLOR_DISABLED	./vendor/raylib5/include/raygui.h	/^    TEXT_COLOR_DISABLED,        \/\/ Control text color in STATE_DISABLED$/;"	e	enum:__anon65c7f6000703
TEXT_COLOR_FOCUSED	./vendor/raylib5/include/raygui.h	/^    TEXT_COLOR_FOCUSED,         \/\/ Control text color in STATE_FOCUSED$/;"	e	enum:__anon65c7f6000703
TEXT_COLOR_NORMAL	./vendor/raylib5/include/raygui.h	/^    TEXT_COLOR_NORMAL,          \/\/ Control text color in STATE_NORMAL$/;"	e	enum:__anon65c7f6000703
TEXT_COLOR_PRESSED	./vendor/raylib5/include/raygui.h	/^    TEXT_COLOR_PRESSED,         \/\/ Control text color in STATE_PRESSED$/;"	e	enum:__anon65c7f6000703
TEXT_LINE_SPACING	./vendor/raylib5/include/raygui.h	/^    TEXT_LINE_SPACING,          \/\/ Text spacing between lines$/;"	e	enum:__anon65c7f6000803
TEXT_PADDING	./vendor/raylib5/include/raygui.h	/^    TEXT_PADDING,               \/\/ Control text padding, not considering border$/;"	e	enum:__anon65c7f6000703
TEXT_READONLY	./vendor/raylib5/include/raygui.h	/^    TEXT_READONLY = 16,         \/\/ TextBox in read-only mode: 0-text editable, 1-text no-edita/;"	e	enum:__anon65c7f6001003
TEXT_SIZE	./vendor/raylib5/include/raygui.h	/^    TEXT_SIZE = 16,             \/\/ Text size (glyphs max height)$/;"	e	enum:__anon65c7f6000803
TEXT_SPACING	./vendor/raylib5/include/raygui.h	/^    TEXT_SPACING,               \/\/ Text spacing between glyphs$/;"	e	enum:__anon65c7f6000803
TEXT_VALIGN_PIXEL_OFFSET	./vendor/raylib5/include/raygui.h	/^    #define TEXT_VALIGN_PIXEL_OFFSET(/;"	d
TEXT_WRAP_CHAR	./vendor/raylib5/include/raygui.h	/^    TEXT_WRAP_CHAR,$/;"	e	enum:__anon65c7f6000503
TEXT_WRAP_MODE	./vendor/raylib5/include/raygui.h	/^    TEXT_WRAP_MODE              \/\/ Text wrap-mode inside text bounds$/;"	e	enum:__anon65c7f6000803
TEXT_WRAP_NONE	./vendor/raylib5/include/raygui.h	/^    TEXT_WRAP_NONE = 0,$/;"	e	enum:__anon65c7f6000503
TEXT_WRAP_WORD	./vendor/raylib5/include/raygui.h	/^    TEXT_WRAP_WORD$/;"	e	enum:__anon65c7f6000503
THETA	./src/glyph.h	/^#define    THETA /;"	d
TILDE	./src/glyph.h	/^#define    TILDE /;"	d
TILE_SIZE_X	./src/main.c	/^const int TILE_SIZE_X = 25;$/;"	v	typeref:typename:const int
TILE_SIZE_Y	./src/main.c	/^const int TILE_SIZE_Y = 25;$/;"	v	typeref:typename:const int
TMAP_BUCKETS	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define TMAP_BUCKETS(/;"	d	file:
TMAP_CLEAR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define TMAP_CLEAR(/;"	d	file:
TMAP_DTOR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define TMAP_DTOR(/;"	d	file:
TMAP_EMPLACE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define TMAP_EMPLACE(/;"	d	file:
TMAP_ERASE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define TMAP_ERASE(/;"	d	file:
TMAP_FIND	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define TMAP_FIND(/;"	d	file:
TMAP_FOR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define TMAP_FOR(/;"	d	file:
TMAP_ITEM	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define TMAP_ITEM(/;"	d	file:
TMAP_PUT	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define TMAP_PUT(/;"	d	file:
TMAP_SETUP	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define TMAP_SETUP(/;"	d	file:
TMAP_SIZE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define TMAP_SIZE(/;"	d	file:
TOGGLE	./vendor/raylib5/include/raygui.h	/^    TOGGLE,         \/\/ Used also for: TOGGLEGROUP$/;"	e	enum:__anon65c7f6000603
TOK_AND	./src/flecs.c	/^#define TOK_AND /;"	d	file:
TOK_ANY	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_ANY     = 0x8200000,    \/* Any character except newline, . *\/$/;"	e	enum:__anon4ce7005a0503	file:
TOK_ANYNL	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_ANYNL   ,               \/* Any character including newline, . *\/$/;"	e	enum:__anon4ce7005a0503	file:
TOK_ASSEMBLY	./src/flecs.c	/^#define TOK_ASSEMBLY /;"	d	file:
TOK_BITWISE_OR	./src/flecs.c	/^#define TOK_BITWISE_OR /;"	d	file:
TOK_BOL	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_BOL     , TOK_BOS,      \/* Beginning of line \/ string, ^ *\/$/;"	e	enum:__anon4ce7005a0503	file:
TOK_BOS	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_BOL     , TOK_BOS,      \/* Beginning of line \/ string, ^ *\/$/;"	e	enum:__anon4ce7005a0503	file:
TOK_BRACKET_CLOSE	./src/flecs.c	/^#define TOK_BRACKET_CLOSE /;"	d	file:
TOK_BRACKET_OPEN	./src/flecs.c	/^#define TOK_BRACKET_OPEN /;"	d	file:
TOK_CASCADE	./src/flecs.c	/^#define TOK_CASCADE /;"	d	file:
TOK_CASED	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_CASED   ,               \/* (?-i) *\/$/;"	e	enum:__anon4ce7005a0503	file:
TOK_CAT	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_CAT     ,               \/* Concatentation, implicit operator *\/$/;"	e	enum:__anon4ce7005a0503	file:
TOK_CCLASS	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_CCLASS  ,               \/* Character class, [] *\/$/;"	e	enum:__anon4ce7005a0503	file:
TOK_COLON	./src/flecs.c	/^#define TOK_COLON /;"	d	file:
TOK_CONST	./src/flecs.c	/^#define TOK_CONST /;"	d	file:
TOK_DESC	./src/flecs.c	/^#define TOK_DESC /;"	d	file:
TOK_DOWN	./src/flecs.c	/^#define TOK_DOWN /;"	d	file:
TOK_END	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_END     = 0x82FFFFF,    \/* Terminate: match found *\/$/;"	e	enum:__anon4ce7005a0503	file:
TOK_EOL	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_EOL     , TOK_EOS,      \/* End of line \/ string, $ *\/$/;"	e	enum:__anon4ce7005a0503	file:
TOK_EOS	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_EOL     , TOK_EOS,      \/* End of line \/ string, $ *\/$/;"	e	enum:__anon4ce7005a0503	file:
TOK_EOZ	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_EOZ     ,               \/* End of line with optional NL *\/$/;"	e	enum:__anon4ce7005a0503	file:
TOK_EQ	./src/flecs.c	/^#define TOK_EQ /;"	d	file:
TOK_EXPR_STRING	./src/flecs.c	/^#define TOK_EXPR_STRING /;"	d	file:
TOK_ICASE	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_ICASE   ,               \/* (?i) *\/$/;"	e	enum:__anon4ce7005a0503	file:
TOK_IN	./src/flecs.c	/^#define TOK_IN /;"	d	file:
TOK_INOUT	./src/flecs.c	/^#define TOK_INOUT /;"	d	file:
TOK_INOUT_NONE	./src/flecs.c	/^#define TOK_INOUT_NONE /;"	d	file:
TOK_IRUNE	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_IRUNE   ,$/;"	e	enum:__anon4ce7005a0503	file:
TOK_LBRA	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_LBRA    ,               \/* Left bracket, ( *\/$/;"	e	enum:__anon4ce7005a0503	file:
TOK_MASK	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_MASK    = 0xFF00000,$/;"	e	enum:__anon4ce7005a0503	file:
TOK_MATCH	./src/flecs.c	/^#define TOK_MATCH /;"	d	file:
TOK_MODULE	./src/flecs.c	/^#define TOK_MODULE /;"	d	file:
TOK_NCCLASS	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_NCCLASS ,               \/* Negated character class, [] *\/$/;"	e	enum:__anon4ce7005a0503	file:
TOK_NEQ	./src/flecs.c	/^#define TOK_NEQ /;"	d	file:
TOK_NEWLINE	./src/flecs.c	/^#define TOK_NEWLINE /;"	d	file:
TOK_NOP	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_NOP     ,               \/* No operation, internal use only *\/$/;"	e	enum:__anon4ce7005a0503	file:
TOK_NOT	./src/flecs.c	/^#define TOK_NOT /;"	d	file:
TOK_NWBOUND	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_NWBOUND ,               \/* Word boundary, not consuming meta char *\/$/;"	e	enum:__anon4ce7005a0503	file:
TOK_OPERATOR	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_OPERATOR = 0x8000000,   \/* Bitmask of all operators *\/$/;"	e	enum:__anon4ce7005a0503	file:
TOK_OPTIONAL	./src/flecs.c	/^#define TOK_OPTIONAL /;"	d	file:
TOK_OR	./src/flecs.c	/^#define TOK_OR /;"	d	file:
TOK_OR	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_OR      ,               \/* Alternation, | *\/$/;"	e	enum:__anon4ce7005a0503	file:
TOK_OUT	./src/flecs.c	/^#define TOK_OUT /;"	d	file:
TOK_OVERRIDE	./src/flecs.c	/^#define TOK_OVERRIDE /;"	d	file:
TOK_PARENT	./src/flecs.c	/^#define TOK_PARENT /;"	d	file:
TOK_PAREN_CLOSE	./src/flecs.c	/^#define TOK_PAREN_CLOSE /;"	d	file:
TOK_PAREN_OPEN	./src/flecs.c	/^#define TOK_PAREN_OPEN /;"	d	file:
TOK_PLUS	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_PLUS    ,               \/* a+ == aa* *\/$/;"	e	enum:__anon4ce7005a0503	file:
TOK_PROP	./src/flecs.c	/^#define TOK_PROP /;"	d	file:
TOK_QUEST	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_QUEST   ,               \/* a? == a|nothing, i.e. 0 or 1 a's *\/$/;"	e	enum:__anon4ce7005a0503	file:
TOK_RBRA	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_RBRA    ,               \/* Right bracket, ) *\/$/;"	e	enum:__anon4ce7005a0503	file:
TOK_ROLE_AND	./src/flecs.c	/^#define TOK_ROLE_AND /;"	d	file:
TOK_ROLE_NOT	./src/flecs.c	/^#define TOK_ROLE_NOT /;"	d	file:
TOK_ROLE_OR	./src/flecs.c	/^#define TOK_ROLE_OR /;"	d	file:
TOK_ROLE_TOGGLE	./src/flecs.c	/^#define TOK_ROLE_TOGGLE /;"	d	file:
TOK_RUNE	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_RUNE    = 0x8100000,$/;"	e	enum:__anon4ce7005a0503	file:
TOK_SCOPE_CLOSE	./src/flecs.c	/^#define TOK_SCOPE_CLOSE /;"	d	file:
TOK_SCOPE_OPEN	./src/flecs.c	/^#define TOK_SCOPE_OPEN /;"	d	file:
TOK_SELF	./src/flecs.c	/^#define TOK_SELF /;"	d	file:
TOK_STAR	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_STAR    ,               \/* Closure, * *\/$/;"	e	enum:__anon4ce7005a0503	file:
TOK_START	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_START   = 0x8000001,    \/* Start, used for marker on stack *\/$/;"	e	enum:__anon4ce7005a0503	file:
TOK_UP	./src/flecs.c	/^#define TOK_UP /;"	d	file:
TOK_USING	./src/flecs.c	/^#define TOK_USING /;"	d	file:
TOK_VARIABLE	./src/flecs.c	/^#define TOK_VARIABLE /;"	d	file:
TOK_WBOUND	./vendor/STC/include/stc/priv/cregex_prv.c	/^    TOK_WBOUND  ,               \/* Non-word boundary, not consuming meta char *\/$/;"	e	enum:__anon4ce7005a0503	file:
TOK_WITH	./src/flecs.c	/^#define TOK_WITH /;"	d	file:
TRIANGLE_D	./src/glyph.h	/^#define    TRIANGLE_D /;"	d
TRIANGLE_L	./src/glyph.h	/^#define    TRIANGLE_L /;"	d
TRIANGLE_R	./src/glyph.h	/^#define    TRIANGLE_R /;"	d
TRIANGLE_U	./src/glyph.h	/^#define    TRIANGLE_U /;"	d
TRUNC	./vendor/fmt/include/os.h	/^    TRUNC = FMT_POSIX(O_TRUNC)     \/\/ Truncate the content of the file.$/;"	e	enum:file::__anon511c5d600103
TSIZE	./vendor/STC/misc/tests/cspan_test.c	/^    enum {TSIZE=4, CUBE=64, N=CUBE*CUBE*CUBE};$/;"	e	enum:CTEST_SETUP::__anonc003a19a0103	file:
TSL_RH_LIKELY	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^#define TSL_RH_LIKELY(/;"	d
TSL_RH_NB_PRIMES	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^#define TSL_RH_NB_PRIMES /;"	d
TSL_RH_NO_EXCEPTIONS	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^#define TSL_RH_NO_EXCEPTIONS$/;"	d
TSL_RH_THROW_OR_TERMINATE	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^#define TSL_RH_THROW_OR_TERMINATE(/;"	d
TSL_RH_UNUSED	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^#define TSL_RH_UNUSED(/;"	d
TSL_ROBIN_GROWTH_POLICY_H	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^#define TSL_ROBIN_GROWTH_POLICY_H$/;"	d
TSL_ROBIN_HASH_H	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^#define TSL_ROBIN_HASH_H$/;"	d
TSL_ROBIN_MAP_H	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^#define TSL_ROBIN_MAP_H$/;"	d
TURNBASEDSYSTEM_H	./src/turnbasedsystem.h	/^#define TURNBASEDSYSTEM_H$/;"	d
TURNSTATE_ACTIVE	./src/turnbasedsystem.h	/^	TURNSTATE_ACTIVE,$/;"	e	enum:TurnState
TURNSTATE_IDLE	./src/turnbasedsystem.h	/^	TURNSTATE_IDLE$/;"	e	enum:TurnState
Table	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    Table() noexcept(noexcept(Hash()) && noexcept(KeyEqual()))$/;"	f	class:robin_hood::detail::Table
Table	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    Table(Iter first, Iter last, size_t ROBIN_HOOD_UNUSED(bucket_count) \/*unused*\/ = 0,$/;"	f	class:robin_hood::detail::Table
Table	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    Table(Table&& o) noexcept$/;"	f	class:robin_hood::detail::Table
Table	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    Table(const Table& o)$/;"	f	class:robin_hood::detail::Table
Table	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    Table(std::initializer_list<value_type> initlist,$/;"	f	class:robin_hood::detail::Table
Table	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    explicit Table($/;"	f	class:robin_hood::detail::Table
Table	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^class Table$/;"	c	namespace:robin_hood::detail
Table	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    using Table = detailv3::sherwood_v3_table$/;"	t	class:ska::flat_hash_map
Table	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    using Table = detailv3::sherwood_v3_table$/;"	t	class:ska::flat_hash_set
Tag	./src/flecs.h	/^static const flecs::entity_t Tag = EcsTag;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Target	./src/flecs.h	/^static const flecs::entity_t Target = EcsTarget;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Tebi	./src/flecs.h	/^struct Tebi { };$/;"	s	struct:flecs::units
Temperature	./src/flecs.h	/^struct Temperature { };$/;"	s	struct:flecs::units
Tera	./src/flecs.h	/^struct Tera { };$/;"	s	struct:flecs::units
Terms	./src/flecs.h	/^    using Terms = typename _::term_ptrs<Components...>::array;$/;"	t	struct:flecs::filter	typeref:typename:_::term_ptrs<Components...>::array
Terms	./src/flecs.h	/^    using Terms = typename _::term_ptrs<Components...>::array;$/;"	t	struct:flecs::query	typeref:typename:_::term_ptrs<Components...>::array
Terms	./src/flecs.h	/^    using Terms = typename _::term_ptrs<Components...>::array;$/;"	t	struct:flecs::rule	typeref:typename:_::term_ptrs<Components...>::array
Terms	./src/flecs.h	/^    using Terms = typename term_ptrs<Components ...>::array;$/;"	t	struct:flecs::_::each_delegate	typeref:typename:term_ptrs<Components...>::array
Terms	./src/flecs.h	/^    using Terms = typename term_ptrs<Components ...>::array;$/;"	t	struct:flecs::_::find_delegate	typeref:typename:term_ptrs<Components...>::array
Terms	./src/flecs.h	/^    using Terms = typename term_ptrs<Components ...>::array;$/;"	t	struct:flecs::_::iter_delegate	typeref:typename:term_ptrs<Components...>::array
TextFormat	./vendor/raylib5/include/raygui.h	/^static const char *TextFormat(const char *text, ...)$/;"	f	typeref:typename:const char *
TextSplit	./vendor/raylib5/include/raygui.h	/^const char **TextSplit(const char *text, char delimiter, int *count)$/;"	f	typeref:typename:const char **
TextToFloat	./vendor/raylib5/include/raygui.h	/^static float TextToFloat(const char *text)$/;"	f	typeref:typename:float
TextToInteger	./vendor/raylib5/include/raygui.h	/^static int TextToInteger(const char *text)$/;"	f	typeref:typename:int
Texture	./vendor/raylib5/include/raylib.h	/^typedef struct Texture {$/;"	s
Texture	./vendor/raylib5/include/raylib.h	/^} Texture;$/;"	t	typeref:struct:Texture
Texture2D	./vendor/raylib5/include/raygui.h	/^    typedef struct Texture2D {$/;"	s
Texture2D	./vendor/raylib5/include/raygui.h	/^    } Texture2D;$/;"	t	typeref:struct:Texture2D
Texture2D	./vendor/raylib5/include/raylib.h	/^typedef Texture Texture2D;$/;"	t	typeref:typename:Texture
TextureCubemap	./vendor/raylib5/include/raylib.h	/^typedef Texture TextureCubemap;$/;"	t	typeref:typename:Texture
TextureFilter	./vendor/raylib5/include/raylib.h	/^} TextureFilter;$/;"	t	typeref:enum:__anon661bbe320e03
TextureWrap	./vendor/raylib5/include/raylib.h	/^} TextureWrap;$/;"	t	typeref:enum:__anon661bbe320f03
The **checkauto** utility program (for RAII)	./vendor/STC/docs/algorithm_api.md	/^### The **checkauto** utility program (for RAII)$/;"	S	section:STC Algorithms""RAII scope macros
The *emplace* methods	./vendor/STC/README.md	/^## The *emplace* methods$/;"	s	chapter:STC - Smart Template Containers
The *erase* methods	./vendor/STC/README.md	/^## The *erase* methods$/;"	s	chapter:STC - Smart Template Containers
This	./src/flecs.h	/^static const flecs::entity_t This = EcsThis;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
TickSource	./src/flecs.h	/^using TickSource = EcsTickSource;$/;"	t	namespace:flecs	typeref:typename:EcsTickSource
Tile	./src/grid.h	/^typedef struct Tile {$/;"	s
Tile	./src/grid.h	/^} Tile;$/;"	t	typeref:struct:Tile
Tileset	./src/glyph.h	/^typedef struct Tileset {$/;"	s
Tileset	./src/glyph.h	/^} Tileset;$/;"	t	typeref:struct:Tileset
Time	./src/flecs.h	/^struct Time { };$/;"	s	struct:flecs::units
Timer	./src/flecs.h	/^using Timer = EcsTimer;$/;"	t	namespace:flecs	typeref:typename:EcsTimer
ToRep	./vendor/fmt/include/chrono.h	/^  using ToRep = typename To::rep;$/;"	t	function:safe_duration_cast::safe_duration_cast	typeref:typename:To::rep
Toggle	./src/flecs.h	/^static const flecs::entity_t Toggle = ECS_TOGGLE;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
TraceLogCallback	./vendor/raylib5/include/raylib.h	/^typedef void (*TraceLogCallback)(int logLevel, const char *text, va_list args);  \/\/ Logging: R/;"	t	typeref:typename:void (*)(int logLevel,const char * text,va_list args)
TraceLogLevel	./vendor/raylib5/include/raylib.h	/^} TraceLogLevel;$/;"	t	typeref:enum:__anon661bbe320303
Traditional_for_loop	./vendor/STC/misc/benchmarks/various/cspan_bench.c	/^static void Traditional_for_loop(intptr_t n)$/;"	f	typeref:typename:void	file:
Trait	./src/flecs.h	/^static const flecs::entity_t Trait = EcsTrait;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Transform	./vendor/raylib5/include/raylib.h	/^typedef struct Transform {$/;"	s
Transform	./vendor/raylib5/include/raylib.h	/^} Transform;$/;"	t	typeref:struct:Transform
Transitive	./src/flecs.h	/^static const flecs::entity_t Transitive = EcsTransitive;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Traversable	./src/flecs.h	/^static const flecs::entity_t Traversable = EcsTraversable;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
TraverseFlags	./src/flecs.h	/^static const uint32_t TraverseFlags = EcsTraverseFlags;$/;"	v	namespace:flecs	typeref:typename:const uint32_t
Triangle	./vendor/STC/misc/examples/algorithms/shape.c	/^} Triangle;$/;"	t	typeref:struct:__anon6b1a6e6c0208	file:
Triangle	./vendor/STC/misc/examples/algorithms/shape.cpp	/^Triangle::Triangle(Point a, Point b, Point c)$/;"	f	class:Triangle
Triangle	./vendor/STC/misc/examples/algorithms/shape.cpp	/^struct Triangle : public Shape$/;"	s	file:
Triangle_api	./vendor/STC/misc/examples/algorithms/shape.c	/^struct ShapeAPI Triangle_api = {$/;"	v	typeref:struct:ShapeAPI
Triangle_draw	./vendor/STC/misc/examples/algorithms/shape.c	/^static void Triangle_draw(const Shape* shape)$/;"	f	typeref:typename:void	file:
Triangle_from	./vendor/STC/misc/examples/algorithms/shape.c	/^Triangle Triangle_from(Point a, Point b, Point c) {$/;"	f	typeref:typename:Triangle
Triple	./vendor/STC/misc/examples/coroutines/generator.c	/^} Triple;$/;"	t	typeref:struct:__anon399785530108	file:
Triple_begin	./vendor/STC/misc/examples/coroutines/generator.c	/^Triple_iter Triple_begin(Triple* g) {$/;"	f	typeref:typename:Triple_iter
Triple_next	./vendor/STC/misc/examples/coroutines/generator.c	/^int Triple_next(Triple_iter* it) {$/;"	f	typeref:typename:int
TurnComponent	./src/turnbasedsystem.h	/^typedef struct TurnComponent {$/;"	s
TurnComponent	./src/turnbasedsystem.h	/^} TurnComponent;$/;"	t	typeref:struct:TurnComponent
TurnComponentData	./src/turnbasedsystem.h	/^typedef struct TurnComponentData {$/;"	s
TurnComponentData	./src/turnbasedsystem.h	/^} TurnComponentData;$/;"	t	typeref:struct:TurnComponentData
TurnCountComponent	./src/components.h	/^typedef struct TurnCountComponent TurnCountComponent; \/\/ Forward Declaration$/;"	t	typeref:struct:TurnCountComponent
TurnCountComponent	./src/turnbasedsystem.h	/^typedef struct TurnCountComponent { $/;"	s
TurnCountComponent	./src/turnbasedsystem.h	/^} TurnCountComponent;$/;"	t	typeref:struct:TurnCountComponent
TurnManager	./src/turnbasedsystem.h	/^typedef struct TurnManager {$/;"	s
TurnManager	./src/turnbasedsystem.h	/^} TurnManager;$/;"	t	typeref:struct:TurnManager
TurnState	./src/turnbasedsystem.h	/^enum TurnState {$/;"	g
TypeKindLast	./src/flecs.h	/^static const type_kind_t TypeKindLast = EcsTypeKindLast;$/;"	v	namespace:flecs::meta	typeref:typename:const type_kind_t
Types	./vendor/STC/docs/cbits_api.md	/^## Types$/;"	s	chapter:STC [cbits](../include/stc/cbits.h): Bitset
Types	./vendor/STC/docs/coption_api.md	/^## Types$/;"	s	chapter:STC [coption](../include/stc/coption.h): Command line argument parsing
Types	./vendor/STC/docs/crandom_api.md	/^## Types$/;"	s	chapter:STC [crand](../include/stc/crand.h): Pseudo Random Number Generator
Types	./vendor/STC/docs/cspan_api.md	/^## Types$/;"	s	chapter:STC [cspan](../include/stc/cspan.h): Multi-dimensional Array View
Types	./vendor/STC/docs/cstr_api.md	/^## Types$/;"	s	chapter:STC [cstr](../include/stc/cstr.h): String
Types	./vendor/STC/docs/csview_api.md	/^## Types$/;"	s	chapter:STC [csview](../include/stc/csview.h): Sub-string View
Types	./vendor/STC/docs/czview_api.md	/^## Types$/;"	s	chapter:STC [czview](../include/stc/czview.h): Null-terminated UTF8 String View
Types	./vendor/STC/docs/deq_api.md	/^## Types$/;"	s	chapter:STC [deq](../include/stc/deq.h): Double Ended Queue
Types	./vendor/STC/docs/hmap_api.md	/^## Types$/;"	s	chapter:STC [hmap](../include/stc/hmap.h): HashMap (unordered)
Types	./vendor/STC/docs/hset_api.md	/^## Types$/;"	s	chapter:STC [hset](../include/stc/hset.h): HashSet (unordered)
Types	./vendor/STC/docs/list_api.md	/^## Types$/;"	s	chapter:STC [list](../include/stc/list.h): Forward List
Types	./vendor/STC/docs/pque_api.md	/^## Types$/;"	s	chapter:STC [pque](../include/stc/pque.h): Priority Queue
Types	./vendor/STC/docs/queue_api.md	/^## Types$/;"	s	chapter:STC [queue](../include/stc/queue.h): Queue
Types	./vendor/STC/docs/smap_api.md	/^## Types$/;"	s	chapter:STC [smap](../include/stc/smap.h): Sorted Map
Types	./vendor/STC/docs/sset_api.md	/^## Types$/;"	s	chapter:STC [sset](../include/stc/sset.h): Sorted Set
Types	./vendor/STC/docs/stack_api.md	/^## Types$/;"	s	chapter:STC [stack](../include/stc/stack.h): Stack
Types	./vendor/STC/docs/vec_api.md	/^## Types$/;"	s	chapter:STC [vec](../include/stc/vec.h): Vector
Types and constants	./vendor/STC/docs/arc_api.md	/^## Types and constants$/;"	s	chapter:STC [arc](../include/stc/arc.h): Atomic Reference Counted Smart Pointer
Types and constants	./vendor/STC/docs/box_api.md	/^## Types and constants$/;"	s	chapter:STC [box](../include/stc/box.h): Smart Pointer (boxed object)
U16	./src/flecs.h	/^static const flecs::entity_t U16 = ecs_id(ecs_u16_t);$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
U16	./src/flecs.h	/^static const primitive_kind_t U16 = EcsU16;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
U32	./src/flecs.h	/^static const flecs::entity_t U32 = ecs_id(ecs_u32_t);$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
U32	./src/flecs.h	/^static const primitive_kind_t U32 = EcsU32;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
U64	./src/flecs.h	/^static const flecs::entity_t U64 = ecs_id(ecs_u64_t);$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
U64	./src/flecs.h	/^static const primitive_kind_t U64 = EcsU64;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
U8	./src/flecs.h	/^static const flecs::entity_t U8 = ecs_id(ecs_u8_t);$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
U8	./src/flecs.h	/^static const primitive_kind_t U8 = EcsU8;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
U8G_Arabic	./vendor/STC/include/stc/priv/utf8_prv.h	/^    U8G_Arabic, U8G_Cyrillic,$/;"	e	enum:__anon57216ba80103
U8G_Cc	./vendor/STC/include/stc/priv/utf8_prv.h	/^    U8G_Cc, U8G_Lt, U8G_Nd, U8G_Nl,$/;"	e	enum:__anon57216ba80103
U8G_Cyrillic	./vendor/STC/include/stc/priv/utf8_prv.h	/^    U8G_Arabic, U8G_Cyrillic,$/;"	e	enum:__anon57216ba80103
U8G_Devanagari	./vendor/STC/include/stc/priv/utf8_prv.h	/^    U8G_Devanagari, U8G_Greek,$/;"	e	enum:__anon57216ba80103
U8G_Greek	./vendor/STC/include/stc/priv/utf8_prv.h	/^    U8G_Devanagari, U8G_Greek,$/;"	e	enum:__anon57216ba80103
U8G_Han	./vendor/STC/include/stc/priv/utf8_prv.h	/^    U8G_Han, U8G_Latin,$/;"	e	enum:__anon57216ba80103
U8G_Latin	./vendor/STC/include/stc/priv/utf8_prv.h	/^    U8G_Han, U8G_Latin,$/;"	e	enum:__anon57216ba80103
U8G_Lt	./vendor/STC/include/stc/priv/utf8_prv.h	/^    U8G_Cc, U8G_Lt, U8G_Nd, U8G_Nl,$/;"	e	enum:__anon57216ba80103
U8G_Nd	./vendor/STC/include/stc/priv/utf8_prv.h	/^    U8G_Cc, U8G_Lt, U8G_Nd, U8G_Nl,$/;"	e	enum:__anon57216ba80103
U8G_Nl	./vendor/STC/include/stc/priv/utf8_prv.h	/^    U8G_Cc, U8G_Lt, U8G_Nd, U8G_Nl,$/;"	e	enum:__anon57216ba80103
U8G_Pc	./vendor/STC/include/stc/priv/utf8_prv.h	/^    U8G_Pc, U8G_Pd, U8G_Pf, U8G_Pi,$/;"	e	enum:__anon57216ba80103
U8G_Pd	./vendor/STC/include/stc/priv/utf8_prv.h	/^    U8G_Pc, U8G_Pd, U8G_Pf, U8G_Pi,$/;"	e	enum:__anon57216ba80103
U8G_Pf	./vendor/STC/include/stc/priv/utf8_prv.h	/^    U8G_Pc, U8G_Pd, U8G_Pf, U8G_Pi,$/;"	e	enum:__anon57216ba80103
U8G_Pi	./vendor/STC/include/stc/priv/utf8_prv.h	/^    U8G_Pc, U8G_Pd, U8G_Pf, U8G_Pi,$/;"	e	enum:__anon57216ba80103
U8G_SIZE	./vendor/STC/include/stc/priv/utf8_prv.h	/^    U8G_SIZE$/;"	e	enum:__anon57216ba80103
U8G_Sc	./vendor/STC/include/stc/priv/utf8_prv.h	/^    U8G_Sc, U8G_Zl, U8G_Zp, U8G_Zs,$/;"	e	enum:__anon57216ba80103
U8G_Zl	./vendor/STC/include/stc/priv/utf8_prv.h	/^    U8G_Sc, U8G_Zl, U8G_Zp, U8G_Zs,$/;"	e	enum:__anon57216ba80103
U8G_Zp	./vendor/STC/include/stc/priv/utf8_prv.h	/^    U8G_Sc, U8G_Zl, U8G_Zp, U8G_Zs,$/;"	e	enum:__anon57216ba80103
U8G_Zs	./vendor/STC/include/stc/priv/utf8_prv.h	/^    U8G_Sc, U8G_Zl, U8G_Zp, U8G_Zs,$/;"	e	enum:__anon57216ba80103
UD_ARROW	./src/glyph.h	/^#define    UD_ARROW /;"	d
UD_ARROW_FLAT	./src/glyph.h	/^#define    UD_ARROW_FLAT /;"	d
UGroup	./vendor/STC/include/stc/priv/utf8_prv.c	/^} UGroup;$/;"	t	typeref:struct:__anon57216ba30208	file:
UM	./src/mt19937-64.c	/^#define UM /;"	d	file:
UMAP_BUCKETS	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define UMAP_BUCKETS(/;"	d	file:
UMAP_CLEAR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define UMAP_CLEAR(/;"	d	file:
UMAP_DTOR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define UMAP_DTOR(/;"	d	file:
UMAP_EMPLACE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define UMAP_EMPLACE(/;"	d	file:
UMAP_ERASE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define UMAP_ERASE(/;"	d	file:
UMAP_FIND	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define UMAP_FIND(/;"	d	file:
UMAP_FOR	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define UMAP_FOR(/;"	d	file:
UMAP_ITEM	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define UMAP_ITEM(/;"	d	file:
UMAP_PUT	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define UMAP_PUT(/;"	d	file:
UMAP_SETUP	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define UMAP_SETUP(/;"	d	file:
UMAP_SIZE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define UMAP_SIZE(/;"	d	file:
UNDERBLOCK	./src/glyph.h	/^#define    UNDERBLOCK /;"	d
UNDERSCORE	./src/glyph.h	/^#define    UNDERSCORE /;"	d
UNI_ENTRY	./vendor/STC/include/stc/priv/utf8_prv.c	/^#define UNI_ENTRY(/;"	d	file:
UPPER_A	./src/glyph.h	/^#define    UPPER_A /;"	d
UPPER_B	./src/glyph.h	/^#define    UPPER_B /;"	d
UPPER_C	./src/glyph.h	/^#define    UPPER_C /;"	d
UPPER_D	./src/glyph.h	/^#define    UPPER_D /;"	d
UPPER_E	./src/glyph.h	/^#define    UPPER_E /;"	d
UPPER_F	./src/glyph.h	/^#define    UPPER_F /;"	d
UPPER_G	./src/glyph.h	/^#define    UPPER_G /;"	d
UPPER_H	./src/glyph.h	/^#define    UPPER_H /;"	d
UPPER_I	./src/glyph.h	/^#define    UPPER_I /;"	d
UPPER_J	./src/glyph.h	/^#define    UPPER_J /;"	d
UPPER_K	./src/glyph.h	/^#define    UPPER_K /;"	d
UPPER_L	./src/glyph.h	/^#define    UPPER_L /;"	d
UPPER_M	./src/glyph.h	/^#define    UPPER_M /;"	d
UPPER_N	./src/glyph.h	/^#define    UPPER_N /;"	d
UPPER_O	./src/glyph.h	/^#define    UPPER_O /;"	d
UPPER_P	./src/glyph.h	/^#define    UPPER_P /;"	d
UPPER_Q	./src/glyph.h	/^#define    UPPER_Q /;"	d
UPPER_R	./src/glyph.h	/^#define    UPPER_R /;"	d
UPPER_S	./src/glyph.h	/^#define    UPPER_S /;"	d
UPPER_T	./src/glyph.h	/^#define    UPPER_T /;"	d
UPPER_U	./src/glyph.h	/^#define    UPPER_U /;"	d
UPPER_V	./src/glyph.h	/^#define    UPPER_V /;"	d
UPPER_W	./src/glyph.h	/^#define    UPPER_W /;"	d
UPPER_X	./src/glyph.h	/^#define    UPPER_X /;"	d
UPPER_Y	./src/glyph.h	/^#define    UPPER_Y /;"	d
UPPER_Z	./src/glyph.h	/^#define    UPPER_Z /;"	d
UPtr	./src/flecs.h	/^static const primitive_kind_t UPtr = EcsUPtr;$/;"	v	namespace:flecs::meta	typeref:typename:const primitive_kind_t
URange16	./vendor/STC/include/stc/priv/utf8_prv.c	/^} URange16;$/;"	t	typeref:struct:__anon57216ba30108	file:
USE_STORED_HASH_ON_LOOKUP	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  static constexpr bool USE_STORED_HASH_ON_LOOKUP = StoreHash;$/;"	m	class:tsl::detail_robin_hash::robin_hash	typeref:typename:bool
USE_STORED_HASH_ON_REHASH	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  static bool USE_STORED_HASH_ON_REHASH(size_type bucket_count) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:bool
UTF8 methods	./vendor/STC/docs/cstr_api.md	/^#### UTF8 methods$/;"	t	section:STC [cstr](../include/stc/cstr.h): String""Methods
UTF8 methods	./vendor/STC/docs/csview_api.md	/^#### UTF8 methods$/;"	t	section:STC [csview](../include/stc/csview.h): Sub-string View""Methods
UTF8 methods	./vendor/STC/docs/czview_api.md	/^#### UTF8 methods$/;"	t	section:STC [czview](../include/stc/czview.h): Null-terminated UTF8 String View""Methods
UTF_AL	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_al      , UTF_AL,       \/* utf8 alpha *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_AN	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_an      , UTF_AN,       \/* utf8 alphanumeric *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_ARABIC	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_arabic = UTF_GRP+2*U8G_Arabic, UTF_ARABIC,$/;"	e	enum:__anon4ce7005a0503	file:
UTF_BL	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_bl      , UTF_BL,       \/* utf8 blank *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_CC	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_cc = UTF_GRP+2*U8G_Cc, UTF_CC, \/* utf8 control char *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_CYRILLIC	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_cyrillic = UTF_GRP+2*U8G_Cyrillic, UTF_CYRILLIC,$/;"	e	enum:__anon4ce7005a0503	file:
UTF_DEVANAGARI	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_devanagari = UTF_GRP+2*U8G_Devanagari, UTF_DEVANAGARI,$/;"	e	enum:__anon4ce7005a0503	file:
UTF_GREEK	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_greek = UTF_GRP+2*U8G_Greek, UTF_GREEK,$/;"	e	enum:__anon4ce7005a0503	file:
UTF_GRP	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_GRP = 0x8150000,$/;"	e	enum:__anon4ce7005a0503	file:
UTF_HAN	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_han = UTF_GRP+2*U8G_Han, UTF_HAN,$/;"	e	enum:__anon4ce7005a0503	file:
UTF_LATIN	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_latin = UTF_GRP+2*U8G_Latin, UTF_LATIN,$/;"	e	enum:__anon4ce7005a0503	file:
UTF_LC	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_lc      , UTF_LC,       \/* utf8 letter cased *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_LL	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_ll      , UTF_LL,       \/* utf8 letter lowercase *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_LT	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_lt = UTF_GRP+2*U8G_Lt, UTF_LT, \/* utf8 letter titlecase *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_LU	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_lu      , UTF_LU,       \/* utf8 letter uppercase *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_ND	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_nd = UTF_GRP+2*U8G_Nd, UTF_ND, \/* utf8 number decimal *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_NL	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_nl = UTF_GRP+2*U8G_Nl, UTF_NL, \/* utf8 number letter *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_PC	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_pc = UTF_GRP+2*U8G_Pc, UTF_PC, \/* utf8 punct connector *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_PD	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_pd = UTF_GRP+2*U8G_Pd, UTF_PD, \/* utf8 punct dash *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_PF	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_pf = UTF_GRP+2*U8G_Pf, UTF_PF, \/* utf8 punct final *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_PI	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_pi = UTF_GRP+2*U8G_Pi, UTF_PI, \/* utf8 punct initial *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_SC	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_sc = UTF_GRP+2*U8G_Sc, UTF_SC, \/* utf8 symbol currency *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_SP	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_sp      , UTF_SP,       \/* utf8 space *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_WR	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_wr      , UTF_WR,       \/* utf8 word *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_ZL	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_zl = UTF_GRP+2*U8G_Zl, UTF_ZL, \/* utf8 separator line *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_ZP	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_zp = UTF_GRP+2*U8G_Zp, UTF_ZP, \/* utf8 separator paragraph *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_ZS	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_zs = UTF_GRP+2*U8G_Zs, UTF_ZS, \/* utf8 separator space *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_al	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_al      , UTF_AL,       \/* utf8 alpha *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_an	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_an      , UTF_AN,       \/* utf8 alphanumeric *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_arabic	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_arabic = UTF_GRP+2*U8G_Arabic, UTF_ARABIC,$/;"	e	enum:__anon4ce7005a0503	file:
UTF_bl	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_bl      , UTF_BL,       \/* utf8 blank *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_cc	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_cc = UTF_GRP+2*U8G_Cc, UTF_CC, \/* utf8 control char *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_cyrillic	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_cyrillic = UTF_GRP+2*U8G_Cyrillic, UTF_CYRILLIC,$/;"	e	enum:__anon4ce7005a0503	file:
UTF_devanagari	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_devanagari = UTF_GRP+2*U8G_Devanagari, UTF_DEVANAGARI,$/;"	e	enum:__anon4ce7005a0503	file:
UTF_greek	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_greek = UTF_GRP+2*U8G_Greek, UTF_GREEK,$/;"	e	enum:__anon4ce7005a0503	file:
UTF_han	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_han = UTF_GRP+2*U8G_Han, UTF_HAN,$/;"	e	enum:__anon4ce7005a0503	file:
UTF_latin	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_latin = UTF_GRP+2*U8G_Latin, UTF_LATIN,$/;"	e	enum:__anon4ce7005a0503	file:
UTF_lc	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_lc      , UTF_LC,       \/* utf8 letter cased *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_ll	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_ll      , UTF_LL,       \/* utf8 letter lowercase *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_lt	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_lt = UTF_GRP+2*U8G_Lt, UTF_LT, \/* utf8 letter titlecase *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_lu	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_lu      , UTF_LU,       \/* utf8 letter uppercase *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_nd	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_nd = UTF_GRP+2*U8G_Nd, UTF_ND, \/* utf8 number decimal *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_nl	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_nl = UTF_GRP+2*U8G_Nl, UTF_NL, \/* utf8 number letter *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_pc	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_pc = UTF_GRP+2*U8G_Pc, UTF_PC, \/* utf8 punct connector *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_pd	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_pd = UTF_GRP+2*U8G_Pd, UTF_PD, \/* utf8 punct dash *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_pf	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_pf = UTF_GRP+2*U8G_Pf, UTF_PF, \/* utf8 punct final *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_pi	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_pi = UTF_GRP+2*U8G_Pi, UTF_PI, \/* utf8 punct initial *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_sc	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_sc = UTF_GRP+2*U8G_Sc, UTF_SC, \/* utf8 symbol currency *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_sp	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_sp      , UTF_SP,       \/* utf8 space *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_wr	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_wr      , UTF_WR,       \/* utf8 word *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_zl	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_zl = UTF_GRP+2*U8G_Zl, UTF_ZL, \/* utf8 separator line *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_zp	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_zp = UTF_GRP+2*U8G_Zp, UTF_ZP, \/* utf8 separator paragraph *\/$/;"	e	enum:__anon4ce7005a0503	file:
UTF_zs	./vendor/STC/include/stc/priv/cregex_prv.c	/^    UTF_zs = UTF_GRP+2*U8G_Zs, UTF_ZS, \/* utf8 separator space *\/$/;"	e	enum:__anon4ce7005a0503	file:
UUID	./src/uuid.h	/^#define UUID /;"	d
UUID_H	./src/uuid.h	/^#define UUID_H$/;"	d
U_ARROW	./src/glyph.h	/^#define    U_ARROW /;"	d
UnSet	./src/flecs.h	/^static const flecs::entity_t UnSet = EcsUnSet;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Underlying	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        using Underlying = typename std::underlying_type<Enum>::type;$/;"	t	function:robin_hood::hash::operator ()	typeref:typename:std::underlying_type<Enum>::type
Union	./src/flecs.h	/^static const flecs::entity_t Union = EcsUnion;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Unit	./src/flecs.h	/^using Unit = EcsUnit;$/;"	t	namespace:flecs	typeref:typename:EcsUnit
Up	./src/flecs.h	/^static const uint32_t Up = EcsUp;$/;"	v	namespace:flecs	typeref:typename:const uint32_t
UpdateCountIds	./src/flecs.c	/^static void UpdateCountIds(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
UpdateCountTargets	./src/flecs.c	/^static void UpdateCountTargets(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
UpdateCounterIdInstance	./src/flecs.c	/^static void UpdateCounterIdInstance(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
UpdateCounterIncrementMemberInstance	./src/flecs.c	/^static void UpdateCounterIncrementMemberInstance(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
UpdateCounterMemberInstance	./src/flecs.c	/^static void UpdateCounterMemberInstance(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
UpdateCounterOneOfInstance	./src/flecs.c	/^static void UpdateCounterOneOfInstance(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
UpdateGaugeIdInstance	./src/flecs.c	/^static void UpdateGaugeIdInstance(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
UpdateGaugeMemberInstance	./src/flecs.c	/^static void UpdateGaugeMemberInstance(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
UpdateGaugeOneOfInstance	./src/flecs.c	/^static void UpdateGaugeOneOfInstance(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
UpdateIdInstance	./src/flecs.c	/^static void UpdateIdInstance(ecs_iter_t *it, bool counter) {$/;"	f	typeref:typename:void	file:
UpdateMemberInstance	./src/flecs.c	/^static void UpdateMemberInstance(ecs_iter_t *it, bool counter) {$/;"	f	typeref:typename:void	file:
UpdateOneOfInstance	./src/flecs.c	/^static void UpdateOneOfInstance(ecs_iter_t *it, bool counter) {$/;"	f	typeref:typename:void	file:
UpdateWorldSummary	./src/flecs.c	/^void UpdateWorldSummary(ecs_iter_t *it) {$/;"	f	file:
Uptr	./src/flecs.h	/^static const flecs::entity_t Uptr = ecs_id(ecs_uptr_t);$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
Uri	./src/flecs.h	/^struct Uri { };$/;"	s	struct:flecs::units
Usage	./vendor/STC/README.md	/^## Usage$/;"	s	chapter:STC - Smart Template Containers
Usage	./vendor/STC/docs/cregex_api.md	/^## Usage$/;"	s	chapter:STC [cregex](../include/stc/cregex.h): Regular Expressions
Use	./vendor/STC/misc/examples/coroutines/cointerleave.c	/^void Use(void)$/;"	f	typeref:typename:void
Use	./vendor/STC/misc/examples/coroutines/scheduler.c	/^void Use(void) {$/;"	f	typeref:typename:void
User-defined container type name	./vendor/STC/README.md	/^## User-defined container type name$/;"	s	chapter:STC - Smart Template Containers
Using cregex in a project	./vendor/STC/docs/cregex_api.md	/^## Using cregex in a project$/;"	s	chapter:STC [cregex](../include/stc/cregex.h): Regular Expressions
VALUEBOX	./vendor/raylib5/include/raygui.h	/^    VALUEBOX,$/;"	e	enum:__anon65c7f6000603
VIOLET	./vendor/raylib5/include/raylib.h	/^#define VIOLET /;"	d
Value	./src/flecs.h	/^    using Value = EcsMetricValue;$/;"	t	struct:flecs::metrics	typeref:typename:EcsMetricValue
ValueSelect	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  class ValueSelect {$/;"	c	class:tsl::robin_map
Vector	./src/flecs.h	/^using Vector = EcsVector;$/;"	t	namespace:flecs	typeref:typename:EcsVector
Vector2	./vendor/raylib5/include/raygui.h	/^    typedef struct Vector2 {$/;"	s
Vector2	./vendor/raylib5/include/raygui.h	/^    } Vector2;$/;"	t	typeref:struct:Vector2
Vector2	./vendor/raylib5/include/raylib.h	/^typedef struct Vector2 {$/;"	s
Vector2	./vendor/raylib5/include/raylib.h	/^} Vector2;$/;"	t	typeref:struct:Vector2
Vector2	./vendor/raylib5/include/raymath.h	/^typedef struct Vector2 {$/;"	s
Vector2	./vendor/raylib5/include/raymath.h	/^} Vector2;$/;"	t	typeref:struct:Vector2
Vector2Add	./vendor/raylib5/include/raymath.h	/^RMAPI Vector2 Vector2Add(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI Vector2
Vector2AddValue	./vendor/raylib5/include/raymath.h	/^RMAPI Vector2 Vector2AddValue(Vector2 v, float add)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Angle	./vendor/raylib5/include/raymath.h	/^RMAPI float Vector2Angle(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI float
Vector2Clamp	./vendor/raylib5/include/raymath.h	/^RMAPI Vector2 Vector2Clamp(Vector2 v, Vector2 min, Vector2 max)$/;"	f	typeref:typename:RMAPI Vector2
Vector2ClampValue	./vendor/raylib5/include/raymath.h	/^RMAPI Vector2 Vector2ClampValue(Vector2 v, float min, float max)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Distance	./vendor/raylib5/include/raymath.h	/^RMAPI float Vector2Distance(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI float
Vector2DistanceSqr	./vendor/raylib5/include/raymath.h	/^RMAPI float Vector2DistanceSqr(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI float
Vector2Divide	./vendor/raylib5/include/raymath.h	/^RMAPI Vector2 Vector2Divide(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI Vector2
Vector2DotProduct	./vendor/raylib5/include/raymath.h	/^RMAPI float Vector2DotProduct(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI float
Vector2Equals	./vendor/raylib5/include/raymath.h	/^RMAPI int Vector2Equals(Vector2 p, Vector2 q)$/;"	f	typeref:typename:RMAPI int
Vector2Invert	./vendor/raylib5/include/raymath.h	/^RMAPI Vector2 Vector2Invert(Vector2 v)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Length	./vendor/raylib5/include/raymath.h	/^RMAPI float Vector2Length(Vector2 v)$/;"	f	typeref:typename:RMAPI float
Vector2LengthSqr	./vendor/raylib5/include/raymath.h	/^RMAPI float Vector2LengthSqr(Vector2 v)$/;"	f	typeref:typename:RMAPI float
Vector2Lerp	./vendor/raylib5/include/raymath.h	/^RMAPI Vector2 Vector2Lerp(Vector2 v1, Vector2 v2, float amount)$/;"	f	typeref:typename:RMAPI Vector2
Vector2LineAngle	./vendor/raylib5/include/raymath.h	/^RMAPI float Vector2LineAngle(Vector2 start, Vector2 end)$/;"	f	typeref:typename:RMAPI float
Vector2Max	./vendor/raylib5/include/raymath.h	/^RMAPI Vector2 Vector2Max(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Min	./vendor/raylib5/include/raymath.h	/^RMAPI Vector2 Vector2Min(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI Vector2
Vector2MoveTowards	./vendor/raylib5/include/raymath.h	/^RMAPI Vector2 Vector2MoveTowards(Vector2 v, Vector2 target, float maxDistance)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Multiply	./vendor/raylib5/include/raymath.h	/^RMAPI Vector2 Vector2Multiply(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Negate	./vendor/raylib5/include/raymath.h	/^RMAPI Vector2 Vector2Negate(Vector2 v)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Normalize	./vendor/raylib5/include/raymath.h	/^RMAPI Vector2 Vector2Normalize(Vector2 v)$/;"	f	typeref:typename:RMAPI Vector2
Vector2One	./vendor/raylib5/include/raymath.h	/^RMAPI Vector2 Vector2One(void)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Reflect	./vendor/raylib5/include/raymath.h	/^RMAPI Vector2 Vector2Reflect(Vector2 v, Vector2 normal)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Refract	./vendor/raylib5/include/raymath.h	/^RMAPI Vector2 Vector2Refract(Vector2 v, Vector2 n, float r)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Rotate	./vendor/raylib5/include/raymath.h	/^RMAPI Vector2 Vector2Rotate(Vector2 v, float angle)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Scale	./vendor/raylib5/include/raymath.h	/^RMAPI Vector2 Vector2Scale(Vector2 v, float scale)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Subtract	./vendor/raylib5/include/raymath.h	/^RMAPI Vector2 Vector2Subtract(Vector2 v1, Vector2 v2)$/;"	f	typeref:typename:RMAPI Vector2
Vector2SubtractValue	./vendor/raylib5/include/raymath.h	/^RMAPI Vector2 Vector2SubtractValue(Vector2 v, float sub)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Transform	./vendor/raylib5/include/raymath.h	/^RMAPI Vector2 Vector2Transform(Vector2 v, Matrix mat)$/;"	f	typeref:typename:RMAPI Vector2
Vector2Zero	./vendor/raylib5/include/raymath.h	/^RMAPI Vector2 Vector2Zero(void)$/;"	f	typeref:typename:RMAPI Vector2
Vector3	./vendor/raylib5/include/raygui.h	/^    typedef struct Vector3 {$/;"	s
Vector3	./vendor/raylib5/include/raygui.h	/^    } Vector3;$/;"	t	typeref:struct:Vector3
Vector3	./vendor/raylib5/include/raylib.h	/^typedef struct Vector3 {$/;"	s
Vector3	./vendor/raylib5/include/raylib.h	/^} Vector3;$/;"	t	typeref:struct:Vector3
Vector3	./vendor/raylib5/include/raymath.h	/^typedef struct Vector3 {$/;"	s
Vector3	./vendor/raylib5/include/raymath.h	/^} Vector3;$/;"	t	typeref:struct:Vector3
Vector3Add	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3Add(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3AddValue	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3AddValue(Vector3 v, float add)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Angle	./vendor/raylib5/include/raymath.h	/^RMAPI float Vector3Angle(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI float
Vector3Barycenter	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3Barycenter(Vector3 p, Vector3 a, Vector3 b, Vector3 c)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Clamp	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3Clamp(Vector3 v, Vector3 min, Vector3 max)$/;"	f	typeref:typename:RMAPI Vector3
Vector3ClampValue	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3ClampValue(Vector3 v, float min, float max)$/;"	f	typeref:typename:RMAPI Vector3
Vector3CrossProduct	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3CrossProduct(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3CubicHermite	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3CubicHermite(Vector3 v1, Vector3 tangent1, Vector3 v2, Vector3 tangent2, fl/;"	f	typeref:typename:RMAPI Vector3
Vector3Distance	./vendor/raylib5/include/raymath.h	/^RMAPI float Vector3Distance(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI float
Vector3DistanceSqr	./vendor/raylib5/include/raymath.h	/^RMAPI float Vector3DistanceSqr(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI float
Vector3Divide	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3Divide(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3DotProduct	./vendor/raylib5/include/raymath.h	/^RMAPI float Vector3DotProduct(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI float
Vector3Equals	./vendor/raylib5/include/raymath.h	/^RMAPI int Vector3Equals(Vector3 p, Vector3 q)$/;"	f	typeref:typename:RMAPI int
Vector3Invert	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3Invert(Vector3 v)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Length	./vendor/raylib5/include/raymath.h	/^RMAPI float Vector3Length(const Vector3 v)$/;"	f	typeref:typename:RMAPI float
Vector3LengthSqr	./vendor/raylib5/include/raymath.h	/^RMAPI float Vector3LengthSqr(const Vector3 v)$/;"	f	typeref:typename:RMAPI float
Vector3Lerp	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3Lerp(Vector3 v1, Vector3 v2, float amount)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Max	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3Max(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Min	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3Min(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3MoveTowards	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3MoveTowards(Vector3 v, Vector3 target, float maxDistance)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Multiply	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3Multiply(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Negate	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3Negate(Vector3 v)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Normalize	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3Normalize(Vector3 v)$/;"	f	typeref:typename:RMAPI Vector3
Vector3One	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3One(void)$/;"	f	typeref:typename:RMAPI Vector3
Vector3OrthoNormalize	./vendor/raylib5/include/raymath.h	/^RMAPI void Vector3OrthoNormalize(Vector3 *v1, Vector3 *v2)$/;"	f	typeref:typename:RMAPI void
Vector3Perpendicular	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3Perpendicular(Vector3 v)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Project	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3Project(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Reflect	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3Reflect(Vector3 v, Vector3 normal)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Refract	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3Refract(Vector3 v, Vector3 n, float r)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Reject	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3Reject(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3RotateByAxisAngle	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3RotateByAxisAngle(Vector3 v, Vector3 axis, float angle)$/;"	f	typeref:typename:RMAPI Vector3
Vector3RotateByQuaternion	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3RotateByQuaternion(Vector3 v, Quaternion q)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Scale	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3Scale(Vector3 v, float scalar)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Subtract	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3Subtract(Vector3 v1, Vector3 v2)$/;"	f	typeref:typename:RMAPI Vector3
Vector3SubtractValue	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3SubtractValue(Vector3 v, float sub)$/;"	f	typeref:typename:RMAPI Vector3
Vector3ToFloat	./vendor/raylib5/include/raymath.h	/^    #define Vector3ToFloat(vec) (Vector3ToFloatV/;"	d
Vector3ToFloatV	./vendor/raylib5/include/raymath.h	/^RMAPI float3 Vector3ToFloatV(Vector3 v)$/;"	f	typeref:typename:RMAPI float3
Vector3Transform	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3Transform(Vector3 v, Matrix mat)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Unproject	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3Unproject(Vector3 source, Matrix projection, Matrix view)$/;"	f	typeref:typename:RMAPI Vector3
Vector3Zero	./vendor/raylib5/include/raymath.h	/^RMAPI Vector3 Vector3Zero(void)$/;"	f	typeref:typename:RMAPI Vector3
Vector4	./vendor/raylib5/include/raylib.h	/^typedef struct Vector4 {$/;"	s
Vector4	./vendor/raylib5/include/raylib.h	/^} Vector4;$/;"	t	typeref:struct:Vector4
Vector4	./vendor/raylib5/include/raymath.h	/^typedef struct Vector4 {$/;"	s
Vector4	./vendor/raylib5/include/raymath.h	/^} Vector4;$/;"	t	typeref:struct:Vector4
Vector4Add	./vendor/raylib5/include/raymath.h	/^RMAPI Vector4 Vector4Add(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI Vector4
Vector4AddValue	./vendor/raylib5/include/raymath.h	/^RMAPI Vector4 Vector4AddValue(Vector4 v, float add)$/;"	f	typeref:typename:RMAPI Vector4
Vector4Distance	./vendor/raylib5/include/raymath.h	/^RMAPI float Vector4Distance(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI float
Vector4DistanceSqr	./vendor/raylib5/include/raymath.h	/^RMAPI float Vector4DistanceSqr(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI float
Vector4Divide	./vendor/raylib5/include/raymath.h	/^RMAPI Vector4 Vector4Divide(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI Vector4
Vector4DotProduct	./vendor/raylib5/include/raymath.h	/^RMAPI float Vector4DotProduct(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI float
Vector4Equals	./vendor/raylib5/include/raymath.h	/^RMAPI int Vector4Equals(Vector4 p, Vector4 q)$/;"	f	typeref:typename:RMAPI int
Vector4Invert	./vendor/raylib5/include/raymath.h	/^RMAPI Vector4 Vector4Invert(Vector4 v)$/;"	f	typeref:typename:RMAPI Vector4
Vector4Length	./vendor/raylib5/include/raymath.h	/^RMAPI float Vector4Length(Vector4 v)$/;"	f	typeref:typename:RMAPI float
Vector4LengthSqr	./vendor/raylib5/include/raymath.h	/^RMAPI float Vector4LengthSqr(Vector4 v)$/;"	f	typeref:typename:RMAPI float
Vector4Lerp	./vendor/raylib5/include/raymath.h	/^RMAPI Vector4 Vector4Lerp(Vector4 v1, Vector4 v2, float amount)$/;"	f	typeref:typename:RMAPI Vector4
Vector4Max	./vendor/raylib5/include/raymath.h	/^RMAPI Vector4 Vector4Max(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI Vector4
Vector4Min	./vendor/raylib5/include/raymath.h	/^RMAPI Vector4 Vector4Min(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI Vector4
Vector4MoveTowards	./vendor/raylib5/include/raymath.h	/^RMAPI Vector4 Vector4MoveTowards(Vector4 v, Vector4 target, float maxDistance)$/;"	f	typeref:typename:RMAPI Vector4
Vector4Multiply	./vendor/raylib5/include/raymath.h	/^RMAPI Vector4 Vector4Multiply(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI Vector4
Vector4Negate	./vendor/raylib5/include/raymath.h	/^RMAPI Vector4 Vector4Negate(Vector4 v)$/;"	f	typeref:typename:RMAPI Vector4
Vector4Normalize	./vendor/raylib5/include/raymath.h	/^RMAPI Vector4 Vector4Normalize(Vector4 v)$/;"	f	typeref:typename:RMAPI Vector4
Vector4One	./vendor/raylib5/include/raymath.h	/^RMAPI Vector4 Vector4One(void)$/;"	f	typeref:typename:RMAPI Vector4
Vector4Scale	./vendor/raylib5/include/raymath.h	/^RMAPI Vector4 Vector4Scale(Vector4 v, float scale)$/;"	f	typeref:typename:RMAPI Vector4
Vector4Subtract	./vendor/raylib5/include/raymath.h	/^RMAPI Vector4 Vector4Subtract(Vector4 v1, Vector4 v2)$/;"	f	typeref:typename:RMAPI Vector4
Vector4SubtractValue	./vendor/raylib5/include/raymath.h	/^RMAPI Vector4 Vector4SubtractValue(Vector4 v, float add)$/;"	f	typeref:typename:RMAPI Vector4
Vector4Zero	./vendor/raylib5/include/raymath.h	/^RMAPI Vector4 Vector4Zero(void)$/;"	f	typeref:typename:RMAPI Vector4
VectorType	./src/flecs.h	/^static const type_kind_t VectorType = EcsVectorType;$/;"	v	namespace:flecs::meta	typeref:typename:const type_kind_t
Velocity	./src/components.h	/^typedef Vector2 Velocity;$/;"	t	typeref:typename:Vector2
Version 4.1.1	./vendor/STC/README.md	/^## Version 4.1.1$/;"	s	chapter:Version History
Version 4.2	./vendor/STC/README.md	/^## Version 4.2$/;"	s	chapter:Version History
Version 4.3	./vendor/STC/README.md	/^## Version 4.3$/;"	s	chapter:Version History
Version History	./vendor/STC/README.md	/^# Version History$/;"	c
Viking	./vendor/STC/misc/examples/hashmaps/vikings.c	/^typedef struct Viking {$/;"	s	file:
Viking	./vendor/STC/misc/examples/hashmaps/vikings.c	/^} Viking;$/;"	t	typeref:struct:Viking	file:
Viking_clone	./vendor/STC/misc/examples/hashmaps/vikings.c	/^Viking Viking_clone(Viking vk) {$/;"	f	typeref:typename:Viking
Viking_drop	./vendor/STC/misc/examples/hashmaps/vikings.c	/^void Viking_drop(Viking* vk) {$/;"	f	typeref:typename:void
Viking_from	./vendor/STC/misc/examples/hashmaps/vikings.c	/^static inline Viking Viking_from(RViking raw) { \/\/ note: parameter is by value$/;"	f	typeref:typename:Viking	file:
Viking_toraw	./vendor/STC/misc/examples/hashmaps/vikings.c	/^static inline RViking Viking_toraw(const Viking* vp) {$/;"	f	typeref:typename:RViking	file:
Vin	./vendor/STC/misc/benchmarks/various/cspan_bench.c	/^double Vin[nx * ny * nz]; \/\/, 1.23;$/;"	v	typeref:typename:double[]
Vout	./vendor/STC/misc/benchmarks/various/cspan_bench.c	/^double Vout[nx * ny * nz];$/;"	v	typeref:typename:double[]
VrDeviceInfo	./vendor/raylib5/include/raylib.h	/^typedef struct VrDeviceInfo {$/;"	s
VrDeviceInfo	./vendor/raylib5/include/raylib.h	/^} VrDeviceInfo;$/;"	t	typeref:struct:VrDeviceInfo
VrStereoConfig	./vendor/raylib5/include/raylib.h	/^typedef struct VrStereoConfig {$/;"	s
VrStereoConfig	./vendor/raylib5/include/raylib.h	/^} VrStereoConfig;$/;"	t	typeref:struct:VrStereoConfig
WHITE	./vendor/raylib5/include/raylib.h	/^#define WHITE /;"	d
WHash	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    using WHash = WrapHash<Hash>;$/;"	t	class:robin_hood::detail::Table	typeref:typename:WrapHash<Hash>
WIN32_LEAN_AND_MEAN	./src/flecs.c	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WIN32_LEAN_AND_MEAN	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^#   define WIN32_LEAN_AND_MEAN$/;"	d
WKeyEqual	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    using WKeyEqual = WrapKeyEqual<KeyEqual>;$/;"	t	class:robin_hood::detail::Table	typeref:typename:WrapKeyEqual<KeyEqual>
WORLDSPACE_SIZE_X	./src/main.c	/^const int WORLDSPACE_SIZE_X = 100;$/;"	v	typeref:typename:const int
WORLDSPACE_SIZE_Y	./src/main.c	/^const int WORLDSPACE_SIZE_Y = 100;$/;"	v	typeref:typename:const int
WRONLY	./vendor/fmt/include/os.h	/^    WRONLY = FMT_POSIX(O_WRONLY),  \/\/ Open for writing only.$/;"	e	enum:file::__anon511c5d600103
WYHASH_32BIT_MUM	./src/flecs.c	/^#define WYHASH_32BIT_MUM /;"	d	file:
WYHASH_CONDOM	./src/flecs.c	/^#define WYHASH_CONDOM /;"	d	file:
WYHASH_LITTLE_ENDIAN	./src/flecs.c	/^    #define WYHASH_LITTLE_ENDIAN /;"	d	file:
Warning	./src/flecs.h	/^    struct Warning { };$/;"	s	struct:flecs::alerts
Wave	./vendor/raylib5/include/raylib.h	/^typedef struct Wave {$/;"	s
Wave	./vendor/raylib5/include/raylib.h	/^} Wave;$/;"	t	typeref:struct:Wave
Wildcard	./src/flecs.h	/^static const flecs::entity_t Wildcard = EcsWildcard;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
With	./src/flecs.h	/^static const flecs::entity_t With = EcsWith;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
World	./src/flecs.h	/^static const flecs::entity_t World = EcsWorld;$/;"	v	namespace:flecs	typeref:typename:const flecs::entity_t
WorldStats	./src/flecs.h	/^using WorldStats = EcsWorldStats;$/;"	t	namespace:flecs	typeref:typename:EcsWorldStats
WorldSummary	./src/flecs.h	/^using WorldSummary = EcsWorldSummary;$/;"	t	namespace:flecs	typeref:typename:EcsWorldSummary
Wrap	./vendor/raylib5/include/raymath.h	/^RMAPI float Wrap(float value, float min, float max)$/;"	f	typeref:typename:RMAPI float
WrapHash	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    explicit WrapHash(T const& o) noexcept(noexcept(T(std::declval<T const&>())))$/;"	f	struct:robin_hood::detail::WrapHash
WrapHash	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^struct WrapHash : public T {$/;"	s	namespace:robin_hood::detail
WrapKeyEqual	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    explicit WrapKeyEqual(T const& o) noexcept(noexcept(T(std::declval<T const&>())))$/;"	f	struct:robin_hood::detail::WrapKeyEqual
WrapKeyEqual	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^struct WrapKeyEqual : public T {$/;"	s	namespace:robin_hood::detail
WriteStateNone	./src/flecs.c	/^    WriteStateNone = 0,$/;"	e	enum:ecs_write_kind_t	file:
WriteStateToStage	./src/flecs.c	/^    WriteStateToStage,$/;"	e	enum:ecs_write_kind_t	file:
YELLOW	./vendor/raylib5/include/raylib.h	/^#define YELLOW /;"	d
Yobi	./src/flecs.h	/^struct Yobi { };$/;"	s	struct:flecs::units
Yocto	./src/flecs.h	/^struct Yocto { };$/;"	s	struct:flecs::units
Yotta	./src/flecs.h	/^struct Yotta { };$/;"	s	struct:flecs::units
Zebi	./src/flecs.h	/^struct Zebi { };$/;"	s	struct:flecs::units
Zepto	./src/flecs.h	/^struct Zepto { };$/;"	s	struct:flecs::units
Zetta	./src/flecs.h	/^struct Zetta { };$/;"	s	struct:flecs::units
Zl_range16	./vendor/STC/include/stc/priv/utf8_prv.c	/^static const URange16 Zl_range16[] = { \/\/ Line separator$/;"	v	typeref:typename:const URange16[]	file:
Zp_range16	./vendor/STC/include/stc/priv/utf8_prv.c	/^static const URange16 Zp_range16[] = { \/\/ Paragraph separator$/;"	v	typeref:typename:const URange16[]	file:
Zs_range16	./vendor/STC/include/stc/priv/utf8_prv.c	/^static const URange16 Zs_range16[] = { \/\/ Space separator$/;"	v	typeref:typename:const URange16[]	file:
[Version 5.0 beta 4](#version-history)	./vendor/STC/README.md	/^### [Version 5.0 beta 4](#version-history)$/;"	S	chapter:STC - Smart Template Containers
_	./src/flecs.c	/^    ecs_table__t *_;                 \/* Infrequently accessed table metadata *\/$/;"	m	struct:ecs_table_t	typeref:typename:ecs_table__t *	file:
_	./src/flecs.h	/^namespace _ $/;"	n	namespace:flecs
_	./src/flecs.h	/^namespace _ {$/;"	n	namespace:flecs
_	./src/flecs.h	/^namespace _ {$/;"	n	namespace:flecs::doc
_	./src/flecs.h	/^namespace _ {$/;"	n	namespace:flecs::meta
_	./src/flecs.h	/^namespace _ {$/;"	n	namespace:flecs::rest
_	./src/flecs.h	/^namespace _$/;"	n	namespace:flecs
_1	./src/flecs.c	/^        ecs_cmd_1_t _1;              \/* Data for single entity operation *\/$/;"	m	union:ecs_cmd_t::__anon7d4a4177010a	typeref:typename:ecs_cmd_1_t	file:
_BIGLISTSIZE	./vendor/STC/include/stc/priv/cregex_prv.c	/^#define _BIGLISTSIZE /;"	d	file:
_LIBCPP_REMOVE_TRANSITIVE_INCLUDES	./vendor/fmt/include/format.h	/^#  define _LIBCPP_REMOVE_TRANSITIVE_INCLUDES$/;"	d
_LISTSIZE	./vendor/STC/include/stc/priv/cregex_prv.c	/^#define _LISTSIZE /;"	d	file:
_NCCRUNE	./vendor/STC/include/stc/priv/cregex_prv.c	/^#define _NCCRUNE /;"	d	file:
_NCLASS	./vendor/STC/include/stc/priv/cregex_prv.c	/^#define _NCLASS /;"	d	file:
_NSTACK	./vendor/STC/include/stc/priv/cregex_prv.c	/^#define _NSTACK /;"	d	file:
_NSUBEXP	./vendor/STC/include/stc/priv/cregex_prv.c	/^#define _NSUBEXP /;"	d	file:
_Node	./vendor/STC/include/stc/priv/cregex_prv.c	/^typedef struct _Node$/;"	s	file:
_Node	./vendor/STC/include/stc/priv/cregex_prv.c	/^} _Node;$/;"	t	typeref:struct:_Node	file:
_POSIX_C_SOURCE	./src/flecs.c	/^#define _POSIX_C_SOURCE /;"	d	file:
_Parser	./vendor/STC/include/stc/priv/cregex_prv.c	/^typedef struct _Parser$/;"	s	file:
_Parser	./vendor/STC/include/stc/priv/cregex_prv.c	/^} _Parser;$/;"	t	typeref:struct:_Parser	file:
_Reclass	./vendor/STC/include/stc/priv/cregex_prv.c	/^} _Reclass;$/;"	t	typeref:struct:__anon4ce7005a0108	file:
_Reflags	./vendor/STC/include/stc/priv/cregex_prv.c	/^} _Reflags;$/;"	t	typeref:struct:__anon4ce7005a0408	file:
_Reinst	./vendor/STC/include/stc/priv/cregex_prv.c	/^typedef struct _Reinst$/;"	s	file:
_Reinst	./vendor/STC/include/stc/priv/cregex_prv.c	/^} _Reinst;$/;"	t	typeref:struct:_Reinst	file:
_Relist	./vendor/STC/include/stc/priv/cregex_prv.c	/^typedef struct _Relist$/;"	s	file:
_Relist	./vendor/STC/include/stc/priv/cregex_prv.c	/^} _Relist;$/;"	t	typeref:struct:_Relist	file:
_Reljunk	./vendor/STC/include/stc/priv/cregex_prv.c	/^typedef struct _Reljunk$/;"	s	file:
_Reljunk	./vendor/STC/include/stc/priv/cregex_prv.c	/^} _Reljunk;$/;"	t	typeref:struct:_Reljunk	file:
_Reprog	./vendor/STC/include/stc/priv/cregex_prv.c	/^typedef struct _Reprog$/;"	s	file:
_Reprog	./vendor/STC/include/stc/priv/cregex_prv.c	/^} _Reprog;$/;"	t	typeref:struct:_Reprog	file:
_Resub	./vendor/STC/include/stc/priv/cregex_prv.c	/^typedef csview _Resub;$/;"	t	typeref:typename:csview	file:
_Resublist	./vendor/STC/include/stc/priv/cregex_prv.c	/^typedef struct _Resublist$/;"	s	file:
_Resublist	./vendor/STC/include/stc/priv/cregex_prv.c	/^} _Resublist;$/;"	t	typeref:struct:_Resublist	file:
_Rune	./vendor/STC/include/stc/priv/cregex_prv.c	/^typedef uint32_t _Rune; \/* Utf8 code point *\/$/;"	t	typeref:typename:uint32_t	file:
_Token	./vendor/STC/include/stc/priv/cregex_prv.c	/^typedef int32_t _Token;$/;"	t	typeref:typename:int32_t	file:
_UNICODE_DIR	./vendor/STC/src/utf8_tab.py	/^_UNICODE_DIR = "https:\/\/www.unicode.org\/Public\/15.0.0\/ucd"$/;"	v
__AC_KHASH_H	./vendor/STC/misc/benchmarks/external/khash.h	/^#define __AC_KHASH_H$/;"	d
__KHASH_IMPL	./vendor/STC/misc/benchmarks/external/khash.h	/^#define __KHASH_IMPL(/;"	d
__KHASH_PROTOTYPES	./vendor/STC/misc/benchmarks/external/khash.h	/^#define __KHASH_PROTOTYPES(/;"	d
__KHASH_TYPE	./vendor/STC/misc/benchmarks/external/khash.h	/^#define __KHASH_TYPE(/;"	d
__WINDOWS__	./vendor/cjson/include/cJSON.h	/^#define __WINDOWS__$/;"	d
__ac_HASH_UPPER	./vendor/STC/misc/benchmarks/external/khash.h	/^static const double __ac_HASH_UPPER = 0.77;$/;"	v	typeref:typename:const double
__ac_Wang_hash	./vendor/STC/misc/benchmarks/external/khash.h	/^static kh_inline khint_t __ac_Wang_hash(khint_t key)$/;"	f	typeref:typename:kh_inline khint_t
__ac_X31_hash_string	./vendor/STC/misc/benchmarks/external/khash.h	/^static kh_inline khint_t __ac_X31_hash_string(const char *s)$/;"	f	typeref:typename:kh_inline khint_t
__ac_fsize	./vendor/STC/misc/benchmarks/external/khash.h	/^#define __ac_fsize(/;"	d
__ac_isdel	./vendor/STC/misc/benchmarks/external/khash.h	/^#define __ac_isdel(/;"	d
__ac_iseither	./vendor/STC/misc/benchmarks/external/khash.h	/^#define __ac_iseither(/;"	d
__ac_isempty	./vendor/STC/misc/benchmarks/external/khash.h	/^#define __ac_isempty(/;"	d
__ac_set_isboth_false	./vendor/STC/misc/benchmarks/external/khash.h	/^#define __ac_set_isboth_false(/;"	d
__ac_set_isdel_false	./vendor/STC/misc/benchmarks/external/khash.h	/^#define __ac_set_isdel_false(/;"	d
__ac_set_isdel_true	./vendor/STC/misc/benchmarks/external/khash.h	/^#define __ac_set_isdel_true(/;"	d
__ac_set_isempty_false	./vendor/STC/misc/benchmarks/external/khash.h	/^#define __ac_set_isempty_false(/;"	d
__anon0565975a0103	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	g	file:
__anon0565975a0208	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	s	file:
__anon0565975a0308	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^typedef struct { const char* name; Range test[N_TESTS]; } Sample;$/;"	s	file:
__anon0565975a0403	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^enum {SAMPLES = 2, N = 1000000, R = 4};$/;"	g	file:
__anon08c2d9bb0103	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^enum {N1 = 4000000, S1 = 1, MaxLoadFactor100 = 80};$/;"	g	file:
__anon08c2d9bb020a	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^        union {uint64_t i; char c[8];} r = {.i = crand()};$/;"	u	function:randomize	file:
__anon0ab7b7af010a	./vendor/STC/include/stc/types.h	/^typedef union {$/;"	u
__anon0ab7b7af0208	./vendor/STC/include/stc/types.h	/^    struct { csview chr; csview_value* end; } u8;$/;"	s	union:__anon0ab7b7af010a
__anon0ab7b7af030a	./vendor/STC/include/stc/types.h	/^typedef union {$/;"	u
__anon0ab7b7af0408	./vendor/STC/include/stc/types.h	/^typedef struct { cstr_value* data; intptr_t size, cap; } cstr_buf;$/;"	s
__anon0ab7b7af0508	./vendor/STC/include/stc/types.h	/^    struct { cstr_value data[ sizeof(cstr_buf) ]; } sml;$/;"	s	union:cstr
__anon0ab7b7af0608	./vendor/STC/include/stc/types.h	/^    struct { cstr_value* data; size_t size, ncap; } lon;$/;"	s	union:cstr
__anon0ab7b7af070a	./vendor/STC/include/stc/types.h	/^typedef union {$/;"	u
__anon0e10c9080108	./vendor/STC/misc/examples/smartpointers/person_arc.c	/^typedef struct { cstr name, last; } Person;$/;"	s	file:
__anon14ad28530108	./vendor/STC/misc/examples/mixed/astar.c	/^{$/;"	s	file:
__anon17584c270103	./vendor/fmt/include/compile.h	/^enum { manual_indexing_id = -1 };$/;"	g	namespace:detail
__anon18e2057b0102	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^{$/;"	f	namespace:picobench	typeref:typename:long long	file:
__anon2f96ff660103	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^enum {N1 = 1000000, S1 = 1};$/;"	g	file:
__anon2f96ff66020a	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^    union {uint64_t i; char c[8];} r = {.i = crand()};$/;"	u	function:randomize	file:
__anon30576d180103	./vendor/STC/misc/examples/sortedmaps/gauss2.c	/^    enum {N = 5000000};$/;"	g	function:main	file:
__anon35c308470102	./vendor/fmt/include/format.h	/^  auto decode = [f](const char* buf_ptr, const char* ptr) {$/;"	f	function:detail::for_each_codepoint	file:
__anon35c308470202	./vendor/fmt/include/format.h	/^  for_each_codepoint(s, [begin, &n, &result](uint32_t, string_view sv) {$/;"	f	function:detail::code_point_index	file:
__anon35c308470303	./vendor/fmt/include/format.h	/^enum { inline_buffer_size = 500 };$/;"	g
__anon35c308470402	./vendor/fmt/include/format.h	/^  return [](UInt m) {$/;"	f	function:detail::count_digits	file:
__anon35c308470502	./vendor/fmt/include/format.h	/^      out, specs, bytes.size(), [bytes](reserve_iterator<OutputIt> it) {$/;"	f	function:detail::write_bytes	file:
__anon35c308470602	./vendor/fmt/include/format.h	/^  auto write = [=](reserve_iterator<OutputIt> it) {$/;"	f	function:detail::write_ptr	file:
__anon35c308470702	./vendor/fmt/include/format.h	/^                     [&](uint32_t cp, string_view sv) {$/;"	f	function:detail::find_escape	file:
__anon35c308470802	./vendor/fmt/include/format.h	/^  return write_padded<Char>(out, specs, 1, [=](reserve_iterator<OutputIt> it) {$/;"	f	function:detail::write_char	file:
__anon35c308470902	./vendor/fmt/include/format.h	/^      out, specs, data.size, [=](reserve_iterator<OutputIt> it) {$/;"	f	function:detail::write_int	file:
__anon35c308470a02	./vendor/fmt/include/format.h	/^      out, specs, size, size, [&](reserve_iterator<OutputIt> it) {$/;"	f	function:detail::write_int	file:
__anon35c308470b02	./vendor/fmt/include/format.h	/^        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {$/;"	f	function:detail::write_int	file:
__anon35c308470c02	./vendor/fmt/include/format.h	/^        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {$/;"	f	function:detail::write_int	file:
__anon35c308470d02	./vendor/fmt/include/format.h	/^        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {$/;"	f	function:detail::write_int	file:
__anon35c308470e02	./vendor/fmt/include/format.h	/^        out, num_digits, prefix, specs, [=](reserve_iterator<OutputIt> it) {$/;"	f	function:detail::write_int	file:
__anon35c308470f02	./vendor/fmt/include/format.h	/^                            [=](reserve_iterator<OutputIt> it) {$/;"	f	function:detail::write	file:
__anon35c308471002	./vendor/fmt/include/format.h	/^                            [=](reserve_iterator<OutputIt> it) {$/;"	f	function:detail::write_nonfinite	file:
__anon35c308471102	./vendor/fmt/include/format.h	/^  auto use_exp_format = [=]() {$/;"	f	function:detail::do_write_float	file:
__anon35c308471202	./vendor/fmt/include/format.h	/^    auto write = [=](iterator it) {$/;"	f	function:detail::do_write_float	file:
__anon35c308471302	./vendor/fmt/include/format.h	/^    return write_padded<Char, align::right>(out, specs, size, [&](iterator it) {$/;"	f	function:detail::do_write_float	file:
__anon35c308471402	./vendor/fmt/include/format.h	/^    return write_padded<Char, align::right>(out, specs, size, [&](iterator it) {$/;"	f	function:detail::do_write_float	file:
__anon35c308471502	./vendor/fmt/include/format.h	/^  return write_padded<Char, align::right>(out, specs, size, [&](iterator it) {$/;"	f	function:detail::do_write_float	file:
__anon35c308471603	./vendor/fmt/include/format.h	/^  enum { bigits_capacity = 32 };$/;"	g	class:detail::bigint
__anon35c308471702	./vendor/fmt/include/format.h	/^    auto minimum = [](int a, int b) { return a < b ? a : b; };$/;"	f	function:detail::bigint::add_compare	file:
__anon35c308471802	./vendor/fmt/include/format.h	/^    auto maximum = [](int a, int b) { return a > b ? a : b; };$/;"	f	function:detail::bigint::add_compare	file:
__anon35c308471902	./vendor/fmt/include/format.h	/^    auto get_bigit = [](const bigint& n, int i) -> bigit {$/;"	f	function:detail::bigint::add_compare	typeref:typename:bigit	file:
__anon35c308471a02	./vendor/fmt/include/format.h	/^        auto print_subsegment = [&](uint32_t subsegment, char* buffer) {$/;"	f	function:detail::format_float	file:
__anon35c308471b03	./vendor/fmt/include/format.h	/^  enum { buffer_size = std::numeric_limits<unsigned long long>::digits10 + 3 };$/;"	g	class:format_int
__anon399785530108	./vendor/STC/misc/examples/coroutines/generator.c	/^typedef struct {$/;"	s	file:
__anon4261e9d10102	./vendor/fmt/include/printf.h	/^  auto get_arg = [&](int arg_index) {$/;"	f	function:detail::vprintf	file:
__anon462bbae20108	./vendor/STC/include/stc/extend.h	/^typedef struct {$/;"	s
__anon4bd0e05d0108	./vendor/STC/misc/examples/sortedmaps/listmap.c	/^    typedef struct {int a; const char* b;} pair;$/;"	s	function:main	file:
__anon4ce7005a0108	./vendor/STC/include/stc/priv/cregex_prv.c	/^{$/;"	s	file:
__anon4ce7005a020a	./vendor/STC/include/stc/priv/cregex_prv.c	/^    union {$/;"	u	struct:_Reinst	file:
__anon4ce7005a030a	./vendor/STC/include/stc/priv/cregex_prv.c	/^    union {    \/* regexp relies on these two being in the same union *\/$/;"	u	struct:_Reinst	file:
__anon4ce7005a0408	./vendor/STC/include/stc/priv/cregex_prv.c	/^typedef struct {$/;"	s	file:
__anon4ce7005a0503	./vendor/STC/include/stc/priv/cregex_prv.c	/^enum {$/;"	g	file:
__anon4ce7005a0608	./vendor/STC/include/stc/priv/cregex_prv.c	/^    static struct { const char* c; int n, r; } cls[] = {$/;"	s	function:_lexasciiclass	file:
__anon4ce7005a0708	./vendor/STC/include/stc/priv/cregex_prv.c	/^    static struct { const char* c; uint32_t n, r; } cls[] = {$/;"	s	function:_lexutfclass	file:
__anon511c5d600103	./vendor/fmt/include/os.h	/^  enum {$/;"	g	class:file
__anon56511d070102	./vendor/fmt/include/chrono.h	/^  static bool init = []() -> bool {$/;"	f	function:detail::tzset_once	typeref:typename:bool	file:
__anon56511d07020a	./vendor/fmt/include/chrono.h	/^  union {$/;"	u	class:detail::get_locale
__anon57216ba30108	./vendor/STC/include/stc/priv/utf8_prv.c	/^typedef struct {$/;"	s	file:
__anon57216ba30208	./vendor/STC/include/stc/priv/utf8_prv.c	/^typedef struct {$/;"	s	file:
__anon57216ba80103	./vendor/STC/include/stc/priv/utf8_prv.h	/^enum {$/;"	g
__anon57216ba80208	./vendor/STC/include/stc/priv/utf8_prv.h	/^typedef struct { uint32_t state, codep; } utf8_decode_t;$/;"	s
__anon576026220103	./vendor/STC/include/stc/priv/utf8_tab.c	/^enum { casefold_len = 192 };$/;"	g	file:
__anon5aa815230108	./vendor/STC/misc/examples/regularexpressions/regex2.c	/^    struct { const char *pattern, *input; } s[] = {$/;"	s	function:main	file:
__anon5abf1d6d0103	./vendor/STC/misc/examples/hashmaps/birthday.c	/^    enum {BITS = 46, BITS_TEST = BITS\/2 + 2};$/;"	g	function:test_repeats	file:
__anon5abf1d6d0203	./vendor/STC/misc/examples/hashmaps/birthday.c	/^    enum {BITS = 26};$/;"	g	function:test_distribution	file:
__anon5d689e190111	./vendor/fmt/include/ostream.h	/^namespace {$/;"	n	namespace:detail
__anon603333870103	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	g	file:
__anon603333870208	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	s	file:
__anon603333870308	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^typedef struct { const char* name; Range test[N_TESTS]; } Sample;$/;"	s	file:
__anon603333870403	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^enum {SAMPLES = 2, N = 60000000, R = 4};$/;"	g	file:
__anon6383736c0108	./src/log.c	/^typedef struct {$/;"	s	file:
__anon6383736c0208	./src/log.c	/^static struct {$/;"	s	file:
__anon638373710108	./src/log.h	/^typedef struct {$/;"	s
__anon638373710203	./src/log.h	/^enum { LOGC_TRACE, LOGC_DEBUG, LOGC_INFO, LOGC_WARN, LOGC_ERROR, LOGC_FATAL };$/;"	g
__anon65c7f6000103	./vendor/raylib5/include/raygui.h	/^            typedef enum { false, true } bool;$/;"	g
__anon65c7f6000103	./vendor/raylib5/include/raygui.h	/^            typedef enum { false, true } bool;$/;"	t	typeref:enum:bool
__anon65c7f6000203	./vendor/raylib5/include/raygui.h	/^typedef enum {$/;"	g
__anon65c7f6000303	./vendor/raylib5/include/raygui.h	/^typedef enum {$/;"	g
__anon65c7f6000403	./vendor/raylib5/include/raygui.h	/^typedef enum {$/;"	g
__anon65c7f6000503	./vendor/raylib5/include/raygui.h	/^typedef enum {$/;"	g
__anon65c7f6000603	./vendor/raylib5/include/raygui.h	/^typedef enum {$/;"	g
__anon65c7f6000703	./vendor/raylib5/include/raygui.h	/^typedef enum {$/;"	g
__anon65c7f6000803	./vendor/raylib5/include/raygui.h	/^typedef enum {$/;"	g
__anon65c7f6000903	./vendor/raylib5/include/raygui.h	/^typedef enum {$/;"	g
__anon65c7f6000a03	./vendor/raylib5/include/raygui.h	/^typedef enum {$/;"	g
__anon65c7f6000b03	./vendor/raylib5/include/raygui.h	/^typedef enum {$/;"	g
__anon65c7f6000c03	./vendor/raylib5/include/raygui.h	/^typedef enum {$/;"	g
__anon65c7f6000d03	./vendor/raylib5/include/raygui.h	/^typedef enum {$/;"	g
__anon65c7f6000e03	./vendor/raylib5/include/raygui.h	/^typedef enum {$/;"	g
__anon65c7f6000f03	./vendor/raylib5/include/raygui.h	/^typedef enum {$/;"	g
__anon65c7f6001003	./vendor/raylib5/include/raygui.h	/^typedef enum {$/;"	g
__anon65c7f6001103	./vendor/raylib5/include/raygui.h	/^typedef enum {$/;"	g
__anon65c7f6001203	./vendor/raylib5/include/raygui.h	/^typedef enum {$/;"	g
__anon65c7f6001303	./vendor/raylib5/include/raygui.h	/^typedef enum {$/;"	g
__anon65c7f6001403	./vendor/raylib5/include/raygui.h	/^typedef enum {$/;"	g
__anon65c7f6001503	./vendor/raylib5/include/raygui.h	/^typedef enum { BORDER = 0, BASE, TEXT, OTHER } GuiPropertyElement;$/;"	g
__anon65de2fff0103	./vendor/STC/misc/benchmarks/various/prng_bench.cpp	/^    enum {N = 500000000};$/;"	g	function:main	file:
__anon661bbe320103	./vendor/raylib5/include/raylib.h	/^    typedef enum bool { false = 0, true = !false } bool;$/;"	g
__anon661bbe320103	./vendor/raylib5/include/raylib.h	/^    typedef enum bool { false = 0, true = !false } bool;$/;"	t	typeref:enum:bool
__anon661bbe320203	./vendor/raylib5/include/raylib.h	/^typedef enum {$/;"	g
__anon661bbe320303	./vendor/raylib5/include/raylib.h	/^typedef enum {$/;"	g
__anon661bbe320403	./vendor/raylib5/include/raylib.h	/^typedef enum {$/;"	g
__anon661bbe320503	./vendor/raylib5/include/raylib.h	/^typedef enum {$/;"	g
__anon661bbe320603	./vendor/raylib5/include/raylib.h	/^typedef enum {$/;"	g
__anon661bbe320703	./vendor/raylib5/include/raylib.h	/^typedef enum {$/;"	g
__anon661bbe320803	./vendor/raylib5/include/raylib.h	/^typedef enum {$/;"	g
__anon661bbe320903	./vendor/raylib5/include/raylib.h	/^typedef enum {$/;"	g
__anon661bbe320a03	./vendor/raylib5/include/raylib.h	/^typedef enum {$/;"	g
__anon661bbe320b03	./vendor/raylib5/include/raylib.h	/^typedef enum {$/;"	g
__anon661bbe320c03	./vendor/raylib5/include/raylib.h	/^typedef enum {$/;"	g
__anon661bbe320d03	./vendor/raylib5/include/raylib.h	/^typedef enum {$/;"	g
__anon661bbe320e03	./vendor/raylib5/include/raylib.h	/^typedef enum {$/;"	g
__anon661bbe320f03	./vendor/raylib5/include/raylib.h	/^typedef enum {$/;"	g
__anon661bbe321003	./vendor/raylib5/include/raylib.h	/^typedef enum {$/;"	g
__anon661bbe321103	./vendor/raylib5/include/raylib.h	/^typedef enum {$/;"	g
__anon661bbe321203	./vendor/raylib5/include/raylib.h	/^typedef enum {$/;"	g
__anon661bbe321303	./vendor/raylib5/include/raylib.h	/^typedef enum {$/;"	g
__anon661bbe321403	./vendor/raylib5/include/raylib.h	/^typedef enum {$/;"	g
__anon661bbe321503	./vendor/raylib5/include/raylib.h	/^typedef enum {$/;"	g
__anon661bbe321603	./vendor/raylib5/include/raylib.h	/^typedef enum {$/;"	g
__anon6b1a6e6c0108	./vendor/STC/misc/examples/algorithms/shape.c	/^typedef struct {$/;"	s	file:
__anon6b1a6e6c0208	./vendor/STC/misc/examples/algorithms/shape.c	/^typedef struct {$/;"	s	file:
__anon6b1a6e6c0308	./vendor/STC/misc/examples/algorithms/shape.c	/^typedef struct {$/;"	s	file:
__anon6b61945d0108	./vendor/STC/misc/examples/sortedmaps/new_smap.c	/^typedef struct {$/;"	s	file:
__anon6f5400bc0108	./vendor/STC/include/c11/fmt.h	/^typedef struct {$/;"	s
__anon7018a51f0108	./vendor/STC/misc/examples/mixed/inits.c	/^typedef struct {int x, y;} ipair_t;$/;"	s	file:
__anon71539ea50108	./vendor/STC/misc/examples/smartpointers/box.c	/^typedef struct { cstr name, last; } Person;$/;"	s	file:
__anon74d0e1bc0108	./vendor/STC/include/stc/algo/crange.h	/^typedef struct { crange_value start, end, step, value; } crange;$/;"	s
__anon74d0e1bc0208	./vendor/STC/include/stc/algo/crange.h	/^typedef struct { crange_value *ref, end, step; } crange_iter;$/;"	s
__anon74f1d6690102	./vendor/fmt/include/std.h	/^          [&](const auto& v) {$/;"	f	function:formatter::format	file:
__anon7cecd9d80103	./vendor/STC/include/stc/cregex.h	/^enum {$/;"	g
__anon7cecd9d80203	./vendor/STC/include/stc/cregex.h	/^typedef enum {$/;"	g
__anon7cecd9d80308	./vendor/STC/include/stc/cregex.h	/^typedef struct {$/;"	s
__anon7cecd9d80408	./vendor/STC/include/stc/cregex.h	/^typedef struct {$/;"	s
__anon7d4a4177010a	./src/flecs.c	/^    union {$/;"	u	struct:ecs_cmd_t	file:
__anon7d4a41770208	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41770308	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a4177040a	./src/flecs.c	/^    union {$/;"	u	function:flecs_ito_	file:
__anon7d4a41770508	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41770603	./src/flecs.c	/^typedef enum  {$/;"	g	file:
__anon7d4a41770708	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41770808	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41770908	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41770a08	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41770b08	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41770c08	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41770d08	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41770e08	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41770f08	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41771008	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41771108	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41771208	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41771308	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41771408	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41771508	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41771608	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41771708	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41771808	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41771908	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41771a08	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41771b08	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41771c08	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41771d08	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41771e08	./src/flecs.c	/^static struct {$/;"	s	file:
__anon7d4a41771f08	./src/flecs.c	/^static struct {$/;"	s	file:
__anon7d4a41772008	./src/flecs.c	/^static struct {$/;"	s	file:
__anon7d4a4177210a	./src/flecs.c	/^    union {$/;"	u	function:win_enable_high_timer_resolution	file:
__anon7d4a41772203	./src/flecs.c	/^typedef enum {$/;"	g	file:
__anon7d4a41772303	./src/flecs.c	/^typedef enum {$/;"	g	file:
__anon7d4a4177240a	./src/flecs.c	/^typedef union {$/;"	u	file:
__anon7d4a41772508	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41772608	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41772708	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41772808	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41772908	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41772a08	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41772b08	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41772c08	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41772d08	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41772e08	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41772f08	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41773008	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41773108	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41773208	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41773308	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a4177340a	./src/flecs.c	/^    union {$/;"	u	struct:ecs_rule_op_ctx_t	file:
__anon7d4a41773508	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41773608	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41773708	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a41773808	./src/flecs.c	/^typedef struct {$/;"	s	file:
__anon7d4a417c0108	./src/flecs.h	/^typedef struct {$/;"	s
__anon7d4a417c020a	./src/flecs.h	/^    union {$/;"	u	struct:ecs_iter_private_t
__anon7d4a417c0308	./src/flecs.h	/^typedef struct {$/;"	s
__anon7d4a417c0408	./src/flecs.h	/^typedef struct {$/;"	s
__anon7d4a417c0508	./src/flecs.h	/^typedef struct {$/;"	s
__anon7d4a417c0608	./src/flecs.h	/^typedef struct {$/;"	s
__anon7d4a417c0708	./src/flecs.h	/^    struct {$/;"	s	struct:ecs_world_info_t
__anon7d4a417c0808	./src/flecs.h	/^typedef struct {$/;"	s
__anon7d4a417c0908	./src/flecs.h	/^typedef struct {$/;"	s
__anon7d4a417c0a03	./src/flecs.h	/^typedef enum {$/;"	g
__anon7d4a417c0b08	./src/flecs.h	/^typedef struct {$/;"	s
__anon7d4a417c0c08	./src/flecs.h	/^typedef struct {$/;"	s
__anon7d4a417c0d08	./src/flecs.h	/^typedef struct {$/;"	s
__anon7d4a417c0e08	./src/flecs.h	/^typedef struct {$/;"	s
__anon7d4a417c0f08	./src/flecs.h	/^    struct {$/;"	s	struct:ecs_world_stats_t
__anon7d4a417c1008	./src/flecs.h	/^    struct {$/;"	s	struct:ecs_world_stats_t
__anon7d4a417c1108	./src/flecs.h	/^    struct {$/;"	s	struct:ecs_world_stats_t
__anon7d4a417c1208	./src/flecs.h	/^    struct {$/;"	s	struct:ecs_world_stats_t
__anon7d4a417c1308	./src/flecs.h	/^    struct {$/;"	s	struct:ecs_world_stats_t
__anon7d4a417c1408	./src/flecs.h	/^    struct {$/;"	s	struct:ecs_world_stats_t
__anon7d4a417c1508	./src/flecs.h	/^    struct {$/;"	s	struct:ecs_world_stats_t
__anon7d4a417c1608	./src/flecs.h	/^    struct {$/;"	s	struct:ecs_world_stats_t
__anon7d4a417c1708	./src/flecs.h	/^    struct {$/;"	s	struct:ecs_world_stats_t
__anon7d4a417c1808	./src/flecs.h	/^typedef struct {$/;"	s
__anon7d4a417c1908	./src/flecs.h	/^typedef struct {$/;"	s
__anon7d4a417c1a08	./src/flecs.h	/^typedef struct {$/;"	s
__anon7d4a417c1b08	./src/flecs.h	/^typedef struct {$/;"	s
__anon7d4a417c1c02	./src/flecs.h	/^    return this->each(rel, flecs::Wildcard, [&](flecs::id id) {$/;"	f	function:flecs::entity_view::each	file:
__anon7d4a417c1d02	./src/flecs.h	/^        .serialize([](const flecs::serializer *ser, const EntityType *data) {$/;"	f	function:flecs::meta::_::flecs_entity_support	file:
__anon7d4a417c1e02	./src/flecs.h	/^            [](EntityType *dst, flecs::world_t *world, flecs::entity_t e) {$/;"	f	function:flecs::meta::_::flecs_entity_support	file:
__anon7d4a417c1f02	./src/flecs.h	/^    world.entity("::flecs::cpp").add(flecs::Module).scope([&]{$/;"	f	function:flecs::meta::_::init	file:
__anon7d4a417c2002	./src/flecs.h	/^        .find([value](flecs::entity constant) {$/;"	f	function:flecs::enum_data::entity	file:
__anon8777aae4010a	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    union { T value; };$/;"	u	struct:ska::detailv3::sherwood_v3_entry
__anon9bc77dd70108	./vendor/STC/misc/examples/smartpointers/box2.c	/^typedef struct {$/;"	s	file:
__anon9bc77dd70208	./vendor/STC/misc/examples/smartpointers/box2.c	/^typedef struct {$/;"	s	file:
__anon9ebb27040103	./vendor/STC/misc/examples/coroutines/dining_philosophers.c	/^enum {$/;"	g	file:
__anona03d81450103	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	g	file:
__anona03d81450208	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	s	file:
__anona03d81450308	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^typedef struct { const char* name; Range test[N_TESTS]; } Sample;$/;"	s	file:
__anona03d81450403	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^enum {SAMPLES = 2, N = 10000000, R = 4};$/;"	g	file:
__anonaf51d64b0108	./vendor/STC/misc/examples/coroutines/scheduler.c	/^typedef struct {$/;"	s	file:
__anonb7fc968f0108	./vendor/STC/include/stc/cbits.h	/^typedef struct { uintptr_t *buffer; intptr_t _size; } i_type;$/;"	s
__anonb7fc968f0208	./vendor/STC/include/stc/cbits.h	/^typedef struct { uintptr_t buffer[(i_capacity - 1)\/64 + 1]; } i_type;$/;"	s
__anonb8bcd80c0108	./vendor/STC/misc/examples/linkedlists/new_list.c	/^typedef struct {$/;"	s	file:
__anonbf71e1100108	./src/cvec.h	/^typedef struct {$/;"	s
__anonbf71e1100208	./src/cvec.h	/^typedef struct {$/;"	s
__anonc003a19a0103	./vendor/STC/misc/tests/cspan_test.c	/^    enum {TSIZE=4, CUBE=64, N=CUBE*CUBE*CUBE};$/;"	g	function:CTEST_SETUP	file:
__anonc17d532c0108	./vendor/STC/misc/examples/sortedmaps/multimap.c	/^typedef struct { int year; cstr city, date; } OlympicLoc;$/;"	s	file:
__anonc31abe760103	./vendor/STC/include/stc/coption.h	/^typedef enum {$/;"	g
__anonc31abe760208	./vendor/STC/include/stc/coption.h	/^typedef struct {$/;"	s
__anonc31abe760308	./vendor/STC/include/stc/coption.h	/^typedef struct {$/;"	s
__anonc4048f0a0108	./vendor/STC/misc/examples/spans/matmult.c	/^typedef struct { Mat2 m00, m01, m10, m11; } Partition;$/;"	s	file:
__anonc4048f0a0203	./vendor/STC/misc/examples/spans/matmult.c	/^  enum {recursion_threshold = 16};$/;"	g	function:recursive_matrix_product	file:
__anonc4048f0a0303	./vendor/STC/misc/examples/spans/matmult.c	/^  enum {N = 10, D1 = 256, D2 = D1};$/;"	g	function:main	file:
__anonca721fef0103	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	g	file:
__anonca721fef0208	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	s	file:
__anonca721fef0308	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^typedef struct { const char* name; Range test[N_TESTS]; } Sample;$/;"	s	file:
__anonca721fef0403	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^enum {SAMPLES = 2, N = 2000000, R = 4};$/;"	g	file:
__anond23e84280103	./vendor/STC/misc/benchmarks/various/cbits_benchmark.cpp	/^enum{ N=1<<22 }; \/\/ 4.2 mill.$/;"	g	file:
__anond4f61b3d0103	./vendor/STC/misc/benchmarks/various/cspan_bench.c	/^enum {$/;"	g	file:
__anond709dd120108	./vendor/STC/misc/examples/smartpointers/music_arc.c	/^{$/;"	s	file:
__anondcbad282010a	./vendor/STC/include/stc/crand.h	/^    union {uint64_t i; double f;} u = {0x3FF0000000000000U | (crand_u64(rng) >> 12)};$/;"	u	function:crand_f64
__anone018744f0103	./vendor/STC/include/stc/cspan.h	/^typedef enum {c_ROWMAJOR, c_COLMAJOR} cspan_layout;$/;"	g
__anone7a129120103	./vendor/STC/include/stc/coroutine.h	/^enum {$/;"	g
__anone7a129120203	./vendor/STC/include/stc/coroutine.h	/^typedef enum {$/;"	g
__anone7a129120308	./vendor/STC/include/stc/coroutine.h	/^typedef struct { intptr_t count; } cco_sem;$/;"	s
__anone7a129120408	./vendor/STC/include/stc/coroutine.h	/^typedef struct { double interval, start; } cco_timer;$/;"	s
__anone7b164fd010a	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^    union { uint64_t u8; uint8_t b[8]; } r;$/;"	u	function:randomString	file:
__anone90e5acb0103	./vendor/fmt/include/args.h	/^    enum {$/;"	g	struct:dynamic_format_arg_store::need_copy
__anone90e5acb0202	./vendor/fmt/include/args.h	/^    auto pop_one = [](std::vector<basic_format_arg<Context>>* data) {$/;"	f	function:dynamic_format_arg_store::emplace_arg	file:
__anonea363bd90103	./vendor/fmt/include/base.h	/^enum {$/;"	g	namespace:detail
__anonea363bd90203	./vendor/fmt/include/base.h	/^  enum { buffer_size = 256 };$/;"	g	class:detail::iterator_buffer
__anonea363bd90303	./vendor/fmt/include/base.h	/^  enum { buffer_size = 256 };$/;"	g	class:detail::iterator_buffer
__anonea363bd90402	./vendor/fmt/include/base.h	/^      : buffer<T>([](buffer<T>&, size_t) {}, out, 0, ~size_t()) {}$/;"	f	class:detail::iterator_buffer	file:
__anonea363bd90503	./vendor/fmt/include/base.h	/^  enum { buffer_size = 256 };$/;"	g	class:detail::counting_buffer
__anonea363bd9060a	./vendor/fmt/include/base.h	/^  union {$/;"	u	class:detail::value
__anonea363bd90703	./vendor/fmt/include/base.h	/^enum { long_short = sizeof(long) == sizeof(int) };$/;"	g	namespace:detail
__anonea363bd90802	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(const T (&values)[N]) -> const T (&)[N] {$/;"	f	struct:detail::arg_mapper	file:
__anonea363bd90903	./vendor/fmt/include/base.h	/^enum { packed_arg_bits = 4 };$/;"	g	namespace:detail
__anonea363bd90a03	./vendor/fmt/include/base.h	/^enum { max_packed_args = 62 \/ packed_arg_bits };$/;"	g	namespace:detail
__anonea363bd90b03	./vendor/fmt/include/base.h	/^enum : unsigned long long { is_unpacked_bit = 1ULL << 63 };$/;"	g	namespace:detail	typeref:typename:unsigned long long
__anonea363bd90c03	./vendor/fmt/include/base.h	/^enum : unsigned long long { has_named_args_bit = 1ULL << 62 };$/;"	g	namespace:detail	typeref:typename:unsigned long long
__anonea363bd90d03	./vendor/fmt/include/base.h	/^  enum {$/;"	g	function:detail::make_arg
__anonea363bd90e03	./vendor/fmt/include/base.h	/^  enum {$/;"	g	function:detail::make_arg
__anonea363bd90f03	./vendor/fmt/include/base.h	/^  enum { formattable = !std::is_same<arg_type, unformattable>::value };$/;"	g	function:detail::make_arg
__anonea363bd9100a	./vendor/fmt/include/base.h	/^  union {$/;"	u	class:basic_format_args
__anonea363bd91103	./vendor/fmt/include/base.h	/^  enum { max_size = 4 };$/;"	g	struct:detail::fill_t
__anonea363bd91208	./vendor/fmt/include/base.h	/^  struct {$/;"	s	function:detail::parse_format_specs
__anonea363bd91308	./vendor/fmt/include/base.h	/^  struct {$/;"	s	function:detail::parse_format_specs
__anoneab13f8a0103	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^enum {$/;"	g	file:
__anonedee870e0108	./vendor/STC/misc/examples/smartpointers/new_sptr.c	/^typedef struct { cstr name, last; } Person;$/;"	s	file:
__anonf306e7170108	./vendor/fmt/include/format-inl.h	/^FMT_INLINE_VARIABLE constexpr struct {$/;"	s	namespace:detail::dragonbox
__anonf306e7170202	./vendor/fmt/include/format-inl.h	/^  for_each_codepoint(s, [this](uint32_t cp, string_view) {$/;"	f	function:detail::utf8_to_utf16::utf8_to_utf16	file:
__anonf306e7170303	./vendor/fmt/include/format-inl.h	/^  enum {$/;"	g	class:detail::glibc_file
__anonf306e7170403	./vendor/fmt/include/format-inl.h	/^  enum {$/;"	g	class:detail::apple_file
__anonf6322e580108	./vendor/STC/include/stc/priv/cstr_prv.c	/^static struct {$/;"	s	file:
__anonf6322e5d0103	./vendor/STC/include/stc/priv/cstr_prv.h	/^enum  { cstr_s_last = sizeof(cstr_buf) - 1,$/;"	g
__anonfac950030103	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^enum {INSERT, ERASE, FIND, ITER, DESTRUCT, N_TESTS};$/;"	g	file:
__anonfac950030208	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	s	file:
__anonfac950030308	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^typedef struct { const char* name; Range test[N_TESTS]; } Sample;$/;"	s	file:
__anonfac950030403	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^enum {SAMPLES = 2, N = 60000000, R = 4};$/;"	g	file:
__declspec	./vendor/raylib5/include/raylib.h	/^        #define __declspec(/;"	d
__has_cpp_attribute	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^#    define __has_cpp_attribute(/;"	d
_arg	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    udata_t _arg;$/;"	m	class:picobench::state	typeref:typename:udata_t
_args	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    std::vector<udata_t> _args;$/;"	m	class:picobench::benchmark	typeref:typename:std::vector<udata_t>
_baseline	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    bool _baseline = false;$/;"	m	class:picobench::benchmark	typeref:typename:bool
_bitmask	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    uint32_t* _bitmask;$/;"	m	class:emhash7::HashMap	typeref:typename:uint32_t *
_bldcclass	./vendor/STC/include/stc/priv/cregex_prv.c	/^_bldcclass(_Parser *par)$/;"	f	typeref:typename:_Token	file:
_bmask	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        size_t    _bmask;$/;"	m	class:emhash7::HashMap::const_iterator	typeref:typename:size_t
_bmask	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        size_t    _bmask;$/;"	m	class:emhash7::HashMap::iterator	typeref:typename:size_t
_bucket	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        size_type _bucket;$/;"	m	class:emhash7::HashMap::const_iterator	typeref:typename:size_type
_bucket	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        size_type _bucket;$/;"	m	class:emhash7::HashMap::iterator	typeref:typename:size_type
_buf	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    null_streambuf _buf;$/;"	m	struct:picobench::null_stream	typeref:typename:null_streambuf
_build_subst	./vendor/STC/include/stc/priv/cregex_prv.c	/^_build_subst(const char* replace, int nmatch, const csview match[],$/;"	f	typeref:typename:void	file:
_c_APPLY_ARG_N	./vendor/STC/include/stc/common.h	/^#define _c_APPLY_ARG_N(/;"	d
_c_ARG_N	./vendor/STC/include/stc/common.h	/^#define _c_ARG_N(/;"	d
_c_DEFTYPES	./vendor/STC/include/stc/priv/template.h	/^  #define _c_DEFTYPES(/;"	d
_c_LINKC	./vendor/STC/include/stc/coroutine.h	/^      #define _c_LINKC /;"	d
_c_MEMB	./vendor/STC/include/stc/algo/quicksort.h	/^_c_MEMB(_binary_search)(const i_type* arr, const _m_raw raw)$/;"	f	typeref:typename:intptr_t
_c_MEMB	./vendor/STC/include/stc/algo/quicksort.h	/^_c_MEMB(_binary_search)(const i_type* arr, const _m_raw raw, intptr_t n)$/;"	f	typeref:typename:intptr_t
_c_MEMB	./vendor/STC/include/stc/algo/quicksort.h	/^_c_MEMB(_binary_search_range)(const i_type* arr, const _m_raw raw, intptr_t first, intptr_t last/;"	f	typeref:typename:intptr_t
_c_MEMB	./vendor/STC/include/stc/algo/quicksort.h	/^_c_MEMB(_lower_bound)(const i_type* arr, const _m_raw raw)$/;"	f	typeref:typename:intptr_t
_c_MEMB	./vendor/STC/include/stc/algo/quicksort.h	/^_c_MEMB(_lower_bound)(const i_type* arr, const _m_raw raw, intptr_t n)$/;"	f	typeref:typename:intptr_t
_c_MEMB	./vendor/STC/include/stc/algo/quicksort.h	/^_c_MEMB(_lower_bound_range)(const i_type* arr, const _m_raw raw, intptr_t first, intptr_t last) /;"	f	typeref:typename:intptr_t
_c_MEMB	./vendor/STC/include/stc/algo/quicksort.h	/^static inline void _c_MEMB(_insertsort_ij)(i_type* arr, intptr_t lo, intptr_t hi) {$/;"	f	typeref:typename:void
_c_MEMB	./vendor/STC/include/stc/algo/quicksort.h	/^static inline void _c_MEMB(_quicksort)(i_type* arr)$/;"	f	typeref:typename:void
_c_MEMB	./vendor/STC/include/stc/algo/quicksort.h	/^static inline void _c_MEMB(_quicksort)(i_type* arr, intptr_t n)$/;"	f	typeref:typename:void
_c_MEMB	./vendor/STC/include/stc/algo/quicksort.h	/^static inline void _c_MEMB(_quicksort_ij)(i_type* arr, intptr_t lo, intptr_t hi) {$/;"	f	typeref:typename:void
_c_MEMB	./vendor/STC/include/stc/arc.h	/^    STC_INLINE bool _c_MEMB(_eq)(const i_type* self, const i_type* other) {$/;"	f	typeref:typename:STC_INLINE bool
_c_MEMB	./vendor/STC/include/stc/arc.h	/^    STC_INLINE bool _c_MEMB(_eq)(const i_type* self, const i_type* other)$/;"	f	typeref:typename:STC_INLINE bool
_c_MEMB	./vendor/STC/include/stc/arc.h	/^    STC_INLINE bool _c_MEMB(_raw_eq)(const _m_raw* rx, const _m_raw* ry)$/;"	f	typeref:typename:STC_INLINE bool
_c_MEMB	./vendor/STC/include/stc/arc.h	/^    STC_INLINE int _c_MEMB(_cmp)(const i_type* self, const i_type* other) {$/;"	f	typeref:typename:STC_INLINE int
_c_MEMB	./vendor/STC/include/stc/arc.h	/^    STC_INLINE int _c_MEMB(_cmp)(const i_type* self, const i_type* other)$/;"	f	typeref:typename:STC_INLINE int
_c_MEMB	./vendor/STC/include/stc/arc.h	/^    STC_INLINE int _c_MEMB(_raw_cmp)(const _m_raw* rx, const _m_raw* ry)$/;"	f	typeref:typename:STC_INLINE int
_c_MEMB	./vendor/STC/include/stc/arc.h	/^    STC_INLINE uint64_t _c_MEMB(_hash)(const i_type* self) {$/;"	f	typeref:typename:STC_INLINE uint64_t
_c_MEMB	./vendor/STC/include/stc/arc.h	/^    STC_INLINE uint64_t _c_MEMB(_hash)(const i_type* self)$/;"	f	typeref:typename:STC_INLINE uint64_t
_c_MEMB	./vendor/STC/include/stc/arc.h	/^    STC_INLINE uint64_t _c_MEMB(_raw_hash)(const _m_raw* rx)$/;"	f	typeref:typename:STC_INLINE uint64_t
_c_MEMB	./vendor/STC/include/stc/arc.h	/^STC_INLINE _m_raw _c_MEMB(_toraw)(const i_type* self)$/;"	f	typeref:typename:STC_INLINE _m_raw
_c_MEMB	./vendor/STC/include/stc/arc.h	/^STC_INLINE i_type _c_MEMB(_clone)(i_type arc) {$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/arc.h	/^STC_INLINE i_type _c_MEMB(_from)(_m_raw raw)$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/arc.h	/^STC_INLINE i_type _c_MEMB(_from)(_m_value val)$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/arc.h	/^STC_INLINE i_type _c_MEMB(_from_ptr)(_m_value* p) {$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/arc.h	/^STC_INLINE i_type _c_MEMB(_init)(void)$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/arc.h	/^STC_INLINE i_type _c_MEMB(_make)(_m_value val) {$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/arc.h	/^STC_INLINE i_type _c_MEMB(_move)(i_type* self) {$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/arc.h	/^STC_INLINE long _c_MEMB(_use_count)(const i_type* self)$/;"	f	typeref:typename:STC_INLINE long
_c_MEMB	./vendor/STC/include/stc/arc.h	/^STC_INLINE void _c_MEMB(_assign)(i_type* self, i_type arc) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/arc.h	/^STC_INLINE void _c_MEMB(_drop)(const i_type* cself) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/arc.h	/^STC_INLINE void _c_MEMB(_reset)(i_type* self) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/arc.h	/^STC_INLINE void _c_MEMB(_reset_to)(i_type* self, _m_value* p) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/arc.h	/^STC_INLINE void _c_MEMB(_take)(i_type* self, i_type unowned) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/arc.h	/^struct _c_MEMB(_rep_) { catomic_long counter; i_key value; };$/;"	f	typeref:meta:struct
_c_MEMB	./vendor/STC/include/stc/box.h	/^    STC_INLINE bool _c_MEMB(_eq)(const i_type* self, const i_type* other) {$/;"	f	typeref:typename:STC_INLINE bool
_c_MEMB	./vendor/STC/include/stc/box.h	/^    STC_INLINE bool _c_MEMB(_eq)(const i_type* self, const i_type* other)$/;"	f	typeref:typename:STC_INLINE bool
_c_MEMB	./vendor/STC/include/stc/box.h	/^    STC_INLINE bool _c_MEMB(_raw_eq)(const _m_raw* rx, const _m_raw* ry)$/;"	f	typeref:typename:STC_INLINE bool
_c_MEMB	./vendor/STC/include/stc/box.h	/^    STC_INLINE i_type _c_MEMB(_clone)(i_type other) {$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/box.h	/^    STC_INLINE int _c_MEMB(_cmp)(const i_type* self, const i_type* other) {$/;"	f	typeref:typename:STC_INLINE int
_c_MEMB	./vendor/STC/include/stc/box.h	/^    STC_INLINE int _c_MEMB(_cmp)(const i_type* self, const i_type* other)$/;"	f	typeref:typename:STC_INLINE int
_c_MEMB	./vendor/STC/include/stc/box.h	/^    STC_INLINE int _c_MEMB(_raw_cmp)(const _m_raw* rx, const _m_raw* ry)$/;"	f	typeref:typename:STC_INLINE int
_c_MEMB	./vendor/STC/include/stc/box.h	/^    STC_INLINE uint64_t _c_MEMB(_hash)(const i_type* self) {$/;"	f	typeref:typename:STC_INLINE uint64_t
_c_MEMB	./vendor/STC/include/stc/box.h	/^    STC_INLINE uint64_t _c_MEMB(_hash)(const i_type* self)$/;"	f	typeref:typename:STC_INLINE uint64_t
_c_MEMB	./vendor/STC/include/stc/box.h	/^    STC_INLINE uint64_t _c_MEMB(_raw_hash)(const _m_raw* rx)$/;"	f	typeref:typename:STC_INLINE uint64_t
_c_MEMB	./vendor/STC/include/stc/box.h	/^STC_INLINE _m_raw _c_MEMB(_toraw)(const i_type* self)$/;"	f	typeref:typename:STC_INLINE _m_raw
_c_MEMB	./vendor/STC/include/stc/box.h	/^STC_INLINE _m_value* _c_MEMB(_release)(i_type* self)$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/box.h	/^STC_INLINE i_type _c_MEMB(_from)(_m_raw raw)$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/box.h	/^STC_INLINE i_type _c_MEMB(_from)(_m_value val)$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/box.h	/^STC_INLINE i_type _c_MEMB(_from_ptr)(_m_value* p)$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/box.h	/^STC_INLINE i_type _c_MEMB(_init)(void)$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/box.h	/^STC_INLINE i_type _c_MEMB(_make)(_m_value val) {$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/box.h	/^STC_INLINE i_type _c_MEMB(_move)(i_type* self) {$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/box.h	/^STC_INLINE long _c_MEMB(_use_count)(const i_type* self)$/;"	f	typeref:typename:STC_INLINE long
_c_MEMB	./vendor/STC/include/stc/box.h	/^STC_INLINE void _c_MEMB(_assign)(i_type* self, i_type* moved) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/box.h	/^STC_INLINE void _c_MEMB(_drop)(const i_type* cself) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/box.h	/^STC_INLINE void _c_MEMB(_reset)(i_type* self) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/box.h	/^STC_INLINE void _c_MEMB(_reset_to)(i_type* self, _m_value* p) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/box.h	/^STC_INLINE void _c_MEMB(_take)(i_type* self, i_type unowned) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/deq.h	/^STC_INLINE _m_value _c_MEMB(_pull_back)(i_type* self) { \/\/ move back out of deq$/;"	f	typeref:typename:STC_INLINE _m_value
_c_MEMB	./vendor/STC/include/stc/deq.h	/^_c_MEMB(_at)(const i_type* self, intptr_t idx)$/;"	f	typeref:typename:STC_INLINE const _m_value *
_c_MEMB	./vendor/STC/include/stc/deq.h	/^_c_MEMB(_at_mut)(i_type* self, intptr_t idx)$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/deq.h	/^_c_MEMB(_emplace_at)(i_type* self, _m_iter it, const _m_raw raw)$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/deq.h	/^_c_MEMB(_emplace_back)(i_type* self, const _m_raw raw)$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/deq.h	/^_c_MEMB(_emplace_front)(i_type* self, const _m_raw raw)$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/deq.h	/^_c_MEMB(_emplace_n)(i_type* self, const intptr_t idx, const _m_raw* raw, const intptr_t n) {$/;"	f	typeref:typename:STC_DEF _m_iter
_c_MEMB	./vendor/STC/include/stc/deq.h	/^_c_MEMB(_erase_at)(i_type* self, _m_iter it) {$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/deq.h	/^_c_MEMB(_erase_n)(i_type* self, const intptr_t idx, const intptr_t n) {$/;"	f	typeref:typename:STC_DEF void
_c_MEMB	./vendor/STC/include/stc/deq.h	/^_c_MEMB(_erase_range)(i_type* self, _m_iter it1, _m_iter it2) {$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/deq.h	/^_c_MEMB(_find)(const i_type* self, _m_raw raw) {$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/deq.h	/^_c_MEMB(_find_in)(_m_iter i1, _m_iter i2, _m_raw raw) {$/;"	f	typeref:typename:STC_DEF _m_iter
_c_MEMB	./vendor/STC/include/stc/deq.h	/^_c_MEMB(_get)(const i_type* self, _m_raw raw) {$/;"	f	typeref:typename:STC_INLINE const _m_value *
_c_MEMB	./vendor/STC/include/stc/deq.h	/^_c_MEMB(_get_mut)(i_type* self, _m_raw raw)$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/deq.h	/^_c_MEMB(_insert_at)(i_type* self, _m_iter it, const _m_value val) {$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/deq.h	/^_c_MEMB(_insert_n)(i_type* self, const intptr_t idx, const _m_value* arr, const intptr_t n) {$/;"	f	typeref:typename:STC_DEF _m_iter
_c_MEMB	./vendor/STC/include/stc/deq.h	/^_c_MEMB(_insert_uninit)(i_type* self, const intptr_t idx, const intptr_t n) {$/;"	f	typeref:typename:STC_DEF _m_iter
_c_MEMB	./vendor/STC/include/stc/deq.h	/^_c_MEMB(_pop_back)(i_type* self) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/deq.h	/^_c_MEMB(_push_back)(i_type* self, _m_value val)$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/deq.h	/^_c_MEMB(_push_front)(i_type* self, _m_value value) {$/;"	f	typeref:typename:STC_DEF _m_value *
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^    _c_MEMB(_at)(const i_type* self, _m_keyraw rkey) {$/;"	f	typeref:typename:STC_INLINE const _m_mapped *
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^    _c_MEMB(_at_mut)(i_type* self, _m_keyraw rkey)$/;"	f	typeref:typename:STC_INLINE _m_mapped *
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^    _c_MEMB(_emplace_key)(i_type* self, _m_keyraw rkey) {$/;"	f	typeref:typename:STC_INLINE _m_result
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^    _c_MEMB(_emplace_or_assign)(i_type* self, _m_keyraw rkey, _m_rmapped rmapped) {$/;"	f	typeref:typename:STC_DEF _m_result
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^    _c_MEMB(_insert_or_assign)(i_type* self, _m_key _key, _m_mapped _mapped) {$/;"	f	typeref:typename:STC_DEF _m_result
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^STC_DEF _m_iter _c_MEMB(_begin)(const i_type* self) {$/;"	f	typeref:typename:STC_DEF _m_iter
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^STC_DEF float _c_MEMB(_max_load_factor)(const i_type* self) {$/;"	f	typeref:typename:STC_DEF float
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^STC_DEF i_type _c_MEMB(_with_capacity)(const intptr_t cap) {$/;"	f	typeref:typename:STC_DEF i_type
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^STC_DEF intptr_t _c_MEMB(_capacity)(const i_type* map) {$/;"	f	typeref:typename:STC_DEF intptr_t
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^STC_DEF void _c_MEMB(_clear)(i_type* self) {$/;"	f	typeref:typename:STC_DEF void
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^STC_DEF void _c_MEMB(_drop)(const i_type* cself) {$/;"	f	typeref:typename:STC_DEF void
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^STC_INLINE _m_iter _c_MEMB(_advance)(_m_iter it, size_t n) {$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^STC_INLINE _m_iter _c_MEMB(_end)(const i_type* self)$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^STC_INLINE _m_raw _c_MEMB(_value_toraw)(const _m_value* val) {$/;"	f	typeref:typename:STC_INLINE _m_raw
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^STC_INLINE _m_value* _c_MEMB(_push)(i_type* self, _m_value _val) {$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^STC_INLINE bool         _c_MEMB(_contains)(const i_type* self, _m_keyraw rkey)$/;"	f	typeref:typename:STC_INLINE bool
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^STC_INLINE bool         _c_MEMB(_empty)(const i_type* map) { return !map->size; }$/;"	f	typeref:typename:STC_INLINE bool
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^STC_INLINE i_type       _c_MEMB(_init)(void) { i_type map = {0}; return map; }$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^STC_INLINE i_type _c_MEMB(_from_n)(const _m_raw* raw, intptr_t n)$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^STC_INLINE intptr_t     _c_MEMB(_bucket_count)(i_type* map) { return map->bucket_count; }$/;"	f	typeref:typename:STC_INLINE intptr_t
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^STC_INLINE intptr_t     _c_MEMB(_size)(const i_type* map) { return (intptr_t)map->size; }$/;"	f	typeref:typename:STC_INLINE intptr_t
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^STC_INLINE void         _c_MEMB(_shrink_to_fit)(i_type* self) { _c_MEMB(_reserve)(self, (intptr_/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^STC_INLINE void _c_MEMB(_copy)(i_type *self, const i_type* other) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^STC_INLINE void _c_MEMB(_next)(_m_iter* it) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^STC_INLINE void _c_MEMB(_put_n)(i_type* self, const _m_raw* raw, intptr_t n) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^STC_INLINE void _c_MEMB(_value_drop)(_m_value* _val) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^STC_INLINE void _c_MEMB(_wipe_)(i_type* self) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^_c_MEMB(_bucket_)(const i_type* self, const _m_keyraw* rkeyptr) {$/;"	f	typeref:typename:STC_DEF _m_result
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^_c_MEMB(_clone)(i_type m) {$/;"	f	typeref:typename:STC_DEF i_type
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^_c_MEMB(_emplace)(i_type* self, _m_keyraw rkey _i_MAP_ONLY(, _m_rmapped rmapped)) {$/;"	f	typeref:typename:STC_INLINE _m_result
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^_c_MEMB(_eq)(const i_type* self, const i_type* other) {$/;"	f	typeref:typename:STC_INLINE bool
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^_c_MEMB(_erase)(i_type* self, _m_keyraw rkey) {$/;"	f	typeref:typename:STC_INLINE int
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^_c_MEMB(_erase_at)(i_type* self, _m_iter it) {$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^_c_MEMB(_erase_entry)(i_type* self, _m_value* _val) {$/;"	f	typeref:typename:STC_DEF void
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^_c_MEMB(_find)(const i_type* self, _m_keyraw rkey) {$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^_c_MEMB(_get)(const i_type* self, _m_keyraw rkey) {$/;"	f	typeref:typename:STC_INLINE const _m_value *
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^_c_MEMB(_get_mut)(i_type* self, _m_keyraw rkey)$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^_c_MEMB(_insert)(i_type* self, _m_key _key _i_MAP_ONLY(, _m_mapped _mapped)) {$/;"	f	typeref:typename:STC_INLINE _m_result
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^_c_MEMB(_insert_entry_)(i_type* self, _m_keyraw rkey) {$/;"	f	typeref:typename:STC_DEF _m_result
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^_c_MEMB(_reserve)(i_type* self, const intptr_t _newcap) {$/;"	f	typeref:typename:STC_DEF bool
_c_MEMB	./vendor/STC/include/stc/hmap.h	/^_c_MEMB(_value_clone)(_m_value _val) {$/;"	f	typeref:typename:STC_INLINE _m_value
_c_MEMB	./vendor/STC/include/stc/list.h	/^STC_DEF bool _c_MEMB(_sort_with)(i_type* self, int(*cmp)(const _m_value*, const _m_value*)) {$/;"	f	typeref:typename:STC_DEF bool
_c_MEMB	./vendor/STC/include/stc/list.h	/^STC_DEF int _c_MEMB(_sort_cmp_)(const _m_value* x, const _m_value* y) {$/;"	f	typeref:typename:STC_DEF int
_c_MEMB	./vendor/STC/include/stc/list.h	/^STC_INLINE _m_iter      _c_MEMB(_emplace_at)(i_type* self, _m_iter it, _m_raw raw)$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/list.h	/^STC_INLINE _m_node*     _c_MEMB(_get_node)(_m_value* pval) { return _clist_tonode(pval); }$/;"	f	typeref:typename:STC_INLINE _m_node *
_c_MEMB	./vendor/STC/include/stc/list.h	/^STC_INLINE _m_node*     _c_MEMB(_unlink_front_node)(i_type* self)$/;"	f	typeref:typename:STC_INLINE _m_node *
_c_MEMB	./vendor/STC/include/stc/list.h	/^STC_INLINE _m_raw       _c_MEMB(_value_toraw)(const _m_value* pval) { return i_keyto(pval); }$/;"	f	typeref:typename:STC_INLINE _m_raw
_c_MEMB	./vendor/STC/include/stc/list.h	/^STC_INLINE _m_value     _c_MEMB(_value_clone)(_m_value val) { return i_keyclone(val); }$/;"	f	typeref:typename:STC_INLINE _m_value
_c_MEMB	./vendor/STC/include/stc/list.h	/^STC_INLINE _m_value*    _c_MEMB(_back)(const i_type* self) { return &self->last->value; }$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/list.h	/^STC_INLINE _m_value*    _c_MEMB(_emplace)(i_type* self, _m_raw raw)$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/list.h	/^STC_INLINE _m_value*    _c_MEMB(_emplace_back)(i_type* self, _m_raw raw)$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/list.h	/^STC_INLINE _m_value*    _c_MEMB(_emplace_front)(i_type* self, _m_raw raw)$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/list.h	/^STC_INLINE _m_value*    _c_MEMB(_front)(const i_type* self) { return &self->last->next->value; }$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/list.h	/^STC_INLINE _m_value*    _c_MEMB(_push)(i_type* self, _m_value value)$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/list.h	/^STC_INLINE bool         _c_MEMB(_empty)(const i_type* self) { return self->last == NULL; }$/;"	f	typeref:typename:STC_INLINE bool
_c_MEMB	./vendor/STC/include/stc/list.h	/^STC_INLINE bool         _c_MEMB(_reserve)(i_type* self, intptr_t n) { (void)(self + n); return t/;"	f	typeref:typename:STC_INLINE bool
_c_MEMB	./vendor/STC/include/stc/list.h	/^STC_INLINE bool         _c_MEMB(_sort)(i_type* self)$/;"	f	typeref:typename:STC_INLINE bool
_c_MEMB	./vendor/STC/include/stc/list.h	/^STC_INLINE bool _c_MEMB(_eq)(const i_type* self, const i_type* other) {$/;"	f	typeref:typename:STC_INLINE bool
_c_MEMB	./vendor/STC/include/stc/list.h	/^STC_INLINE i_type       _c_MEMB(_from_n)(const _m_raw* raw, intptr_t n)$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/list.h	/^STC_INLINE i_type       _c_MEMB(_init)(void) { return c_LITERAL(i_type){NULL}; }$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/list.h	/^STC_INLINE void         _c_MEMB(_clear)(i_type* self) { _c_MEMB(_drop)(self); }$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/list.h	/^STC_INLINE void         _c_MEMB(_pop_front)(i_type* self)$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/list.h	/^STC_INLINE void         _c_MEMB(_put_n)(i_type* self, const _m_raw* raw, intptr_t n)$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/list.h	/^STC_INLINE void         _c_MEMB(_value_drop)(_m_value* pval) { i_keydrop(pval); }$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_advance)(_m_iter it, size_t n) {$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_begin)(const i_type* self) {$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_clone)(i_type cx) {$/;"	f	typeref:typename:STC_DEF i_type
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_copy)(i_type *self, const i_type* other) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_count)(const i_type* self) {$/;"	f	typeref:typename:STC_INLINE intptr_t
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_drop)(const i_type* cself) {$/;"	f	typeref:typename:STC_DEF void
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_end)(const i_type* self)$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_erase_after_node)(i_type* self, _m_node* ref) {$/;"	f	typeref:typename:STC_DEF void
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_erase_at)(i_type* self, _m_iter it) {$/;"	f	typeref:typename:STC_DEF _m_iter
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_erase_range)(i_type* self, _m_iter it1, _m_iter it2) {$/;"	f	typeref:typename:STC_DEF _m_iter
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_find)(const i_type* self, _m_raw val) {$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_find_in)(_m_iter it1, _m_iter it2, _m_raw val) {$/;"	f	typeref:typename:STC_DEF _m_iter
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_get)(const i_type* self, _m_raw val) {$/;"	f	typeref:typename:STC_INLINE const _m_value *
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_get_mut)(i_type* self, _m_raw val) {$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_insert_after_node)(i_type* self, _m_node* ref, _m_node* node) {$/;"	f	typeref:typename:STC_DEF _m_value *
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_insert_at)(i_type* self, _m_iter it, _m_value value) {$/;"	f	typeref:typename:STC_DEF _m_iter
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_next)(_m_iter* it) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_push_back)(i_type* self, _m_value value) {$/;"	f	typeref:typename:STC_DEF _m_value *
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_push_back_node)(i_type* self, _m_node* node) {$/;"	f	typeref:typename:STC_DEF _m_value *
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_push_front)(i_type* self, _m_value value) {$/;"	f	typeref:typename:STC_DEF _m_value *
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_remove)(i_type* self, _m_raw val) {$/;"	f	typeref:typename:STC_DEF intptr_t
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_reverse)(i_type* self) {$/;"	f	typeref:typename:STC_DEF void
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_splice)(i_type* self, _m_iter it, i_type* other) {$/;"	f	typeref:typename:STC_DEF _m_iter
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_splice_range)(i_type* self, _m_iter it,$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_split_off)(i_type* self, _m_iter it1, _m_iter it2) {$/;"	f	typeref:typename:STC_DEF i_type
_c_MEMB	./vendor/STC/include/stc/list.h	/^_c_MEMB(_unlink_after_node)(i_type* self, _m_node* ref) {$/;"	f	typeref:typename:STC_DEF _m_node *
_c_MEMB	./vendor/STC/include/stc/pque.h	/^STC_DEF i_type _c_MEMB(_clone)(i_type q) {$/;"	f	typeref:typename:STC_DEF i_type
_c_MEMB	./vendor/STC/include/stc/pque.h	/^STC_INLINE _m_value _c_MEMB(_pull)(i_type* self)$/;"	f	typeref:typename:STC_INLINE _m_value
_c_MEMB	./vendor/STC/include/stc/pque.h	/^STC_INLINE _m_value _c_MEMB(_value_clone)(_m_value val)$/;"	f	typeref:typename:STC_INLINE _m_value
_c_MEMB	./vendor/STC/include/stc/pque.h	/^STC_INLINE bool _c_MEMB(_empty)(const i_type* q)$/;"	f	typeref:typename:STC_INLINE bool
_c_MEMB	./vendor/STC/include/stc/pque.h	/^STC_INLINE bool _c_MEMB(_reserve)(i_type* self, const intptr_t cap) {$/;"	f	typeref:typename:STC_INLINE bool
_c_MEMB	./vendor/STC/include/stc/pque.h	/^STC_INLINE const _m_value* _c_MEMB(_top)(const i_type* self)$/;"	f	typeref:typename:STC_INLINE const _m_value *
_c_MEMB	./vendor/STC/include/stc/pque.h	/^STC_INLINE i_type _c_MEMB(_from_n)(const _m_raw* raw, intptr_t n)$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/pque.h	/^STC_INLINE i_type _c_MEMB(_init)(void)$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/pque.h	/^STC_INLINE i_type _c_MEMB(_with_capacity)(const intptr_t cap) {$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/pque.h	/^STC_INLINE i_type _c_MEMB(_with_size)(const intptr_t size, _m_value null) {$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/pque.h	/^STC_INLINE intptr_t _c_MEMB(_capacity)(const i_type* q)$/;"	f	typeref:typename:STC_INLINE intptr_t
_c_MEMB	./vendor/STC/include/stc/pque.h	/^STC_INLINE intptr_t _c_MEMB(_size)(const i_type* q)$/;"	f	typeref:typename:STC_INLINE intptr_t
_c_MEMB	./vendor/STC/include/stc/pque.h	/^STC_INLINE void _c_MEMB(_clear)(i_type* self) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/pque.h	/^STC_INLINE void _c_MEMB(_copy)(i_type *self, const i_type* other) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/pque.h	/^STC_INLINE void _c_MEMB(_drop)(const i_type* cself) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/pque.h	/^STC_INLINE void _c_MEMB(_emplace)(i_type* self, _m_raw raw)$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/pque.h	/^STC_INLINE void _c_MEMB(_pop)(i_type* self)$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/pque.h	/^STC_INLINE void _c_MEMB(_put_n)(i_type* self, const _m_raw* raw, intptr_t n)$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/pque.h	/^STC_INLINE void _c_MEMB(_shrink_to_fit)(i_type* self)$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/pque.h	/^_c_MEMB(_erase_at)(i_type* self, const intptr_t idx) {$/;"	f	typeref:typename:STC_DEF void
_c_MEMB	./vendor/STC/include/stc/pque.h	/^_c_MEMB(_make_heap)(i_type* self) {$/;"	f	typeref:typename:STC_DEF void
_c_MEMB	./vendor/STC/include/stc/pque.h	/^_c_MEMB(_push)(i_type* self, _m_value value) {$/;"	f	typeref:typename:STC_DEF _m_value *
_c_MEMB	./vendor/STC/include/stc/pque.h	/^_c_MEMB(_sift_down_)(i_type* self, const intptr_t idx, const intptr_t n) {$/;"	f	typeref:typename:STC_DEF void
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.c	/^STC_DEF _m_iter _c_MEMB(_advance)(_m_iter it, intptr_t n) {$/;"	f	typeref:typename:STC_DEF _m_iter
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.c	/^_c_MEMB(_clear)(i_type* self) {$/;"	f	typeref:typename:STC_DEF void
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.c	/^_c_MEMB(_clone)(i_type cx) {$/;"	f	typeref:typename:STC_DEF i_type
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.c	/^_c_MEMB(_drop)(const i_type* cself) {$/;"	f	typeref:typename:STC_DEF void
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.c	/^_c_MEMB(_eq)(const i_type* self, const i_type* other) {$/;"	f	typeref:typename:STC_DEF bool
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.c	/^_c_MEMB(_push)(i_type* self, _m_value value) { \/\/ push_back$/;"	f	typeref:typename:STC_DEF _m_value *
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.c	/^_c_MEMB(_reserve)(i_type* self, const intptr_t n) {$/;"	f	typeref:typename:STC_DEF bool
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.c	/^_c_MEMB(_shrink_to_fit)(i_type *self) {$/;"	f	typeref:typename:STC_DEF void
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.c	/^_c_MEMB(_with_capacity)(const intptr_t n) {$/;"	f	typeref:typename:STC_DEF i_type
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.h	/^STC_INLINE _m_iter _c_MEMB(_begin)(const i_type* self) {$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.h	/^STC_INLINE _m_iter _c_MEMB(_end)(const i_type* self)$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.h	/^STC_INLINE _m_raw       _c_MEMB(_value_toraw)(const _m_value* pval)$/;"	f	typeref:typename:STC_INLINE _m_raw
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.h	/^STC_INLINE _m_value        _c_MEMB(_value_clone)(_m_value val)$/;"	f	typeref:typename:STC_INLINE _m_value
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.h	/^STC_INLINE _m_value _c_MEMB(_pull)(i_type* self) { \/\/ move front out of queue$/;"	f	typeref:typename:STC_INLINE _m_value
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.h	/^STC_INLINE _m_value*    _c_MEMB(_back)(const i_type* self)$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.h	/^STC_INLINE _m_value*    _c_MEMB(_emplace)(i_type* self, _m_raw raw)$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.h	/^STC_INLINE _m_value*    _c_MEMB(_front)(const i_type* self)$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.h	/^STC_INLINE bool         _c_MEMB(_empty)(const i_type* self)$/;"	f	typeref:typename:STC_INLINE bool
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.h	/^STC_INLINE i_type       _c_MEMB(_from_n)(const _m_raw* raw, intptr_t n)$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.h	/^STC_INLINE i_type       _c_MEMB(_init)(void)$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.h	/^STC_INLINE intptr_t     _c_MEMB(_capacity)(const i_type* self)$/;"	f	typeref:typename:STC_INLINE intptr_t
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.h	/^STC_INLINE intptr_t     _c_MEMB(_size)(const i_type* self)$/;"	f	typeref:typename:STC_INLINE intptr_t
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.h	/^STC_INLINE intptr_t _c_MEMB(_index)(const i_type* self, _m_iter it)$/;"	f	typeref:typename:STC_INLINE intptr_t
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.h	/^STC_INLINE void         _c_MEMB(_copy)(i_type* self, const i_type* other) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.h	/^STC_INLINE void         _c_MEMB(_put_n)(i_type* self, const _m_raw* raw, intptr_t n)$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.h	/^STC_INLINE void         _c_MEMB(_value_drop)(_m_value* val) { i_keydrop(val); }$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.h	/^STC_INLINE void _c_MEMB(_adjust_end_)(i_type* self, intptr_t n)$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.h	/^STC_INLINE void _c_MEMB(_next)(_m_iter* it) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/priv/queue_prv.h	/^STC_INLINE void _c_MEMB(_pop)(i_type* self) { \/\/ pop_front$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/priv/template.h	/^  #define _c_MEMB(/;"	d
_c_MEMB	./vendor/STC/include/stc/smap.h	/^        _c_MEMB(_emplace_key)(i_type* self, _m_keyraw rkey) {$/;"	f	typeref:typename:STC_INLINE _m_result
_c_MEMB	./vendor/STC/include/stc/smap.h	/^    _c_MEMB(_at)(const i_type* self, _m_keyraw rkey)$/;"	f	typeref:typename:STC_INLINE const _m_mapped *
_c_MEMB	./vendor/STC/include/stc/smap.h	/^    _c_MEMB(_at_mut)(i_type* self, _m_keyraw rkey)$/;"	f	typeref:typename:STC_INLINE _m_mapped *
_c_MEMB	./vendor/STC/include/stc/smap.h	/^    _c_MEMB(_emplace_or_assign)(i_type* self, _m_keyraw rkey, _m_rmapped rmapped) {$/;"	f	typeref:typename:STC_DEF _m_result
_c_MEMB	./vendor/STC/include/stc/smap.h	/^    _c_MEMB(_insert_or_assign)(i_type* self, _m_key _key, _m_mapped _mapped) {$/;"	f	typeref:typename:STC_DEF _m_result
_c_MEMB	./vendor/STC/include/stc/smap.h	/^STC_INLINE _m_iter      _c_MEMB(_find)(const i_type* self, _m_keyraw rkey)$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/smap.h	/^STC_INLINE _m_value*    _c_MEMB(_get_mut)(i_type* self, _m_keyraw rkey)$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/smap.h	/^STC_INLINE bool         _c_MEMB(_contains)(const i_type* self, _m_keyraw rkey)$/;"	f	typeref:typename:STC_INLINE bool
_c_MEMB	./vendor/STC/include/stc/smap.h	/^STC_INLINE bool         _c_MEMB(_empty)(const i_type* cx) { return cx->size == 0; }$/;"	f	typeref:typename:STC_INLINE bool
_c_MEMB	./vendor/STC/include/stc/smap.h	/^STC_INLINE const _m_value* _c_MEMB(_get)(const i_type* self, _m_keyraw rkey)$/;"	f	typeref:typename:STC_INLINE const _m_value *
_c_MEMB	./vendor/STC/include/stc/smap.h	/^STC_INLINE i_type       _c_MEMB(_init)(void) { i_type tree = {0}; return tree; }$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/smap.h	/^STC_INLINE intptr_t     _c_MEMB(_capacity)(const i_type* cx) { return cx->cap; }$/;"	f	typeref:typename:STC_INLINE intptr_t
_c_MEMB	./vendor/STC/include/stc/smap.h	/^STC_INLINE intptr_t     _c_MEMB(_size)(const i_type* cx) { return cx->size; }$/;"	f	typeref:typename:STC_INLINE intptr_t
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_advance)(_m_iter it, size_t n) {$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_back)(const i_type* self) {$/;"	f	typeref:typename:STC_DEF _m_value *
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_begin)(const i_type* self) {$/;"	f	typeref:typename:STC_DEF _m_iter
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_clear)(i_type* self)$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_clone)(i_type tree) {$/;"	f	typeref:typename:STC_DEF i_type
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_clone_r_)(i_type* self, _m_node* src, int32_t sn) {$/;"	f	typeref:typename:STC_DEF int32_t
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_copy)(i_type *self, const i_type* other) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_drop)(const i_type* cself) {$/;"	f	typeref:typename:STC_DEF void
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_drop_r_)(_m_node* d, int32_t tn) {$/;"	f	typeref:typename:void
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_emplace)(i_type* self, _m_keyraw rkey _i_MAP_ONLY(, _m_rmapped rmapped)) {$/;"	f	typeref:typename:STC_DEF _m_result
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_end)(const i_type* self) {$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_eq)(const i_type* self, const i_type* other) {$/;"	f	typeref:typename:STC_INLINE bool
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_erase)(i_type* self, _m_keyraw rkey) {$/;"	f	typeref:typename:STC_DEF int
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_erase_at)(i_type* self, _m_iter it) {$/;"	f	typeref:typename:STC_DEF _m_iter
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_erase_r_)(i_type *self, int32_t tn, const _m_keyraw* rkey, int *erased) {$/;"	f	typeref:typename:STC_DEF int32_t
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_erase_range)(i_type* self, _m_iter it1, _m_iter it2) {$/;"	f	typeref:typename:STC_DEF _m_iter
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_find_it)(const i_type* self, _m_keyraw rkey, _m_iter* out) {$/;"	f	typeref:typename:STC_DEF _m_value *
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_from_n)(const _m_raw* raw, intptr_t n)$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_front)(const i_type* self) {$/;"	f	typeref:typename:STC_DEF _m_value *
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_insert)(i_type* self, _m_key _key _i_MAP_ONLY(, _m_mapped _mapped)) {$/;"	f	typeref:typename:STC_INLINE _m_result
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_insert_entry_)(i_type* self, _m_keyraw rkey) {$/;"	f	typeref:typename:STC_DEF _m_result
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_insert_entry_i_)(i_type* self, int32_t tn, const _m_keyraw* rkey, _m_result* _res) {$/;"	f	typeref:typename:STC_DEF int32_t
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_lower_bound)(const i_type* self, _m_keyraw rkey) {$/;"	f	typeref:typename:STC_DEF _m_iter
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_new_node_)(i_type* self, int level) {$/;"	f	typeref:typename:int32_t
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_next)(_m_iter *it) {$/;"	f	typeref:typename:STC_DEF void
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_push)(i_type* self, _m_value _val) {$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_put_n)(i_type* self, const _m_raw* raw, intptr_t n) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_reserve)(i_type* self, const intptr_t cap) {$/;"	f	typeref:typename:STC_DEF bool
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_shrink_to_fit)(i_type *self) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_skew_)(_m_node *d, int32_t tn) {$/;"	f	typeref:typename:STC_DEF int32_t
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_split_)(_m_node *d, int32_t tn) {$/;"	f	typeref:typename:STC_DEF int32_t
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_value_clone)(_m_value _val) {$/;"	f	typeref:typename:STC_INLINE _m_value
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_value_drop)(_m_value* val) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_value_toraw)(const _m_value* val) {$/;"	f	typeref:typename:STC_INLINE _m_raw
_c_MEMB	./vendor/STC/include/stc/smap.h	/^_c_MEMB(_with_capacity)(const intptr_t cap) {$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE _m_iter _c_MEMB(_advance)(_m_iter it, size_t n)$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE _m_iter _c_MEMB(_begin)(const i_type* self) {$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE _m_iter _c_MEMB(_end)(const i_type* self)$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE _m_value _c_MEMB(_pull)(i_type* self)$/;"	f	typeref:typename:STC_INLINE _m_value
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE _m_value _c_MEMB(_value_clone)(_m_value val)$/;"	f	typeref:typename:STC_INLINE _m_value
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE _m_value* _c_MEMB(_append_uninit)(i_type *self, intptr_t n) {$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE _m_value* _c_MEMB(_at_mut)(i_type* self, intptr_t idx)$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE _m_value* _c_MEMB(_back)(const i_type* self)$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE _m_value* _c_MEMB(_emplace)(i_type* self, _m_raw raw)$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE _m_value* _c_MEMB(_front)(const i_type* self)$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE _m_value* _c_MEMB(_push)(i_type* self, _m_value val) {$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE bool _c_MEMB(_empty)(const i_type* self)$/;"	f	typeref:typename:STC_INLINE bool
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE bool _c_MEMB(_reserve)(i_type* self, intptr_t n) {$/;"	f	typeref:typename:STC_INLINE bool
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE const _m_value* _c_MEMB(_at)(const i_type* self, intptr_t idx)$/;"	f	typeref:typename:STC_INLINE const _m_value *
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE const _m_value* _c_MEMB(_top)(const i_type* self)$/;"	f	typeref:typename:STC_INLINE const _m_value *
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE i_keyraw _c_MEMB(_value_toraw)(const _m_value* val)$/;"	f	typeref:typename:STC_INLINE i_keyraw
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE i_type _c_MEMB(_clone)(i_type v) {$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE i_type _c_MEMB(_from_n)(const _m_raw* raw, intptr_t n)$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE i_type _c_MEMB(_init)(void) {$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE i_type _c_MEMB(_with_capacity)(intptr_t cap) {$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE i_type _c_MEMB(_with_size)(intptr_t size, _m_value null) {$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE intptr_t _c_MEMB(_capacity)(const i_type* self) {$/;"	f	typeref:typename:STC_INLINE intptr_t
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE intptr_t _c_MEMB(_index)(const i_type* self, _m_iter it)$/;"	f	typeref:typename:STC_INLINE intptr_t
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE intptr_t _c_MEMB(_size)(const i_type* self)$/;"	f	typeref:typename:STC_INLINE intptr_t
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE void _c_MEMB(_adjust_end_)(i_type* self, intptr_t n)$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE void _c_MEMB(_clear)(i_type* self) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE void _c_MEMB(_copy)(i_type *self, const i_type* other) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE void _c_MEMB(_drop)(const i_type* cself) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE void _c_MEMB(_init)(i_type* self)$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE void _c_MEMB(_next)(_m_iter* it)$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE void _c_MEMB(_pop)(i_type* self)$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE void _c_MEMB(_put_n)(i_type* self, const _m_raw* raw, intptr_t n)$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE void _c_MEMB(_shrink_to_fit)(i_type* self)$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/stack.h	/^STC_INLINE void _c_MEMB(_value_drop)(_m_value* val)$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/stack.h	/^_c_MEMB(_eq)(const i_type* self, const i_type* other) {$/;"	f	typeref:typename:STC_INLINE bool
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_DEF int _c_MEMB(_value_cmp)(const _m_value* x, const _m_value* y) {$/;"	f	typeref:typename:STC_DEF int
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_INLINE _m_iter _c_MEMB(_advance)(_m_iter it, size_t n)$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_INLINE _m_iter _c_MEMB(_begin)(const i_type* self) {$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_INLINE _m_iter _c_MEMB(_emplace_at)(i_type* self, _m_iter it, _m_raw raw) {$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_INLINE _m_iter _c_MEMB(_end)(const i_type* self)$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_INLINE _m_raw       _c_MEMB(_value_toraw)(const _m_value* val) { return i_keyto(val); }$/;"	f	typeref:typename:STC_INLINE _m_raw
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_INLINE _m_value     _c_MEMB(_pull)(i_type* self)$/;"	f	typeref:typename:STC_INLINE _m_value
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_INLINE _m_value     _c_MEMB(_value_clone)(_m_value val)$/;"	f	typeref:typename:STC_INLINE _m_value
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_INLINE _m_value*    _c_MEMB(_back)(const i_type* self)$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_INLINE _m_value*    _c_MEMB(_front)(const i_type* self) { return self->data; }$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_INLINE _m_value*    _c_MEMB(_push)(i_type* self, _m_value value) {$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_INLINE _m_value*    _c_MEMB(_push_back)(i_type* self, _m_value value)$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_INLINE _m_value* _c_MEMB(_emplace)(i_type* self, _m_raw raw) {$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_INLINE _m_value* _c_MEMB(_emplace_back)(i_type* self, _m_raw raw) {$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_INLINE bool         _c_MEMB(_empty)(const i_type* self) { return !self->_len; }$/;"	f	typeref:typename:STC_INLINE bool
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_INLINE i_type       _c_MEMB(_from_n)(const _m_raw* raw, intptr_t n)$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_INLINE intptr_t     _c_MEMB(_capacity)(const i_type* self) { return self->_cap; }$/;"	f	typeref:typename:STC_INLINE intptr_t
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_INLINE intptr_t     _c_MEMB(_size)(const i_type* self) { return self->_len; }$/;"	f	typeref:typename:STC_INLINE intptr_t
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_INLINE intptr_t _c_MEMB(_index)(const i_type* self, _m_iter it)$/;"	f	typeref:typename:STC_INLINE intptr_t
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_INLINE void         _c_MEMB(_copy)(i_type* self, const i_type* other) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_INLINE void         _c_MEMB(_pop)(i_type* self)$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_INLINE void         _c_MEMB(_pop_back)(i_type* self) { _c_MEMB(_pop)(self); }$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_INLINE void         _c_MEMB(_put_n)(i_type* self, const _m_raw* raw, intptr_t n)$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_INLINE void         _c_MEMB(_value_drop)(_m_value* val) { i_keydrop(val); }$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_INLINE void _c_MEMB(_adjust_end_)(i_type* self, intptr_t n)$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/vec.h	/^STC_INLINE void _c_MEMB(_next)(_m_iter* it)$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_at)(const i_type* self, const intptr_t idx) {$/;"	f	typeref:typename:STC_INLINE const _m_value *
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_at_mut)(i_type* self, const intptr_t idx) {$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_bsearch)(const i_type* self, _m_value key) {$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_clear)(i_type* self) {$/;"	f	typeref:typename:STC_DEF void
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_clone)(i_type cx) {$/;"	f	typeref:typename:STC_DEF i_type
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_copy_n)(i_type* self, const intptr_t idx,$/;"	f	typeref:typename:STC_DEF _m_iter
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_drop)(const i_type* cself) {$/;"	f	typeref:typename:STC_DEF void
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_emplace_n)(i_type* self, const intptr_t idx, const _m_raw raw[], intptr_t n) {$/;"	f	typeref:typename:STC_DEF _m_iter
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_eq)(const i_type* self, const i_type* other) {$/;"	f	typeref:typename:STC_INLINE bool
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_erase_at)(i_type* self, _m_iter it) {$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_erase_n)(i_type* self, const intptr_t idx, const intptr_t len) {$/;"	f	typeref:typename:STC_DEF _m_iter
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_erase_range)(i_type* self, _m_iter i1, _m_iter i2) {$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_find)(const i_type* self, _m_raw raw) {$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_find_in)(_m_iter i1, _m_iter i2, _m_raw raw) {$/;"	f	typeref:typename:STC_DEF _m_iter
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_get)(const i_type* self, _m_raw raw) {$/;"	f	typeref:typename:STC_INLINE const _m_value *
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_get_mut)(const i_type* self, _m_raw raw)$/;"	f	typeref:typename:STC_INLINE _m_value *
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_init)(void) {$/;"	f	typeref:typename:STC_DEF i_type
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_insert_at)(i_type* self, _m_iter it, const _m_value value) {$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_insert_n)(i_type* self, const intptr_t idx, const _m_value arr[], const intptr_t n) {$/;"	f	typeref:typename:STC_INLINE _m_iter
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_insert_uninit)(i_type* self, const intptr_t idx, const intptr_t n) {$/;"	f	typeref:typename:STC_DEF _m_iter
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_reserve)(i_type* self, const intptr_t cap) {$/;"	f	typeref:typename:STC_DEF bool
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_resize)(i_type* self, const intptr_t len, _m_value null) {$/;"	f	typeref:typename:STC_DEF bool
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_shrink_to_fit)(i_type* self) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_sort)(i_type* self) {$/;"	f	typeref:typename:STC_INLINE void
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_with_capacity)(const intptr_t cap) {$/;"	f	typeref:typename:STC_INLINE i_type
_c_MEMB	./vendor/STC/include/stc/vec.h	/^_c_MEMB(_with_size)(const intptr_t size, _m_value null) {$/;"	f	typeref:typename:STC_INLINE i_type
_c_RSEQ_N	./vendor/STC/include/stc/common.h	/^#define _c_RSEQ_N /;"	d
_c_SEL	./vendor/STC/include/stc/common.h	/^#define _c_SEL(/;"	d
_c_SEL21	./vendor/STC/include/stc/common.h	/^#define _c_SEL21(/;"	d
_c_SEL22	./vendor/STC/include/stc/common.h	/^#define _c_SEL22(/;"	d
_c_SEL31	./vendor/STC/include/stc/common.h	/^#define _c_SEL31(/;"	d
_c_SEL32	./vendor/STC/include/stc/common.h	/^#define _c_SEL32(/;"	d
_c_SEL33	./vendor/STC/include/stc/common.h	/^#define _c_SEL33(/;"	d
_c_aatree_types	./vendor/STC/include/stc/types.h	/^#define _c_aatree_types(/;"	d
_c_arc_types	./vendor/STC/include/stc/types.h	/^#define _c_arc_types(/;"	d
_c_box_types	./vendor/STC/include/stc/types.h	/^#define _c_box_types(/;"	d
_c_deq_types	./vendor/STC/include/stc/types.h	/^#define _c_deq_types(/;"	d
_c_getsystime	./vendor/STC/include/stc/coroutine.h	/^      #define _c_getsystime /;"	d
_c_hash_mix	./vendor/STC/include/stc/common.h	/^STC_INLINE uint64_t _c_hash_mix(uint64_t h[], int n) { \/\/ n > 0$/;"	f	typeref:typename:STC_INLINE uint64_t
_c_htable_types	./vendor/STC/include/stc/types.h	/^#define _c_htable_types(/;"	d
_c_list_complete_types	./vendor/STC/include/stc/list.h	/^#define _c_list_complete_types(/;"	d
_c_list_insert_after_node	./vendor/STC/include/stc/list.h	/^#define _c_list_insert_after_node(/;"	d
_c_list_insert_entry_after	./vendor/STC/include/stc/list.h	/^#define _c_list_insert_entry_after(/;"	d
_c_list_types	./vendor/STC/include/stc/types.h	/^#define _c_list_types(/;"	d
_c_pque_types	./vendor/STC/include/stc/types.h	/^#define _c_pque_types(/;"	d
_c_stack_fixed	./vendor/STC/include/stc/types.h	/^#define _c_stack_fixed(/;"	d
_c_stack_types	./vendor/STC/include/stc/types.h	/^#define _c_stack_types(/;"	d
_c_vec_types	./vendor/STC/include/stc/types.h	/^#define _c_vec_types(/;"	d
_canary	./src/flecs.h	/^    int32_t _canary;$/;"	m	struct:ecs_alert_desc_t	typeref:typename:int32_t
_canary	./src/flecs.h	/^    int32_t _canary;$/;"	m	struct:ecs_bulk_desc_t	typeref:typename:int32_t
_canary	./src/flecs.h	/^    int32_t _canary;$/;"	m	struct:ecs_component_desc_t	typeref:typename:int32_t
_canary	./src/flecs.h	/^    int32_t _canary;$/;"	m	struct:ecs_entity_desc_t	typeref:typename:int32_t
_canary	./src/flecs.h	/^    int32_t _canary;$/;"	m	struct:ecs_filter_desc_t	typeref:typename:int32_t
_canary	./src/flecs.h	/^    int32_t _canary;$/;"	m	struct:ecs_metric_desc_t	typeref:typename:int32_t
_canary	./src/flecs.h	/^    int32_t _canary;$/;"	m	struct:ecs_observer_desc_t	typeref:typename:int32_t
_canary	./src/flecs.h	/^    int32_t _canary;$/;"	m	struct:ecs_query_desc_t	typeref:typename:int32_t
_canary	./src/flecs.h	/^    int32_t _canary;$/;"	m	struct:ecs_system_desc_t	typeref:typename:int32_t
_cbits_BN	./vendor/STC/include/stc/cbits.h	/^#define _cbits_BN /;"	d
_cbits_OPR	./vendor/STC/include/stc/cbits.h	/^#define _cbits_OPR(/;"	d
_cbits_bit	./vendor/STC/include/stc/cbits.h	/^#define _cbits_bit(/;"	d
_cbits_bytes	./vendor/STC/include/stc/cbits.h	/^#define _cbits_bytes(/;"	d
_cbits_count	./vendor/STC/include/stc/cbits.h	/^STC_INLINE intptr_t _cbits_count(const uintptr_t* set, const intptr_t sz) {$/;"	f	typeref:typename:STC_INLINE intptr_t
_cbits_disjoint	./vendor/STC/include/stc/cbits.h	/^STC_INLINE bool _cbits_disjoint(const uintptr_t* set, const uintptr_t* other, const intptr_t sz)$/;"	f	typeref:typename:STC_INLINE bool
_cbits_subset_of	./vendor/STC/include/stc/cbits.h	/^STC_INLINE bool _cbits_subset_of(const uintptr_t* set, const uintptr_t* other, const intptr_t sz/;"	f	typeref:typename:STC_INLINE bool
_cbits_to_str	./vendor/STC/include/stc/cbits.h	/^STC_INLINE char* _cbits_to_str(const uintptr_t* set, const intptr_t sz,$/;"	f	typeref:typename:STC_INLINE char *
_cbits_words	./vendor/STC/include/stc/cbits.h	/^#define _cbits_words(/;"	d
_cbuf_toidx	./vendor/STC/include/stc/priv/queue_prv.h	/^#define _cbuf_toidx(/;"	d
_cbuf_topos	./vendor/STC/include/stc/priv/queue_prv.h	/^#define _cbuf_topos(/;"	d
_clist_tonode	./vendor/STC/include/stc/list.h	/^#define _clist_tonode(/;"	d
_cmd_prefix	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    picostring _cmd_prefix;$/;"	m	class:picobench::runner	typeref:typename:picostring
_compare_results_across_benchmarks	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    bool _compare_results_across_benchmarks = true;$/;"	m	class:picobench::runner	typeref:typename:bool
_compare_results_across_samples	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    bool _compare_results_across_samples = true;$/;"	m	class:picobench::runner	typeref:typename:bool
_counter	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        size_t _counter;$/;"	m	struct:picobench::state::iterator	typeref:typename:size_t
_cspan_index	./vendor/STC/include/stc/cspan.h	/^STC_INLINE intptr_t _cspan_index(const cextent_t shape[], const cstride_t stride[],$/;"	f	typeref:typename:STC_INLINE intptr_t
_cspan_next1	./vendor/STC/include/stc/cspan.h	/^#define _cspan_next1(/;"	d
_cspan_next2	./vendor/STC/include/stc/cspan.h	/^STC_DEF intptr_t _cspan_next2(cextent_t pos[], const cextent_t shape[], const cstride_t stride[]/;"	f	typeref:typename:STC_DEF intptr_t
_cspan_next3	./vendor/STC/include/stc/cspan.h	/^#define _cspan_next3 /;"	d
_cspan_next4	./vendor/STC/include/stc/cspan.h	/^#define _cspan_next4 /;"	d
_cspan_next5	./vendor/STC/include/stc/cspan.h	/^#define _cspan_next5 /;"	d
_cspan_next6	./vendor/STC/include/stc/cspan.h	/^#define _cspan_next6 /;"	d
_cspan_next7	./vendor/STC/include/stc/cspan.h	/^#define _cspan_next7 /;"	d
_cspan_next8	./vendor/STC/include/stc/cspan.h	/^#define _cspan_next8 /;"	d
_cspan_print_assist	./vendor/STC/include/stc/cspan.h	/^STC_DEF void _cspan_print_assist(cextent_t pos[], const cextent_t shape[], const int rank,$/;"	f	typeref:typename:STC_DEF void
_cspan_shape2stride	./vendor/STC/include/stc/cspan.h	/^STC_DEF cstride_t* _cspan_shape2stride(cspan_layout layout, cstride_t shpstri[], int rank) {$/;"	f	typeref:typename:STC_DEF cstride_t *
_cspan_size	./vendor/STC/include/stc/cspan.h	/^STC_INLINE intptr_t _cspan_size(const cextent_t shape[], int rank) {$/;"	f	typeref:typename:STC_INLINE intptr_t
_cspan_slice	./vendor/STC/include/stc/cspan.h	/^STC_DEF intptr_t _cspan_slice(cextent_t oshape[], cstride_t ostride[], int* orank,$/;"	f	typeref:typename:STC_DEF intptr_t
_cspan_swap_axes	./vendor/STC/include/stc/cspan.h	/^STC_INLINE void _cspan_swap_axes(cextent_t shape[], cstride_t stride[], int i, int j, int rank) /;"	f	typeref:typename:STC_INLINE void
_cspan_transpose	./vendor/STC/include/stc/cspan.h	/^STC_INLINE void _cspan_transpose(cextent_t shape[], cstride_t stride[], int rank) {$/;"	f	typeref:typename:STC_INLINE void
_cstr_init	./vendor/STC/include/stc/priv/cstr_prv.c	/^STC_DEF char* _cstr_init(cstr* self, const intptr_t len, const intptr_t cap) {$/;"	f	typeref:typename:STC_DEF char *
_cstr_internal_move	./vendor/STC/include/stc/priv/cstr_prv.c	/^STC_DEF char* _cstr_internal_move(cstr* self, const intptr_t pos1, const intptr_t pos2) {$/;"	f	typeref:typename:STC_DEF char *
_cstr_set_size	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE void _cstr_set_size(cstr* self, intptr_t len)$/;"	f	typeref:typename:STC_INLINE void
_current_suite_name	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    const char* _current_suite_name = nullptr;$/;"	m	class:picobench::registry	typeref:typename:const char *
_default_samples	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    int _default_samples;$/;"	m	class:picobench::runner	typeref:typename:int
_default_state_iterations	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    std::vector<size_t> _default_state_iterations;$/;"	m	class:picobench::runner	typeref:typename:std::vector<size_t>
_duration_ns	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    uint64_t _duration_ns = 0;$/;"	m	class:picobench::state	typeref:typename:uint64_t
_e_arg	./vendor/STC/include/stc/priv/utf8_prv.c	/^    #define _e_arg(/;"	d	file:
_eq	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    EqT       _eq;$/;"	m	class:emhash7::HashMap	typeref:typename:EqT
_erase	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    void _erase(const_iterator it)$/;"	f	class:emhash7::HashMap	typeref:typename:void
_error	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    mutable error_t _error = no_error;$/;"	m	class:picobench::runner	typeref:typename:error_t
_evaluntil	./vendor/STC/include/stc/priv/cregex_prv.c	/^_evaluntil(_Parser *par, _Token pri)$/;"	f	typeref:typename:void	file:
_fc	./vendor/STC/include/c11/fmt.h	/^#define _fc(/;"	d
_flt_base	./vendor/STC/include/stc/algo/filter.h	/^struct _flt_base {$/;"	s
_flt_take	./vendor/STC/include/stc/algo/filter.h	/^static inline bool _flt_take(struct _flt_base* fl, uint32_t n) {$/;"	f	typeref:typename:bool
_flt_takewhile	./vendor/STC/include/stc/algo/filter.h	/^static inline bool _flt_takewhile(struct _flt_base* fl, bool pred) {$/;"	f	typeref:typename:bool
_fmt_APPLY_ARG_N	./vendor/STC/include/c11/fmt.h	/^#define _fmt_APPLY_ARG_N(/;"	d
_fmt_ARG_N	./vendor/STC/include/c11/fmt.h	/^#define _fmt_ARG_N(/;"	d
_fmt_RSEQ_N	./vendor/STC/include/c11/fmt.h	/^#define _fmt_RSEQ_N /;"	d
_fmt_fn	./vendor/STC/include/c11/fmt.h	/^#define _fmt_fn(/;"	d
_fmt_parse	./vendor/STC/include/c11/fmt.h	/^FMT_DEF int _fmt_parse(char* p, int nargs, const char *fmt, ...) {$/;"	f	typeref:typename:FMT_DEF int
_fmt_sprint	./vendor/STC/include/c11/fmt.h	/^FMT_DEF void _fmt_sprint(fmt_stream* ss, const char* fmt, ...) {$/;"	f	typeref:typename:FMT_DEF void
_from	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        size_type _from;$/;"	m	class:emhash7::HashMap::const_iterator	typeref:typename:size_type
_from	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        size_type _from;$/;"	m	class:emhash7::HashMap::iterator	typeref:typename:size_type
_from_n	./vendor/STC/include/stc/common.h	/^    inline C _from_n(C (*func)(const T[], intptr_t), std::initializer_list<T> il)$/;"	f	typeref:typename:C
_gnu_popc	./vendor/STC/include/stc/cbits.h	/^#define _gnu_popc(/;"	d
_has_opts	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    bool _has_opts = false; \/\/ have opts been added to list$/;"	m	class:picobench::runner	typeref:typename:bool
_hasher	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    HashT     _hasher;$/;"	m	class:emhash7::HashMap	typeref:typename:HashT
_i	./vendor/STC/include/stc/coption.h	/^    int _i, _pos, _nargs;$/;"	m	struct:__anonc31abe760308	typeref:typename:int
_i_MAP_ONLY	./vendor/STC/include/stc/hmap.h	/^  #define _i_MAP_ONLY /;"	d
_i_MAP_ONLY	./vendor/STC/include/stc/smap.h	/^  #define _i_MAP_ONLY /;"	d
_i_SET_ONLY	./vendor/STC/include/stc/hmap.h	/^  #define _i_SET_ONLY /;"	d
_i_SET_ONLY	./vendor/STC/include/stc/smap.h	/^  #define _i_SET_ONLY /;"	d
_i_alloc	./vendor/STC/include/stc/common.h	/^    #define _i_alloc(/;"	d
_i_assert	./vendor/STC/include/stc/cbits.h	/^#define _i_assert(/;"	d
_i_atomic_dec_and_test	./vendor/STC/include/stc/arc.h	/^  #define _i_atomic_dec_and_test(/;"	d
_i_atomic_inc	./vendor/STC/include/stc/arc.h	/^  #define _i_atomic_inc(/;"	d
_i_carc	./vendor/STC/include/stc/arc.h	/^#define _i_carc$/;"	d
_i_cbox	./vendor/STC/include/stc/box.h	/^#define _i_cbox$/;"	d
_i_has_cmp	./vendor/STC/include/stc/priv/template.h	/^  #define _i_has_cmp$/;"	d
_i_has_eq	./vendor/STC/include/stc/priv/template.h	/^  #define _i_has_eq$/;"	d
_i_inc	./vendor/STC/include/stc/extend.h	/^#define _i_inc /;"	d
_i_is_arr	./vendor/STC/include/stc/algo/quicksort.h	/^  #define _i_is_arr$/;"	d
_i_ishash	./vendor/STC/include/stc/hmap.h	/^#define _i_ishash$/;"	d
_i_ismap	./vendor/STC/include/stc/hmap.h	/^  #define _i_ismap$/;"	d
_i_ismap	./vendor/STC/include/stc/smap.h	/^  #define _i_ismap$/;"	d
_i_ispque	./vendor/STC/include/stc/pque.h	/^#define _i_ispque$/;"	d
_i_isset	./vendor/STC/include/stc/cset.h	/^#define _i_isset$/;"	d
_i_isset	./vendor/STC/include/stc/csset.h	/^#define _i_isset$/;"	d
_i_isset	./vendor/STC/include/stc/hset.h	/^#define _i_isset$/;"	d
_i_isset	./vendor/STC/include/stc/sset.h	/^#define _i_isset$/;"	d
_i_key	./vendor/STC/include/stc/extend.h	/^  #define _i_key /;"	d
_i_keyref	./vendor/STC/include/stc/hmap.h	/^  #define _i_keyref(/;"	d
_i_keyref	./vendor/STC/include/stc/smap.h	/^  #define _i_keyref(/;"	d
_i_memb	./vendor/STC/include/stc/cbits.h	/^#define _i_memb(/;"	d
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE bool _i_memb(_at)(const i_type* self, const intptr_t i)$/;"	f	typeref:typename:STC_INLINE bool
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE bool _i_memb(_disjoint)(const i_type* self, const i_type* other) {$/;"	f	typeref:typename:STC_INLINE bool
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE bool _i_memb(_subset_of)(const i_type* self, const i_type* other) {$/;"	f	typeref:typename:STC_INLINE bool
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE bool _i_memb(_test)(const i_type* self, const intptr_t i)$/;"	f	typeref:typename:STC_INLINE bool
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE char* _i_memb(_to_str)(const i_type* self, char* out, intptr_t start, intptr_t stop)$/;"	f	typeref:typename:STC_INLINE char *
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE i_type   _i_memb(_move)(i_type* self) { return *self; }$/;"	f	typeref:typename:STC_INLINE i_type
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE i_type _i_memb(_clone)(i_type other)$/;"	f	typeref:typename:STC_INLINE i_type
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE i_type _i_memb(_from)(const char* str) {$/;"	f	typeref:typename:STC_INLINE i_type
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE i_type _i_memb(_with_pattern)(const intptr_t size, const uintptr_t pattern) {$/;"	f	typeref:typename:STC_INLINE i_type
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE i_type _i_memb(_with_size)(const intptr_t size, const bool value) {$/;"	f	typeref:typename:STC_INLINE i_type
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE i_type*  _i_memb(_take)(i_type* self, i_type other)$/;"	f	typeref:typename:STC_INLINE i_type *
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE i_type* _i_memb(_copy)(i_type* self, const i_type* other)$/;"	f	typeref:typename:STC_INLINE i_type *
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE intptr_t _i_memb(_count)(const i_type* self)$/;"	f	typeref:typename:STC_INLINE intptr_t
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE intptr_t _i_memb(_size)(const i_type* self) { (void)self; return i_capacity; }$/;"	f	typeref:typename:STC_INLINE intptr_t
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE void     _i_memb(_drop)(i_type* self) { (void)self; }$/;"	f	typeref:typename:STC_INLINE void
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE void     _i_memb(_init)(i_type* self) { memset(self->buffer, 0, i_capacity*8); }$/;"	f	typeref:typename:STC_INLINE void
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE void _i_memb(_flip)(i_type *self, const intptr_t i)$/;"	f	typeref:typename:STC_INLINE void
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE void _i_memb(_flip_all)(i_type *self) {$/;"	f	typeref:typename:STC_INLINE void
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE void _i_memb(_intersect)(i_type *self, const i_type* other) {$/;"	f	typeref:typename:STC_INLINE void
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE void _i_memb(_reset)(i_type *self, const intptr_t i)$/;"	f	typeref:typename:STC_INLINE void
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE void _i_memb(_set)(i_type *self, const intptr_t i)$/;"	f	typeref:typename:STC_INLINE void
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE void _i_memb(_set_all)(i_type *self, const bool value)$/;"	f	typeref:typename:STC_INLINE void
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE void _i_memb(_set_pattern)(i_type *self, const uintptr_t pattern) {$/;"	f	typeref:typename:STC_INLINE void
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE void _i_memb(_set_value)(i_type *self, const intptr_t i, const bool b) {$/;"	f	typeref:typename:STC_INLINE void
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE void _i_memb(_union)(i_type *self, const i_type* other) {$/;"	f	typeref:typename:STC_INLINE void
_i_memb	./vendor/STC/include/stc/cbits.h	/^STC_INLINE void _i_memb(_xor)(i_type *self, const i_type* other) {$/;"	f	typeref:typename:STC_INLINE void
_i_new	./vendor/STC/include/stc/common.h	/^    #define _i_new(/;"	d
_i_prefix	./vendor/STC/include/stc/arc.h	/^  #define _i_prefix /;"	d
_i_prefix	./vendor/STC/include/stc/box.h	/^  #define _i_prefix /;"	d
_i_prefix	./vendor/STC/include/stc/carc.h	/^#define _i_prefix /;"	d
_i_prefix	./vendor/STC/include/stc/cbox.h	/^#define _i_prefix /;"	d
_i_prefix	./vendor/STC/include/stc/cdeq.h	/^#define _i_prefix /;"	d
_i_prefix	./vendor/STC/include/stc/clist.h	/^#define _i_prefix /;"	d
_i_prefix	./vendor/STC/include/stc/cmap.h	/^#define _i_prefix /;"	d
_i_prefix	./vendor/STC/include/stc/cpque.h	/^#define _i_prefix /;"	d
_i_prefix	./vendor/STC/include/stc/cqueue.h	/^#define _i_prefix /;"	d
_i_prefix	./vendor/STC/include/stc/cset.h	/^#define _i_prefix /;"	d
_i_prefix	./vendor/STC/include/stc/csmap.h	/^#define _i_prefix /;"	d
_i_prefix	./vendor/STC/include/stc/csset.h	/^#define _i_prefix /;"	d
_i_prefix	./vendor/STC/include/stc/cstack.h	/^#define _i_prefix /;"	d
_i_prefix	./vendor/STC/include/stc/cvec.h	/^#define _i_prefix /;"	d
_i_prefix	./vendor/STC/include/stc/deq.h	/^  #define _i_prefix /;"	d
_i_prefix	./vendor/STC/include/stc/hmap.h	/^  #define _i_prefix /;"	d
_i_prefix	./vendor/STC/include/stc/hset.h	/^#define _i_prefix /;"	d
_i_prefix	./vendor/STC/include/stc/list.h	/^  #define _i_prefix /;"	d
_i_prefix	./vendor/STC/include/stc/pque.h	/^  #define _i_prefix /;"	d
_i_prefix	./vendor/STC/include/stc/queue.h	/^  #define _i_prefix /;"	d
_i_prefix	./vendor/STC/include/stc/smap.h	/^  #define _i_prefix /;"	d
_i_prefix	./vendor/STC/include/stc/sset.h	/^#define _i_prefix /;"	d
_i_prefix	./vendor/STC/include/stc/stack.h	/^  #define _i_prefix /;"	d
_i_prefix	./vendor/STC/include/stc/vec.h	/^  #define _i_prefix /;"	d
_i_sorted	./vendor/STC/include/stc/smap.h	/^#define _i_sorted$/;"	d
_i_template	./vendor/STC/include/stc/priv/template.h	/^#define _i_template$/;"	d
_i_val	./vendor/STC/include/stc/extend.h	/^  #define _i_val /;"	d
_istate	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    std::vector<state>::iterator _istate;$/;"	m	class:picobench::benchmark_impl	typeref:typename:std::vector<state>::iterator
_it2_ptr	./vendor/STC/include/stc/vec.h	/^#define _it2_ptr(/;"	d
_it_ptr	./vendor/STC/include/stc/vec.h	/^#define _it_ptr(/;"	d
_iterations	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    size_t _iterations;$/;"	m	class:picobench::state	typeref:typename:size_t
_lex	./vendor/STC/include/stc/priv/cregex_prv.c	/^_lex(_Parser *par)$/;"	f	typeref:typename:_Token	file:
_lexasciiclass	./vendor/STC/include/stc/priv/cregex_prv.c	/^_lexasciiclass(_Parser *par, _Rune *rp) \/* assume *rp == '[' and *par->exprp == ':' *\/$/;"	f	typeref:typename:void	file:
_lexutfclass	./vendor/STC/include/stc/priv/cregex_prv.c	/^_lexutfclass(_Parser *par, _Rune *rp)$/;"	f	typeref:typename:void	file:
_lim	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        const size_t _lim;$/;"	m	struct:picobench::state::iterator	typeref:typename:const size_t
_m_iter	./vendor/STC/include/stc/priv/template.h	/^  #define _m_iter /;"	d
_m_key	./vendor/STC/include/stc/priv/template.h	/^  #define _m_key /;"	d
_m_keyraw	./vendor/STC/include/stc/hmap.h	/^typedef i_keyraw _m_keyraw;$/;"	t	typeref:typename:i_keyraw
_m_keyraw	./vendor/STC/include/stc/priv/template.h	/^  #define _m_keyraw /;"	d
_m_keyraw	./vendor/STC/include/stc/smap.h	/^typedef i_keyraw _m_keyraw;$/;"	t	typeref:typename:i_keyraw
_m_mapped	./vendor/STC/include/stc/priv/template.h	/^  #define _m_mapped /;"	d
_m_node	./vendor/STC/include/stc/priv/template.h	/^  #define _m_node /;"	d
_m_node	./vendor/STC/include/stc/smap.h	/^struct _m_node {$/;"	s
_m_raw	./vendor/STC/include/stc/arc.h	/^typedef i_keyraw _m_raw;$/;"	t	typeref:typename:i_keyraw
_m_raw	./vendor/STC/include/stc/box.h	/^typedef i_keyraw _m_raw;$/;"	t	typeref:typename:i_keyraw
_m_raw	./vendor/STC/include/stc/hmap.h	/^_m_raw;$/;"	t
_m_raw	./vendor/STC/include/stc/list.h	/^typedef i_keyraw _m_raw;$/;"	t	typeref:typename:i_keyraw
_m_raw	./vendor/STC/include/stc/pque.h	/^typedef i_keyraw _m_raw;$/;"	t	typeref:typename:i_keyraw
_m_raw	./vendor/STC/include/stc/priv/queue_prv.h	/^typedef i_keyraw _m_raw;$/;"	t	typeref:typename:i_keyraw
_m_raw	./vendor/STC/include/stc/priv/template.h	/^  #define _m_raw /;"	d
_m_raw	./vendor/STC/include/stc/smap.h	/^        _m_raw;$/;"	t
_m_raw	./vendor/STC/include/stc/stack.h	/^typedef i_keyraw _m_raw;$/;"	t	typeref:typename:i_keyraw
_m_raw	./vendor/STC/include/stc/vec.h	/^typedef i_keyraw _m_raw;$/;"	t	typeref:typename:i_keyraw
_m_result	./vendor/STC/include/stc/priv/template.h	/^  #define _m_result /;"	d
_m_rmapped	./vendor/STC/include/stc/hmap.h	/^typedef i_valraw _m_rmapped;$/;"	t	typeref:typename:i_valraw
_m_rmapped	./vendor/STC/include/stc/priv/template.h	/^  #define _m_rmapped /;"	d
_m_rmapped	./vendor/STC/include/stc/smap.h	/^typedef i_valraw _m_rmapped;$/;"	t	typeref:typename:i_valraw
_m_value	./vendor/STC/include/stc/priv/template.h	/^  #define _m_value /;"	d
_map	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        const htype* _map;$/;"	m	class:emhash7::HashMap::const_iterator	typeref:typename:const htype *
_map	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        const htype* _map;$/;"	m	class:emhash7::HashMap::iterator	typeref:typename:const htype *
_mask	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    size_type _mask;$/;"	m	class:emhash7::HashMap	typeref:typename:size_type
_max_load_factor	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    float _max_load_factor = 0.5f;$/;"	m	class:ska::detailv3::sherwood_v3_table	typeref:typename:float
_mlf	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    uint32_t  _mlf;$/;"	m	class:emhash7::HashMap	typeref:typename:uint32_t
_msc_popc	./vendor/STC/include/stc/cbits.h	/^#define _msc_popc(/;"	d
_n	./src/flecs.c	/^        ecs_cmd_n_t _n;              \/* Data for multi entity operation *\/$/;"	m	union:ecs_cmd_t::__anon7d4a4177010a	typeref:typename:ecs_cmd_n_t	file:
_name	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    const char* _name;$/;"	m	class:picobench::benchmark	typeref:typename:const char *
_nargs	./vendor/STC/include/stc/coption.h	/^    int _i, _pos, _nargs;$/;"	m	struct:__anonc31abe760308	typeref:typename:int
_newclass	./vendor/STC/include/stc/priv/cregex_prv.c	/^_newclass(_Parser *par)$/;"	f	typeref:typename:_Reclass *	file:
_newinst	./vendor/STC/include/stc/priv/cregex_prv.c	/^_newinst(_Parser *par, _Token t)$/;"	f	typeref:typename:_Reinst *	file:
_nextc	./vendor/STC/include/stc/priv/cregex_prv.c	/^_nextc(_Parser *par, _Rune *rp)$/;"	f	typeref:typename:int	file:
_num_buckets	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    size_type _num_buckets;$/;"	m	class:emhash7::HashMap	typeref:typename:size_type
_num_filled	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    size_type _num_filled;$/;"	m	class:emhash7::HashMap	typeref:typename:size_type
_operand	./vendor/STC/include/stc/priv/cregex_prv.c	/^_operand(_Parser *par, _Token t)$/;"	f	typeref:typename:void	file:
_operator	./vendor/STC/include/stc/priv/cregex_prv.c	/^_operator(_Parser *par, _Token t)$/;"	f	typeref:typename:void	file:
_optimize	./vendor/STC/include/stc/priv/cregex_prv.c	/^_optimize(_Parser *par, _Reprog *pp)$/;"	f	typeref:typename:_Reprog *	file:
_opts	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    std::vector<cmd_line_option> _opts;$/;"	m	class:picobench::runner	typeref:typename:std::vector<cmd_line_option>
_optstr	./vendor/STC/include/stc/coption.h	/^    char _optstr[4];$/;"	m	struct:__anonc31abe760308	typeref:typename:char[4]
_output_file	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    const char* _output_file = nullptr; \/\/ nullptr means stdout$/;"	m	class:picobench::runner	typeref:typename:const char *
_output_format	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    report_output_format _output_format = report_output_format::concise_text;$/;"	m	class:picobench::runner	typeref:typename:report_output_format
_pairs	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    PairT*    _pairs;$/;"	m	class:emhash7::HashMap	typeref:typename:PairT *
_pop	./vendor/STC/include/stc/deq.h	/^#define _pop _pop_/;"	d
_popand	./vendor/STC/include/stc/priv/cregex_prv.c	/^_popand(_Parser *par, _Token op)$/;"	f	typeref:typename:_Node *	file:
_popator	./vendor/STC/include/stc/priv/cregex_prv.c	/^_popator(_Parser *par)$/;"	f	typeref:typename:_Token	file:
_pos	./vendor/STC/include/stc/coption.h	/^    int _i, _pos, _nargs;$/;"	m	struct:__anonc31abe760308	typeref:typename:int
_proc	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    const benchmark_proc _proc;$/;"	m	class:picobench::benchmark	typeref:typename:const benchmark_proc
_pull	./vendor/STC/include/stc/deq.h	/^#define _pull _pull_/;"	d
_pushand	./vendor/STC/include/stc/priv/cregex_prv.c	/^_pushand(_Parser *par, _Reinst *f, _Reinst *l)$/;"	f	typeref:typename:void	file:
_pushator	./vendor/STC/include/stc/priv/cregex_prv.c	/^_pushator(_Parser *par, _Token t)$/;"	f	typeref:typename:void	file:
_rcerror	./vendor/STC/include/stc/priv/cregex_prv.c	/^_rcerror(_Parser *par, cregex_result err)$/;"	f	typeref:typename:void	file:
_regcomp1	./vendor/STC/include/stc/priv/cregex_prv.c	/^_regcomp1(_Reprog *pp, _Parser *par, const char *s, int cflags)$/;"	f	typeref:typename:_Reprog *	file:
_regexec	./vendor/STC/include/stc/priv/cregex_prv.c	/^_regexec(const _Reprog *progp,    \/* program to run *\/$/;"	f	typeref:typename:int	file:
_regexec1	./vendor/STC/include/stc/priv/cregex_prv.c	/^_regexec1(const _Reprog *progp,  \/* program to run *\/$/;"	f	typeref:typename:int	file:
_regexec2	./vendor/STC/include/stc/priv/cregex_prv.c	/^_regexec2(const _Reprog *progp,    \/* program to run *\/$/;"	f	typeref:typename:int	file:
_renewemptythread	./vendor/STC/include/stc/priv/cregex_prv.c	/^_renewemptythread(_Relist *lp,   \/* _relist to add to *\/$/;"	f	typeref:typename:_Relist *	file:
_renewmatch	./vendor/STC/include/stc/priv/cregex_prv.c	/^_renewmatch(_Resub *mp, int ms, _Resublist *sp, int nsubids)$/;"	f	typeref:typename:void	file:
_renewthread	./vendor/STC/include/stc/priv/cregex_prv.c	/^_renewthread(_Relist *lp,  \/* _relist to add to *\/$/;"	f	typeref:typename:_Relist *	file:
_result	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    result_t _result = 0;$/;"	m	class:picobench::state	typeref:typename:result_t
_runematch	./vendor/STC/include/stc/priv/cregex_prv.c	/^_runematch(_Rune s, _Rune r)$/;"	f	typeref:typename:int	file:
_samples	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    int _samples = 0;$/;"	m	class:picobench::benchmark	typeref:typename:int
_should_run	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    bool _should_run = true;$/;"	m	class:picobench::runner	typeref:typename:bool
_signed_char_hhd	./vendor/STC/include/c11/fmt.h	/^  #define _signed_char_hhd /;"	d
_signed_char_hhd	./vendor/STC/include/c11/fmt.h	/^  #define _signed_char_hhd$/;"	d
_size	./vendor/STC/include/stc/cbits.h	/^typedef struct { uintptr_t *buffer; intptr_t _size; } i_type;$/;"	m	struct:__anonb7fc968f0108	typeref:typename:intptr_t
_start	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    high_res_clock::time_point _start;$/;"	m	class:picobench::state	typeref:typename:high_res_clock::time_point
_state	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        state* _state;$/;"	m	struct:picobench::state::iterator	typeref:typename:state *
_state	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    state& _state;$/;"	m	class:picobench::scope	typeref:typename:state &
_state_iterations	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    std::vector<size_t> _state_iterations;$/;"	m	class:picobench::benchmark	typeref:typename:std::vector<size_t>
_states	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    std::vector<state> _states; \/\/ length is _samples * _state_iterations.size()$/;"	m	class:picobench::benchmark_impl	typeref:typename:std::vector<state>
_stderr	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    std::ostream* _stderr = &std::cerr;$/;"	m	class:picobench::runner	typeref:typename:std::ostream *
_stdout	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    std::ostream* _stdout = &std::cout;$/;"	m	class:picobench::runner	typeref:typename:std::ostream *
_stdwarn	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    std::ostream* _stdwarn = &std::cout;$/;"	m	class:picobench::runner	typeref:typename:std::ostream *
_suites	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    std::vector<rsuite> _suites;$/;"	m	class:picobench::registry	typeref:typename:std::vector<rsuite>
_user_data	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    udata_t _user_data = 0;$/;"	m	class:picobench::benchmark	typeref:typename:udata_t
_user_data	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    udata_t _user_data;$/;"	m	class:picobench::state	typeref:typename:udata_t
_utf8_unicode_groups	./vendor/STC/include/stc/priv/utf8_prv.c	/^const UGroup _utf8_unicode_groups[U8G_SIZE] = {$/;"	v	typeref:typename:const UGroup[]	file:
_utf8_unicode_groups	./vendor/STC/include/stc/priv/utf8_prv.c	/^const UGroup _utf8_unicode_groups[U8G_SIZE];$/;"	v	typeref:typename:const UGroup[]	file:
_var_index	./src/flecs.h	/^    int32_t _var_index;    \/* Index of variable in filter (do not set) *\/$/;"	m	struct:ecs_alert_severity_filter_t	typeref:typename:int32_t
_wymix	./vendor/STC/misc/benchmarks/various/prng_bench.cpp	/^static inline uint64_t _wymix(uint64_t A, uint64_t B){$/;"	f	typeref:typename:uint64_t	file:
_wymum	./vendor/STC/misc/benchmarks/various/prng_bench.cpp	/^static inline void _wymum(uint64_t *A, uint64_t *B){$/;"	f	typeref:typename:void	file:
a	./src/flecs.c	/^    ecs_allocator_t *a;$/;"	m	struct:__anon7d4a41771d08	typeref:typename:ecs_allocator_t *	file:
a	./vendor/STC/misc/examples/coroutines/generator.c	/^    int a, b, c;$/;"	m	struct:__anon399785530108	typeref:typename:int	file:
a	./vendor/STC/misc/examples/coroutines/triples.c	/^    int a, b, c;$/;"	m	struct:triples	typeref:typename:int	file:
a	./vendor/STC/misc/examples/sortedmaps/listmap.c	/^    typedef struct {int a; const char* b;} pair;$/;"	m	struct:main::__anon4bd0e05d0108	typeref:typename:int	file:
a	./vendor/raylib5/include/raygui.h	/^        unsigned char a;$/;"	m	struct:Color	typeref:typename:unsigned char
a	./vendor/raylib5/include/raylib.h	/^    unsigned char a;        \/\/ Color alpha value$/;"	m	struct:Color	typeref:typename:unsigned char
abort	./vendor/fmt/include/format.h	/^enum class to_utf8_error_policy { abort, replace };$/;"	e	enum:detail::to_utf8_error_policy
abort_	./src/flecs.h	/^    ecs_os_api_abort_t abort_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_abort_t
abort_fuzzing_if	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR inline void abort_fuzzing_if(bool condition) {$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR void
abs_value	./vendor/fmt/include/format.h	/^  UInt abs_value;$/;"	m	struct:detail::write_int_arg	typeref:typename:UInt
accessor	./vendor/fmt/include/base.h	/^    accessor(OutputIt base) : OutputIt(base) {}$/;"	f	struct:detail::get_container::accessor
accessor	./vendor/fmt/include/base.h	/^  struct accessor : OutputIt {$/;"	s	function:detail::get_container
action	./src/flecs.c	/^    ecs_entity_t action;             \/* Set explicitly for delete_with, remove_all *\/$/;"	m	struct:ecs_marked_id_t	typeref:typename:ecs_entity_t	file:
action	./src/flecs.c	/^    ecs_fini_action_t action;$/;"	m	struct:ecs_action_elem_t	typeref:typename:ecs_fini_action_t	file:
action	./src/flecs.c	/^    ecs_iter_action_t action;       \/* See ecs_system_desc_t *\/$/;"	m	struct:ecs_system_t	typeref:typename:ecs_iter_action_t	file:
active	./src/flecs.h	/^    bool active;                 \/**< Is the timer active or not *\/$/;"	m	struct:EcsTimer	typeref:typename:bool
active_system_count	./src/flecs.h	/^    int32_t active_system_count; \/**< Number of active systems in pipeline *\/$/;"	m	struct:ecs_pipeline_stats_t	typeref:typename:int32_t
active_tc_idx	./src/turnbasedsystem.h	/^	int active_tc_idx;$/;"	m	struct:TurnManager	typeref:typename:int
actual_type	./src/flecs.h	/^struct actual_type<T, if_not_t< is_pair<T>::value >> {$/;"	s	namespace:flecs
actual_type	./src/flecs.h	/^struct actual_type<T, if_t< is_pair<T>::value >> {$/;"	s	namespace:flecs
actual_type_t	./src/flecs.h	/^using actual_type_t = typename actual_type<T>::type;$/;"	t	namespace:flecs	typeref:typename:actual_type<T>::type
add	./src/flecs.c	/^    ecs_graph_edges_t add;    $/;"	m	struct:ecs_graph_node_t	typeref:typename:ecs_graph_edges_t	file:
add	./src/flecs.h	/^    Self& add() {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
add	./src/flecs.h	/^    Self& add(E value) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
add	./src/flecs.h	/^    Self& add(Second constant) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
add	./src/flecs.h	/^    Self& add(Second second) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
add	./src/flecs.h	/^    Self& add(entity_t first, entity_t second) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
add	./src/flecs.h	/^    Self& add(id_t component) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
add	./src/flecs.h	/^    ecs_id_t add[FLECS_ID_DESC_MAX];$/;"	m	struct:ecs_entity_desc_t	typeref:typename:ecs_id_t[]
add	./src/flecs.h	/^inline void world::add() const {$/;"	f	class:flecs::world	typeref:typename:void
add	./src/flecs.h	/^inline void world::add(flecs::entity_t first, flecs::entity_t second) const {$/;"	f	class:flecs::world	typeref:typename:void
add	./src/flecs.h	/^inline void world::add(flecs::entity_t second) const {$/;"	f	class:flecs::world	typeref:typename:void
add	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void add(void* ptr, const size_t numBytes) noexcept {$/;"	f	class:robin_hood::detail::BulkPoolAllocator	typeref:typename:void
add	./vendor/STC/misc/examples/sortedmaps/mapmap.c	/^void add(Departments* deps, const char* name, const char* email, const char* dep)$/;"	f	typeref:typename:void
addOrFree	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void addOrFree(void* ptr, const size_t numBytes) noexcept {$/;"	f	class:robin_hood::detail::BulkPoolAllocator	typeref:typename:void
addOrFree	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void addOrFree(void* ptr, size_t ROBIN_HOOD_UNUSED(numBytes) \/*unused*\/) noexcept {$/;"	f	struct:robin_hood::detail::NodeAllocator	typeref:typename:void
addPoint	./vendor/STC/misc/examples/algorithms/shape.cpp	/^void Polygon::addPoint(const Point& p)$/;"	f	class:Polygon	typeref:typename:void
addRandomString	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^static inline void addRandomString(StcSet& set, const char* str) {$/;"	f	typeref:typename:void	file:
addRandomString	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^static inline void addRandomString(StcVec& vec, const char* str) {$/;"	f	typeref:typename:void	file:
addRandomString	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^static inline void addRandomString(StdSet& set, const char* str) {$/;"	f	typeref:typename:void	file:
addRandomString	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^static inline void addRandomString(StdVec& vec, const char* str) {$/;"	f	typeref:typename:void	file:
add_10_years	./vendor/STC/misc/examples/regularexpressions/regex_replace.c	/^bool add_10_years(int i, csview match, cstr* out) {$/;"	f	typeref:typename:bool
add_10_years	./vendor/STC/misc/tests/cregex_test.c	/^static bool add_10_years(int i, csview match, cstr* out) {$/;"	f	typeref:typename:bool	file:
add_benchmark	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    benchmark& add_benchmark(const char* name, benchmark_proc proc)$/;"	f	class:picobench::registry	typeref:typename:benchmark &
add_cmd_opt	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    void add_cmd_opt(const char* cmd, const char* arg_desc, const char* cmd_desc, bool(*handler)/;"	f	class:picobench::runner	typeref:typename:void
add_compare	./vendor/fmt/include/format.h	/^  friend FMT_CONSTEXPR20 auto add_compare(const bigint& lhs1,$/;"	f	namespace:detail	typeref:typename:int
add_count	./src/flecs.h	/^        ecs_metric_t add_count;$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1308	typeref:typename:ecs_metric_t
add_count	./src/flecs.h	/^        int64_t add_count;             \/**< Add commands processed *\/$/;"	m	struct:ecs_world_info_t::__anon7d4a417c0708	typeref:typename:int64_t
add_custom_duration	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    void add_custom_duration(uint64_t duration_ns) { _duration_ns += duration_ns; }$/;"	f	class:picobench::state	typeref:typename:void
add_expr	./src/flecs.h	/^    const char *add_expr;$/;"	m	struct:ecs_entity_desc_t	typeref:typename:const char *
add_flags	./src/flecs.h	/^inline flecs::entity id::add_flags(flecs::id_t flags) const {$/;"	f	class:flecs::id	typeref:typename:flecs::entity
add_if	./src/flecs.h	/^    Self& add_if(bool cond) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
add_if	./src/flecs.h	/^    Self& add_if(bool cond, E constant) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
add_if	./src/flecs.h	/^    Self& add_if(bool cond, flecs::entity_t first, flecs::entity_t second) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
add_if	./src/flecs.h	/^    Self& add_if(bool cond, flecs::entity_t second) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
add_if	./src/flecs.h	/^    Self& add_if(bool cond, flecs::id_t component) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
add_second	./src/flecs.h	/^    Self& add_second(flecs::entity_t first) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
added	./src/flecs.c	/^    ecs_type_t added;                \/* Components added between tables *\/$/;"	m	struct:ecs_table_diff_t	typeref:typename:ecs_type_t	file:
added	./src/flecs.c	/^    ecs_vec_t added;$/;"	m	struct:ecs_table_diff_builder_t	typeref:typename:ecs_vec_t	file:
addons	./src/flecs.h	/^    const char **addons;            \/**< Addons included in build *\/$/;"	m	struct:ecs_build_info_t	typeref:typename:const char **
adec_	./src/flecs.h	/^    ecs_os_api_ainc_t adec_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_ainc_t
adjust_precision	./vendor/fmt/include/format.h	/^inline FMT_CONSTEXPR20 void adjust_precision(int& precision, int exp10) {$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR20 void
adl	./vendor/fmt/include/base.h	/^namespace adl {$/;"	n	namespace:detail
advanceX	./vendor/raylib5/include/raygui.h	/^        int advanceX;           \/\/ Character advance position X$/;"	m	struct:GlyphInfo	typeref:typename:int
advanceX	./vendor/raylib5/include/raylib.h	/^    int advanceX;           \/\/ Character advance position X$/;"	m	struct:GlyphInfo	typeref:typename:int
advance_to	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR void advance_to(iterator it) {$/;"	f	class:basic_format_parse_context	typeref:typename:FMT_CONSTEXPR void
advance_to	./vendor/fmt/include/base.h	/^  void advance_to(iterator) {}$/;"	f	class:context	typeref:typename:void
advance_to	./vendor/fmt/include/format.h	/^  void advance_to(iterator it) {$/;"	f	class:generic_context	typeref:typename:void
advance_to	./vendor/fmt/include/printf.h	/^  void advance_to(basic_appender<Char>) {}$/;"	f	class:basic_printf_context	typeref:typename:void
advance_write_buffer	./vendor/fmt/include/format-inl.h	/^  void advance_write_buffer(size_t size) { this->file_->_IO_write_ptr += size; }$/;"	f	class:detail::glibc_file	typeref:typename:void
advance_write_buffer	./vendor/fmt/include/format-inl.h	/^  void advance_write_buffer(size_t size) {$/;"	f	class:detail::apple_file	typeref:typename:void
advance_write_buffer	./vendor/fmt/include/format-inl.h	/^  void advance_write_buffer(size_t) {}$/;"	f	class:detail::fallback_file	typeref:typename:void
ainc_	./src/flecs.h	/^    ecs_os_api_ainc_t ainc_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_ainc_t
alert	./src/flecs.h	/^    explicit alert() {$/;"	f	struct:flecs::alert
alert	./src/flecs.h	/^    explicit alert(flecs::world_t *world, ecs_alert_desc_t *desc) $/;"	f	struct:flecs::alert
alert	./src/flecs.h	/^inline flecs::alert_builder<Comps...> world::alert(Args &&... args) const {$/;"	f	class:flecs::world	typeref:typename:flecs::alert_builder<Comps...>
alert	./src/flecs.h	/^struct alert final : entity$/;"	s	namespace:flecs
alert_builder	./src/flecs.h	/^    alert_builder(flecs::world_t* world, const char *name = nullptr)$/;"	f	struct:flecs::alert_builder
alert_builder	./src/flecs.h	/^struct alert_builder final : _::alert_builder_base<Components...> {$/;"	s	namespace:flecs
alert_builder_base	./src/flecs.h	/^    using alert_builder_base = builder<$/;"	t	namespace:flecs::_	typeref:typename:builder<alert,ecs_alert_desc_t,alert_builder<Components...>,alert_builder_i,Components...>
alert_builder_i	./src/flecs.h	/^    alert_builder_i()$/;"	f	struct:flecs::alert_builder_i
alert_builder_i	./src/flecs.h	/^    alert_builder_i(ecs_alert_desc_t *desc, int32_t term_index = 0) $/;"	f	struct:flecs::alert_builder_i
alert_builder_i	./src/flecs.h	/^struct alert_builder_i : filter_builder_i<Base, Components ...> {$/;"	s	namespace:flecs
alert_count	./src/flecs.h	/^int32_t alert_count(flecs::entity_t alert = 0) const {$/;"	f	struct:flecs::entity_view	typeref:typename:int32_t
alerts	./src/flecs.h	/^    ecs_map_t alerts;$/;"	m	struct:EcsAlertsActive	typeref:typename:ecs_map_t
alerts	./src/flecs.h	/^inline alerts::alerts(flecs::world& world) {$/;"	f	class:flecs::alerts
alerts	./src/flecs.h	/^struct alerts {$/;"	s	namespace:flecs
aliases	./src/flecs.c	/^    ecs_hashmap_t aliases;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_hashmap_t	file:
alice_blue	./vendor/fmt/include/color.h	/^  alice_blue = 0xF0F8FF,               \/\/ rgb(240,248,255)$/;"	e	enum:color
align	./vendor/fmt/include/base.h	/^  align_t align : 4;$/;"	m	struct:format_specs	typeref:typename:align_t:4
align	./vendor/fmt/include/base.h	/^enum class state { start, align, sign, hash, zero, width, precision, locale };$/;"	e	enum:detail::state
align	./vendor/fmt/include/base.h	/^namespace align {$/;"	n
align	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 void align(const bigint& other) {$/;"	f	class:detail::bigint	typeref:typename:FMT_CONSTEXPR20 void
align_	./vendor/fmt/include/format.h	/^  align_t align_ : 4;$/;"	m	struct:nested_formatter	typeref:typename:align_t:4
align_t	./vendor/fmt/include/base.h	/^using align_t = align::type;$/;"	t	typeref:typename:align::type
alignment	./src/flecs.h	/^    ecs_size_t alignment;      \/**< Component alignment *\/$/;"	m	struct:EcsComponent	typeref:typename:ecs_size_t
alignment	./src/flecs.h	/^    ecs_size_t alignment;    \/**< Alignment of type *\/$/;"	m	struct:ecs_type_info_t	typeref:typename:ecs_size_t
alignment	./src/flecs.h	/^    static size_t alignment() {$/;"	f	struct:flecs::_::cpp_type_impl	typeref:typename:size_t
alive_count	./src/flecs.c	/^    int32_t alive_count;$/;"	m	struct:ecs_entity_index_t	typeref:typename:int32_t	file:
all	./Makefile	/^all: $(TARGET)  # Main target for normal C build$/;"	t
all	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    all,$/;"	e	enum:picobench::report_output_format
all	./vendor/fmt/include/ranges.h	/^  using all = detail::all<typename T::container_type>;$/;"	t	struct:formatter	typeref:typename:detail::all<typename T::container_type>
all	./vendor/fmt/include/ranges.h	/^template <typename Container> struct all {$/;"	s	namespace:detail
alloc_	./vendor/fmt/include/format.h	/^  FMT_NO_UNIQUE_ADDRESS Allocator alloc_;$/;"	m	class:basic_memory_buffer	typeref:typename:FMT_NO_UNIQUE_ADDRESS Allocator
alloc_bucket	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    static PairT* alloc_bucket(size_type num_buckets)$/;"	f	class:emhash7::HashMap	typeref:typename:PairT *
alloc_count	./src/flecs.h	/^        ecs_metric_t alloc_count;          \/**< Allocs per frame *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1608	typeref:typename:ecs_metric_t
alloc_count	./src/flecs.h	/^    int32_t alloc_count;$/;"	m	struct:ecs_block_allocator_t	typeref:typename:int32_t
allocate	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    T* allocate() {$/;"	f	class:robin_hood::detail::BulkPoolAllocator	typeref:typename:T *
allocate_buckets_from_shift	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    void allocate_buckets_from_shift() {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:void
allocated	./src/flecs.h	/^    ecs_flags8_t allocated;  \/* Which fields are allocated *\/$/;"	m	struct:ecs_iter_cache_t	typeref:typename:ecs_flags8_t
allocator	./src/flecs.c	/^    ecs_allocator_t *allocator;$/;"	m	struct:ecs_entity_index_t	typeref:typename:ecs_allocator_t *	file:
allocator	./src/flecs.c	/^    ecs_allocator_t allocator;       \/* Dynamic allocation sizes *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_allocator_t	file:
allocator	./src/flecs.c	/^    ecs_allocator_t allocator;$/;"	m	struct:ecs_stage_t	typeref:typename:ecs_allocator_t	file:
allocator	./src/flecs.h	/^    struct ecs_allocator_t *allocator;$/;"	m	struct:ecs_map_params_t	typeref:struct:ecs_allocator_t *
allocator	./src/flecs.h	/^    struct ecs_allocator_t *allocator;$/;"	m	struct:ecs_map_t	typeref:struct:ecs_allocator_t *
allocator	./src/flecs.h	/^    struct ecs_allocator_t *allocator;$/;"	m	struct:ecs_sparse_t	typeref:struct:ecs_allocator_t *
allocator_type	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using allocator_type = Allocator;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:Allocator
allocator_type	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using allocator_type = typename value_container_type::allocator_type;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:value_container_type::allocator_type
allocator_type	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    using allocator_type = EntryAlloc;$/;"	t	class:ska::detailv3::sherwood_v3_table	typeref:typename:EntryAlloc
allocator_type	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  using allocator_type = Allocator;$/;"	t	class:tsl::detail_robin_hash::robin_hash	typeref:typename:Allocator
allocator_type	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  using allocator_type = typename ht::allocator_type;$/;"	t	class:tsl::robin_map	typeref:typename:ht::allocator_type
allocators	./src/flecs.c	/^    ecs_query_allocators_t allocators;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_query_allocators_t	file:
allocators	./src/flecs.c	/^    ecs_stage_allocators_t allocators;$/;"	m	struct:ecs_stage_t	typeref:typename:ecs_stage_allocators_t	file:
allocators	./src/flecs.c	/^    ecs_world_allocators_t allocators; \/* Static allocation sizes *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_world_allocators_t	file:
allocsize	./vendor/STC/include/stc/priv/cregex_prv.c	/^    intptr_t allocsize;$/;"	m	struct:_Reprog	typeref:typename:intptr_t	file:
alt	./vendor/fmt/include/base.h	/^  bool alt : 1;    \/\/ Alternate form ('#').$/;"	m	struct:format_specs	typeref:typename:bool:1
alternative	./vendor/fmt/include/chrono.h	/^  alternative$/;"	e	enum:detail::numeric_system
always_false	./src/flecs.h	/^struct always_false {$/;"	s	namespace:flecs::_
amount	./src/flecs.h	/^struct amount {$/;"	s	struct:flecs::units
and	./src/flecs.c	/^        ecs_rule_and_ctx_t and;$/;"	m	union:ecs_rule_op_ctx_t::__anon7d4a4177340a	typeref:typename:ecs_rule_and_ctx_t	file:
and	./src/flecs.c	/^    ecs_rule_and_ctx_t and;$/;"	m	struct:__anon7d4a41772a08	typeref:typename:ecs_rule_and_ctx_t	file:
and	./src/flecs.c	/^    ecs_rule_and_ctx_t and;$/;"	m	struct:__anon7d4a41772d08	typeref:typename:ecs_rule_and_ctx_t	file:
and_	./src/flecs.h	/^    Base& and_() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
and_from	./src/flecs.h	/^    Base& and_from() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
andp	./vendor/STC/include/stc/priv/cregex_prv.c	/^    _Node* andp;$/;"	m	struct:_Parser	typeref:typename:_Node *	file:
andstack	./vendor/STC/include/stc/priv/cregex_prv.c	/^    _Node andstack[_NSTACK];$/;"	m	struct:_Parser	typeref:typename:_Node[]	file:
angle	./src/flecs.h	/^struct angle {$/;"	s	struct:flecs::units
animNormals	./vendor/raylib5/include/raylib.h	/^    float *animNormals;     \/\/ Animated normals (after bones transformations)$/;"	m	struct:Mesh	typeref:typename:float *
animVertices	./vendor/raylib5/include/raylib.h	/^    float *animVertices;    \/\/ Animated vertex positions (after bones transformations)$/;"	m	struct:Mesh	typeref:typename:float *
ankerl	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^namespace ankerl::unordered_dense {$/;"	n
annot	./src/flecs.c	/^    char *annot[STACK_MAX_SIZE];$/;"	m	struct:__anon7d4a41771908	typeref:typename:char * []	file:
annot_count	./src/flecs.c	/^    int32_t annot_count;$/;"	m	struct:__anon7d4a41771908	typeref:typename:int32_t	file:
anonymous	./src/flecs.c	/^    bool anonymous;        \/* variable is anonymous *\/$/;"	m	struct:ecs_rule_var_t	typeref:typename:bool	file:
anonymous_ids	./src/flecs.c	/^    ecs_map_t anonymous_ids;$/;"	m	struct:__anon7d4a41771d08	typeref:typename:ecs_map_t	file:
ansi_color_escape	./vendor/fmt/include/color.h	/^  FMT_CONSTEXPR ansi_color_escape(detail::color_type text_color,$/;"	f	struct:detail::ansi_color_escape	typeref:typename:FMT_CONSTEXPR
ansi_color_escape	./vendor/fmt/include/color.h	/^  FMT_CONSTEXPR ansi_color_escape(emphasis em) noexcept {$/;"	f	struct:detail::ansi_color_escape	typeref:typename:FMT_CONSTEXPR
ansi_color_escape	./vendor/fmt/include/color.h	/^template <typename Char> struct ansi_color_escape {$/;"	s	namespace:detail
antique_white	./vendor/fmt/include/color.h	/^  antique_white = 0xFAEBD7,            \/\/ rgb(250,235,215)$/;"	e	enum:color
any	./src/flecs.h	/^    struct ecs_event_id_record_t *any;$/;"	m	struct:ecs_event_record_t	typeref:struct:ecs_event_id_record_t *
ap	./src/log.h	/^  va_list ap;$/;"	m	struct:__anon638373710108	typeref:typename:va_list
api	./vendor/STC/misc/examples/algorithms/shape.c	/^    struct ShapeAPI* api;$/;"	m	struct:Shape	typeref:struct:ShapeAPI *	file:
app	./src/flecs.h	/^flecs::app_builder app() {$/;"	f	struct:flecs::world	typeref:typename:flecs::app_builder
app_builder	./src/flecs.h	/^    app_builder(flecs::world_t *world)$/;"	f	struct:flecs::app_builder
app_builder	./src/flecs.h	/^struct app_builder {$/;"	s	namespace:flecs
append	./vendor/fmt/include/base.h	/^  template <typename U> void append(const U* begin, const U* end) {$/;"	f	class:detail::buffer	typeref:typename:void
append	./vendor/fmt/include/format.h	/^  void append(const ContiguousRange& range) {$/;"	f	class:basic_memory_buffer	typeref:typename:void
append_everything_from	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    void append_everything_from(segmented_vector const& other) {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:void
append_everything_from	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    void append_everything_from(segmented_vector&& other) {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:void
appender	./vendor/fmt/include/base.h	/^using appender = basic_appender<char>;$/;"	t	typeref:typename:basic_appender<char>
apple_file	./vendor/fmt/include/format-inl.h	/^template <typename F> class apple_file : public file_base<F> {$/;"	c	namespace:detail
apply	./vendor/fmt/include/format.h	/^  auto apply(Out out, basic_string_view<C> digits) const -> Out {$/;"	f	class:detail::digit_grouping	typeref:typename:Out
apply	./vendor/fmt/include/format.h	/^  constexpr auto apply(Out out, basic_string_view<C>) const -> Out {$/;"	f	class:detail::fallback_digit_grouping	typeref:typename:Out
approximately_equal	./vendor/STC/misc/tests/ctest.h	/^static bool approximately_equal(double a, double b, double epsilon) {$/;"	f	typeref:typename:bool
aqua	./vendor/fmt/include/color.h	/^  aqua = 0x00FFFF,                     \/\/ rgb(0,255,255)$/;"	e	enum:color
aquamarine	./vendor/fmt/include/color.h	/^  aquamarine = 0x7FFFD4,               \/\/ rgb(127,255,212)$/;"	e	enum:color
arg	./src/flecs.c	/^    void *arg;$/;"	m	struct:ecs_win_thread_t	typeref:typename:void *	file:
arg	./src/flecs.h	/^    Base& arg(int32_t term_index) {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
arg	./vendor/STC/include/stc/coption.h	/^    const char *arg;    \/* equivalent to optarg *\/$/;"	m	struct:__anonc31abe760308	typeref:typename:const char *
arg	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        udata_t arg;$/;"	m	struct:picobench::report::benchmark_problem_space	typeref:typename:udata_t
arg	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        udata_t arg;$/;"	m	struct:picobench::report::problem_space_benchmark	typeref:typename:udata_t
arg	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    udata_t arg() const { return _arg; }$/;"	f	class:picobench::state	typeref:typename:udata_t
arg	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR auto arg(int id) const -> format_arg { return args_.get(id); }$/;"	f	class:context	typeref:typename:format_arg
arg	./vendor/fmt/include/base.h	/^  auto arg(string_view name) -> format_arg { return args_.get(name); }$/;"	f	class:context	typeref:typename:format_arg
arg	./vendor/fmt/include/base.h	/^inline auto arg(const Char* name, const T& arg) -> detail::named_arg<Char, T> {$/;"	f	typeref:typename:detail::named_arg<Char,T>
arg	./vendor/fmt/include/format.h	/^  auto arg(basic_string_view<Char> name) -> basic_format_arg<generic_context> {$/;"	f	class:generic_context	typeref:typename:basic_format_arg<generic_context>
arg	./vendor/fmt/include/format.h	/^  constexpr auto arg(int id) const -> basic_format_arg<generic_context> {$/;"	f	class:generic_context	typeref:typename:basic_format_arg<generic_context>
arg	./vendor/fmt/include/printf.h	/^  auto arg(int id) const -> basic_format_arg<basic_printf_context> {$/;"	f	class:basic_printf_context	typeref:typename:basic_format_arg<basic_printf_context>
arg_	./vendor/fmt/include/printf.h	/^  basic_format_arg<Context>& arg_;$/;"	m	class:detail::arg_converter	typeref:typename:basic_format_arg<Context> &
arg_	./vendor/fmt/include/printf.h	/^  basic_format_arg<Context>& arg_;$/;"	m	class:detail::char_converter	typeref:typename:basic_format_arg<Context> &
arg_converter	./vendor/fmt/include/printf.h	/^  arg_converter(basic_format_arg<Context>& arg, char_type type)$/;"	f	class:detail::arg_converter
arg_converter	./vendor/fmt/include/printf.h	/^template <typename T, typename Context> class arg_converter {$/;"	c	namespace:detail
arg_desc	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        picostring arg_desc;$/;"	m	struct:picobench::runner::cmd_line_option	typeref:typename:picostring
arg_formatter	./vendor/fmt/include/format.h	/^template <typename Char> struct arg_formatter {$/;"	s	namespace:detail
arg_id	./vendor/fmt/include/base.h	/^      int arg_id;$/;"	m	struct:detail::parse_replacement_field::id_adapter	typeref:typename:int
arg_id	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR auto arg_id(string_view name) -> int {$/;"	f	class:context	typeref:typename:int
arg_id	./vendor/fmt/include/compile.h	/^  arg_ref<Char> arg_id;$/;"	m	struct:detail::arg_id_handler	typeref:typename:arg_ref<Char>
arg_id	./vendor/fmt/include/compile.h	/^  arg_ref<Char> arg_id;$/;"	m	struct:detail::parse_arg_id_result	typeref:typename:arg_ref<Char>
arg_id	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR auto arg_id(basic_string_view<Char> name) -> int {$/;"	f	class:generic_context	typeref:typename:int
arg_id_end	./vendor/fmt/include/compile.h	/^  const Char* arg_id_end;$/;"	m	struct:detail::parse_arg_id_result	typeref:typename:const Char *
arg_id_handler	./vendor/fmt/include/compile.h	/^template <typename Char> struct arg_id_handler {$/;"	s	namespace:detail
arg_id_kind	./vendor/fmt/include/base.h	/^enum class arg_id_kind { none, index, name };$/;"	g	namespace:detail
arg_list	./src/flecs.h	/^struct arg_list { };$/;"	s	namespace:flecs::_
arg_list_t	./src/flecs.h	/^using arg_list_t = typename _::function_traits<T>::args;$/;"	t	namespace:flecs	typeref:typename:_::function_traits<T>::args
arg_mapper	./vendor/fmt/include/base.h	/^template <typename Context> struct arg_mapper {$/;"	s	namespace:detail
arg_ref	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR arg_ref() : kind(arg_id_kind::none), val() {}$/;"	f	struct:detail::arg_ref	typeref:typename:FMT_CONSTEXPR
arg_ref	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR explicit arg_ref(basic_string_view<Char> name)$/;"	f	struct:detail::arg_ref	typeref:typename:FMT_CONSTEXPR
arg_ref	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR explicit arg_ref(int index)$/;"	f	struct:detail::arg_ref	typeref:typename:FMT_CONSTEXPR
arg_ref	./vendor/fmt/include/base.h	/^template <typename Char> struct arg_ref {$/;"	s	namespace:detail
arg_t	./vendor/fmt/include/base.h	/^using arg_t = conditional_t<NUM_ARGS <= max_packed_args, value<Context>,$/;"	t	namespace:detail	typeref:typename:conditional_t<NUM_ARGS<=max_packed_args,value<Context>,basic_format_arg<Context>>
arg_type	./vendor/fmt/include/base.h	/^    type arg_type;$/;"	m	struct:detail::parse_format_specs::__anonea363bd91308	typeref:typename:type
arg_type	./vendor/fmt/include/base.h	/^  constexpr auto arg_type(int id) const -> type { return types_[id]; }$/;"	f	class:detail::compile_parse_context	typeref:typename:type
arg_type	./vendor/fmt/include/base.h	/^  using arg_type = remove_cvref_t<decltype(arg_mapper<Context>().map(val))>;$/;"	t	function:detail::make_arg
args	./src/flecs.h	/^    using args = arg_list<Args ...>;$/;"	t	struct:flecs::_::function_traits_defs	typeref:typename:arg_list<Args...>
args	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    benchmark& args(std::vector<udata_t> data) { _args = std::move(data); return *this; }$/;"	f	class:picobench::benchmark	typeref:typename:benchmark &
args	./vendor/fmt/include/base.h	/^  arg_t<Context, NUM_ARGS> args[ARGS_ARR_SIZE];$/;"	m	struct:detail::format_arg_store	typeref:typename:arg_t<Context,NUM_ARGS>[]
args	./vendor/fmt/include/base.h	/^  arg_t<Context, NUM_ARGS> args[NUM_ARGS != 0 ? NUM_ARGS : +1];$/;"	m	struct:detail::format_arg_store	typeref:typename:arg_t<Context,NUM_ARGS>[]
args	./vendor/fmt/include/base.h	/^  auto args() const -> const basic_format_args<context>& { return args_; }$/;"	f	class:context	typeref:typename:const basic_format_args<context> &
args	./vendor/fmt/include/format.h	/^  auto args() const -> const basic_format_args<generic_context>& {$/;"	f	class:generic_context	typeref:typename:const basic_format_args<generic_context> &
args	./vendor/fmt/include/format.h	/^  basic_format_args<context> args;$/;"	m	struct:detail::default_arg_formatter	typeref:typename:basic_format_args<context>
args_	./vendor/fmt/include/base.h	/^    const format_arg* args_;$/;"	m	union:basic_format_args::__anonea363bd9100a	typeref:typename:const format_arg *
args_	./vendor/fmt/include/base.h	/^  basic_format_args<context> args_;$/;"	m	class:context	typeref:typename:basic_format_args<context>
args_	./vendor/fmt/include/format.h	/^  basic_format_args<generic_context> args_;$/;"	m	class:generic_context	typeref:typename:basic_format_args<generic_context>
args_	./vendor/fmt/include/printf.h	/^  basic_format_args<basic_printf_context> args_;$/;"	m	class:basic_printf_context	typeref:typename:basic_format_args<basic_printf_context>
arity	./src/flecs.h	/^    static constexpr size_t arity = sizeof...(Args);$/;"	m	struct:flecs::_::function_traits_defs	typeref:typename:size_t
arity	./src/flecs.h	/^struct arity {$/;"	s	namespace:flecs
array	./src/flecs.c	/^    const char *array;$/;"	m	struct:ecs_http_request_key_t	typeref:typename:const char *	file:
array	./src/flecs.h	/^    array() {};$/;"	f	struct:flecs::array
array	./src/flecs.h	/^    array(const T (&elems)[Size]) {$/;"	f	struct:flecs::array
array	./src/flecs.h	/^    array(const T* (&elems)) { (void)elems; }$/;"	f	struct:flecs::array
array	./src/flecs.h	/^    ecs_id_t *array;$/;"	m	struct:__anon7d4a417c0108	typeref:typename:ecs_id_t *
array	./src/flecs.h	/^    flecs::id_t* array() const {$/;"	f	struct:flecs::type	typeref:typename:flecs::id_t *
array	./src/flecs.h	/^    using array = flecs::array<_::term_ptr, sizeof...(Components)>;$/;"	t	struct:flecs::_::term_ptrs
array	./src/flecs.h	/^    void *array;$/;"	m	struct:ecs_vec_t	typeref:typename:void *
array	./src/flecs.h	/^inline flecs::entity world::array(flecs::entity_t elem_id, int32_t array_count) {$/;"	f	class:flecs::world	typeref:typename:flecs::entity
array	./src/flecs.h	/^inline flecs::entity world::array(int32_t array_count) {$/;"	f	class:flecs::world	typeref:typename:flecs::entity
array	./src/flecs.h	/^struct array final { };$/;"	s	namespace:flecs
array	./src/flecs.h	/^struct array<T, Size, enable_if_t<Size != 0> > final {$/;"	s	namespace:flecs
array	./src/flecs.h	/^struct array<T, Size, enable_if_t<Size == 0>> final {$/;"	s	namespace:flecs
array	./src/flecs.h	/^untyped_component& array(int32_t elem_count) {$/;"	f	struct:flecs::untyped_component	typeref:typename:untyped_component &
array_iterator	./src/flecs.h	/^    explicit array_iterator(T* value, int index) {$/;"	f	struct:flecs::array_iterator
array_iterator	./src/flecs.h	/^struct array_iterator$/;"	s	namespace:flecs
array_to_json_buf_w_type_data	./src/flecs.c	/^int array_to_json_buf_w_type_data($/;"	f	typeref:typename:int	file:
artist	./vendor/STC/misc/examples/smartpointers/music_arc.c	/^    cstr artist;$/;"	m	struct:__anond709dd120108	typeref:typename:cstr	file:
as_type	./src/flecs.h	/^    ecs_entity_t as_type;              \/**< Type that describes the serialized output *\/$/;"	m	struct:EcsOpaque	typeref:typename:ecs_entity_t
as_type	./src/flecs.h	/^    opaque& as_type(flecs::id_t func) {$/;"	f	struct:flecs::opaque	typeref:typename:opaque &
asm_build	./Makefile	/^asm_build: copy_asm $(ASM_TARGET)  # Target for building NASM-based executable$/;"	t
asm_run	./Makefile	/^asm_run: asm_build  # Target to build and run NASM-based executable$/;"	t
assembly	./src/flecs.c	/^    ecs_entity_t assembly;$/;"	m	struct:__anon7d4a41771908	typeref:typename:ecs_entity_t	file:
assembly_instance	./src/flecs.c	/^    bool assembly_instance;$/;"	m	struct:__anon7d4a41771908	typeref:typename:bool	file:
assembly_start	./src/flecs.c	/^    const char *assembly_start, *assembly_stop;$/;"	m	struct:__anon7d4a41771908	typeref:typename:const char *	file:
assembly_stmt	./src/flecs.c	/^    bool assembly_stmt;$/;"	m	struct:__anon7d4a41771908	typeref:typename:bool	file:
assembly_stop	./src/flecs.c	/^    const char *assembly_start, *assembly_stop;$/;"	m	struct:__anon7d4a41771908	typeref:typename:const char *	file:
assertNotNull	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^T* assertNotNull(T* t, Args&&... args) {$/;"	f	namespace:robin_hood::detail	typeref:typename:T *
assert_bool	./vendor/STC/misc/tests/ctest.h	/^void assert_bool(bool exp, bool real, const char* caller, int line) {$/;"	f	typeref:typename:void
assert_compare	./vendor/STC/misc/tests/ctest.h	/^void assert_compare(const char* cmp, intmax_t exp, intmax_t real, const char* caller, int line) /;"	f	typeref:typename:void
assert_dbl_compare	./vendor/STC/misc/tests/ctest.h	/^void assert_dbl_compare(const char* cmp, double exp, double real, double tol, const char* caller/;"	f	typeref:typename:void
assert_fail	./vendor/STC/misc/tests/ctest.h	/^void assert_fail(const char* caller, int line) {$/;"	f	typeref:typename:void
assert_fail	./vendor/fmt/include/format-inl.h	/^FMT_FUNC void assert_fail(const char* file, int line, const char* message) {$/;"	f	namespace:detail	typeref:typename:FMT_FUNC void
assert_interval	./vendor/STC/misc/tests/ctest.h	/^void assert_interval(intmax_t low, intmax_t high, intmax_t real, const char* caller, int line) {$/;"	f	typeref:typename:void
assert_mixin	./src/flecs.c	/^void* assert_mixin($/;"	f	typeref:typename:void *	file:
assert_pointers	./vendor/STC/misc/tests/ctest.h	/^void assert_pointers(const char* cmp, const void* exp, const void* real, const char* caller, int/;"	f	typeref:typename:void
assert_term	./src/flecs.h	/^    void assert_term() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:void
assert_term_id	./src/flecs.h	/^    void assert_term_id() {$/;"	f	struct:flecs::term_id_builder_i	typeref:typename:void
assert_wstr	./vendor/STC/misc/tests/ctest.h	/^void assert_wstr(const char* cmp, const wchar_t *exp, const wchar_t *real, const char* caller, i/;"	f	typeref:typename:void
assign	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR auto assign(Float n) -> bool {$/;"	f	struct:detail::basic_fp	typeref:typename:bool
assign	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 void assign(UInt n) {$/;"	f	class:detail::bigint	typeref:typename:FMT_CONSTEXPR20 void
assign	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 void assign(const bigint& other) {$/;"	f	class:detail::bigint	typeref:typename:FMT_CONSTEXPR20 void
assign_bool	./src/flecs.h	/^    opaque& assign_bool(void (*func)(T *dst, bool value)) {$/;"	f	struct:flecs::opaque	typeref:typename:opaque &
assign_bool	./src/flecs.h	/^    void (*assign_bool)($/;"	m	struct:EcsOpaque	typeref:typename:void (*)(void * dst,bool value)
assign_char	./src/flecs.h	/^    opaque& assign_char(void (*func)(T *dst, char value)) {$/;"	f	struct:flecs::opaque	typeref:typename:opaque &
assign_char	./src/flecs.h	/^    void (*assign_char)($/;"	m	struct:EcsOpaque	typeref:typename:void (*)(void * dst,char value)
assign_entity	./src/flecs.h	/^    opaque& assign_entity($/;"	f	struct:flecs::opaque	typeref:typename:opaque &
assign_entity	./src/flecs.h	/^    void (*assign_entity)($/;"	m	struct:EcsOpaque	typeref:typename:void (*)(void * dst,ecs_world_t * world,ecs_entity_t entity)
assign_float	./src/flecs.h	/^    opaque& assign_float(void (*func)(T *dst, double value)) {$/;"	f	struct:flecs::opaque	typeref:typename:opaque &
assign_float	./src/flecs.h	/^    void (*assign_float)($/;"	m	struct:EcsOpaque	typeref:typename:void (*)(void * dst,double value)
assign_id	./src/flecs.h	/^    opaque& assign_id($/;"	f	struct:flecs::opaque	typeref:typename:opaque &
assign_id	./src/flecs.h	/^    void (*assign_id)($/;"	m	struct:EcsOpaque	typeref:typename:void (*)(void * dst,ecs_world_t * world,ecs_id_t id)
assign_int	./src/flecs.h	/^    opaque& assign_int(void (*func)(T *dst, int64_t value)) {$/;"	f	struct:flecs::opaque	typeref:typename:opaque &
assign_int	./src/flecs.h	/^    void (*assign_int)($/;"	m	struct:EcsOpaque	typeref:typename:void (*)(void * dst,int64_t value)
assign_null	./src/flecs.h	/^    opaque& assign_null(void (*func)(T *dst)) {$/;"	f	struct:flecs::opaque	typeref:typename:opaque &
assign_null	./src/flecs.h	/^    void (*assign_null)($/;"	m	struct:EcsOpaque	typeref:typename:void (*)(void * dst)
assign_pow10	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 void assign_pow10(int exp) {$/;"	f	class:detail::bigint	typeref:typename:FMT_CONSTEXPR20 void
assign_stmt	./src/flecs.c	/^    bool assign_stmt;$/;"	m	struct:__anon7d4a41771908	typeref:typename:bool	file:
assign_string	./src/flecs.h	/^    opaque& assign_string(void (*func)(T *dst, const char *value)) {$/;"	f	struct:flecs::opaque	typeref:typename:opaque &
assign_string	./src/flecs.h	/^    void (*assign_string)($/;"	m	struct:EcsOpaque	typeref:typename:void (*)(void * dst,const char * value)
assign_to	./src/flecs.c	/^    ecs_entity_t assign_to;$/;"	m	struct:__anon7d4a41771908	typeref:typename:ecs_entity_t	file:
assign_uint	./src/flecs.h	/^    opaque& assign_uint(void (*func)(T *dst, uint64_t value)) {$/;"	f	struct:flecs::opaque	typeref:typename:opaque &
assign_uint	./src/flecs.h	/^    void (*assign_uint)($/;"	m	struct:EcsOpaque	typeref:typename:void (*)(void * dst,uint64_t value)
assume	./vendor/fmt/include/format.h	/^FMT_INLINE void assume(bool condition) {$/;"	f	namespace:detail	typeref:typename:FMT_INLINE void
astar	./vendor/STC/misc/examples/mixed/astar.c	/^astar(cstr* maze, int width)$/;"	f	typeref:typename:deq_point
async	./src/flecs.c	/^    bool async;                      \/* Is stage asynchronous? (write only) *\/$/;"	m	struct:ecs_stage_t	typeref:typename:bool	file:
async_stage	./src/flecs.h	/^    flecs::world async_stage() const {$/;"	f	struct:flecs::world	typeref:typename:flecs::world
at	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    typename std::enable_if<!std::is_void<Q>::value, Q const&>::type at(key_type const& key) con/;"	f	class:robin_hood::detail::Table	typeref:typename:std::enable_if<!std::is_void<Q>::value,Q const &>::type
at	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    typename std::enable_if<!std::is_void<Q>::value, Q&>::type at(key_type const& key) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:std::enable_if<!std::is_void<Q>::value,Q &>::type
at	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] static constexpr auto at(bucket_pointer bucket_ptr, size_t offset) -> Bucket& /;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:Bucket &
at	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto at(K const& key) -> Q& {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:Q &
at	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto at(K const& key) const -> Q const& {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:Q const &
at	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto at(key_type const& key) -> Q& {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:Q &
at	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto at(key_type const& key) const -> Q const& {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:Q const &
at	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    ValueT& at(const KeyT& key)$/;"	f	class:emhash7::HashMap	typeref:typename:ValueT &
at	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    const ValueT& at(const KeyT& key) const$/;"	f	class:emhash7::HashMap	typeref:typename:const ValueT &
at	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    V & at(const K & key)$/;"	f	class:ska::flat_hash_map	typeref:typename:V &
at	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    const V & at(const K & key) const$/;"	f	class:ska::flat_hash_map	typeref:typename:const V &
at	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  const typename U::value_type& at(const K& key) const {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:const typename U::value_type &
at	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  const typename U::value_type& at(const K& key, std::size_t hash) const {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:const typename U::value_type &
at	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  typename U::value_type& at(const K& key) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:U::value_type &
at	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  typename U::value_type& at(const K& key, std::size_t hash) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:U::value_type &
at	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  T& at(const K& key) {$/;"	f	class:tsl::robin_map	typeref:typename:T &
at	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  T& at(const K& key, std::size_t precalculated_hash) {$/;"	f	class:tsl::robin_map	typeref:typename:T &
at	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  T& at(const Key& key) { return m_ht.at(key); }$/;"	f	class:tsl::robin_map	typeref:typename:T &
at	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  T& at(const Key& key, std::size_t precalculated_hash) {$/;"	f	class:tsl::robin_map	typeref:typename:T &
at	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  const T& at(const K& key) const {$/;"	f	class:tsl::robin_map	typeref:typename:const T &
at	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  const T& at(const K& key, std::size_t precalculated_hash) const {$/;"	f	class:tsl::robin_map	typeref:typename:const T &
at	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  const T& at(const Key& key) const { return m_ht.at(key); }$/;"	f	class:tsl::robin_map	typeref:typename:const T &
at	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  const T& at(const Key& key, std::size_t precalculated_hash) const {$/;"	f	class:tsl::robin_map	typeref:typename:const T &
atfini	./src/flecs.h	/^    void atfini(ecs_fini_action_t action, void *ctx = nullptr) const {$/;"	f	struct:flecs::world	typeref:typename:void
atomic_mutex	./src/flecs.c	/^static pthread_mutex_t atomic_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	typeref:typename:pthread_mutex_t	file:
atorp	./vendor/STC/include/stc/priv/cregex_prv.c	/^    _Token* atorp;$/;"	m	struct:_Parser	typeref:typename:_Token *	file:
atorstack	./vendor/STC/include/stc/priv/cregex_prv.c	/^    _Token atorstack[_NSTACK];$/;"	m	struct:_Parser	typeref:typename:_Token[]	file:
autoCursorCooldownCounter	./vendor/raylib5/include/raygui.h	/^static int autoCursorCooldownCounter = 0;       \/\/ Cooldown frame counter for automatic cursor/;"	v	typeref:typename:int
autoCursorDelayCounter	./vendor/raylib5/include/raygui.h	/^static int autoCursorDelayCounter = 0;          \/\/ Delay frame counter for automatic cursor mo/;"	v	typeref:typename:int
auto_merge	./src/flecs.c	/^    bool auto_merge;                 \/* Should this stage automatically merge? *\/$/;"	m	struct:ecs_stage_t	typeref:typename:bool	file:
avg	./src/flecs.h	/^    ecs_float_t avg[ECS_STAT_WINDOW];$/;"	m	struct:ecs_gauge_t	typeref:typename:ecs_float_t[]
azure	./vendor/fmt/include/color.h	/^  azure = 0xF0FFFF,                    \/\/ rgb(240,255,255)$/;"	e	enum:color
b	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^    union { uint64_t u8; uint8_t b[8]; } r;$/;"	m	union:randomString::__anone7b164fd010a	typeref:typename:uint8_t[8]	file:
b	./vendor/STC/misc/examples/coroutines/coroutines.c	/^    long long result, b;$/;"	m	struct:fibonacci	typeref:typename:long long	file:
b	./vendor/STC/misc/examples/coroutines/generator.c	/^    int a, b, c;$/;"	m	struct:__anon399785530108	typeref:typename:int	file:
b	./vendor/STC/misc/examples/coroutines/triples.c	/^    int a, b, c;$/;"	m	struct:triples	typeref:typename:int	file:
b	./vendor/STC/misc/examples/sortedmaps/listmap.c	/^    typedef struct {int a; const char* b;} pair;$/;"	m	struct:main::__anon4bd0e05d0108	typeref:typename:const char *	file:
b	./vendor/fmt/include/color.h	/^  uint8_t b;$/;"	m	struct:rgb	typeref:typename:uint8_t
b	./vendor/raylib5/include/raygui.h	/^        unsigned char b;$/;"	m	struct:Color	typeref:typename:unsigned char
b	./vendor/raylib5/include/raylib.h	/^    unsigned char b;        \/\/ Color blue value$/;"	m	struct:Color	typeref:typename:unsigned char
back	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] constexpr auto back() -> reference {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:reference
back	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] constexpr auto back() const -> const_reference {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:const_reference
background_color	./vendor/fmt/include/color.h	/^  detail::color_type background_color;$/;"	m	class:text_style	typeref:typename:detail::color_type
base	./src/flecs.c	/^    ecs_entity_t base;               \/* Currently instantiated top-level base *\/$/;"	m	struct:ecs_stage_t	typeref:typename:ecs_entity_t	file:
base	./src/flecs.h	/^    ecs_entity_t base;   \/**< Base unit (e.g. "meters") *\/$/;"	m	struct:EcsUnit	typeref:typename:ecs_entity_t
base	./src/flecs.h	/^    ecs_entity_t base;$/;"	m	struct:ecs_unit_desc_t	typeref:typename:ecs_entity_t
base	./vendor/fmt/include/base.h	/^  using base = basic_format_parse_context<Char>;$/;"	t	class:detail::compile_parse_context	typeref:typename:basic_format_parse_context<Char>
base	./vendor/fmt/include/printf.h	/^  using base = arg_formatter<Char>;$/;"	t	class:detail::printf_arg_formatter	typeref:typename:arg_formatter<Char>
baseSize	./vendor/raylib5/include/raygui.h	/^        int baseSize;           \/\/ Base size (default chars height)$/;"	m	struct:Font	typeref:typename:int
baseSize	./vendor/raylib5/include/raylib.h	/^    int baseSize;           \/\/ Base size (default chars height)$/;"	m	struct:Font	typeref:typename:int
base_arg_type	./src/flecs.h	/^struct base_arg_type {$/;"	s	namespace:flecs
base_arg_type_t	./src/flecs.h	/^using base_arg_type_t = typename base_arg_type<T>::type;$/;"	t	namespace:flecs	typeref:typename:base_arg_type<T>::type
base_case_matrix_product	./vendor/STC/misc/examples/spans/matmult.c	/^void base_case_matrix_product(Mat2 A, Mat2 B, OutMat C)$/;"	f	typeref:typename:void
base_id	./src/flecs.c	/^    ecs_var_id_t base_id;  \/* id to base entity variable, for lookups *\/$/;"	m	struct:ecs_rule_var_t	typeref:typename:ecs_var_id_t	file:
base_iterator	./vendor/fmt/include/format.h	/^constexpr auto base_iterator(Iterator, Iterator it) -> Iterator {$/;"	f	namespace:detail	typeref:typename:Iterator
base_iterator	./vendor/fmt/include/format.h	/^inline auto base_iterator(OutputIt it,$/;"	f	namespace:detail	typeref:typename:OutputIt
base_table_type_map	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^struct base_table_type_map {$/;"	s	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail
base_table_type_set	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^struct base_table_type_set {};$/;"	s	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail
base_type	./src/flecs.h	/^struct base_type {$/;"	s	namespace:flecs
base_type_t	./src/flecs.h	/^using base_type_t = typename base_type<T>::type;$/;"	t	namespace:flecs	typeref:typename:base_type<T>::type
baseline	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    benchmark& baseline(bool b = true) { _baseline = b; return *this; }$/;"	f	class:picobench::benchmark	typeref:typename:benchmark &
basic_appender	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR basic_appender(detail::buffer<T>& buf) : buffer_(&buf) {}$/;"	f	class:basic_appender	typeref:typename:FMT_CONSTEXPR
basic_appender	./vendor/fmt/include/base.h	/^template <typename T> class basic_appender {$/;"	c
basic_cstring_view	./vendor/fmt/include/os.h	/^  basic_cstring_view(const Char* s) : data_(s) {}$/;"	f	class:basic_cstring_view
basic_cstring_view	./vendor/fmt/include/os.h	/^  basic_cstring_view(const std::basic_string<Char>& s) : data_(s.c_str()) {}$/;"	f	class:basic_cstring_view
basic_cstring_view	./vendor/fmt/include/os.h	/^template <typename Char> class basic_cstring_view {$/;"	c
basic_format_arg	./vendor/fmt/include/base.h	/^  basic_format_arg(const detail::named_arg_info<char_type>* args, size_t size)$/;"	f	class:basic_format_arg
basic_format_arg	./vendor/fmt/include/base.h	/^  constexpr basic_format_arg() : type_(detail::type::none_type) {}$/;"	f	class:basic_format_arg
basic_format_arg	./vendor/fmt/include/base.h	/^template <typename Context> class basic_format_arg {$/;"	c
basic_format_args	./vendor/fmt/include/base.h	/^  constexpr FMT_ALWAYS_INLINE basic_format_args($/;"	f	class:basic_format_args	typeref:typename:FMT_ALWAYS_INLINE
basic_format_args	./vendor/fmt/include/base.h	/^  constexpr basic_format_args($/;"	f	class:basic_format_args
basic_format_args	./vendor/fmt/include/base.h	/^  constexpr basic_format_args() : desc_(0), args_(nullptr) {}$/;"	f	class:basic_format_args
basic_format_args	./vendor/fmt/include/base.h	/^  constexpr basic_format_args(const dynamic_format_arg_store<Context>& store)$/;"	f	class:basic_format_args
basic_format_args	./vendor/fmt/include/base.h	/^  constexpr basic_format_args(const format_arg* args, int count)$/;"	f	class:basic_format_args
basic_format_args	./vendor/fmt/include/base.h	/^template <typename Context> class basic_format_args {$/;"	c
basic_format_context	./vendor/fmt/include/base.h	/^using basic_format_context =$/;"	t	typeref:typename:conditional_t<std::is_same<OutputIt,appender>::value,context,generic_context<OutputIt,Char>>
basic_format_parse_context	./vendor/fmt/include/base.h	/^  explicit constexpr basic_format_parse_context($/;"	f	class:basic_format_parse_context
basic_format_parse_context	./vendor/fmt/include/base.h	/^template <typename Char> class basic_format_parse_context {$/;"	c
basic_format_string	./vendor/fmt/include/base.h	/^  FMT_CONSTEVAL FMT_ALWAYS_INLINE basic_format_string(const S& s) : str_(s) {$/;"	f	class:basic_format_string	typeref:typename:FMT_CONSTEVAL FMT_ALWAYS_INLINE
basic_format_string	./vendor/fmt/include/base.h	/^  basic_format_string(runtime_format_string<Char> fmt) : str_(fmt.str) {}$/;"	f	class:basic_format_string
basic_format_string	./vendor/fmt/include/base.h	/^template <typename Char, typename... Args> class basic_format_string {$/;"	c
basic_fp	./vendor/fmt/include/format.h	/^  constexpr basic_fp() : f(0), e(0) {}$/;"	f	struct:detail::basic_fp
basic_fp	./vendor/fmt/include/format.h	/^  constexpr basic_fp(uint64_t f_val, int e_val) : f(f_val), e(e_val) {}$/;"	f	struct:detail::basic_fp
basic_fp	./vendor/fmt/include/format.h	/^  template <typename Float> FMT_CONSTEXPR basic_fp(Float n) { assign(n); }$/;"	f	struct:detail::basic_fp	typeref:typename:FMT_CONSTEXPR
basic_fp	./vendor/fmt/include/format.h	/^template <typename F> struct basic_fp {$/;"	s	namespace:detail
basic_memory_buffer	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 basic_memory_buffer(basic_memory_buffer&& other) noexcept$/;"	f	class:basic_memory_buffer	typeref:typename:FMT_CONSTEXPR20
basic_memory_buffer	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 explicit basic_memory_buffer($/;"	f	class:basic_memory_buffer	typeref:typename:FMT_CONSTEXPR20
basic_memory_buffer	./vendor/fmt/include/format.h	/^class basic_memory_buffer : public detail::buffer<T> {$/;"	c
basic_ostream_formatter	./vendor/fmt/include/ostream.h	/^struct basic_ostream_formatter : formatter<basic_string_view<Char>, Char> {$/;"	s
basic_printf_context	./vendor/fmt/include/printf.h	/^  basic_printf_context(basic_appender<Char> out,$/;"	f	class:basic_printf_context
basic_printf_context	./vendor/fmt/include/printf.h	/^template <typename Char> class basic_printf_context {$/;"	c
basic_string_view	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR basic_string_view(const S& s) noexcept$/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR
basic_string_view	./vendor/fmt/include/base.h	/^  basic_string_view(const Char* s)$/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR20
basic_string_view	./vendor/fmt/include/base.h	/^  constexpr basic_string_view() noexcept : data_(nullptr), size_(0) {}$/;"	f	class:basic_string_view
basic_string_view	./vendor/fmt/include/base.h	/^  constexpr basic_string_view(const Char* s, size_t count) noexcept$/;"	f	class:basic_string_view
basic_string_view	./vendor/fmt/include/base.h	/^template <typename Char> class basic_string_view {$/;"	c
batched_command_count	./src/flecs.h	/^        int64_t batched_command_count; \/**< Commands batched *\/$/;"	m	struct:ecs_world_info_t::__anon7d4a417c0708	typeref:typename:int64_t
batched_count	./src/flecs.h	/^        ecs_metric_t batched_count;$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1308	typeref:typename:ecs_metric_t
batched_entity_count	./src/flecs.h	/^        ecs_metric_t batched_entity_count;$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1308	typeref:typename:ecs_metric_t
batched_entity_count	./src/flecs.h	/^        int64_t batched_entity_count;  \/**< Entities for which commands were batched *\/$/;"	m	struct:ecs_world_info_t::__anon7d4a417c0708	typeref:typename:int64_t
begin	./src/flecs.h	/^    array_iterator<T> begin() { return array_iterator<T>(nullptr, 0); }$/;"	f	struct:flecs::array	typeref:typename:array_iterator<T>
begin	./src/flecs.h	/^    array_iterator<T> begin() {$/;"	f	struct:flecs::array	typeref:typename:array_iterator<T>
begin	./src/flecs.h	/^    flecs::id_t* begin() const {$/;"	f	struct:flecs::type	typeref:typename:flecs::id_t *
begin	./src/flecs.h	/^    row_iterator begin() const {$/;"	f	struct:flecs::iter	typeref:typename:row_iterator
begin	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    const_iterator begin() const { \/\/ NOLINT(modernize-use-nodiscard)$/;"	f	class:robin_hood::detail::Table	typeref:typename:const_iterator
begin	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    iterator begin() {$/;"	f	class:robin_hood::detail::Table	typeref:typename:iterator
begin	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] constexpr auto begin() -> iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:iterator
begin	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] constexpr auto begin() const -> const_iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:const_iterator
begin	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto begin() const noexcept -> const_iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:auto
begin	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto begin() noexcept -> iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:auto
begin	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline const_iterator begin() const noexcept { return cbegin(); }$/;"	f	class:emhash7::HashMap	typeref:typename:const_iterator
begin	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    iterator begin() noexcept$/;"	f	class:emhash7::HashMap	typeref:typename:iterator
begin	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    const_iterator begin() const$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:const_iterator
begin	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    iterator begin()$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:iterator
begin	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  const_iterator begin() const noexcept { return cbegin(); }$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:const_iterator
begin	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  iterator begin() noexcept {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:iterator
begin	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  const_iterator begin() const noexcept { return m_ht.begin(); }$/;"	f	class:tsl::robin_map	typeref:typename:const_iterator
begin	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  iterator begin() noexcept { return m_ht.begin(); }$/;"	f	class:tsl::robin_map	typeref:typename:iterator
begin	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    iterator begin()$/;"	f	class:picobench::state	typeref:typename:PICOBENCH_INLINE iterator
begin	./vendor/STC/misc/benchmarks/various/string_bench_STC.cpp	/^    std::chrono::high_resolution_clock::time_point begin;$/;"	m	class:timer	typeref:typename:std::chrono::high_resolution_clock::time_point	file:
begin	./vendor/STC/misc/benchmarks/various/string_bench_STD.cpp	/^    std::chrono::high_resolution_clock::time_point begin;$/;"	m	class:timer	typeref:typename:std::chrono::high_resolution_clock::time_point	file:
begin	./vendor/fmt/include/base.h	/^    const Char*& begin;$/;"	m	struct:detail::parse_format_specs::__anonea363bd91308	typeref:typename:const Char * &
begin	./vendor/fmt/include/base.h	/^  auto begin() const noexcept -> const T* { return ptr_; }$/;"	f	class:detail::buffer	typeref:typename:auto
begin	./vendor/fmt/include/base.h	/^  auto begin() noexcept -> T* { return ptr_; }$/;"	f	class:detail::buffer	typeref:typename:auto
begin	./vendor/fmt/include/base.h	/^  constexpr auto begin() const noexcept -> iterator { return data_; }$/;"	f	class:basic_string_view	typeref:typename:auto
begin	./vendor/fmt/include/base.h	/^  constexpr auto begin() const noexcept -> iterator {$/;"	f	class:basic_format_parse_context	typeref:typename:auto
begin	./vendor/fmt/include/color.h	/^  FMT_CONSTEXPR auto begin() const noexcept -> const Char* { return buffer; }$/;"	f	struct:detail::ansi_color_escape	typeref:typename:FMT_CONSTEXPR auto
begin	./vendor/fmt/include/format.h	/^  const Char* begin;$/;"	m	struct:detail::find_escape_result	typeref:typename:const Char *
begin	./vendor/fmt/include/ranges.h	/^  It begin;$/;"	m	struct:join_view	typeref:typename:It
begin	./vendor/fmt/include/ranges.h	/^  auto begin() const -> typename Container::const_iterator { return c.begin(); }$/;"	f	struct:detail::all	typeref:typename:Container::const_iterator
beige	./vendor/fmt/include/color.h	/^  beige = 0xF5F5DC,                    \/\/ rgb(245,245,220)$/;"	e	enum:color
benchmark	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    struct benchmark$/;"	s	class:picobench::report
benchmark	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^benchmark::benchmark(const char* name, benchmark_proc proc)$/;"	f	class:picobench::benchmark
benchmark	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^class benchmark$/;"	c	namespace:picobench
benchmark	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^int benchmark(C& container, const int n, const int strsize) {$/;"	f	typeref:typename:int
benchmark	./vendor/STC/misc/benchmarks/various/string_bench_STC.cpp	/^void benchmark($/;"	f	typeref:typename:void
benchmark	./vendor/STC/misc/benchmarks/various/string_bench_STD.cpp	/^void benchmark($/;"	f	typeref:typename:void
benchmark_impl	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    benchmark_impl(const char* name, benchmark_proc proc)$/;"	f	class:picobench::benchmark_impl
benchmark_impl	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^class benchmark_impl : public benchmark$/;"	c	namespace:picobench
benchmark_lookup	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^int benchmark_lookup(C& container, const int n, const int strsize) {$/;"	f	typeref:typename:int
benchmark_problem_space	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    struct benchmark_problem_space$/;"	s	class:picobench::report
benchmark_proc	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^using benchmark_proc = std::function<void(state&)>;$/;"	t	namespace:picobench
benchmark_proc	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^using benchmark_proc = void(*)(state&);$/;"	t	namespace:picobench
benchmarks	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        std::vector<benchmark> benchmarks; \/\/ benchmark view$/;"	m	struct:picobench::report::suite	typeref:typename:std::vector<benchmark>
benchmarks	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    benchmarks_vector benchmarks;$/;"	m	struct:picobench::rsuite	typeref:typename:benchmarks_vector
benchmarks_for_current_suite	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    benchmarks_vector& benchmarks_for_current_suite()$/;"	f	class:picobench::registry	typeref:typename:benchmarks_vector &
benchmarks_vector	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^using benchmarks_vector = std::vector<std::unique_ptr<benchmark_impl>>;$/;"	t	namespace:picobench	typeref:typename:std::vector<std::unique_ptr<benchmark_impl>>
bg	./vendor/fmt/include/color.h	/^FMT_CONSTEXPR inline auto bg(detail::color_type background) noexcept$/;"	f	typeref:typename:FMT_CONSTEXPR auto
big_decimal_fp	./vendor/fmt/include/format.h	/^struct big_decimal_fp {$/;"	s	namespace:detail
big_divisor	./vendor/fmt/include/format.h	/^  static const int big_divisor = 1000;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
big_divisor	./vendor/fmt/include/format.h	/^  static const int big_divisor = 100;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
bigint	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 bigint() : exp_(0) {}$/;"	f	class:detail::bigint	typeref:typename:FMT_CONSTEXPR20
bigint	./vendor/fmt/include/format.h	/^  explicit bigint(uint64_t n) { assign(n); }$/;"	f	class:detail::bigint
bigint	./vendor/fmt/include/format.h	/^class bigint {$/;"	c	namespace:detail
bigit	./vendor/fmt/include/format.h	/^  using bigit = uint32_t;$/;"	t	class:detail::bigint	typeref:typename:uint32_t
bigit_bits	./vendor/fmt/include/format.h	/^  static constexpr const int bigit_bits = num_bits<bigit>();$/;"	m	class:detail::bigint	typeref:typename:const int
bigits_	./vendor/fmt/include/format.h	/^  basic_memory_buffer<bigit, bigits_capacity> bigits_;$/;"	m	class:detail::bigint	typeref:typename:basic_memory_buffer<bigit,bigits_capacity>
bigits_capacity	./vendor/fmt/include/format.h	/^  enum { bigits_capacity = 32 };$/;"	e	enum:detail::bigint::__anon35c308471603
bin	./vendor/fmt/include/base.h	/^  bin,      \/\/ 'b' or 'B'$/;"	e	enum:presentation_type
binary32	./vendor/fmt/include/format.h	/^  bool binary32 : 1;$/;"	m	struct:detail::float_specs	typeref:typename:bool:1
bindPose	./vendor/raylib5/include/raylib.h	/^    Transform *bindPose;    \/\/ Bones base transformation (pose)$/;"	m	struct:Model	typeref:typename:Transform *
binding_ctx	./src/flecs.c	/^    void *binding_ctx;               \/* Binding-specific context *\/$/;"	m	struct:ecs_world_t	typeref:typename:void *	file:
binding_ctx	./src/flecs.c	/^    void *binding_ctx;               \/* Context to be used for language bindings *\/$/;"	m	struct:ecs_query_t	typeref:typename:void *	file:
binding_ctx	./src/flecs.c	/^    void *binding_ctx;              \/* Optional language binding context *\/$/;"	m	struct:ecs_system_t	typeref:typename:void *	file:
binding_ctx	./src/flecs.h	/^    void *binding_ctx;               \/**< Language binding context *\/$/;"	m	struct:ecs_type_hooks_t	typeref:typename:void *
binding_ctx	./src/flecs.h	/^    void *binding_ctx;            \/* Binding context *\/$/;"	m	struct:ecs_iter_t	typeref:typename:void *
binding_ctx	./src/flecs.h	/^    void *binding_ctx;          \/**< Binding context (for language bindings) *\/$/;"	m	struct:ecs_observer_t	typeref:typename:void *
binding_ctx	./src/flecs.h	/^    void *binding_ctx;$/;"	m	struct:ecs_observer_desc_t	typeref:typename:void *
binding_ctx	./src/flecs.h	/^    void *binding_ctx;$/;"	m	struct:ecs_query_desc_t	typeref:typename:void *
binding_ctx	./src/flecs.h	/^    void *binding_ctx;$/;"	m	struct:ecs_system_desc_t	typeref:typename:void *
binding_ctx_free	./src/flecs.c	/^    ecs_ctx_free_t binding_ctx_free; \/** Callback to free binding_ctx *\/$/;"	m	struct:ecs_query_t	typeref:typename:ecs_ctx_free_t	file:
binding_ctx_free	./src/flecs.c	/^    ecs_ctx_free_t binding_ctx_free; \/**< Callback to free binding_ctx *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_ctx_free_t	file:
binding_ctx_free	./src/flecs.c	/^    ecs_ctx_free_t binding_ctx_free;$/;"	m	struct:ecs_system_t	typeref:typename:ecs_ctx_free_t	file:
binding_ctx_free	./src/flecs.h	/^    ecs_ctx_free_t binding_ctx_free; \/**< Callback to free binding_ctx *\/$/;"	m	struct:ecs_observer_t	typeref:typename:ecs_ctx_free_t
binding_ctx_free	./src/flecs.h	/^    ecs_ctx_free_t binding_ctx_free; \/**< Callback to free binding_ctx *\/$/;"	m	struct:ecs_type_hooks_t	typeref:typename:ecs_ctx_free_t
binding_ctx_free	./src/flecs.h	/^    ecs_ctx_free_t binding_ctx_free;$/;"	m	struct:ecs_observer_desc_t	typeref:typename:ecs_ctx_free_t
binding_ctx_free	./src/flecs.h	/^    ecs_ctx_free_t binding_ctx_free;$/;"	m	struct:ecs_query_desc_t	typeref:typename:ecs_ctx_free_t
binding_ctx_free	./src/flecs.h	/^    ecs_ctx_free_t binding_ctx_free;$/;"	m	struct:ecs_system_desc_t	typeref:typename:ecs_ctx_free_t
bisque	./vendor/fmt/include/color.h	/^  bisque = 0xFFE4C4,                   \/\/ rgb(255,228,196)$/;"	e	enum:color
bit	./src/flecs.h	/^untyped_component& bit(const char *name, uint32_t value) {$/;"	f	struct:flecs::untyped_component	typeref:typename:untyped_component &
bit_cast	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR20 auto bit_cast(const From& from) -> To {$/;"	f	namespace:detail	typeref:typename:To
bit_cast	./vendor/fmt/include/format.h	/^inline auto bit_cast(const From& from) -> To {$/;"	f	namespace:detail	typeref:typename:To
bitmask	./src/flecs.h	/^struct bitmask {$/;"	s	namespace:flecs
bitmask_constant_t	./src/flecs.h	/^using bitmask_constant_t = ecs_bitmask_constant_t;$/;"	t	namespace:flecs	typeref:typename:ecs_bitmask_constant_t
bitset_first	./src/flecs.h	/^    int32_t bitset_first;$/;"	m	struct:ecs_query_iter_t	typeref:typename:int32_t
black	./vendor/fmt/include/color.h	/^  black = 0x000000,                    \/\/ rgb(0,0,0)$/;"	e	enum:color
black	./vendor/fmt/include/color.h	/^  black = 30,$/;"	e	enum:terminal_color
blanched_almond	./vendor/fmt/include/color.h	/^  blanched_almond = 0xFFEBCD,          \/\/ rgb(255,235,205)$/;"	e	enum:color
blink	./vendor/fmt/include/color.h	/^  blink = 1 << 4,$/;"	e	enum:emphasis
block_alloc_count	./src/flecs.h	/^        ecs_metric_t block_alloc_count;    \/**< Block allocations per frame *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1608	typeref:typename:ecs_metric_t
block_free_count	./src/flecs.h	/^        ecs_metric_t block_free_count;     \/**< Block frees per frame *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1608	typeref:typename:ecs_metric_t
block_head	./src/flecs.h	/^    ecs_block_allocator_block_t *block_head;$/;"	m	struct:ecs_block_allocator_t	typeref:typename:ecs_block_allocator_block_t *
block_outstanding_alloc_count	./src/flecs.h	/^        ecs_metric_t block_outstanding_alloc_count; \/**< Difference between allocs & frees *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1608	typeref:typename:ecs_metric_t
block_size	./src/flecs.h	/^    int32_t block_size;$/;"	m	struct:ecs_block_allocator_t	typeref:typename:int32_t
block_tail	./src/flecs.h	/^    ecs_block_allocator_block_t *block_tail;$/;"	m	struct:ecs_block_allocator_t	typeref:typename:ecs_block_allocator_block_t *
blue	./vendor/fmt/include/color.h	/^  blue = 0x0000FF,                     \/\/ rgb(0,0,255)$/;"	e	enum:color
blue	./vendor/fmt/include/color.h	/^  blue,$/;"	e	enum:terminal_color
blue_violet	./vendor/fmt/include/color.h	/^  blue_violet = 0x8A2BE2,              \/\/ rgb(138,43,226)$/;"	e	enum:color
body	./src/flecs.h	/^    char *body;$/;"	m	struct:__anon7d4a417c0b08	typeref:typename:char *
body	./src/flecs.h	/^    ecs_strbuf_t body;          \/**< default = "" *\/$/;"	m	struct:__anon7d4a417c0c08	typeref:typename:ecs_strbuf_t
body_offset	./src/flecs.c	/^    int32_t body_offset;$/;"	m	struct:__anon7d4a41770708	typeref:typename:int32_t	file:
bold	./vendor/fmt/include/color.h	/^  bold = 1,$/;"	e	enum:emphasis
boneCount	./vendor/raylib5/include/raylib.h	/^    int boneCount;          \/\/ Number of bones$/;"	m	struct:Model	typeref:typename:int
boneCount	./vendor/raylib5/include/raylib.h	/^    int boneCount;          \/\/ Number of bones$/;"	m	struct:ModelAnimation	typeref:typename:int
boneIds	./vendor/raylib5/include/raylib.h	/^    unsigned char *boneIds; \/\/ Vertex bone ids, max 255 bone ids, up to 4 bones influence by v/;"	m	struct:Mesh	typeref:typename:unsigned char *
boneWeights	./vendor/raylib5/include/raylib.h	/^    float *boneWeights;     \/\/ Vertex bone weight, up to 4 bones influence by vertex (skinning/;"	m	struct:Mesh	typeref:typename:float *
bones	./vendor/raylib5/include/raylib.h	/^    BoneInfo *bones;        \/\/ Bones information (skeleton)$/;"	m	struct:Model	typeref:typename:BoneInfo *
bones	./vendor/raylib5/include/raylib.h	/^    BoneInfo *bones;        \/\/ Bones information (skeleton)$/;"	m	struct:ModelAnimation	typeref:typename:BoneInfo *
bool_constant	./vendor/fmt/include/base.h	/^template <bool B> using bool_constant = std::integral_constant<bool, B>;$/;"	t	typeref:typename:std::integral_constant<bool,B>
bool_set	./vendor/fmt/include/base.h	/^  bool_set = set(type::bool_type),$/;"	e	enum:detail::__anonea363bd90103
bool_t	./src/flecs.h	/^using bool_t = ecs_bool_t;$/;"	t	namespace:flecs	typeref:typename:ecs_bool_t
bool_type	./vendor/fmt/include/base.h	/^  bool_type,$/;"	e	enum:detail::type
bool_value	./vendor/fmt/include/base.h	/^    bool bool_value;$/;"	m	union:detail::value::__anonea363bd9060a	typeref:typename:bool
bottom	./vendor/raylib5/include/raylib.h	/^    int bottom;             \/\/ Bottom border offset$/;"	m	struct:NPatchInfo	typeref:typename:int
bottom_right	./vendor/STC/misc/examples/smartpointers/box2.c	/^    Point bottom_right;$/;"	m	struct:__anon9bc77dd70208	typeref:typename:Point	file:
boxed_origin	./vendor/STC/misc/examples/smartpointers/box2.c	/^box_Point boxed_origin(void) {$/;"	f	typeref:typename:box_Point
brief	./src/flecs.h	/^    Base& brief(const char *brief) {$/;"	f	struct:flecs::alert_builder_i	typeref:typename:Base &
brief	./src/flecs.h	/^    const char *brief;$/;"	m	struct:ecs_alert_desc_t	typeref:typename:const char *
brief	./src/flecs.h	/^    const char *brief;$/;"	m	struct:ecs_metric_desc_t	typeref:typename:const char *
brief	./src/flecs.h	/^    metric_builder& brief(const char *b) {$/;"	f	struct:flecs::metric_builder	typeref:typename:metric_builder &
bright_black	./vendor/fmt/include/color.h	/^  bright_black = 90,$/;"	e	enum:terminal_color
bright_blue	./vendor/fmt/include/color.h	/^  bright_blue,$/;"	e	enum:terminal_color
bright_cyan	./vendor/fmt/include/color.h	/^  bright_cyan,$/;"	e	enum:terminal_color
bright_green	./vendor/fmt/include/color.h	/^  bright_green,$/;"	e	enum:terminal_color
bright_magenta	./vendor/fmt/include/color.h	/^  bright_magenta,$/;"	e	enum:terminal_color
bright_red	./vendor/fmt/include/color.h	/^  bright_red,$/;"	e	enum:terminal_color
bright_white	./vendor/fmt/include/color.h	/^  bright_white$/;"	e	enum:terminal_color
bright_yellow	./vendor/fmt/include/color.h	/^  bright_yellow,$/;"	e	enum:terminal_color
brown	./vendor/fmt/include/color.h	/^  brown = 0xA52A2A,                    \/\/ rgb(165,42,42)$/;"	e	enum:color
bs	./vendor/fmt/include/std.h	/^    const std::bitset<N>& bs;$/;"	m	struct:formatter::writer	typeref:typename:const std::bitset<N> &
bs_column	./src/flecs.c	/^    ecs_bitset_t *bs_column;$/;"	m	struct:flecs_bitset_term_t	typeref:typename:ecs_bitset_t *	file:
bs_columns	./src/flecs.c	/^    ecs_bitset_t *bs_columns;        \/* Bitset columns *\/$/;"	m	struct:ecs_table__t	typeref:typename:ecs_bitset_t *	file:
bs_count	./src/flecs.c	/^    int16_t bs_count;$/;"	m	struct:ecs_table__t	typeref:typename:int16_t	file:
bs_offset	./src/flecs.c	/^    int16_t bs_offset;$/;"	m	struct:ecs_table__t	typeref:typename:int16_t	file:
bs_offset	./src/flecs.c	/^    int32_t bs_offset;$/;"	m	struct:ecs_entity_filter_iter_t	typeref:typename:int32_t	file:
bs_terms	./src/flecs.c	/^    ecs_vec_t bs_terms;              \/* Terms with bitset (toggle) entity filter *\/$/;"	m	struct:ecs_entity_filter_t	typeref:typename:ecs_vec_t	file:
bucket	./src/flecs.h	/^    ecs_bucket_t *bucket;$/;"	m	struct:ecs_map_iter_t	typeref:typename:ecs_bucket_t *
bucket	./src/flecs.h	/^    ecs_hm_bucket_t *bucket;$/;"	m	struct:__anon7d4a417c0508	typeref:typename:ecs_hm_bucket_t *
bucket	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        size_type bucket() const$/;"	f	class:emhash7::HashMap::const_iterator	typeref:typename:size_type
bucket	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        size_type bucket() const$/;"	f	class:emhash7::HashMap::iterator	typeref:typename:size_type
bucket	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    size_type bucket(const KeyT& key) const$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
bucket	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    size_type bucket;$/;"	m	struct:emhash7::entry	typeref:typename:size_type
bucket	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    size_t bucket(const FindKey & key) const$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:size_t
bucket_alloc	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using bucket_alloc =$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:std::allocator_traits<typename value_container_type::allocator_type>::template rebind_alloc<Bucket>
bucket_alloc_traits	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using bucket_alloc_traits = std::allocator_traits<bucket_alloc>;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:std::allocator_traits<bucket_alloc>
bucket_allocator	./src/flecs.h	/^    ecs_block_allocator_t bucket_allocator;$/;"	m	struct:__anon7d4a417c0408	typeref:typename:ecs_block_allocator_t
bucket_count	./src/flecs.h	/^    int32_t bucket_count;$/;"	m	struct:ecs_map_t	typeref:typename:int32_t
bucket_count	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto bucket_count() const noexcept -> size_t { \/\/ NOLINT(modernize-use-nodiscard)$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:auto
bucket_count	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline size_type bucket_count() const { return _num_buckets; }$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
bucket_count	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    size_t bucket_count() const$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:size_t
bucket_count	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  size_type bucket_count() const { return m_bucket_count; }$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:size_type
bucket_count	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  size_type bucket_count() const { return m_ht.bucket_count(); }$/;"	f	class:tsl::robin_map	typeref:typename:size_type
bucket_entry	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  bucket_entry() noexcept$/;"	f	class:tsl::detail_robin_hash::bucket_entry
bucket_entry	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  bucket_entry(bool last_bucket) noexcept$/;"	f	class:tsl::detail_robin_hash::bucket_entry
bucket_entry	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  bucket_entry(bucket_entry&& other) noexcept($/;"	f	class:tsl::detail_robin_hash::bucket_entry
bucket_entry	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  bucket_entry(const bucket_entry& other) noexcept($/;"	f	class:tsl::detail_robin_hash::bucket_entry
bucket_entry	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  using bucket_entry =$/;"	t	class:tsl::detail_robin_hash::robin_hash	typeref:typename:tsl::detail_robin_hash::bucket_entry<value_type,STORE_HASH>
bucket_entry	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^class bucket_entry : public bucket_entry_hash<StoreHash> {$/;"	c	namespace:tsl::detail_robin_hash
bucket_entry_hash	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^class bucket_entry_hash {$/;"	c	namespace:tsl::detail_robin_hash
bucket_entry_hash	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^class bucket_entry_hash<true> {$/;"	c	namespace:tsl::detail_robin_hash
bucket_entry_ptr	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^    using bucket_entry_ptr =$/;"	t	class:tsl::detail_robin_hash::robin_hash::robin_iterator	typeref:typename:std::conditional<IsConst,const bucket_entry *,bucket_entry * >::type
bucket_for_hash	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^  std::size_t bucket_for_hash(std::size_t hash) const noexcept {$/;"	f	class:tsl::rh::mod_growth_policy	typeref:typename:std::size_t
bucket_for_hash	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^  std::size_t bucket_for_hash(std::size_t hash) const noexcept {$/;"	f	class:tsl::rh::power_of_two_growth_policy	typeref:typename:std::size_t
bucket_for_hash	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^  std::size_t bucket_for_hash(std::size_t hash) const noexcept {$/;"	f	class:tsl::rh::prime_growth_policy	typeref:typename:std::size_t
bucket_for_hash	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  std::size_t bucket_for_hash(std::size_t hash) const {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:std::size_t
bucket_hash	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  using bucket_hash = bucket_entry_hash<StoreHash>;$/;"	t	class:tsl::detail_robin_hash::bucket_entry	typeref:typename:bucket_entry_hash<StoreHash>
bucket_hash_equal	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  bool bucket_hash_equal(std::size_t \/*hash*\/) const noexcept { return true; }$/;"	f	class:tsl::detail_robin_hash::bucket_entry_hash	typeref:typename:bool
bucket_hash_equal	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  bool bucket_hash_equal(std::size_t hash) const noexcept {$/;"	f	class:tsl::detail_robin_hash::bucket_entry_hash	typeref:typename:bool
bucket_idx_from_hash	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] constexpr auto bucket_idx_from_hash(uint64_t hash) const -> value_idx_type {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:value_idx_type
bucket_main	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    size_type bucket_main() const$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
bucket_pointer	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using bucket_pointer = typename std::allocator_traits<bucket_alloc>::pointer;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:std::allocator_traits<bucket_alloc>::pointer
bucket_shift	./src/flecs.h	/^    uint8_t bucket_shift;$/;"	m	struct:ecs_map_t	typeref:typename:uint8_t
bucket_size	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    size_type bucket_size(const size_type bucket) const$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
bucket_type	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using bucket_type = Bucket;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:Bucket
bucket_type	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^namespace bucket_type {$/;"	n	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE
buckets	./src/flecs.h	/^    ecs_bucket_t *buckets;$/;"	m	struct:ecs_map_t	typeref:typename:ecs_bucket_t *
buckets_allocator	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  using buckets_allocator = typename std::allocator_traits<$/;"	t	class:tsl::detail_robin_hash::robin_hash	typeref:typename:std::allocator_traits<allocator_type>::template rebind_alloc<bucket_entry>
buckets_container_type	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  using buckets_container_type = std::vector<bucket_entry, buckets_allocator>;$/;"	t	class:tsl::detail_robin_hash::robin_hash	typeref:typename:std::vector<bucket_entry,buckets_allocator>
buf	./src/flecs.c	/^    ecs_strbuf_t buf;$/;"	m	struct:__anon7d4a41770708	typeref:typename:ecs_strbuf_t	file:
buf	./src/flecs.c	/^    ecs_strbuf_t buf;$/;"	m	struct:__anon7d4a41771b08	typeref:typename:ecs_strbuf_t	file:
buf	./vendor/STC/include/stc/types.h	/^    csview_value* buf;$/;"	m	struct:csview	typeref:typename:csview_value *
buf	./vendor/fmt/include/chrono.h	/^  CodeUnit buf[max_size];$/;"	m	struct:detail::codecvt_result	typeref:typename:CodeUnit[]
buffer	./vendor/STC/include/stc/cbits.h	/^typedef struct { uintptr_t *buffer; intptr_t _size; } i_type;$/;"	m	struct:__anonb7fc968f0108	typeref:typename:uintptr_t *
buffer	./vendor/STC/include/stc/cbits.h	/^typedef struct { uintptr_t buffer[(i_capacity - 1)\/64 + 1]; } i_type;$/;"	m	struct:__anonb7fc968f0208	typeref:typename:uintptr_t[]
buffer	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR20 buffer(grow_fun grow, size_t sz) noexcept$/;"	f	class:detail::buffer
buffer	./vendor/fmt/include/base.h	/^  constexpr buffer(grow_fun grow, T* p = nullptr, size_t sz = 0,$/;"	f	class:detail::buffer
buffer	./vendor/fmt/include/base.h	/^template <typename T> class buffer {$/;"	c	namespace:detail
buffer	./vendor/fmt/include/color.h	/^  Char buffer[7u + 3u * num_emphases + 1u];$/;"	m	struct:detail::ansi_color_escape	typeref:typename:Char[]
buffer	./vendor/raylib5/include/raylib.h	/^    rAudioBuffer *buffer;       \/\/ Pointer to internal data used by the audio system$/;"	m	struct:AudioStream	typeref:typename:rAudioBuffer *
buffer_	./vendor/fmt/include/base.h	/^  detail::buffer<T>* buffer_;$/;"	m	class:basic_appender	typeref:typename:detail::buffer<T> *
buffer_	./vendor/fmt/include/chrono.h	/^  buffer<char_type>& buffer_;$/;"	m	class:detail::formatbuf	typeref:typename:buffer<char_type> &
buffer_	./vendor/fmt/include/format.h	/^  Buffer buffer_;$/;"	m	class:detail::to_utf8	typeref:typename:Buffer
buffer_	./vendor/fmt/include/format.h	/^  basic_memory_buffer<wchar_t> buffer_;$/;"	m	class:detail::utf8_to_utf16	typeref:typename:basic_memory_buffer<wchar_t>
buffer_	./vendor/fmt/include/format.h	/^  mutable char buffer_[buffer_size];$/;"	m	class:format_int	typeref:typename:char[]
buffer_size	./vendor/fmt/include/base.h	/^  enum { buffer_size = 256 };$/;"	e	enum:detail::counting_buffer::__anonea363bd90503
buffer_size	./vendor/fmt/include/base.h	/^  enum { buffer_size = 256 };$/;"	e	enum:detail::iterator_buffer::__anonea363bd90203
buffer_size	./vendor/fmt/include/base.h	/^  enum { buffer_size = 256 };$/;"	e	enum:detail::iterator_buffer::__anonea363bd90303
buffer_size	./vendor/fmt/include/format.h	/^  enum { buffer_size = std::numeric_limits<unsigned long long>::digits10 + 3 };$/;"	e	enum:format_int::__anon35c308471b03
buffer_size	./vendor/fmt/include/os.h	/^  size_t buffer_size = BUFSIZ > 32768 ? BUFSIZ : 32768;$/;"	m	struct:detail::ostream_params	typeref:typename:size_t
buffer_size	./vendor/fmt/include/os.h	/^constexpr auto buffer_size = detail::buffer_size();$/;"	v	typeref:typename:auto
buffer_size	./vendor/fmt/include/os.h	/^struct buffer_size {$/;"	s	namespace:detail
buffer_traits	./vendor/fmt/include/base.h	/^  explicit buffer_traits(size_t) {}$/;"	f	struct:detail::buffer_traits
buffer_traits	./vendor/fmt/include/base.h	/^struct buffer_traits {$/;"	s	namespace:detail
buffered_context	./vendor/fmt/include/base.h	/^using buffered_context = basic_format_context<basic_appender<Char>, Char>;$/;"	t	typeref:typename:basic_format_context<basic_appender<Char>,Char>
buffered_file	./vendor/fmt/include/os.h	/^  buffered_file() noexcept : file_(nullptr) {}$/;"	f	class:buffered_file
buffered_file	./vendor/fmt/include/os.h	/^  buffered_file(buffered_file&& other) noexcept : file_(other.file_) {$/;"	f	class:buffered_file
buffered_file	./vendor/fmt/include/os.h	/^  explicit buffered_file(FILE* f) : file_(f) {}$/;"	f	class:buffered_file
buffered_file	./vendor/fmt/include/os.h	/^class buffered_file {$/;"	c
build	./src/flecs.h	/^    T build(Func&& func) {$/;"	f	struct:flecs::_::node_builder	typeref:typename:T
build	./src/flecs.h	/^    T<Components ...> build() {$/;"	f	struct:flecs::_::builder	typeref:typename:T<Components...>
build_info	./src/flecs.h	/^    ecs_build_info_t build_info; \/**< Build info *\/$/;"	m	struct:__anon7d4a417c1b08	typeref:typename:ecs_build_info_t
builder	./src/flecs.h	/^    builder(builder&& f)  noexcept$/;"	f	struct:flecs::_::builder
builder	./src/flecs.h	/^    builder(const builder& f) $/;"	f	struct:flecs::_::builder
builder	./src/flecs.h	/^    builder(flecs::world_t *world)$/;"	f	struct:flecs::_::builder
builder	./src/flecs.h	/^struct builder : IBuilder<Base, Components ...>$/;"	s	namespace:flecs::_
burly_wood	./vendor/fmt/include/color.h	/^  burly_wood = 0xDEB887,               \/\/ rgb(222,184,135)$/;"	e	enum:color
busy_count	./src/flecs.h	/^        ecs_metric_t busy_count;$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1708	typeref:typename:ecs_metric_t
byte_rotl_	./vendor/STC/include/stc/priv/cstr_prv.h	/^    #define byte_rotl_(/;"	d
bytes	./vendor/fmt/include/format.h	/^  explicit bytes(string_view data) : data_(data) {}$/;"	f	class:bytes
bytes	./vendor/fmt/include/format.h	/^class bytes {$/;"	c
c	./vendor/STC/include/stc/priv/cregex_prv.c	/^    static struct { const char* c; int n, r; } cls[] = {$/;"	m	struct:_lexasciiclass::__anon4ce7005a0608	typeref:typename:const char *	file:
c	./vendor/STC/include/stc/priv/cregex_prv.c	/^    static struct { const char* c; uint32_t n, r; } cls[] = {$/;"	m	struct:_lexutfclass::__anon4ce7005a0708	typeref:typename:const char *	file:
c	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^        union {uint64_t i; char c[8];} r = {.i = crand()};$/;"	m	union:randomize::__anon08c2d9bb020a	typeref:typename:char[8]	file:
c	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^    union {uint64_t i; char c[8];} r = {.i = crand()};$/;"	m	union:randomize::__anon2f96ff66020a	typeref:typename:char[8]	file:
c	./vendor/STC/misc/benchmarks/plotbench/run_vc.bat	/^set c=VC-19.36$/;"	v
c	./vendor/STC/misc/examples/coroutines/generator.c	/^    int a, b, c;$/;"	m	struct:__anon399785530108	typeref:typename:int	file:
c	./vendor/STC/misc/examples/coroutines/triples.c	/^    int a, b, c;$/;"	m	struct:triples	typeref:typename:int	file:
c	./vendor/fmt/include/ranges.h	/^  const Container& c;$/;"	m	struct:detail::all	typeref:typename:const Container &
c1	./vendor/STC/include/stc/priv/utf8_tab.c	/^struct CaseMapping { uint16_t c1, c2, m2; };$/;"	m	struct:CaseMapping	typeref:typename:uint16_t	file:
c2	./vendor/STC/include/stc/priv/utf8_tab.c	/^struct CaseMapping { uint16_t c1, c2, m2; };$/;"	m	struct:CaseMapping	typeref:typename:uint16_t	file:
cJSON	./vendor/cjson/include/cJSON.h	/^typedef struct cJSON$/;"	s
cJSON	./vendor/cjson/include/cJSON.h	/^} cJSON;$/;"	t	typeref:struct:cJSON
cJSON_Array	./vendor/cjson/include/cJSON.h	/^#define cJSON_Array /;"	d
cJSON_ArrayForEach	./vendor/cjson/include/cJSON.h	/^#define cJSON_ArrayForEach(/;"	d
cJSON_False	./vendor/cjson/include/cJSON.h	/^#define cJSON_False /;"	d
cJSON_Hooks	./vendor/cjson/include/cJSON.h	/^typedef struct cJSON_Hooks$/;"	s
cJSON_Hooks	./vendor/cjson/include/cJSON.h	/^} cJSON_Hooks;$/;"	t	typeref:struct:cJSON_Hooks
cJSON_Invalid	./vendor/cjson/include/cJSON.h	/^#define cJSON_Invalid /;"	d
cJSON_IsReference	./vendor/cjson/include/cJSON.h	/^#define cJSON_IsReference /;"	d
cJSON_NULL	./vendor/cjson/include/cJSON.h	/^#define cJSON_NULL /;"	d
cJSON_Number	./vendor/cjson/include/cJSON.h	/^#define cJSON_Number /;"	d
cJSON_Object	./vendor/cjson/include/cJSON.h	/^#define cJSON_Object /;"	d
cJSON_Raw	./vendor/cjson/include/cJSON.h	/^#define cJSON_Raw /;"	d
cJSON_SetBoolValue	./vendor/cjson/include/cJSON.h	/^#define cJSON_SetBoolValue(/;"	d
cJSON_SetIntValue	./vendor/cjson/include/cJSON.h	/^#define cJSON_SetIntValue(/;"	d
cJSON_SetNumberValue	./vendor/cjson/include/cJSON.h	/^#define cJSON_SetNumberValue(/;"	d
cJSON_String	./vendor/cjson/include/cJSON.h	/^#define cJSON_String /;"	d
cJSON_StringIsConst	./vendor/cjson/include/cJSON.h	/^#define cJSON_StringIsConst /;"	d
cJSON_True	./vendor/cjson/include/cJSON.h	/^#define cJSON_True /;"	d
cJSON_Utils__h	./vendor/cjson/include/cJSON_Utils.h	/^#define cJSON_Utils__h$/;"	d
cJSON__h	./vendor/cjson/include/cJSON.h	/^#define cJSON__h$/;"	d
cJSON_bool	./vendor/cjson/include/cJSON.h	/^typedef int cJSON_bool;$/;"	t	typeref:typename:int
c_ALL	./vendor/STC/include/stc/cspan.h	/^#define c_ALL /;"	d
c_COLMAJOR	./vendor/STC/include/stc/cspan.h	/^typedef enum {c_ROWMAJOR, c_COLMAJOR} cspan_layout;$/;"	e	enum:__anone018744f0103
c_END	./vendor/STC/include/stc/cspan.h	/^#define c_END /;"	d
c_EXPAND	./vendor/STC/include/stc/common.h	/^#define c_EXPAND(/;"	d
c_JOIN	./vendor/STC/include/stc/algo/quicksort.h	/^  typedef i_key i_type, c_JOIN(i_type, _value), c_JOIN(i_type, _raw);$/;"	t	typeref:typename:i_key ()(i_type,_raw)
c_JOIN	./vendor/STC/include/stc/algo/quicksort.h	/^  typedef i_key i_type, c_JOIN(i_type, _value), c_JOIN(i_type, _raw);$/;"	t	typeref:typename:i_key ()(i_type,_value)
c_JOIN	./vendor/STC/include/stc/common.h	/^#define c_JOIN(a, b) c_JOIN0/;"	d
c_JOIN	./vendor/STC/include/stc/extend.h	/^} c_JOIN(i_type, _ext);$/;"	t	typeref:struct:__anon462bbae20108 ()(i_type,_ext)
c_JOIN0	./vendor/STC/include/stc/common.h	/^#define c_JOIN0(/;"	d
c_LITERAL	./vendor/STC/include/stc/common.h	/^    #define c_LITERAL(/;"	d
c_MACRO_OVERLOAD	./vendor/STC/include/stc/common.h	/^#define c_MACRO_OVERLOAD(/;"	d
c_NFILTERS	./vendor/STC/include/stc/algo/filter.h	/^#define c_NFILTERS /;"	d
c_NPOS	./vendor/STC/include/stc/common.h	/^#define c_NPOS /;"	d
c_NUMARGS	./vendor/STC/include/stc/common.h	/^#define c_NUMARGS(/;"	d
c_ROTL	./vendor/STC/include/stc/common.h	/^#define c_ROTL(/;"	d
c_ROWMAJOR	./vendor/STC/include/stc/cspan.h	/^typedef enum {c_ROWMAJOR, c_COLMAJOR} cspan_layout;$/;"	e	enum:__anone018744f0103
c_SV	./vendor/STC/include/stc/types.h	/^#define c_SV(sv) (int)(sv).size, (sv).buf \/\/ printf("%.*s\\n", c_SV(/;"	d
c_ZI	./vendor/STC/include/stc/common.h	/^#define c_ZI /;"	d
c_ZU	./vendor/STC/include/stc/common.h	/^#define c_ZU /;"	d
c_all_of	./vendor/STC/include/stc/algo/utility.h	/^#define c_all_of(/;"	d
c_all_of, c_any_of, c_none_of	./vendor/STC/docs/algorithm_api.md	/^### c_all_of, c_any_of, c_none_of$/;"	S	section:STC Algorithms""Generic algorithms
c_any_of	./vendor/STC/include/stc/algo/utility.h	/^#define c_any_of(/;"	d
c_arraylen	./vendor/STC/docs/algorithm_api.md	/^### c_arraylen$/;"	S	section:STC Algorithms""Generic algorithms
c_arraylen	./vendor/STC/include/stc/common.h	/^#define c_arraylen(/;"	d
c_assert	./vendor/STC/include/stc/common.h	/^    #define c_assert(/;"	d
c_atomic_dec_and_test	./vendor/STC/include/stc/arc.h	/^    #define c_atomic_dec_and_test(/;"	d
c_atomic_inc	./vendor/STC/include/stc/arc.h	/^    #define c_atomic_inc(/;"	d
c_auto	./vendor/STC/include/stc/algo/utility.h	/^#define c_auto(...) c_MACRO_OVERLOAD(c_auto,/;"	d
c_auto_2	./vendor/STC/include/stc/algo/utility.h	/^#define c_auto_2(/;"	d
c_auto_3	./vendor/STC/include/stc/algo/utility.h	/^#define c_auto_3(/;"	d
c_auto_4	./vendor/STC/include/stc/algo/utility.h	/^#define c_auto_4(/;"	d
c_calloc	./vendor/STC/include/stc/common.h	/^#define c_calloc(/;"	d
c_const_cast	./vendor/STC/include/stc/common.h	/^#define c_const_cast(/;"	d
c_container_of	./vendor/STC/include/stc/common.h	/^#define c_container_of(/;"	d
c_copy_if	./vendor/STC/include/stc/algo/utility.h	/^#define c_copy_if(/;"	d
c_default_clone	./vendor/STC/include/stc/common.h	/^#define c_default_clone(/;"	d
c_default_cmp	./vendor/STC/include/stc/common.h	/^#define c_default_cmp(/;"	d
c_default_drop	./vendor/STC/include/stc/common.h	/^#define c_default_drop(/;"	d
c_default_eq	./vendor/STC/include/stc/common.h	/^#define c_default_eq(/;"	d
c_default_hash	./vendor/STC/include/stc/common.h	/^#define c_default_hash /;"	d
c_default_less	./vendor/STC/include/stc/common.h	/^#define c_default_less(/;"	d
c_default_toraw	./vendor/STC/include/stc/common.h	/^#define c_default_toraw(/;"	d
c_defer	./vendor/STC/include/stc/common.h	/^#define c_defer(/;"	d
c_delete	./vendor/STC/include/stc/common.h	/^#define c_delete(/;"	d
c_drop	./vendor/STC/include/stc/common.h	/^#define c_drop(/;"	d
c_encoding	./vendor/fmt/include/chrono.h	/^  constexpr auto c_encoding() const noexcept -> unsigned { return value_; }$/;"	f	class:weekday	typeref:typename:auto
c_erase_if	./vendor/STC/include/stc/algo/utility.h	/^#define c_erase_if(/;"	d
c_eraseremove_if	./vendor/STC/include/stc/algo/utility.h	/^#define c_eraseremove_if(/;"	d
c_extend	./vendor/STC/include/stc/extend.h	/^#define c_extend(/;"	d
c_false	./vendor/STC/include/stc/types.h	/^#define c_false(/;"	d
c_filter	./vendor/STC/docs/algorithm_api.md	/^### c_filter$/;"	S	section:STC Algorithms""Integer range loops
c_filter	./vendor/STC/include/stc/algo/filter.h	/^#define c_filter(/;"	d
c_filter_from	./vendor/STC/include/stc/algo/filter.h	/^#define c_filter_from(/;"	d
c_find_from	./vendor/STC/include/stc/algo/utility.h	/^#define c_find_from(/;"	d
c_find_if	./vendor/STC/include/stc/algo/utility.h	/^#define c_find_if(/;"	d
c_find_if, c_copy_if, c_erase_if, c_eraseremove_if	./vendor/STC/docs/algorithm_api.md	/^### c_find_if, c_copy_if, c_erase_if, c_eraseremove_if$/;"	S	section:STC Algorithms""Generic algorithms
c_flt_counter	./vendor/STC/include/stc/algo/filter.h	/^#define c_flt_counter(/;"	d
c_flt_getcount	./vendor/STC/include/stc/algo/filter.h	/^#define c_flt_getcount(/;"	d
c_flt_map	./vendor/STC/include/stc/algo/filter.h	/^#define c_flt_map(/;"	d
c_flt_skip	./vendor/STC/include/stc/algo/filter.h	/^#define c_flt_skip(/;"	d
c_flt_skipwhile	./vendor/STC/include/stc/algo/filter.h	/^#define c_flt_skipwhile(/;"	d
c_flt_src	./vendor/STC/include/stc/algo/filter.h	/^#define c_flt_src /;"	d
c_flt_take	./vendor/STC/include/stc/algo/filter.h	/^#define c_flt_take(/;"	d
c_flt_takewhile	./vendor/STC/include/stc/algo/filter.h	/^#define c_flt_takewhile(/;"	d
c_foreach	./vendor/STC/include/stc/common.h	/^#define c_foreach(...) c_MACRO_OVERLOAD(c_foreach,/;"	d
c_foreach, c_forpair, c_foreach_n, c_foreach_it	./vendor/STC/docs/algorithm_api.md	/^### c_foreach, c_forpair, c_foreach_n, c_foreach_it$/;"	S	section:STC Algorithms""Ranged for-loops
c_foreach_3	./vendor/STC/include/stc/common.h	/^#define c_foreach_3(/;"	d
c_foreach_4	./vendor/STC/include/stc/common.h	/^#define c_foreach_4(/;"	d
c_foreach_it	./vendor/STC/include/stc/common.h	/^#define c_foreach_it(/;"	d
c_foreach_n	./vendor/STC/include/stc/common.h	/^#define c_foreach_n(/;"	d
c_foreach_rev	./vendor/STC/include/stc/common.h	/^#define c_foreach_rev(/;"	d
c_forlist	./vendor/STC/docs/algorithm_api.md	/^### c_forlist$/;"	S	section:STC Algorithms""Ranged for-loops
c_forlist	./vendor/STC/include/stc/common.h	/^    #define c_forlist(/;"	d
c_formatch	./vendor/STC/include/stc/cregex.h	/^#define c_formatch(/;"	d
c_forpair	./vendor/STC/include/stc/common.h	/^#define c_forpair(/;"	d
c_forrange	./vendor/STC/docs/algorithm_api.md	/^### c_forrange$/;"	S	section:STC Algorithms""Integer range loops
c_forrange	./vendor/STC/include/stc/common.h	/^#define c_forrange(...) c_MACRO_OVERLOAD(c_forrange,/;"	d
c_forrange_1	./vendor/STC/include/stc/common.h	/^#define c_forrange_1(/;"	d
c_forrange_2	./vendor/STC/include/stc/common.h	/^#define c_forrange_2(/;"	d
c_forrange_3	./vendor/STC/include/stc/common.h	/^#define c_forrange_3(/;"	d
c_forrange_4	./vendor/STC/include/stc/common.h	/^#define c_forrange_4(/;"	d
c_fortoken	./vendor/STC/include/stc/csview.h	/^#define c_fortoken(/;"	d
c_fortoken_sv	./vendor/STC/include/stc/csview.h	/^#define c_fortoken_sv(/;"	d
c_free	./vendor/STC/include/stc/common.h	/^#define c_free(/;"	d
c_hash_mix	./vendor/STC/include/stc/common.h	/^    #define c_hash_mix(/;"	d
c_hash_n	./vendor/STC/include/stc/common.h	/^STC_INLINE uint64_t c_hash_n(const void* key, intptr_t len) {$/;"	f	typeref:typename:STC_INLINE uint64_t
c_hash_pod	./vendor/STC/include/stc/common.h	/^#define c_hash_pod(/;"	d
c_hash_str	./vendor/STC/include/stc/common.h	/^STC_INLINE uint64_t c_hash_str(const char *str)$/;"	f	typeref:typename:STC_INLINE uint64_t
c_i2u_size	./vendor/STC/include/stc/common.h	/^#define c_i2u_size(/;"	d
c_init	./vendor/STC/include/stc/common.h	/^    #define c_init(/;"	d
c_init, c_drop	./vendor/STC/docs/algorithm_api.md	/^### c_init, c_drop$/;"	S	section:STC Algorithms""Generic algorithms
c_is_forward	./vendor/STC/include/stc/priv/template.h	/^  #define c_is_forward /;"	d
c_litstrlen	./vendor/STC/include/stc/common.h	/^#define c_litstrlen(/;"	d
c_malloc	./vendor/STC/include/stc/common.h	/^#define c_malloc(/;"	d
c_malloc, c_calloc, c_realloc, c_free	./vendor/STC/docs/algorithm_api.md	/^### c_malloc, c_calloc, c_realloc, c_free$/;"	S	section:STC Algorithms""Generic algorithms
c_memcmp	./vendor/STC/include/stc/common.h	/^#define c_memcmp(/;"	d
c_memcmp_eq	./vendor/STC/include/stc/common.h	/^#define c_memcmp_eq(/;"	d
c_memcpy	./vendor/STC/include/stc/common.h	/^#define c_memcpy(/;"	d
c_memmove	./vendor/STC/include/stc/common.h	/^#define c_memmove(/;"	d
c_memset	./vendor/STC/include/stc/common.h	/^#define c_memset(/;"	d
c_more	./vendor/STC/include/stc/priv/template.h	/^  #define c_more /;"	d
c_new	./vendor/STC/include/stc/common.h	/^    #define c_new(/;"	d
c_new, c_delete	./vendor/STC/docs/algorithm_api.md	/^### c_new, c_delete$/;"	S	section:STC Algorithms""Generic algorithms
c_new_n	./vendor/STC/include/stc/common.h	/^#define c_new_n(/;"	d
c_next_pow2	./vendor/STC/include/stc/common.h	/^STC_INLINE intptr_t c_next_pow2(intptr_t n) {$/;"	f	typeref:typename:STC_INLINE intptr_t
c_no_atomic	./vendor/STC/include/stc/priv/template.h	/^  #define c_no_atomic /;"	d
c_no_clone	./vendor/STC/include/stc/priv/template.h	/^  #define c_no_clone /;"	d
c_no_emplace	./vendor/STC/include/stc/priv/template.h	/^  #define c_no_emplace /;"	d
c_no_hash	./vendor/STC/include/stc/priv/template.h	/^  #define c_no_hash /;"	d
c_none_of	./vendor/STC/include/stc/algo/utility.h	/^#define c_none_of(/;"	d
c_option	./vendor/STC/include/stc/priv/template.h	/^  #define c_option(/;"	d
c_popcount	./vendor/STC/include/stc/cbits.h	/^  STC_INLINE int c_popcount(uintptr_t x) { \/* http:\/\/en.wikipedia.org\/wiki\/Hamming_weight */;"	f	typeref:typename:STC_INLINE int
c_popcount	./vendor/STC/include/stc/cbits.h	/^  STC_INLINE int c_popcount(uintptr_t x) { return _gnu_popc(x); }$/;"	f	typeref:typename:STC_INLINE int
c_popcount	./vendor/STC/include/stc/cbits.h	/^  STC_INLINE int c_popcount(uintptr_t x) { return _msc_popc(x); }$/;"	f	typeref:typename:STC_INLINE int
c_ptr	./src/flecs.h	/^    const flecs::iter_t* c_ptr() const {$/;"	f	struct:flecs::iter	typeref:typename:const flecs::iter_t *
c_ptr	./src/flecs.h	/^    snapshot_t* c_ptr() const {$/;"	f	struct:flecs::snapshot	typeref:typename:snapshot_t *
c_ptr	./src/flecs.h	/^    world_t* c_ptr() const {$/;"	f	struct:flecs::world	typeref:typename:world_t *
c_realloc	./vendor/STC/include/stc/common.h	/^#define c_realloc(/;"	d
c_safe_cast	./vendor/STC/include/stc/common.h	/^#define c_safe_cast(/;"	d
c_scope	./vendor/STC/include/stc/common.h	/^#define c_scope(...) c_MACRO_OVERLOAD(c_scope,/;"	d
c_scope_2	./vendor/STC/include/stc/common.h	/^#define c_scope_2(/;"	d
c_scope_3	./vendor/STC/include/stc/common.h	/^#define c_scope_3(/;"	d
c_sizeof	./vendor/STC/include/stc/common.h	/^#define c_sizeof /;"	d
c_static_assert	./vendor/STC/include/stc/common.h	/^#define c_static_assert(/;"	d
c_str	./src/flecs.h	/^    const char* c_str() const {$/;"	f	struct:flecs::string	typeref:typename:const char *
c_str	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 auto c_str() const -> const char* {$/;"	f	class:format_int	typeref:typename:const char *
c_str	./vendor/fmt/include/format.h	/^  auto c_str() const -> const char* { return &buffer_[0]; }$/;"	f	class:detail::to_utf8	typeref:typename:const char *
c_str	./vendor/fmt/include/format.h	/^  auto c_str() const -> const wchar_t* { return &buffer_[0]; }$/;"	f	class:detail::utf8_to_utf16	typeref:typename:const wchar_t *
c_str	./vendor/fmt/include/os.h	/^  auto c_str() const -> const Char* { return data_; }$/;"	f	class:basic_cstring_view	typeref:typename:const Char *
c_strlen	./vendor/STC/include/stc/common.h	/^#define c_strlen(/;"	d
c_strncmp	./vendor/STC/include/stc/common.h	/^#define c_strncmp(/;"	d
c_strnstrn	./vendor/STC/include/stc/common.h	/^STC_INLINE char* c_strnstrn(const char *str, intptr_t slen,$/;"	f	typeref:typename:STC_INLINE char *
c_sv	./vendor/STC/include/stc/types.h	/^#define c_sv(...) c_MACRO_OVERLOAD(c_sv,/;"	d
c_sv_1	./vendor/STC/include/stc/types.h	/^#define c_sv_1(/;"	d
c_sv_2	./vendor/STC/include/stc/types.h	/^#define c_sv_2(/;"	d
c_swap	./vendor/STC/include/stc/common.h	/^#define c_swap(/;"	d
c_swap, c_const_cast	./vendor/STC/docs/algorithm_api.md	/^### c_swap, c_const_cast$/;"	S	section:STC Algorithms""Generic algorithms
c_true	./vendor/STC/include/stc/types.h	/^#define c_true(/;"	d
c_u2i_size	./vendor/STC/include/stc/common.h	/^#define c_u2i_size(/;"	d
c_uless	./vendor/STC/include/stc/common.h	/^#define c_uless(/;"	d
c_umul128	./vendor/STC/include/stc/common.h	/^    #define c_umul128(/;"	d
c_use_cmp	./vendor/STC/include/stc/priv/template.h	/^  #define c_use_cmp /;"	d
c_use_eq	./vendor/STC/include/stc/priv/template.h	/^  #define c_use_eq /;"	d
c_with	./vendor/STC/include/stc/common.h	/^#define c_with(...) c_MACRO_OVERLOAD(c_with,/;"	d
c_with_2	./vendor/STC/include/stc/common.h	/^#define c_with_2(/;"	d
c_with_3	./vendor/STC/include/stc/common.h	/^#define c_with_3(/;"	d
c_zv	./vendor/STC/include/stc/types.h	/^#define c_zv(/;"	d
cache	./src/flecs.c	/^    ecs_table_cache_t cache; \/* table_cache<ecs_table_record_t> *\/$/;"	m	struct:ecs_id_record_t	typeref:typename:ecs_table_cache_t	file:
cache	./src/flecs.c	/^    ecs_table_cache_t cache;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_table_cache_t	file:
cache	./src/flecs.c	/^    ecs_trav_cache_t cache;$/;"	m	struct:__anon7d4a41772d08	typeref:typename:ecs_trav_cache_t	file:
cache	./src/flecs.c	/^    ecs_trav_up_cache_t cache;$/;"	m	struct:__anon7d4a41772a08	typeref:typename:ecs_trav_up_cache_t	file:
cache	./src/flecs.c	/^    struct ecs_table_cache_t *cache;$/;"	m	struct:ecs_table_cache_hdr_t	typeref:struct:ecs_table_cache_t *	file:
cache	./src/flecs.h	/^    ecs_iter_cache_t cache;       \/* Inline arrays to reduce allocations *\/$/;"	m	struct:ecs_iter_private_t	typeref:typename:ecs_iter_cache_t
cache_accessor	./vendor/fmt/include/format-inl.h	/^template <> struct cache_accessor<double> {$/;"	s	namespace:detail::dragonbox
cache_accessor	./vendor/fmt/include/format-inl.h	/^template <> struct cache_accessor<float> {$/;"	s	namespace:detail::dragonbox
cache_elem	./src/flecs.c	/^    int32_t cache_elem;$/;"	m	struct:__anon7d4a41772a08	typeref:typename:int32_t	file:
cache_entry_type	./vendor/fmt/include/format-inl.h	/^  using cache_entry_type = typename cache_accessor<T>::cache_entry_type;$/;"	t	function:detail::dragonbox::shorter_interval_case	typeref:typename:cache_accessor<T>::cache_entry_type
cache_entry_type	./vendor/fmt/include/format-inl.h	/^  using cache_entry_type = typename cache_accessor<T>::cache_entry_type;$/;"	t	function:detail::dragonbox::to_decimal	typeref:typename:cache_accessor<T>::cache_entry_type
cache_entry_type	./vendor/fmt/include/format-inl.h	/^  using cache_entry_type = uint128_fallback;$/;"	t	struct:detail::dragonbox::cache_accessor	typeref:typename:uint128_fallback
cache_entry_type	./vendor/fmt/include/format-inl.h	/^  using cache_entry_type = uint64_t;$/;"	t	struct:detail::dragonbox::cache_accessor	typeref:typename:uint64_t
cache_purge_timeout	./src/flecs.c	/^    double cache_purge_timeout;$/;"	m	struct:ecs_http_server_t	typeref:typename:double	file:
cache_purge_timeout	./src/flecs.h	/^    double cache_purge_timeout;       \/**< Cache purge timeout (for purging cache entries) *\/$/;"	m	struct:__anon7d4a417c0d08	typeref:typename:double
cache_timeout	./src/flecs.c	/^    double cache_timeout;$/;"	m	struct:ecs_http_server_t	typeref:typename:double	file:
cache_timeout	./src/flecs.h	/^    double cache_timeout;             \/**< Cache invalidation timeout (0 disables caching) *\/$/;"	m	struct:__anon7d4a417c0d08	typeref:typename:double
cadet_blue	./vendor/fmt/include/color.h	/^  cadet_blue = 0x5F9EA0,               \/\/ rgb(95,158,160)$/;"	e	enum:color
calc_num_blocks_for_capacity	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] static constexpr auto calc_num_blocks_for_capacity(size_t capacity) {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:auto
calc_num_buckets	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] static constexpr auto calc_num_buckets(uint8_t shifts) -> size_t {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:size_t
calc_shifts_for_size	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] constexpr auto calc_shifts_for_size(size_t s) const -> uint8_t {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:uint8_t
call	./vendor/STC/misc/examples/hashmaps/hashmap.c	/^const char* call(const char* number) {$/;"	f	typeref:typename:const char *
callback	./src/flecs.c	/^    ecs_http_reply_action_t callback;$/;"	m	struct:ecs_http_server_t	typeref:typename:ecs_http_reply_action_t	file:
callback	./src/flecs.c	/^    ecs_os_thread_callback_t callback;$/;"	m	struct:ecs_win_thread_t	typeref:typename:ecs_os_thread_callback_t	file:
callback	./src/flecs.h	/^    ecs_http_reply_action_t callback; \/**< Function called for each request  *\/$/;"	m	struct:__anon7d4a417c0d08	typeref:typename:ecs_http_reply_action_t
callback	./src/flecs.h	/^    ecs_iter_action_t callback;   \/* Callback of system or observer *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_iter_action_t
callback	./src/flecs.h	/^    ecs_iter_action_t callback; \/**< See ecs_observer_desc_t::callback *\/$/;"	m	struct:ecs_observer_t	typeref:typename:ecs_iter_action_t
callback	./src/flecs.h	/^    ecs_iter_action_t callback;$/;"	m	struct:ecs_observer_desc_t	typeref:typename:ecs_iter_action_t
callback	./src/flecs.h	/^    ecs_iter_action_t callback;$/;"	m	struct:ecs_system_desc_t	typeref:typename:ecs_iter_action_t
callbacks	./src/log.c	/^  Callback callbacks[MAX_CALLBACKS];$/;"	m	struct:__anon6383736c0208	typeref:typename:Callback[]	file:
calloc_	./src/flecs.h	/^    ecs_os_api_calloc_t calloc_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_calloc_t
camera	./src/components.h	/^	Camera2D camera;$/;"	m	struct:CameraComponent	typeref:typename:Camera2D
canary_	./src/flecs.h	/^    int8_t canary_;$/;"	m	struct:ecs_pipeline_stats_t	typeref:typename:int8_t
cap	./vendor/STC/include/c11/fmt.h	/^    intptr_t cap, len;$/;"	m	struct:__anon6f5400bc0108	typeref:typename:intptr_t
cap	./vendor/STC/include/stc/types.h	/^typedef struct { cstr_value* data; intptr_t size, cap; } cstr_buf;$/;"	m	struct:__anon0ab7b7af0408	typeref:typename:intptr_t
capacity	./src/cvec.h	/^	int capacity;$/;"	m	struct:__anonbf71e1100108	typeref:typename:int
capacity	./src/cvec.h	/^	int capacity;$/;"	m	struct:__anonbf71e1100208	typeref:typename:int
capacity	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] constexpr auto capacity() const -> size_t {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:size_t
capacity	./vendor/fmt/include/base.h	/^  constexpr auto capacity() const noexcept -> size_t { return capacity_; }$/;"	f	class:detail::buffer	typeref:typename:auto
capacity	./vendor/raylib5/include/raylib.h	/^    unsigned int capacity;          \/\/ Events max entries (MAX_AUTOMATION_EVENTS)$/;"	m	struct:AutomationEventList	typeref:typename:unsigned int
capacity	./vendor/raylib5/include/raylib.h	/^    unsigned int capacity;          \/\/ Filepaths max entries$/;"	m	struct:FilePathList	typeref:typename:unsigned int
capacity_	./vendor/fmt/include/base.h	/^  size_t capacity_;$/;"	m	class:detail::buffer	typeref:typename:size_t
carc_null	./vendor/STC/include/stc/arc.h	/^#define carc_null /;"	d
carrier_uint	./vendor/fmt/include/format-inl.h	/^  using carrier_uint = float_info<double>::carrier_uint;$/;"	t	struct:detail::dragonbox::cache_accessor	typeref:typename:float_info<double>::carrier_uint
carrier_uint	./vendor/fmt/include/format-inl.h	/^  using carrier_uint = float_info<float>::carrier_uint;$/;"	t	struct:detail::dragonbox::cache_accessor	typeref:typename:float_info<float>::carrier_uint
carrier_uint	./vendor/fmt/include/format-inl.h	/^  using carrier_uint = typename float_info<T>::carrier_uint;$/;"	t	function:detail::dragonbox::to_decimal	typeref:typename:float_info<T>::carrier_uint
carrier_uint	./vendor/fmt/include/format.h	/^    using carrier_uint = typename dragonbox::float_info<Float>::carrier_uint;$/;"	t	function:detail::basic_fp::assign	typeref:typename:dragonbox::float_info<Float>::carrier_uint
carrier_uint	./vendor/fmt/include/format.h	/^  using carrier_uint = detail::uint128_t;$/;"	t	struct:detail::dragonbox::float_info	typeref:typename:detail::uint128_t
carrier_uint	./vendor/fmt/include/format.h	/^  using carrier_uint = typename info::carrier_uint;$/;"	t	function:detail::format_hexfloat	typeref:typename:info::carrier_uint
carrier_uint	./vendor/fmt/include/format.h	/^  using carrier_uint = uint32_t;$/;"	t	struct:detail::dragonbox::float_info	typeref:typename:uint32_t
carrier_uint	./vendor/fmt/include/format.h	/^  using carrier_uint = uint64_t;$/;"	t	struct:detail::dragonbox::float_info	typeref:typename:uint64_t
cascade	./src/flecs.h	/^    Base& cascade() {$/;"	f	struct:flecs::term_id_builder_i	typeref:typename:Base &
cascade	./src/flecs.h	/^    Base& cascade(flecs::entity_t trav = 0) {$/;"	f	struct:flecs::term_id_builder_i	typeref:typename:Base &
cascade_by	./src/flecs.c	/^    int32_t cascade_by;              \/* Identify cascade term *\/$/;"	m	struct:ecs_query_t	typeref:typename:int32_t	file:
case_T	./src/flecs.c	/^#define case_T(/;"	d	file:
case_T_checked	./src/flecs.c	/^#define case_T_checked(/;"	d	file:
casefold_len	./vendor/STC/include/stc/priv/utf8_tab.c	/^enum { casefold_len = 192 };$/;"	e	enum:__anon576026220103	file:
casemappings	./vendor/STC/include/stc/priv/utf8_tab.c	/^static struct CaseMapping casemappings[] = {$/;"	v	typeref:struct:CaseMapping[]	file:
cases_T_bool	./src/flecs.c	/^#define cases_T_bool(/;"	d	file:
cases_T_float	./src/flecs.c	/^#define cases_T_float(/;"	d	file:
cases_T_signed	./src/flecs.c	/^#define cases_T_signed(/;"	d	file:
cases_T_unsigned	./src/flecs.c	/^#define cases_T_unsigned(/;"	d	file:
catomic_long	./vendor/STC/include/stc/types.h	/^    typedef _Atomic(long) catomic_long;$/;"	t
catomic_long	./vendor/STC/include/stc/types.h	/^    typedef long catomic_long;$/;"	t	typeref:typename:long
cbegin	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    const_iterator cbegin() const { \/\/ NOLINT(modernize-use-nodiscard)$/;"	f	class:robin_hood::detail::Table	typeref:typename:const_iterator
cbegin	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] constexpr auto cbegin() const -> const_iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:const_iterator
cbegin	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto cbegin() const noexcept -> const_iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:auto
cbegin	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    const_iterator cbegin() const noexcept$/;"	f	class:emhash7::HashMap	typeref:typename:const_iterator
cbegin	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    const_iterator cbegin() const$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:const_iterator
cbegin	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  const_iterator cbegin() const noexcept {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:const_iterator
cbegin	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  const_iterator cbegin() const noexcept { return m_ht.cbegin(); }$/;"	f	class:tsl::robin_map	typeref:typename:const_iterator
cbits_clone	./vendor/STC/include/stc/cbits.h	/^STC_INLINE cbits cbits_clone(cbits other) {$/;"	f	typeref:typename:STC_INLINE cbits
cbits_copy	./vendor/STC/include/stc/cbits.h	/^STC_INLINE cbits* cbits_copy(cbits* self, const cbits* other) {$/;"	f	typeref:typename:STC_INLINE cbits *
cbits_drop	./vendor/STC/include/stc/cbits.h	/^STC_INLINE void cbits_drop(cbits* self) { i_free(self->buffer, _cbits_bytes(self->_size)); }$/;"	f	typeref:typename:STC_INLINE void
cbits_init	./vendor/STC/include/stc/cbits.h	/^STC_INLINE cbits cbits_init(void) { return c_LITERAL(cbits){NULL}; }$/;"	f	typeref:typename:STC_INLINE cbits
cbits_move	./vendor/STC/include/stc/cbits.h	/^STC_INLINE cbits cbits_move(cbits* self) {$/;"	f	typeref:typename:STC_INLINE cbits
cbits_resize	./vendor/STC/include/stc/cbits.h	/^STC_INLINE void cbits_resize(cbits* self, const intptr_t size, const bool value) {$/;"	f	typeref:typename:STC_INLINE void
cbits_size	./vendor/STC/include/stc/cbits.h	/^STC_INLINE intptr_t cbits_size(const cbits* self) { return self->_size; }$/;"	f	typeref:typename:STC_INLINE intptr_t
cbits_take	./vendor/STC/include/stc/cbits.h	/^STC_INLINE cbits* cbits_take(cbits* self, cbits other) {$/;"	f	typeref:typename:STC_INLINE cbits *
cbits_with_pattern	./vendor/STC/include/stc/cbits.h	/^STC_INLINE cbits cbits_with_pattern(const intptr_t size, const uintptr_t pattern) {$/;"	f	typeref:typename:STC_INLINE cbits
cbits_with_size	./vendor/STC/include/stc/cbits.h	/^STC_INLINE cbits cbits_with_size(const intptr_t size, const bool value) {$/;"	f	typeref:typename:STC_INLINE cbits
cbox_null	./vendor/STC/include/stc/box.h	/^#define cbox_null /;"	d
ccharptr	./vendor/STC/include/stc/common.h	/^typedef const char* ccharptr;$/;"	t	typeref:typename:const char *
ccharptr_clone	./vendor/STC/include/stc/common.h	/^#define ccharptr_clone(/;"	d
ccharptr_cmp	./vendor/STC/include/stc/common.h	/^#define ccharptr_cmp(/;"	d
ccharptr_drop	./vendor/STC/include/stc/common.h	/^#define ccharptr_drop(/;"	d
ccharptr_eq	./vendor/STC/include/stc/common.h	/^#define ccharptr_eq(/;"	d
ccharptr_hash	./vendor/STC/include/stc/common.h	/^#define ccharptr_hash(/;"	d
cclass	./vendor/STC/include/stc/priv/cregex_prv.c	/^    _Reclass cclass[_NCLASS]; \/* .data *\/$/;"	m	struct:_Reprog	typeref:typename:_Reclass[]	file:
cco_await	./vendor/STC/include/stc/coroutine.h	/^#define cco_await(promise) cco_await_/;"	d
cco_await_and_return	./vendor/STC/include/stc/coroutine.h	/^#define cco_await_and_return(/;"	d
cco_await_call	./vendor/STC/include/stc/coroutine.h	/^#define cco_await_call(...) c_MACRO_OVERLOAD(cco_await_call,/;"	d
cco_await_call_1	./vendor/STC/include/stc/coroutine.h	/^#define cco_await_call_1(/;"	d
cco_await_call_2	./vendor/STC/include/stc/coroutine.h	/^#define cco_await_call_2(/;"	d
cco_await_sem	./vendor/STC/include/stc/coroutine.h	/^#define cco_await_sem(sem) cco_await_sem_/;"	d
cco_await_sem_and_return	./vendor/STC/include/stc/coroutine.h	/^#define cco_await_sem_and_return(/;"	d
cco_await_sem_v	./vendor/STC/include/stc/coroutine.h	/^#define cco_await_sem_v(/;"	d
cco_await_task	./vendor/STC/include/stc/coroutine.h	/^#define cco_await_task(...) c_MACRO_OVERLOAD(cco_await_task,/;"	d
cco_await_task_2	./vendor/STC/include/stc/coroutine.h	/^#define cco_await_task_2(/;"	d
cco_await_task_3	./vendor/STC/include/stc/coroutine.h	/^#define cco_await_task_3(/;"	d
cco_await_timer	./vendor/STC/include/stc/coroutine.h	/^#define cco_await_timer(tm, sec) cco_await_timer_/;"	d
cco_await_timer_v	./vendor/STC/include/stc/coroutine.h	/^#define cco_await_timer_v(...) c_MACRO_OVERLOAD(cco_await_timer_v,/;"	d
cco_await_timer_v_2	./vendor/STC/include/stc/coroutine.h	/^#define cco_await_timer_v_2(/;"	d
cco_await_timer_v_3	./vendor/STC/include/stc/coroutine.h	/^#define cco_await_timer_v_3(/;"	d
cco_await_v	./vendor/STC/include/stc/coroutine.h	/^#define cco_await_v(/;"	d
cco_blocking_call	./vendor/STC/include/stc/coroutine.h	/^#define cco_blocking_call(/;"	d
cco_blocking_task	./vendor/STC/include/stc/coroutine.h	/^#define cco_blocking_task(...) c_MACRO_OVERLOAD(cco_blocking_task,/;"	d
cco_blocking_task_1	./vendor/STC/include/stc/coroutine.h	/^#define cco_blocking_task_1(/;"	d
cco_blocking_task_3	./vendor/STC/include/stc/coroutine.h	/^#define cco_blocking_task_3(/;"	d
cco_cancel	./vendor/STC/include/stc/coroutine.h	/^#define cco_cancel /;"	d
cco_cast_task	./vendor/STC/include/stc/coroutine.h	/^#define cco_cast_task(/;"	d
cco_cleanup	./vendor/STC/include/stc/coroutine.h	/^#define cco_cleanup /;"	d
cco_done	./vendor/STC/include/stc/coroutine.h	/^#define cco_done(/;"	d
cco_final	./vendor/STC/include/stc/coroutine.h	/^#define cco_final /;"	d
cco_initial	./vendor/STC/include/stc/coroutine.h	/^#define cco_initial(/;"	d
cco_iter_struct	./vendor/STC/include/stc/coroutine.h	/^#define cco_iter_struct(/;"	d
cco_reset	./vendor/STC/include/stc/coroutine.h	/^#define cco_reset(/;"	d
cco_result	./vendor/STC/include/stc/coroutine.h	/^} cco_result;$/;"	t	typeref:enum:__anone7a129120203
cco_resume_task	./vendor/STC/include/stc/coroutine.h	/^#define cco_resume_task(/;"	d
cco_return	./vendor/STC/include/stc/coroutine.h	/^#define cco_return /;"	d
cco_routine	./vendor/STC/include/stc/coroutine.h	/^#define cco_routine(/;"	d
cco_runtime	./vendor/STC/include/stc/coroutine.h	/^typedef struct cco_runtime {$/;"	s
cco_runtime	./vendor/STC/include/stc/coroutine.h	/^} cco_runtime;$/;"	t	typeref:struct:cco_runtime
cco_scheduler	./vendor/STC/misc/examples/coroutines/scheduler.c	/^} cco_scheduler;$/;"	t	typeref:struct:__anonaf51d64b0108	file:
cco_scheduler_drop	./vendor/STC/misc/examples/coroutines/scheduler.c	/^void cco_scheduler_drop(cco_scheduler* sched) {$/;"	f	typeref:typename:void
cco_scheduler_run	./vendor/STC/misc/examples/coroutines/scheduler.c	/^int cco_scheduler_run(cco_scheduler* sched) {$/;"	f	typeref:typename:int
cco_sem	./vendor/STC/include/stc/coroutine.h	/^typedef struct { intptr_t count; } cco_sem;$/;"	t	typeref:struct:__anone7a129120308
cco_sem_from	./vendor/STC/include/stc/coroutine.h	/^#define cco_sem_from(/;"	d
cco_sem_release	./vendor/STC/include/stc/coroutine.h	/^#define cco_sem_release(/;"	d
cco_sem_set	./vendor/STC/include/stc/coroutine.h	/^#define cco_sem_set(/;"	d
cco_sleep	./vendor/STC/include/stc/coroutine.h	/^    static inline void cco_sleep(double sec) {$/;"	f	typeref:typename:void
cco_state	./vendor/STC/misc/examples/coroutines/cointerleave.c	/^    int cco_state;$/;"	m	struct:GenValue	typeref:typename:int	file:
cco_state	./vendor/STC/misc/examples/coroutines/cointerleave.c	/^    int cco_state;$/;"	m	struct:Generator	typeref:typename:int	file:
cco_state	./vendor/STC/misc/examples/coroutines/coread.c	/^    int cco_state;$/;"	m	struct:file_read	typeref:typename:int	file:
cco_state	./vendor/STC/misc/examples/coroutines/coroutines.c	/^    int cco_state;$/;"	m	struct:combined	typeref:typename:int	file:
cco_state	./vendor/STC/misc/examples/coroutines/coroutines.c	/^    int cco_state;$/;"	m	struct:fibonacci	typeref:typename:int	file:
cco_state	./vendor/STC/misc/examples/coroutines/coroutines.c	/^    int cco_state;$/;"	m	struct:prime	typeref:typename:int	file:
cco_state	./vendor/STC/misc/examples/coroutines/cotasks1.c	/^    int cco_state;$/;"	m	struct:consume_items	typeref:typename:int	file:
cco_state	./vendor/STC/misc/examples/coroutines/cotasks1.c	/^    int cco_state;$/;"	m	struct:next_value	typeref:typename:int	file:
cco_state	./vendor/STC/misc/examples/coroutines/cotasks1.c	/^    int cco_state;$/;"	m	struct:produce_items	typeref:typename:int	file:
cco_state	./vendor/STC/misc/examples/coroutines/dining_philosophers.c	/^    int cco_state; \/\/ required$/;"	m	struct:Dining	typeref:typename:int	file:
cco_state	./vendor/STC/misc/examples/coroutines/dining_philosophers.c	/^    int cco_state; \/\/ required$/;"	m	struct:Philosopher	typeref:typename:int	file:
cco_state	./vendor/STC/misc/examples/coroutines/triples.c	/^    int cco_state;$/;"	m	struct:triples	typeref:typename:int	file:
cco_stop	./vendor/STC/include/stc/coroutine.h	/^#define cco_stop(/;"	d
cco_suspended	./vendor/STC/include/stc/coroutine.h	/^#define cco_suspended(/;"	d
cco_take	./vendor/STC/include/stc/coroutine.h	/^#define cco_take(/;"	d
cco_takewhile	./vendor/STC/include/stc/coroutine.h	/^#define cco_takewhile(/;"	d
cco_task	./vendor/STC/include/stc/coroutine.h	/^typedef cco_task_struct(cco_task, \/**\/) cco_task;$/;"	t
cco_task_struct	./vendor/STC/include/stc/coroutine.h	/^#define cco_task_struct(/;"	d
cco_time	./vendor/STC/include/stc/coroutine.h	/^    static inline double cco_time(void) { \/* seconds since epoch *\/$/;"	f	typeref:typename:double
cco_timer	./vendor/STC/include/stc/coroutine.h	/^typedef struct { double interval, start; } cco_timer;$/;"	t	typeref:struct:__anone7a129120408
cco_timer_elapsed	./vendor/STC/include/stc/coroutine.h	/^static inline double cco_timer_elapsed(cco_timer* tm) {$/;"	f	typeref:typename:double
cco_timer_expired	./vendor/STC/include/stc/coroutine.h	/^static inline bool cco_timer_expired(cco_timer* tm) {$/;"	f	typeref:typename:bool
cco_timer_from	./vendor/STC/include/stc/coroutine.h	/^static inline cco_timer cco_timer_from(double sec) {$/;"	f	typeref:typename:cco_timer
cco_timer_remaining	./vendor/STC/include/stc/coroutine.h	/^static inline double cco_timer_remaining(cco_timer* tm) {$/;"	f	typeref:typename:double
cco_timer_restart	./vendor/STC/include/stc/coroutine.h	/^static inline void cco_timer_restart(cco_timer* tm) {$/;"	f	typeref:typename:void
cco_timer_start	./vendor/STC/include/stc/coroutine.h	/^static inline void cco_timer_start(cco_timer* tm, double sec) {$/;"	f	typeref:typename:void
cco_yield	./vendor/STC/include/stc/coroutine.h	/^#define cco_yield() cco_yield_/;"	d
cco_yield_final	./vendor/STC/include/stc/coroutine.h	/^#define cco_yield_final() cco_yield_final_/;"	d
cco_yield_final_v	./vendor/STC/include/stc/coroutine.h	/^#define cco_yield_final_v(/;"	d
cco_yield_v	./vendor/STC/include/stc/coroutine.h	/^#define cco_yield_v(/;"	d
cend	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    const_iterator cend() const { \/\/ NOLINT(modernize-use-nodiscard)$/;"	f	class:robin_hood::detail::Table	typeref:typename:const_iterator
cend	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] constexpr auto cend() const -> const_iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:const_iterator
cend	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto cend() const noexcept -> const_iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:auto
cend	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline const_iterator cend() const { return {this, _num_buckets}; }$/;"	f	class:emhash7::HashMap	typeref:typename:const_iterator
cend	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    const_iterator cend() const$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:const_iterator
cend	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  const_iterator cend() const noexcept {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:const_iterator
cend	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  const_iterator cend() const noexcept { return m_ht.cend(); }$/;"	f	class:tsl::robin_map	typeref:typename:const_iterator
cextent_t	./vendor/STC/include/stc/cspan.h	/^typedef STC_CSPAN_INDEX_TYPE cextent_t, cstride_t;$/;"	t	typeref:typename:STC_CSPAN_INDEX_TYPE
chain_it	./src/flecs.h	/^    ecs_iter_t *chain_it;         \/* Optional, allows for creating iterator chains *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_iter_t *
changed	./src/flecs.h	/^    bool changed() const {$/;"	f	struct:flecs::query_base	typeref:typename:bool
changed	./src/flecs.h	/^    bool changed() {$/;"	f	struct:flecs::iter	typeref:typename:bool
channels	./vendor/raylib5/include/raylib.h	/^    unsigned int channels;      \/\/ Number of channels (1-mono, 2-stereo, ...)$/;"	m	struct:AudioStream	typeref:typename:unsigned int
channels	./vendor/raylib5/include/raylib.h	/^    unsigned int channels;      \/\/ Number of channels (1-mono, 2-stereo, ...)$/;"	m	struct:Wave	typeref:typename:unsigned int
char_converter	./vendor/fmt/include/printf.h	/^  explicit char_converter(basic_format_arg<Context>& arg) : arg_(arg) {}$/;"	f	class:detail::char_converter
char_converter	./vendor/fmt/include/printf.h	/^template <typename Context> class char_converter {$/;"	c	namespace:detail
char_set	./vendor/fmt/include/base.h	/^  char_set = set(type::char_type),$/;"	e	enum:detail::__anonea363bd90103
char_t	./src/flecs.h	/^using char_t = ecs_char_t;$/;"	t	namespace:flecs	typeref:typename:ecs_char_t
char_t	./vendor/fmt/include/base.h	/^  using char_t = typename S::char_type;$/;"	t	function:detail::check_format_string	typeref:typename:S::char_type
char_t	./vendor/fmt/include/base.h	/^using char_t = typename V::value_type;$/;"	t	typeref:typename:V::value_type
char_t	./vendor/fmt/include/compile.h	/^  using char_t = remove_cvref_t<decltype(Str.data[0])>;$/;"	t	function:literals::operator ""_cf
char_t	./vendor/fmt/include/format.h	/^  using char_t = remove_cvref_t<decltype(Str.data[0])>;$/;"	t	function:literals::operator ""_a
char_type	./vendor/fmt/include/args.h	/^  using char_type = typename Context::char_type;$/;"	t	class:dynamic_format_arg_store	typeref:typename:Context::char_type
char_type	./vendor/fmt/include/base.h	/^  char_type,$/;"	e	enum:detail::type
char_type	./vendor/fmt/include/base.h	/^  using char_type = Char;$/;"	t	class:basic_format_parse_context	typeref:typename:Char
char_type	./vendor/fmt/include/base.h	/^  using char_type = char;$/;"	t	class:context	typeref:typename:char
char_type	./vendor/fmt/include/base.h	/^  using char_type = typename Context::char_type;$/;"	t	class:basic_format_arg	typeref:typename:Context::char_type
char_type	./vendor/fmt/include/base.h	/^  using char_type = typename Context::char_type;$/;"	t	class:detail::value	typeref:typename:Context::char_type
char_type	./vendor/fmt/include/base.h	/^  using char_type = typename Context::char_type;$/;"	t	struct:detail::arg_mapper	typeref:typename:Context::char_type
char_type	./vendor/fmt/include/base.h	/^  using char_type = typename ParseContext::char_type;$/;"	t	function:detail::parse_format_specs	typeref:typename:ParseContext::char_type
char_type	./vendor/fmt/include/chrono.h	/^  using char_type = typename FormatContext::char_type;$/;"	t	struct:detail::chrono_formatter	typeref:typename:FormatContext::char_type
char_type	./vendor/fmt/include/chrono.h	/^  using char_type = typename Streambuf::char_type;$/;"	t	class:detail::formatbuf	typeref:typename:Streambuf::char_type
char_type	./vendor/fmt/include/compile.h	/^  using char_type = Char;$/;"	t	struct:detail::code_unit	typeref:typename:Char
char_type	./vendor/fmt/include/compile.h	/^  using char_type = Char;$/;"	t	struct:detail::field	typeref:typename:Char
char_type	./vendor/fmt/include/compile.h	/^  using char_type = Char;$/;"	t	struct:detail::runtime_named_field	typeref:typename:Char
char_type	./vendor/fmt/include/compile.h	/^  using char_type = Char;$/;"	t	struct:detail::spec_field	typeref:typename:Char
char_type	./vendor/fmt/include/compile.h	/^  using char_type = Char;$/;"	t	struct:detail::text	typeref:typename:Char
char_type	./vendor/fmt/include/compile.h	/^  using char_type = Char;$/;"	t	struct:detail::udl_compiled_string	typeref:typename:Char
char_type	./vendor/fmt/include/compile.h	/^  using char_type = typename L::char_type;$/;"	t	struct:detail::concat	typeref:typename:L::char_type
char_type	./vendor/fmt/include/compile.h	/^  using char_type = typename S::char_type;$/;"	t	function:detail::compile_format_string	typeref:typename:S::char_type
char_type	./vendor/fmt/include/compile.h	/^  using char_type = typename S::char_type;$/;"	t	function:detail::parse_replacement_field_then_tail	typeref:typename:S::char_type
char_type	./vendor/fmt/include/format.h	/^  using char_type = Char;$/;"	t	class:generic_context	typeref:typename:Char
char_type	./vendor/fmt/include/printf.h	/^  using char_type = Char;$/;"	t	class:basic_printf_context	typeref:typename:Char
char_type	./vendor/fmt/include/printf.h	/^  using char_type = typename Context::char_type;$/;"	t	class:detail::arg_converter	typeref:typename:Context::char_type
char_type	./vendor/fmt/include/ranges.h	/^  using char_type = typename FormatContext::char_type;$/;"	t	struct:detail::format_tuple_element	typeref:typename:FormatContext::char_type
char_value	./vendor/fmt/include/base.h	/^    char_type char_value;$/;"	m	union:detail::value::__anonea363bd9060a	typeref:typename:char_type
chartorune	./vendor/STC/include/stc/priv/cregex_prv.c	/^chartorune(_Rune *rune, const char *s)$/;"	f	typeref:typename:int	file:
chartreuse	./vendor/fmt/include/color.h	/^  chartreuse = 0x7FFF00,               \/\/ rgb(127,255,0)$/;"	e	enum:color
check_arg_id	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR void check_arg_id(basic_string_view<Char>) {$/;"	f	class:basic_format_parse_context	typeref:typename:FMT_CONSTEXPR void
check_arg_id	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR void check_arg_id(int id) {$/;"	f	class:basic_format_parse_context	typeref:typename:FMT_CONSTEXPR void
check_arg_id	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR void check_arg_id(int id) {$/;"	f	class:detail::compile_parse_context	typeref:typename:FMT_CONSTEXPR void
check_char_specs	./vendor/fmt/include/base.h	/^FMT_CONSTEXPR inline auto check_char_specs(const format_specs& specs) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
check_divisibility_and_divide_by_pow10	./vendor/fmt/include/format-inl.h	/^auto check_divisibility_and_divide_by_pow10(uint32_t& n) noexcept -> bool {$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
check_dynamic_spec	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR void check_dynamic_spec(int arg_id) {$/;"	f	class:detail::compile_parse_context	typeref:typename:FMT_CONSTEXPR void
check_dynamic_spec	./vendor/fmt/include/base.h	/^FMT_CONSTEXPR void basic_format_parse_context<Char>::check_dynamic_spec($/;"	f	class:basic_format_parse_context	typeref:typename:FMT_CONSTEXPR void
check_expand_need	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline bool check_expand_need()$/;"	f	class:emhash7::HashMap	typeref:typename:bool
check_format_string	./vendor/fmt/include/base.h	/^FMT_ALWAYS_INLINE void check_format_string(const S&) {$/;"	f	namespace:detail	typeref:typename:FMT_ALWAYS_INLINE void
check_format_string	./vendor/fmt/include/base.h	/^void check_format_string(S format_str) {$/;"	f	namespace:detail	typeref:typename:void
checkauto	./vendor/STC/CMakeLists.txt	/^	add_executable(checkauto ${FLEX_checkauto_OUTPUTS})$/;"	t
checker	./vendor/fmt/include/base.h	/^      using checker =$/;"	t	function:basic_format_string::basic_format_string	typeref:typename:detail::format_string_checker<Char,remove_cvref_t<Args>...>
checker	./vendor/fmt/include/base.h	/^  using checker = format_string_checker<char_t, remove_cvref_t<Args>...>;$/;"	t	function:detail::check_format_string	typeref:typename:format_string_checker<char_t,remove_cvref_t<Args>...>
child	./vendor/cjson/include/cJSON.h	/^    struct cJSON *child;$/;"	m	struct:cJSON	typeref:struct:cJSON *
child_of	./src/flecs.h	/^    Self& child_of() {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
child_of	./src/flecs.h	/^    Self& child_of(entity_t second) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
children	./src/flecs.h	/^    void children(Func&& func) const {$/;"	f	struct:flecs::entity_view	typeref:typename:void
children	./src/flecs.h	/^    void children(flecs::entity_t rel, Func&& func) const {$/;"	f	struct:flecs::entity_view	typeref:typename:void
children	./src/flecs.h	/^inline void world::children(Func&& f) const {$/;"	f	class:flecs::world	typeref:typename:void
chocolate	./vendor/fmt/include/color.h	/^  chocolate = 0xD2691E,                \/\/ rgb(210,105,30)$/;"	e	enum:color
chr	./vendor/STC/include/stc/types.h	/^    csview chr; \/\/ utf8 character\/codepoint$/;"	m	union:__anon0ab7b7af070a	typeref:typename:csview
chr	./vendor/STC/include/stc/types.h	/^    csview chr;$/;"	m	union:__anon0ab7b7af010a	typeref:typename:csview
chr	./vendor/STC/include/stc/types.h	/^    csview chr;$/;"	m	union:__anon0ab7b7af030a	typeref:typename:csview
chr	./vendor/STC/include/stc/types.h	/^    struct { csview chr; csview_value* end; } u8;$/;"	m	struct:__anon0ab7b7af010a::__anon0ab7b7af0208	typeref:typename:csview
chr	./vendor/fmt/include/base.h	/^  chr,      \/\/ 'c'$/;"	e	enum:presentation_type
chromaAbCorrection	./vendor/raylib5/include/raylib.h	/^    float chromaAbCorrection[4];    \/\/ Chromatic aberration correction parameters$/;"	m	struct:VrDeviceInfo	typeref:typename:float[4]
chrono_format_checker	./vendor/fmt/include/chrono.h	/^struct chrono_format_checker : null_chrono_spec_handler<chrono_format_checker> {$/;"	s	namespace:detail
chrono_formatter	./vendor/fmt/include/chrono.h	/^      using chrono_formatter =$/;"	t	function:formatter::format
chrono_formatter	./vendor/fmt/include/chrono.h	/^  chrono_formatter(FormatContext& ctx, OutputIt o,$/;"	f	struct:detail::chrono_formatter
chrono_formatter	./vendor/fmt/include/chrono.h	/^struct chrono_formatter {$/;"	s	namespace:detail
chunk_size	./src/flecs.h	/^    int32_t chunk_size;$/;"	m	struct:ecs_block_allocator_t	typeref:typename:int32_t
chunks	./src/flecs.h	/^    ecs_block_allocator_t chunks;$/;"	m	struct:ecs_allocator_t	typeref:typename:ecs_block_allocator_t
chunks_per_block	./src/flecs.h	/^    int32_t chunks_per_block;$/;"	m	struct:ecs_block_allocator_t	typeref:typename:int32_t
city	./vendor/STC/misc/examples/sortedmaps/multimap.c	/^struct OlympicsData { int year; const char *city, *country, *date; } ol_data[] = {$/;"	m	struct:OlympicsData	typeref:typename:const char *	file:
city	./vendor/STC/misc/examples/sortedmaps/multimap.c	/^typedef struct { int year; cstr city, date; } OlympicLoc;$/;"	m	struct:__anonc17d532c0108	typeref:typename:cstr	file:
clamp	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^const T& clamp(const T& v, const T& lo, const T& hi) {$/;"	f	namespace:tsl::detail_robin_hash	typeref:typename:const T &
classp	./vendor/STC/include/stc/priv/cregex_prv.c	/^        _Reclass *classp;        \/* class pointer *\/$/;"	m	union:_Reinst::__anon4ce7005a020a	typeref:typename:_Reclass *	file:
classp	./vendor/STC/include/stc/priv/cregex_prv.c	/^    _Reclass* classp;$/;"	m	struct:_Parser	typeref:typename:_Reclass *	file:
clean	./Makefile	/^clean: clean_bin clean_bin_int clean_asm  # Target to clean all build directories$/;"	t
clean_asm	./Makefile	/^clean_asm:$/;"	t
clean_bin	./Makefile	/^clean_bin:$/;"	t
clean_bin_int	./Makefile	/^clean_bin_int:$/;"	t
clear	./src/flecs.h	/^    opaque& clear(void (*func)(T *dst)) {$/;"	f	struct:flecs::opaque	typeref:typename:opaque &
clear	./src/flecs.h	/^    void (*clear)($/;"	m	struct:EcsOpaque	typeref:typename:void (*)(void * dst)
clear	./src/flecs.h	/^    void clear() const {$/;"	f	struct:flecs::entity	typeref:typename:void
clear	./src/flecs.h	/^    void clear() {$/;"	f	struct:flecs::string	typeref:typename:void
clear	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void clear() {$/;"	f	class:robin_hood::detail::Table	typeref:typename:void
clear	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    void clear() {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:void
clear	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    void clear() {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:void
clear	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        void clear(size_type bucket)$/;"	f	class:emhash7::HashMap::iterator	typeref:typename:void
clear	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    void clear()$/;"	f	class:emhash7::HashMap	typeref:typename:void
clear	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    void clear()$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:void
clear	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^  void clear() noexcept { m_iprime = 0; }$/;"	f	class:tsl::rh::prime_growth_policy	typeref:typename:void
clear	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^  void clear() noexcept { m_mask = 0; }$/;"	f	class:tsl::rh::power_of_two_growth_policy	typeref:typename:void
clear	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^  void clear() noexcept { m_mod = 1; }$/;"	f	class:tsl::rh::mod_growth_policy	typeref:typename:void
clear	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  void clear() noexcept {$/;"	f	class:tsl::detail_robin_hash::bucket_entry	typeref:typename:void
clear	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  void clear() noexcept {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:void
clear	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  void clear() noexcept { m_ht.clear(); }$/;"	f	class:tsl::robin_map	typeref:typename:void
clear	./vendor/fmt/include/args.h	/^  void clear() {$/;"	f	class:dynamic_format_arg_store	typeref:typename:void
clear	./vendor/fmt/include/base.h	/^  void clear() { size_ = 0; }$/;"	f	class:detail::buffer	typeref:typename:void
clear_and_fill_buckets_from_values	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    void clear_and_fill_buckets_from_values() {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:void
clear_and_shrink	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  void clear_and_shrink() noexcept {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:void
clear_bucket	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    void clear_bucket(size_type bucket)$/;"	f	class:emhash7::HashMap	typeref:typename:void
clear_buckets	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    void clear_buckets() {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:void
clear_count	./src/flecs.h	/^        ecs_metric_t clear_count;$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1308	typeref:typename:ecs_metric_t
clear_count	./src/flecs.h	/^        int64_t clear_count;           \/**< Clear commands processed *\/$/;"	m	struct:ecs_world_info_t::__anon7d4a417c0708	typeref:typename:int64_t
clearkv	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    void clearkv()$/;"	f	class:emhash7::HashMap	typeref:typename:void
clone	./src/flecs.h	/^inline flecs::entity entity_view::clone(bool copy_value, flecs::entity_t dst_id) const {$/;"	f	class:flecs::entity_view	typeref:typename:flecs::entity
clone	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    void clone(const HashMap& rhs) noexcept$/;"	f	class:emhash7::HashMap	typeref:typename:void
cloneData	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void cloneData(const Table& o) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:void
clone_value	./src/flecs.c	/^    bool clone_value;                \/* Clone entity with value (used for clone) *\/ $/;"	m	struct:ecs_cmd_1_t	typeref:typename:bool	file:
close	./vendor/fmt/include/os.h	/^  void close() { buffer_.close(); }$/;"	f	class:ostream	typeref:typename:void
close	./vendor/fmt/include/os.h	/^  void close() {$/;"	f	class:detail::file_buffer	typeref:typename:void
clz	./vendor/fmt/include/format.h	/^inline auto clz(uint32_t x) -> int {$/;"	f	namespace:detail	typeref:typename:int
clzll	./vendor/fmt/include/format.h	/^inline auto clzll(uint64_t x) -> int {$/;"	f	namespace:detail	typeref:typename:int
cmd	./src/flecs.c	/^    ecs_commands_t *cmd;$/;"	m	struct:ecs_stage_t	typeref:typename:ecs_commands_t *	file:
cmd	./src/flecs.h	/^    } cmd;$/;"	m	struct:ecs_world_info_t	typeref:struct:ecs_world_info_t::__anon7d4a417c0708
cmd	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        picostring cmd;$/;"	m	struct:picobench::runner::cmd_line_option	typeref:typename:picostring
cmd_captures	./src/flecs.c	/^    ecs_map_t cmd_captures;$/;"	m	struct:__anon7d4a41771a08	typeref:typename:ecs_map_t	file:
cmd_compare_results	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    bool cmd_compare_results(const char* line)$/;"	f	class:picobench::runner	typeref:typename:bool
cmd_entry_chunk	./src/flecs.c	/^    ecs_block_allocator_t cmd_entry_chunk;$/;"	m	struct:ecs_stage_allocators_t	typeref:typename:ecs_block_allocator_t	file:
cmd_handler	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    typedef bool (runner::*cmd_handler)(const char*); \/\/ internal handler$/;"	t	class:picobench::runner	typeref:typename:bool (runner::*)(const char *)
cmd_help	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    bool cmd_help(const char* line)$/;"	f	class:picobench::runner	typeref:typename:bool
cmd_iters	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    bool cmd_iters(const char* line)$/;"	f	class:picobench::runner	typeref:typename:bool
cmd_line_option	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        cmd_line_option(const char* c, const char* a, const char* d, cmd_handler h)$/;"	f	struct:picobench::runner::cmd_line_option
cmd_line_option	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    struct cmd_line_option$/;"	s	class:picobench::runner
cmd_no_run	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    bool cmd_no_run(const char* line)$/;"	f	class:picobench::runner	typeref:typename:bool
cmd_out_all	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    bool cmd_out_all(const char* line)$/;"	f	class:picobench::runner	typeref:typename:bool
cmd_out_fmt	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    bool cmd_out_fmt(const char* line)$/;"	f	class:picobench::runner	typeref:typename:bool
cmd_output	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    bool cmd_output(const char* line)$/;"	f	class:picobench::runner	typeref:typename:bool
cmd_samples	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    bool cmd_samples(const char* line)$/;"	f	class:picobench::runner	typeref:typename:bool
cmd_sp	./src/flecs.c	/^    int32_t cmd_sp;$/;"	m	struct:ecs_stage_t	typeref:typename:int32_t	file:
cmd_stack	./src/flecs.c	/^    ecs_commands_t cmd_stack[ECS_MAX_DEFER_STACK];$/;"	m	struct:ecs_stage_t	typeref:typename:ecs_commands_t[]	file:
cmd_version	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    bool cmd_version(const char* line)$/;"	f	class:picobench::runner	typeref:typename:bool
cmds	./src/flecs.c	/^    char *cmds;$/;"	m	struct:__anon7d4a41771b08	typeref:typename:char *	file:
cmp	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    bool cmp(const char* other) const$/;"	f	class:picobench::picostring	typeref:typename:bool
cmp_int	./vendor/STC/misc/benchmarks/various/quicksort_bench.c	/^static int cmp_int(const void* a, const void* b) {$/;"	f	typeref:typename:int	file:
cnull	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^} cnull;$/;"	v	namespace:picobench	typeref:struct:picobench::null_stream
code	./src/flecs.c	/^    const char *code;$/;"	m	struct:__anon7d4a41771908	typeref:typename:const char *	file:
code	./src/flecs.c	/^    int code;$/;"	m	struct:ecs_http_request_entry_t	typeref:typename:int	file:
code	./src/flecs.h	/^    int code;                   \/**< default = 200 *\/$/;"	m	struct:__anon7d4a417c0c08	typeref:typename:int
code_point_index	./vendor/fmt/include/format.h	/^inline auto code_point_index(basic_string_view<Char> s, size_t n) -> size_t {$/;"	f	namespace:detail	typeref:typename:size_t
code_point_index	./vendor/fmt/include/format.h	/^inline auto code_point_index(string_view s, size_t n) -> size_t {$/;"	f	namespace:detail	typeref:typename:size_t
code_point_length	./vendor/fmt/include/base.h	/^FMT_CONSTEXPR auto code_point_length(const Char* begin) -> int {$/;"	f	namespace:detail	typeref:typename:int
code_unit	./vendor/fmt/include/chrono.h	/^    using code_unit = wchar_t;$/;"	t	function:detail::write_encoded_tm_str	typeref:typename:wchar_t
code_unit	./vendor/fmt/include/compile.h	/^template <typename Char> struct code_unit {$/;"	s	namespace:detail
codecvt_result	./vendor/fmt/include/chrono.h	/^template <typename CodeUnit> struct codecvt_result {$/;"	s	namespace:detail
codep	./vendor/STC/include/stc/priv/utf8_prv.h	/^typedef struct { uint32_t state, codep; } utf8_decode_t;$/;"	m	struct:__anon57216ba80208	typeref:typename:uint32_t
collision_layer	./src/grid.h	/^	uint16_t collision_layer;$/;"	m	struct:GridComponentData	typeref:typename:uint16_t
collision_layer	./src/grid.h	/^    uint16_t collision_layer;$/;"	m	struct:Tile	typeref:typename:uint16_t
color	./vendor/STC/misc/examples/algorithms/shape.c	/^    uint32_t color;$/;"	m	struct:Shape	typeref:typename:uint32_t	file:
color	./vendor/STC/misc/examples/algorithms/shape.cpp	/^    uint32_t color;$/;"	m	struct:Shape	typeref:typename:uint32_t	file:
color	./vendor/fmt/include/color.h	/^enum class color : uint32_t {$/;"	g	typeref:typename:uint32_t
color	./vendor/raylib5/include/raylib.h	/^    Color color;            \/\/ Material map color$/;"	m	struct:MaterialMap	typeref:typename:Color
color_output	./vendor/STC/misc/tests/ctest.h	/^static int color_output = 1;$/;"	v	typeref:typename:int
color_print	./vendor/STC/misc/tests/ctest.h	/^static void color_print(const char* color, const char* text) {$/;"	f	typeref:typename:void
color_type	./vendor/fmt/include/color.h	/^  FMT_CONSTEXPR color_type() noexcept : is_rgb(), value{} {}$/;"	f	struct:detail::color_type	typeref:typename:FMT_CONSTEXPR
color_type	./vendor/fmt/include/color.h	/^  FMT_CONSTEXPR color_type(color rgb_color) noexcept : is_rgb(true), value{} {$/;"	f	struct:detail::color_type	typeref:typename:FMT_CONSTEXPR
color_type	./vendor/fmt/include/color.h	/^  FMT_CONSTEXPR color_type(rgb rgb_color) noexcept : is_rgb(true), value{} {$/;"	f	struct:detail::color_type	typeref:typename:FMT_CONSTEXPR
color_type	./vendor/fmt/include/color.h	/^  FMT_CONSTEXPR color_type(terminal_color term_color) noexcept$/;"	f	struct:detail::color_type	typeref:typename:FMT_CONSTEXPR
color_type	./vendor/fmt/include/color.h	/^struct color_type {$/;"	s	namespace:detail
color_union	./vendor/fmt/include/color.h	/^  union color_union {$/;"	u	struct:detail::color_type
colors	./vendor/raylib5/include/raylib.h	/^    unsigned char *colors;      \/\/ Vertex colors (RGBA - 4 components per vertex) (shader-loca/;"	m	struct:Mesh	typeref:typename:unsigned char *
column	./src/flecs.c	/^    int16_t column;             \/* First column index where id occurs *\/$/;"	m	struct:ecs_table_record_t	typeref:typename:int16_t	file:
column	./src/flecs.c	/^    int16_t column;$/;"	m	struct:__anon7d4a41772508	typeref:typename:int16_t	file:
column	./src/flecs.c	/^    int32_t column;$/;"	m	struct:__anon7d4a41770508	typeref:typename:int32_t	file:
column	./src/flecs.c	/^    int32_t column;$/;"	m	struct:__anon7d4a41772808	typeref:typename:int32_t	file:
column	./src/flecs.c	/^    int32_t column;$/;"	m	struct:__anon7d4a41772b08	typeref:typename:int32_t	file:
column	./src/flecs.h	/^    int32_t column;$/;"	m	struct:ecs_term_iter_t	typeref:typename:int32_t
column_count	./src/flecs.c	/^    int16_t column_count;            \/* Number of components (excluding tags) *\/$/;"	m	struct:ecs_table_t	typeref:typename:int16_t	file:
column_index	./src/flecs.c	/^    int32_t column_index;$/;"	m	struct:flecs_bitset_term_t	typeref:typename:int32_t	file:
column_index	./src/flecs.h	/^    int32_t column_index() const {$/;"	f	struct:flecs::table	typeref:typename:int32_t
column_index	./src/flecs.h	/^    int32_t column_index(flecs::entity_t first, flecs::entity_t second) const {$/;"	f	struct:flecs::table	typeref:typename:int32_t
column_index	./src/flecs.h	/^    int32_t column_index(flecs::entity_t second) const {$/;"	f	struct:flecs::table	typeref:typename:int32_t
column_index	./src/flecs.h	/^    int32_t column_index(flecs::id_t id) const {$/;"	f	struct:flecs::table	typeref:typename:int32_t
column_index	./src/flecs.h	/^    int32_t column_index(int32_t index) const {$/;"	f	struct:flecs::iter	typeref:typename:int32_t
column_map	./src/flecs.c	/^    int32_t *column_map;             \/* Map type index <-> column$/;"	m	struct:ecs_table_t	typeref:typename:int32_t *	file:
column_size	./src/flecs.h	/^    size_t column_size(int32_t index) {$/;"	f	struct:flecs::table	typeref:typename:size_t
columns	./src/flecs.c	/^    ecs_block_allocator_t columns;$/;"	m	struct:ecs_query_allocators_t	typeref:typename:ecs_block_allocator_t	file:
columns	./src/flecs.c	/^    ecs_column_t *columns;           \/* Component data *\/$/;"	m	struct:ecs_data_t	typeref:typename:ecs_column_t *	file:
columns	./src/flecs.c	/^    int32_t *columns;                \/* Mapping from query fields to table columns *\/$/;"	m	struct:ecs_query_table_match_t	typeref:typename:int32_t *	file:
columns	./src/flecs.c	/^    int32_t *columns;$/;"	m	struct:ecs_entity_filter_iter_t	typeref:typename:int32_t *	file:
columns	./src/flecs.h	/^    int32_t *columns;             \/* Query term to table column mapping *\/$/;"	m	struct:ecs_iter_t	typeref:typename:int32_t *
columns_set	./src/flecs.c	/^    ecs_vec_t columns_set;$/;"	m	struct:__anon7d4a41771d08	typeref:typename:ecs_vec_t	file:
combined	./vendor/STC/misc/examples/coroutines/coroutines.c	/^int combined(struct combined* g) {$/;"	f	typeref:typename:int
combined	./vendor/STC/misc/examples/coroutines/coroutines.c	/^struct combined {$/;"	s	file:
command_count	./src/flecs.h	/^    int64_t command_count;      \/**< Number of commands processed *\/$/;"	m	struct:__anon7d4a417c1b08	typeref:typename:int64_t
commands	./src/flecs.c	/^    ecs_vec_t commands;$/;"	m	struct:ecs_suspend_readonly_state_t	typeref:typename:ecs_vec_t	file:
commands	./src/flecs.h	/^    } commands;$/;"	m	struct:ecs_world_stats_t	typeref:struct:ecs_world_stats_t::__anon7d4a417c1308
commands_enqueued	./src/flecs.c	/^    int64_t commands_enqueued;  \/* Number of commands enqueued for sync point *\/$/;"	m	struct:ecs_pipeline_op_t	typeref:typename:int64_t	file:
commands_enqueued	./src/flecs.h	/^    ecs_metric_t commands_enqueued;$/;"	m	struct:ecs_sync_stats_t	typeref:typename:ecs_metric_t
commit	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    void commit(int8_t shift)$/;"	f	struct:ska::fibonacci_hash_policy	typeref:typename:void
commit	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    void commit(int8_t)$/;"	f	struct:ska::power_of_two_hash_policy	typeref:typename:void
commit	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    void commit(mod_function new_mod_function)$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:void
common_t	./vendor/fmt/include/chrono.h	/^    using common_t = typename std::common_type<IntermediateRep, intmax_t>::type;$/;"	t	function:safe_duration_cast::safe_duration_cast	typeref:typename:std::common_type<IntermediateRep,intmax_t>::type
comp	./src/flecs.h	/^    const EcsComponent *comp; \/**< Pointer to component, in case size\/alignment is needed *\/$/;"	m	struct:ecs_meta_scope_t	typeref:typename:const EcsComponent *
comp	./vendor/STC/misc/benchmarks/plotbench/plot.py	/^comp = ['All compilers', 'Mingw-g++-13.1.0', 'Win-Clang-16.0.5', 'VC-19.36']$/;"	v
compact	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void compact() {$/;"	f	class:robin_hood::detail::Table	typeref:typename:void
compare	./src/flecs.h	/^    ecs_compare_action_t compare;$/;"	m	struct:__anon7d4a417c0408	typeref:typename:ecs_compare_action_t
compare	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR auto compare(basic_string_view other) const -> int {$/;"	f	class:basic_string_view	typeref:typename:int
compare	./vendor/fmt/include/base.h	/^FMT_CONSTEXPR auto compare(const Char* s1, const Char* s2, std::size_t n)$/;"	f	namespace:detail	typeref:typename:int
compare	./vendor/fmt/include/format.h	/^  friend FMT_CONSTEXPR20 auto compare(const bigint& lhs, const bigint& rhs)$/;"	f	namespace:detail	typeref:typename:int
compare_keys	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  bool compare_keys(const K1& key1, const K2& key2) const {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:bool
compare_results_across_benchmarks	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    bool compare_results_across_benchmarks() const { return _compare_results_across_benchmarks; /;"	f	class:picobench::runner	typeref:typename:bool
compare_results_across_samples	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    bool compare_results_across_samples() const { return _compare_results_across_samples; }$/;"	f	class:picobench::runner	typeref:typename:bool
compares_equal	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    bool compares_equal(const L & lhs, const R & rhs)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:bool
compile	./vendor/fmt/include/compile.h	/^constexpr auto compile(S fmt) {$/;"	f	namespace:detail	typeref:typename:auto
compile_format_string	./vendor/fmt/include/compile.h	/^constexpr auto compile_format_string(S fmt) {$/;"	f	namespace:detail	typeref:typename:auto
compile_parse_context	./vendor/fmt/include/base.h	/^  explicit FMT_CONSTEXPR compile_parse_context($/;"	f	class:detail::compile_parse_context	typeref:typename:FMT_CONSTEXPR
compile_parse_context	./vendor/fmt/include/base.h	/^class compile_parse_context : public basic_format_parse_context<Char> {$/;"	c	namespace:detail
compile_string	./vendor/fmt/include/base.h	/^struct compile_string {};$/;"	s	namespace:detail
compile_string_to_view	./vendor/fmt/include/format.h	/^constexpr auto compile_string_to_view(basic_string_view<Char> s)$/;"	f	namespace:detail_exported	typeref:typename:basic_string_view<Char>
compile_string_to_view	./vendor/fmt/include/format.h	/^constexpr auto compile_string_to_view(const Char (&s)[N])$/;"	f	namespace:detail_exported	typeref:typename:basic_string_view<Char>
compile_table	./vendor/STC/src/utf8_tab.py	/^def compile_table(casetype='lowcase', category=None, bitrange=16):$/;"	f
compiled_string	./vendor/fmt/include/compile.h	/^FMT_EXPORT class compiled_string {};$/;"	c
compiler	./src/flecs.h	/^    const char *compiler;           \/**< Compiler used to compile flecs *\/$/;"	m	struct:ecs_build_info_t	typeref:typename:const char *
component	./src/flecs.c	/^    ecs_entity_t component;$/;"	m	struct:ecs_table_event_t	typeref:typename:ecs_entity_t	file:
component	./src/flecs.h	/^    component($/;"	f	struct:flecs::component
component	./src/flecs.h	/^    ecs_entity_t component;  \/**< Handle to component (do not set) *\/$/;"	m	struct:ecs_type_info_t	typeref:typename:ecs_entity_t
component	./src/flecs.h	/^inline flecs::component<T> world::component(Args &&... args) const {$/;"	f	class:flecs::world	typeref:typename:flecs::component<T>
component	./src/flecs.h	/^inline flecs::untyped_component world::component(Args &&... args) const {$/;"	f	class:flecs::world	typeref:typename:flecs::untyped_component
component	./src/flecs.h	/^struct component : untyped_component {$/;"	s	namespace:flecs
component_binding_ctx	./src/flecs.h	/^struct component_binding_ctx {$/;"	s	namespace:flecs::_
component_count	./src/flecs.h	/^        ecs_metric_t component_count;     \/**< Number of components ids (ids with data) *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1008	typeref:typename:ecs_metric_t
component_id_count	./src/flecs.h	/^    int32_t component_id_count;       \/**< Number of component (data) ids in the world *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int32_t
components	./src/flecs.h	/^    } components;$/;"	m	struct:ecs_world_stats_t	typeref:struct:ecs_world_stats_t::__anon7d4a417c1008
compute_delta	./vendor/fmt/include/format-inl.h	/^  static auto compute_delta(cache_entry_type const& cache, int beta) noexcept$/;"	f	struct:detail::dragonbox::cache_accessor	typeref:typename:auto
compute_delta	./vendor/fmt/include/format-inl.h	/^  static auto compute_delta(const cache_entry_type& cache, int beta) noexcept$/;"	f	struct:detail::dragonbox::cache_accessor	typeref:typename:auto
compute_left_endpoint_for_shorter_interval_case	./vendor/fmt/include/format-inl.h	/^  static auto compute_left_endpoint_for_shorter_interval_case($/;"	f	struct:detail::dragonbox::cache_accessor	typeref:typename:auto
compute_max_lookups	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static int8_t compute_max_lookups(size_t num_buckets)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:int8_t
compute_mul	./vendor/fmt/include/format-inl.h	/^  static auto compute_mul(carrier_uint u,$/;"	f	struct:detail::dragonbox::cache_accessor	typeref:typename:auto
compute_mul_parity	./vendor/fmt/include/format-inl.h	/^  static auto compute_mul_parity(carrier_uint two_f,$/;"	f	struct:detail::dragonbox::cache_accessor	typeref:typename:auto
compute_mul_parity_result	./vendor/fmt/include/format-inl.h	/^  struct compute_mul_parity_result {$/;"	s	struct:detail::dragonbox::cache_accessor
compute_mul_result	./vendor/fmt/include/format-inl.h	/^  struct compute_mul_result {$/;"	s	struct:detail::dragonbox::cache_accessor
compute_right_endpoint_for_shorter_interval_case	./vendor/fmt/include/format-inl.h	/^  static auto compute_right_endpoint_for_shorter_interval_case($/;"	f	struct:detail::dragonbox::cache_accessor	typeref:typename:auto
compute_round_up_for_shorter_interval_case	./vendor/fmt/include/format-inl.h	/^  static auto compute_round_up_for_shorter_interval_case($/;"	f	struct:detail::dragonbox::cache_accessor	typeref:typename:auto
compute_width	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR inline auto compute_width(string_view s) -> size_t {$/;"	f	namespace:detail	typeref:typename:size_t
compute_width	./vendor/fmt/include/format.h	/^inline auto compute_width(basic_string_view<Char> s) -> size_t {$/;"	f	namespace:detail	typeref:typename:size_t
concat	./vendor/fmt/include/compile.h	/^template <typename L, typename R> struct concat {$/;"	s	namespace:detail
conceal	./vendor/fmt/include/color.h	/^  conceal = 1 << 6,$/;"	e	enum:emphasis
concise_text	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    concise_text,$/;"	e	enum:picobench::report_output_format
cond_broadcast_	./src/flecs.h	/^    ecs_os_api_cond_broadcast_t cond_broadcast_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_cond_broadcast_t
cond_free_	./src/flecs.h	/^    ecs_os_api_cond_free_t cond_free_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_cond_free_t
cond_new_	./src/flecs.h	/^    ecs_os_api_cond_new_t cond_new_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_cond_new_t
cond_signal_	./src/flecs.h	/^    ecs_os_api_cond_signal_t cond_signal_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_cond_signal_t
cond_wait_	./src/flecs.h	/^    ecs_os_api_cond_wait_t cond_wait_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_cond_wait_t
cond_written	./src/flecs.c	/^    ecs_write_flags_t cond_written; \/* Track conditional writes (optional operators) *\/$/;"	m	struct:__anon7d4a41773608	typeref:typename:ecs_write_flags_t	file:
cond_written_or	./src/flecs.c	/^    ecs_write_flags_t cond_written_or; \/* Cond written flags at start of or chain *\/$/;"	m	struct:__anon7d4a41773508	typeref:typename:ecs_write_flags_t	file:
conditional_helper	./vendor/fmt/include/ranges.h	/^template <typename... Ts> struct conditional_helper {};$/;"	s	namespace:detail
conditional_t	./src/flecs.h	/^using conditional_t = typename std::conditional<V, T, F>::type;$/;"	t	namespace:flecs	typeref:typename:std::conditional<V,T,F>::type
conditional_t	./vendor/fmt/include/base.h	/^using conditional_t = typename std::conditional<B, T, F>::type;$/;"	t	typeref:typename:std::conditional<B,T,F>::type
conjunction	./vendor/fmt/include/ranges.h	/^struct conjunction<P1, Pn...>$/;"	s
conjunction	./vendor/fmt/include/ranges.h	/^template <typename P> struct conjunction<P> : P {};$/;"	s
conjunction	./vendor/fmt/include/ranges.h	/^template <typename...> struct conjunction : std::true_type {};$/;"	s
conn	./src/flecs.c	/^    ecs_http_connection_impl_t *conn;$/;"	m	struct:__anon7d4a41770a08	typeref:typename:ecs_http_connection_impl_t *	file:
conn	./src/flecs.h	/^    ecs_http_connection_t *conn;$/;"	m	struct:__anon7d4a417c0b08	typeref:typename:ecs_http_connection_t *
conn_id	./src/flecs.c	/^    uint64_t conn_id; \/* for sanity check *\/$/;"	m	struct:__anon7d4a41770908	typeref:typename:uint64_t	file:
connections	./src/flecs.c	/^    ecs_sparse_t connections; \/* sparse<http_connection_t> *\/$/;"	m	struct:ecs_http_server_t	typeref:typename:ecs_sparse_t	file:
const_args	./src/flecs.h	/^    static bool const_args() {$/;"	f	struct:flecs::_::entity_with_delegate_impl	typeref:typename:bool
const_check	./vendor/fmt/include/base.h	/^template <typename T> constexpr auto const_check(T value) -> T { return value; }$/;"	f	namespace:detail	typeref:typename:T
const_iterator	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    using const_iterator = Iter<true>;$/;"	t	class:robin_hood::detail::Table	typeref:typename:Iter<true>
const_iterator	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using const_iterator = iter_t<true>;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:iter_t<true>
const_iterator	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using const_iterator = typename value_container_type::const_iterator;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:value_container_type::const_iterator
const_iterator	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        const_iterator(const htype* hash_map, size_type bucket) : _map(hash_map), _bucket(bucket/;"	f	class:emhash7::HashMap::const_iterator
const_iterator	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        const_iterator(const htype* hash_map, size_type bucket, bool) : _map(hash_map), _bucket(/;"	f	class:emhash7::HashMap::const_iterator
const_iterator	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        const_iterator(const iterator& it) : _map(it._map), _bucket(it._bucket), _from(it._from)/;"	f	class:emhash7::HashMap::const_iterator
const_iterator	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    class const_iterator$/;"	c	class:emhash7::HashMap
const_iterator	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    using const_iterator = templated_iterator<const value_type>;$/;"	t	class:ska::detailv3::sherwood_v3_table	typeref:typename:templated_iterator<const value_type>
const_iterator	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  using const_iterator = robin_iterator<true>;$/;"	t	class:tsl::detail_robin_hash::robin_hash	typeref:typename:robin_iterator<true>
const_iterator	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  using const_iterator = typename ht::const_iterator;$/;"	t	class:tsl::robin_map	typeref:typename:ht::const_iterator
const_param	./src/flecs.h	/^    const void *const_param;$/;"	m	struct:ecs_event_desc_t	typeref:typename:const void *
const_pointer	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using const_pointer = typename std::allocator_traits<allocator_type>::const_pointer;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:std::allocator_traits<allocator_type>::const_pointer
const_pointer	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using const_pointer = typename value_container_type::const_pointer;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:value_container_type::const_pointer
const_pointer	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    using const_pointer = const value_type *;$/;"	t	class:ska::detailv3::sherwood_v3_table	typeref:typename:const value_type *
const_pointer	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  using const_pointer = const value_type*;$/;"	t	class:tsl::detail_robin_hash::robin_hash	typeref:typename:const value_type *
const_pointer	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  using const_pointer = typename ht::const_pointer;$/;"	t	class:tsl::robin_map	typeref:typename:ht::const_pointer
const_reference	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using const_reference = T const&;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:T const &
const_reference	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using const_reference = typename value_container_type::const_reference;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:value_container_type::const_reference
const_reference	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    typedef const PairT& const_reference;$/;"	t	class:emhash7::HashMap	typeref:typename:const PairT &
const_reference	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    using const_reference = const value_type &;$/;"	t	class:ska::detailv3::sherwood_v3_table	typeref:typename:const value_type &
const_reference	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  using const_reference = const value_type&;$/;"	t	class:tsl::detail_robin_hash::robin_hash	typeref:typename:const value_type &
const_reference	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  using const_reference = typename ht::const_reference;$/;"	t	class:tsl::robin_map	typeref:typename:ht::const_reference
const_reference	./vendor/fmt/include/base.h	/^  using const_reference = const T&;$/;"	t	class:detail::buffer	typeref:typename:const T &
const_reference	./vendor/fmt/include/format.h	/^  using const_reference = const T&;$/;"	t	class:basic_memory_buffer	typeref:typename:const T &
constant	./src/flecs.h	/^    ecs_entity_t constant;$/;"	m	struct:ecs_bitmask_constant_t	typeref:typename:ecs_entity_t
constant	./src/flecs.h	/^    ecs_entity_t constant;$/;"	m	struct:ecs_enum_constant_t	typeref:typename:ecs_entity_t
constant	./src/flecs.h	/^component<T>& constant(const char *name, T value) {$/;"	f	struct:flecs::component	typeref:typename:component<T> &
constant	./src/flecs.h	/^untyped_component& constant(const char *name, int32_t value) {$/;"	f	struct:flecs::untyped_component	typeref:typename:untyped_component &
constants	./src/flecs.h	/^    ecs_bitmask_constant_t constants[ECS_MEMBER_DESC_CACHE_SIZE];$/;"	m	struct:ecs_bitmask_desc_t	typeref:typename:ecs_bitmask_constant_t[]
constants	./src/flecs.h	/^    ecs_enum_constant_t constants[ECS_MEMBER_DESC_CACHE_SIZE];$/;"	m	struct:ecs_enum_desc_t	typeref:typename:ecs_enum_constant_t[]
constants	./src/flecs.h	/^    ecs_map_t constants; \/* map<i32_t, ecs_enum_constant_t> *\/$/;"	m	struct:EcsEnum	typeref:typename:ecs_map_t
constants	./src/flecs.h	/^    ecs_map_t constants; \/* map<u32_t, ecs_bitmask_constant_t> *\/$/;"	m	struct:EcsBitmask	typeref:typename:ecs_map_t
constants	./src/flecs.h	/^    enum_constant_data<underlying_type_t<E>> constants[constants_size? constants_size: 1];$/;"	m	struct:flecs::_::enum_data_impl	typeref:typename:enum_constant_data<underlying_type_t<E>>[]
constants_size	./src/flecs.h	/^    static constexpr unsigned int constants_size = enum_reflection<E, reflection_count>::templat/;"	m	struct:flecs::_::enum_data_impl	typeref:typename:unsigned int
constrained_vars	./src/flecs.h	/^    ecs_flags64_t constrained_vars; \/* Bitset that marks constrained variables *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_flags64_t
consume_items	./vendor/STC/misc/examples/coroutines/cotasks1.c	/^int consume_items(struct consume_items* c, struct produce_items* p)$/;"	f	typeref:typename:int
consume_items	./vendor/STC/misc/examples/coroutines/cotasks1.c	/^struct consume_items {$/;"	s	file:
consume_items	./vendor/STC/misc/examples/coroutines/cotasks2.c	/^int consume_items(struct consume_items* c, cco_runtime* rt)$/;"	f	typeref:typename:int
container	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^    typedef deq_u64 container;$/;"	t	function:test_stc_deque	typeref:typename:deq_u64	file:
container	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^    typedef std::deque<uint64_t> container;$/;"	t	function:test_std_deque	typeref:typename:std::deque<uint64_t>	file:
container	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^    typedef std::unordered_map<uint64_t, uint64_t> container;$/;"	t	function:test_std_unordered_map	typeref:typename:std::unordered_map<uint64_t,uint64_t>	file:
container	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^    typedef std::forward_list<size_t> container;$/;"	t	function:test_std_forward_list	typeref:typename:std::forward_list<size_t>	file:
container	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^    typedef std::map<uint64_t, uint64_t> container;$/;"	t	function:test_std_map	typeref:typename:std::map<uint64_t,uint64_t>	file:
container	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^    typedef std::vector<uint64_t> container;$/;"	t	function:test_std_vector	typeref:typename:std::vector<uint64_t>	file:
container_	./vendor/fmt/include/base.h	/^  container_type& container_;$/;"	m	class:detail::iterator_buffer	typeref:typename:container_type &
container_type	./vendor/fmt/include/base.h	/^  using container_type = detail::buffer<T>;$/;"	t	class:basic_appender	typeref:typename:detail::buffer<T>
container_type	./vendor/fmt/include/base.h	/^  using container_type = typename OutputIt::container_type;$/;"	t	class:detail::iterator_buffer	typeref:typename:OutputIt::container_type
contains	./src/flecs.h	/^    bool contains(const char *substr) {$/;"	f	struct:flecs::string	typeref:typename:bool
contains	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    bool contains(const key_type& key) const { \/\/ NOLINT(modernize-use-nodiscard)$/;"	f	class:robin_hood::detail::Table	typeref:typename:bool
contains	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    typename std::enable_if<Self_::is_transparent, bool>::type contains(const OtherKey& key) con/;"	f	class:robin_hood::detail::Table	typeref:typename:std::enable_if<Self_::is_transparent,bool>::type
contains	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto contains(K const& key) const -> bool {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:bool
contains	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto contains(Key const& key) const -> bool {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:bool
contains	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline bool contains(const Key& key) const noexcept$/;"	f	class:emhash7::HashMap	typeref:typename:bool
contains	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  bool contains(const K& key) const {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:bool
contains	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  bool contains(const K& key, std::size_t hash) const {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:bool
contains	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  bool contains(const K& key) const {$/;"	f	class:tsl::robin_map	typeref:typename:bool
contains	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  bool contains(const K& key, std::size_t precalculated_hash) const {$/;"	f	class:tsl::robin_map	typeref:typename:bool
contains	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  bool contains(const Key& key) const { return m_ht.contains(key); }$/;"	f	class:tsl::robin_map	typeref:typename:bool
contains	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  bool contains(const Key& key, std::size_t precalculated_hash) const {$/;"	f	class:tsl::robin_map	typeref:typename:bool
contains	./vendor/STC/misc/examples/sortedmaps/mapmap.c	/^int contains(Departments* map, const char* name)$/;"	f	typeref:typename:int
content	./src/flecs.c	/^    char *content;$/;"	m	struct:ecs_http_request_entry_t	typeref:typename:char *	file:
content	./src/flecs.c	/^    char *content;$/;"	m	struct:ecs_http_send_request_t	typeref:typename:char *	file:
content	./src/flecs.h	/^    char *content;$/;"	m	struct:ecs_strbuf_t	typeref:typename:char *
content_length	./src/flecs.c	/^    int32_t content_length;$/;"	m	struct:__anon7d4a41770708	typeref:typename:int32_t	file:
content_length	./src/flecs.c	/^    int32_t content_length;$/;"	m	struct:ecs_http_request_entry_t	typeref:typename:int32_t	file:
content_length	./src/flecs.c	/^    int32_t content_length;$/;"	m	struct:ecs_http_send_request_t	typeref:typename:int32_t	file:
content_type	./src/flecs.h	/^    const char* content_type;   \/**< default = application\/json *\/$/;"	m	struct:__anon7d4a417c0c08	typeref:typename:const char *
context	./vendor/fmt/include/base.h	/^    using context = detail::compile_parse_context<Char>;$/;"	t	function:basic_format_parse_context::check_dynamic_spec	typeref:typename:detail::compile_parse_context<Char>
context	./vendor/fmt/include/base.h	/^    using context = detail::compile_parse_context<Char>;$/;"	t	function:basic_format_parse_context::do_check_arg_id	typeref:typename:detail::compile_parse_context<Char>
context	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR context(iterator out, basic_format_args<context> ctx_args,$/;"	f	class:context	typeref:typename:FMT_CONSTEXPR
context	./vendor/fmt/include/base.h	/^  using context = buffered_context<char_type>;$/;"	t	function:detail::parse_format_specs	typeref:typename:buffered_context<char_type>
context	./vendor/fmt/include/base.h	/^class context {$/;"	c
context	./vendor/fmt/include/chrono.h	/^  FormatContext& context;$/;"	m	struct:detail::chrono_formatter	typeref:typename:FormatContext &
context	./vendor/fmt/include/format.h	/^    buffered_context<Char> context;$/;"	m	struct:detail::vformat_to::format_handler	typeref:typename:buffered_context<Char>
context	./vendor/fmt/include/format.h	/^  using context = buffered_context<Char>;$/;"	t	struct:detail::arg_formatter	typeref:typename:buffered_context<Char>
context	./vendor/fmt/include/format.h	/^  using context = buffered_context<Char>;$/;"	t	struct:detail::default_arg_formatter	typeref:typename:buffered_context<Char>
context_	./vendor/fmt/include/base.h	/^  parse_context_type context_;$/;"	m	class:detail::format_string_checker	typeref:typename:parse_context_type
context_	./vendor/fmt/include/printf.h	/^  context_type& context_;$/;"	m	class:detail::printf_arg_formatter	typeref:typename:context_type &
context_type	./vendor/fmt/include/printf.h	/^  using context_type = basic_printf_context<Char>;$/;"	t	class:detail::printf_arg_formatter	typeref:typename:basic_printf_context<Char>
contiguous_until	./src/flecs.h	/^    underlying_type_t<E> contiguous_until;$/;"	m	struct:flecs::_::enum_data_impl	typeref:typename:underlying_type_t<E>
controlId	./vendor/raylib5/include/raygui.h	/^    unsigned short controlId;   \/\/ Control identifier$/;"	m	struct:GuiStyleProp	typeref:typename:unsigned short
conv_asc	./vendor/STC/include/stc/priv/cstr_prv.c	/^    int      (*conv_asc)(int);$/;"	m	struct:__anonf6322e580108	typeref:typename:int (*)(int)	file:
conv_utf	./vendor/STC/include/stc/priv/cstr_prv.c	/^    uint32_t (*conv_utf)(uint32_t);$/;"	m	struct:__anonf6322e580108	typeref:typename:uint32_t (*)(uint32_t)	file:
convert	./vendor/fmt/include/format.h	/^  auto convert(basic_string_view<WChar> s,$/;"	f	class:detail::to_utf8	typeref:typename:bool
convert	./vendor/fmt/include/format.h	/^  static auto convert(Buffer& buf, basic_string_view<WChar> s,$/;"	f	class:detail::to_utf8	typeref:typename:bool
convert_arg	./vendor/fmt/include/printf.h	/^void convert_arg(basic_format_arg<Context>& arg, Char type) {$/;"	f	namespace:detail	typeref:typename:void
convert_float	./vendor/fmt/include/format.h	/^constexpr auto convert_float(T value) -> convert_float_result<T> {$/;"	f	namespace:detail	typeref:typename:convert_float_result<T>
convert_float_result	./vendor/fmt/include/format.h	/^using convert_float_result =$/;"	t	namespace:detail	typeref:typename:conditional_t<std::is_same<T,float>::value||doublish,double,T>
convert_for_visit	./vendor/fmt/include/base.h	/^template <typename T> auto convert_for_visit(T) -> monostate { return {}; }$/;"	f	namespace:detail	typeref:typename:monostate
convert_for_visit	./vendor/fmt/include/base.h	/^template <typename T> inline auto convert_for_visit(T value) -> T {$/;"	f	namespace:detail	typeref:typename:T
convertible_to_iterator	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    struct convertible_to_iterator$/;"	s	class:ska::detailv3::sherwood_v3_table
convertible_to_value	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    struct convertible_to_value$/;"	s	class:ska::flat_hash_map
coption	./vendor/STC/include/stc/coption.h	/^} coption;$/;"	t	typeref:struct:__anonc31abe760308
coption_get	./vendor/STC/include/stc/coption.h	/^static int coption_get(coption *opt, int argc, char *argv[],$/;"	f	typeref:typename:int
coption_init	./vendor/STC/include/stc/coption.h	/^static inline coption coption_init(void) {$/;"	f	typeref:typename:coption
coption_long	./vendor/STC/include/stc/coption.h	/^} coption_long;$/;"	t	typeref:struct:__anonc31abe760208
coption_no_argument	./vendor/STC/include/stc/coption.h	/^    coption_no_argument,$/;"	e	enum:__anonc31abe760103
coption_optional_argument	./vendor/STC/include/stc/coption.h	/^    coption_optional_argument$/;"	e	enum:__anonc31abe760103
coption_permute_	./vendor/STC/include/stc/coption.h	/^static void coption_permute_(char *argv[], int j, int n) {$/;"	f	typeref:typename:void
coption_required_argument	./vendor/STC/include/stc/coption.h	/^    coption_required_argument,$/;"	e	enum:__anonc31abe760103
coption_type	./vendor/STC/include/stc/coption.h	/^} coption_type;$/;"	t	typeref:enum:__anonc31abe760103
copy	./src/flecs.h	/^    ecs_copy_t copy;            \/**< copy assignment *\/$/;"	m	struct:ecs_type_hooks_t	typeref:typename:ecs_copy_t
copy	./src/flecs.h	/^ecs_copy_t copy() {$/;"	f	namespace:flecs::_	typeref:typename:ecs_copy_t
copy	./vendor/fmt/include/base.h	/^FMT_CONSTEXPR auto copy(InputIt begin, InputIt end, OutputIt out) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
copy	./vendor/fmt/include/base.h	/^FMT_CONSTEXPR auto copy(basic_string_view<V> s, OutputIt out) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
copy	./vendor/fmt/include/base.h	/^auto copy(InputIt begin, InputIt end, OutputIt out) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
copy2	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR20 FMT_INLINE void copy2(Char* dst, const char* src) {$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR20 FMT_INLINE void
copy_asm	./Makefile	/^copy_asm: $(SRC_ASM)$/;"	t
copy_buckets	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    void copy_buckets(table const& other) {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:void
copy_ctor	./src/flecs.h	/^    ecs_copy_t copy_ctor;$/;"	m	struct:ecs_type_hooks_t	typeref:typename:ecs_copy_t
copy_ctor	./src/flecs.h	/^ecs_copy_t copy_ctor() {$/;"	f	namespace:flecs::_	typeref:typename:ecs_copy_t
copy_ctor_impl	./src/flecs.h	/^void copy_ctor_impl(void *dst_ptr, const void *src_ptr, int32_t count, $/;"	f	namespace:flecs::_	typeref:typename:void
copy_impl	./src/flecs.h	/^void copy_impl(void *dst_ptr, const void *src_ptr, int32_t count, $/;"	f	namespace:flecs::_	typeref:typename:void
copy_noinline	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR FMT_NOINLINE auto copy_noinline(InputIt begin, InputIt end,$/;"	f	namespace:detail	typeref:typename:OutputIt
copy_unit	./vendor/fmt/include/chrono.h	/^auto copy_unit(string_view unit, OutputIt out, Char) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
copy_unit	./vendor/fmt/include/chrono.h	/^auto copy_unit(string_view unit, OutputIt out, wchar_t) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
coral	./vendor/fmt/include/color.h	/^  coral = 0xFF7F50,                    \/\/ rgb(255,127,80)$/;"	e	enum:color
cornflower_blue	./vendor/fmt/include/color.h	/^  cornflower_blue = 0x6495ED,          \/\/ rgb(100,149,237)$/;"	e	enum:color
cornsilk	./vendor/fmt/include/color.h	/^  cornsilk = 0xFFF8DC,                 \/\/ rgb(255,248,220)$/;"	e	enum:color
count	./src/cvec.h	/^	int count;$/;"	m	struct:__anonbf71e1100108	typeref:typename:int
count	./src/cvec.h	/^	int count;$/;"	m	struct:__anonbf71e1100208	typeref:typename:int
count	./src/flecs.c	/^    ecs_size_t count;$/;"	m	struct:ecs_http_request_key_t	typeref:typename:ecs_size_t	file:
count	./src/flecs.c	/^    int16_t count;              \/* Number of times id occurs in table *\/$/;"	m	struct:ecs_table_record_t	typeref:typename:int16_t	file:
count	./src/flecs.c	/^    int32_t count;                   \/* Number of entities to iterate in table *\/$/;"	m	struct:ecs_query_table_match_t	typeref:typename:int32_t	file:
count	./src/flecs.c	/^    int32_t count;              \/* Number of systems to run before next op *\/$/;"	m	struct:ecs_pipeline_op_t	typeref:typename:int32_t	file:
count	./src/flecs.c	/^    int32_t count;      \/* Number of elements for value *\/$/;"	m	struct:ecs_switch_header_t	typeref:typename:int32_t	file:
count	./src/flecs.c	/^    int32_t count;$/;"	m	struct:__anon7d4a41772d08	typeref:typename:int32_t	file:
count	./src/flecs.c	/^    int32_t count;$/;"	m	struct:ecs_bitset_t	typeref:typename:int32_t	file:
count	./src/flecs.c	/^    int32_t count;$/;"	m	struct:ecs_cmd_n_t	typeref:typename:int32_t	file:
count	./src/flecs.c	/^    int32_t count;$/;"	m	struct:ecs_table_cache_list_t	typeref:typename:int32_t	file:
count	./src/flecs.c	/^    int32_t count;$/;"	m	struct:ecs_value_stack_t	typeref:typename:int32_t	file:
count	./src/flecs.c	/^    int32_t count;$/;"	m	struct:sort_helper_t	typeref:typename:int32_t	file:
count	./src/flecs.c	/^    int64_t count;$/;"	m	struct:meta_member_t	typeref:typename:int64_t	file:
count	./src/flecs.c	/^    int64_t count;$/;"	m	struct:meta_params_t	typeref:typename:int64_t	file:
count	./src/flecs.h	/^        ecs_metric_t count;                \/**< Number of tables *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1108	typeref:typename:ecs_metric_t
count	./src/flecs.h	/^        ecs_metric_t count;               \/**< Number of entities *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c0f08	typeref:typename:ecs_metric_t
count	./src/flecs.h	/^    int count() const {$/;"	f	struct:flecs::world	typeref:typename:int
count	./src/flecs.h	/^    int count(flecs::entity_t first, flecs::entity_t second) const {$/;"	f	struct:flecs::world	typeref:typename:int
count	./src/flecs.h	/^    int count(flecs::entity_t second) const {$/;"	f	struct:flecs::world	typeref:typename:int
count	./src/flecs.h	/^    int count(flecs::id_t component_id) const {$/;"	f	struct:flecs::world	typeref:typename:int
count	./src/flecs.h	/^    int32_t count() const {$/;"	f	struct:flecs::iterable	typeref:typename:int32_t
count	./src/flecs.h	/^    int32_t count() const {$/;"	f	struct:flecs::table	typeref:typename:int32_t
count	./src/flecs.h	/^    int32_t count() const {$/;"	f	struct:flecs::table_range	typeref:typename:int32_t
count	./src/flecs.h	/^    int32_t count() const {$/;"	f	struct:flecs::type	typeref:typename:int32_t
count	./src/flecs.h	/^    int32_t count() {$/;"	f	struct:flecs::iter_iterable	typeref:typename:int32_t
count	./src/flecs.h	/^    int32_t count;                \/* Number of entities to iterate *\/$/;"	m	struct:ecs_iter_t	typeref:typename:int32_t
count	./src/flecs.h	/^    int32_t count;           \/* Number of alive entries *\/$/;"	m	struct:ecs_sparse_t	typeref:typename:int32_t
count	./src/flecs.h	/^    int32_t count;       $/;"	m	struct:ecs_table_range_t	typeref:typename:int32_t
count	./src/flecs.h	/^    int32_t count;     \/**< Number of elements *\/$/;"	m	struct:EcsArray	typeref:typename:int32_t
count	./src/flecs.h	/^    int32_t count;     \/**< Number of entities to create\/populate *\/$/;"	m	struct:ecs_bulk_desc_t	typeref:typename:int32_t
count	./src/flecs.h	/^    int32_t count;$/;"	m	struct:EcsFlattenTarget	typeref:typename:int32_t
count	./src/flecs.h	/^    int32_t count;$/;"	m	struct:EcsMember	typeref:typename:int32_t
count	./src/flecs.h	/^    int32_t count;$/;"	m	struct:__anon7d4a417c0108	typeref:typename:int32_t
count	./src/flecs.h	/^    int32_t count;$/;"	m	struct:ecs_array_desc_t	typeref:typename:int32_t
count	./src/flecs.h	/^    int32_t count;$/;"	m	struct:ecs_event_desc_t	typeref:typename:int32_t
count	./src/flecs.h	/^    int32_t count;$/;"	m	struct:ecs_map_t	typeref:typename:int32_t
count	./src/flecs.h	/^    int32_t count;$/;"	m	struct:ecs_member_t	typeref:typename:int32_t
count	./src/flecs.h	/^    int32_t count;$/;"	m	struct:ecs_meta_type_op_t	typeref:typename:int32_t
count	./src/flecs.h	/^    int32_t count;$/;"	m	struct:ecs_strbuf_list_elem	typeref:typename:int32_t
count	./src/flecs.h	/^    int32_t count;$/;"	m	struct:ecs_vec_t	typeref:typename:int32_t
count	./src/flecs.h	/^    int32_t count;$/;"	m	struct:ecs_worker_iter_t	typeref:typename:int32_t
count	./src/flecs.h	/^    int32_t count[2]; \/* 0 = enter, 1 = redo *\/$/;"	m	struct:ecs_rule_op_profile_t	typeref:typename:int32_t[2]
count	./src/flecs.h	/^    opaque& count(size_t (*func)(const T *dst)) {$/;"	f	struct:flecs::opaque	typeref:typename:opaque &
count	./src/flecs.h	/^    size_t (*count)($/;"	m	struct:EcsOpaque	typeref:typename:size_t (*)(const void * dst)
count	./src/flecs.h	/^    size_t count() const {$/;"	f	struct:flecs::iter	typeref:typename:size_t
count	./src/turnbasedsystem.h	/^	uint16_t count; $/;"	m	struct:TurnCountComponent	typeref:typename:uint16_t
count	./vendor/STC/include/stc/coroutine.h	/^typedef struct { intptr_t count; } cco_sem;$/;"	m	struct:__anone7a129120308	typeref:typename:intptr_t
count	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    size_t count(const key_type& key) const { \/\/ NOLINT(modernize-use-nodiscard)$/;"	f	class:robin_hood::detail::Table	typeref:typename:size_t
count	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    typename std::enable_if<Self_::is_transparent, size_t>::type count(const OtherKey& key) cons/;"	f	class:robin_hood::detail::Table	typeref:typename:std::enable_if<Self_::is_transparent,size_t>::type
count	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto count(K const& key) const -> size_t {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:size_t
count	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto count(Key const& key) const -> size_t {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:size_t
count	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline size_type count(const Key& key) const noexcept$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
count	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    size_t count(const FindKey & key) const$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:size_t
count	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  size_type count(const K& key) const {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:size_type
count	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  size_type count(const K& key, std::size_t hash) const {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:size_type
count	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  size_type count(const K& key) const {$/;"	f	class:tsl::robin_map	typeref:typename:size_type
count	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  size_type count(const K& key, std::size_t precalculated_hash) const {$/;"	f	class:tsl::robin_map	typeref:typename:size_type
count	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  size_type count(const Key& key) const { return m_ht.count(key); }$/;"	f	class:tsl::robin_map	typeref:typename:size_type
count	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  size_type count(const Key& key, std::size_t precalculated_hash) const {$/;"	f	class:tsl::robin_map	typeref:typename:size_type
count	./vendor/STC/misc/examples/coroutines/coroutines.c	/^    int count, idx;$/;"	m	struct:fibonacci	typeref:typename:int	file:
count	./vendor/STC/misc/examples/coroutines/coroutines.c	/^    int count, idx;$/;"	m	struct:prime	typeref:typename:int	file:
count	./vendor/fmt/include/base.h	/^  auto count() -> size_t { return count_ + this->size(); }$/;"	f	class:detail::counting_buffer	typeref:typename:size_t
count	./vendor/fmt/include/base.h	/^  auto count() const -> size_t { return 0; }$/;"	f	struct:detail::buffer_traits	typeref:typename:size_t
count	./vendor/fmt/include/base.h	/^  auto count() const -> size_t { return Traits::count() + this->size(); }$/;"	f	class:detail::iterator_buffer	typeref:typename:size_t
count	./vendor/fmt/include/base.h	/^  auto count() const -> size_t { return count_; }$/;"	f	class:detail::fixed_buffer_traits	typeref:typename:size_t
count	./vendor/fmt/include/base.h	/^  auto count() const -> size_t {$/;"	f	class:detail::iterator_buffer	typeref:typename:size_t
count	./vendor/fmt/include/base.h	/^template <bool B = false> constexpr auto count() -> size_t { return B ? 1 : 0; }$/;"	f	namespace:detail	typeref:typename:size_t
count	./vendor/fmt/include/base.h	/^template <bool B1, bool B2, bool... Tail> constexpr auto count() -> size_t {$/;"	f	namespace:detail	typeref:typename:size_t
count	./vendor/fmt/include/format.h	/^    size_t* count;$/;"	m	struct:detail::compute_width::count_code_points	typeref:typename:size_t *
count	./vendor/raylib5/include/raylib.h	/^    unsigned int count;             \/\/ Events entries count$/;"	m	struct:AutomationEventList	typeref:typename:unsigned int
count	./vendor/raylib5/include/raylib.h	/^    unsigned int count;             \/\/ Filepaths entries count$/;"	m	struct:FilePathList	typeref:typename:unsigned int
count_	./vendor/fmt/include/base.h	/^  size_t count_ = 0;$/;"	m	class:detail::counting_buffer	typeref:typename:size_t
count_	./vendor/fmt/include/base.h	/^  size_t count_ = 0;$/;"	m	class:detail::fixed_buffer_traits	typeref:typename:size_t
count_code_points	./vendor/fmt/include/format.h	/^  struct count_code_points {$/;"	s	function:detail::compute_width
count_digits	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto count_digits(UInt n) -> int {$/;"	f	namespace:detail	typeref:typename:int
count_digits	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR inline auto count_digits(uint128_opt n) -> int {$/;"	f	namespace:detail	typeref:typename:int
count_digits	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR20 inline auto count_digits(uint32_t n) -> int {$/;"	f	namespace:detail	typeref:typename:int
count_digits	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR20 inline auto count_digits(uint64_t n) -> int {$/;"	f	namespace:detail	typeref:typename:int
count_digits_fallback	./vendor/fmt/include/format.h	/^template <typename T> FMT_CONSTEXPR auto count_digits_fallback(T n) -> int {$/;"	f	namespace:detail	typeref:typename:int
count_fractional_digits	./vendor/fmt/include/chrono.h	/^struct count_fractional_digits {$/;"	s	namespace:detail
count_fractional_digits	./vendor/fmt/include/chrono.h	/^struct count_fractional_digits<Num, Den, N, false> {$/;"	s	namespace:detail
count_line	./vendor/STC/misc/examples/coroutines/filetask.c	/^int count_line(struct count_line* co, cco_runtime* rt)$/;"	f	typeref:typename:int
count_named_args	./vendor/fmt/include/base.h	/^template <typename... Args> constexpr auto count_named_args() -> size_t {$/;"	f	namespace:detail	typeref:typename:size_t
count_separators	./vendor/fmt/include/format.h	/^  auto count_separators(int num_digits) const -> int {$/;"	f	class:detail::digit_grouping	typeref:typename:int
count_separators	./vendor/fmt/include/format.h	/^  constexpr auto count_separators(int) const -> int { return 0; }$/;"	f	class:detail::fallback_digit_grouping	typeref:typename:int
count_statically_named_args	./vendor/fmt/include/base.h	/^constexpr auto count_statically_named_args() -> size_t {$/;"	f	namespace:detail	typeref:typename:size_t
counter	./src/flecs.h	/^    ecs_counter_t counter;$/;"	m	union:ecs_metric_t	typeref:typename:ecs_counter_t
counting_buffer	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR counting_buffer() : buffer<T>(grow, data_, 0, buffer_size) {}$/;"	f	class:detail::counting_buffer	typeref:typename:FMT_CONSTEXPR
counting_buffer	./vendor/fmt/include/base.h	/^template <typename T = char> class counting_buffer : public buffer<T> {$/;"	c	namespace:detail
countl_zero	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR20 inline auto countl_zero(uint32_t n) -> int {$/;"	f	namespace:detail	typeref:typename:int
countl_zero	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR20 inline auto countl_zero(uint64_t n) -> int {$/;"	f	namespace:detail	typeref:typename:int
countl_zero_fallback	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR20 inline auto countl_zero_fallback(UInt n) -> int {$/;"	f	namespace:detail	typeref:typename:int
country	./vendor/STC/misc/examples/hashmaps/vikings.c	/^    const char* country;$/;"	m	struct:RViking	typeref:typename:const char *	file:
country	./vendor/STC/misc/examples/hashmaps/vikings.c	/^    cstr country;$/;"	m	struct:Viking	typeref:typename:cstr	file:
country	./vendor/STC/misc/examples/sortedmaps/multimap.c	/^struct OlympicsData { int year; const char *city, *country, *date; } ol_data[] = {$/;"	m	struct:OlympicsData	typeref:typename:const char *	file:
counts	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^static Counts& counts() {$/;"	f	namespace:robin_hood	typeref:typename:Counts &
cp	./vendor/fmt/include/format.h	/^  uint32_t cp;$/;"	m	struct:detail::find_escape_result	typeref:typename:uint32_t
cpp_type	./src/flecs.h	/^struct cpp_type<T, if_not_t< is_pair<T>::value >>$/;"	s	namespace:flecs::_
cpp_type	./src/flecs.h	/^struct cpp_type<T, if_t< is_pair<T>::value >>$/;"	s	namespace:flecs::_
cpp_type_impl	./src/flecs.h	/^struct cpp_type_impl {$/;"	s	namespace:flecs::_
crand	./vendor/STC/include/stc/crand.h	/^STC_DEF uint64_t crand(void)$/;"	f	typeref:typename:STC_DEF uint64_t
crand	./vendor/STC/include/stc/crand.h	/^typedef struct crand { uint64_t state[5]; } crand_t;$/;"	s
crand_f64	./vendor/STC/include/stc/crand.h	/^STC_INLINE double crand_f64(crand_t* rng) {$/;"	f	typeref:typename:STC_INLINE double
crand_global	./vendor/STC/include/stc/crand.h	/^static crand_t crand_global = {{ \/\/ csrand(0)$/;"	v	typeref:typename:crand_t
crand_init	./vendor/STC/include/stc/crand.h	/^STC_DEF crand_t crand_init(uint64_t seed) {$/;"	f	typeref:typename:STC_DEF crand_t
crand_normal	./vendor/STC/include/stc/crand.h	/^STC_DEF double crand_normal(crand_t* rng, crand_normal_t* dist) {$/;"	f	typeref:typename:STC_DEF double
crand_normal	./vendor/STC/include/stc/crand.h	/^typedef struct crand_normal { double mean, stddev, next; int has_next; } crand_normal_t;$/;"	s
crand_normal_init	./vendor/STC/include/stc/crand.h	/^STC_INLINE crand_normal_t crand_normal_init(double mean, double stddev)$/;"	f	typeref:typename:STC_INLINE crand_normal_t
crand_normal_t	./vendor/STC/include/stc/crand.h	/^typedef struct crand_normal { double mean, stddev, next; int has_next; } crand_normal_t;$/;"	t	typeref:struct:crand_normal
crand_t	./vendor/STC/include/stc/crand.h	/^typedef struct crand { uint64_t state[5]; } crand_t;$/;"	t	typeref:struct:crand
crand_u64	./vendor/STC/include/stc/crand.h	/^STC_INLINE uint64_t crand_u64(crand_t* rng) {$/;"	f	typeref:typename:STC_INLINE uint64_t
crand_uniform	./vendor/STC/include/stc/crand.h	/^STC_DEF int64_t crand_uniform(crand_t* rng, crand_uniform_t* d) {$/;"	f	typeref:typename:STC_DEF int64_t
crand_uniform	./vendor/STC/include/stc/crand.h	/^typedef struct crand_uniform { int64_t lower; uint64_t range, threshold; } crand_uniform_t;$/;"	s
crand_uniform_init	./vendor/STC/include/stc/crand.h	/^STC_DEF crand_uniform_t crand_uniform_init(int64_t low, int64_t high) {$/;"	f	typeref:typename:STC_DEF crand_uniform_t
crand_uniform_t	./vendor/STC/include/stc/crand.h	/^typedef struct crand_uniform { int64_t lower; uint64_t range, threshold; } crand_uniform_t;$/;"	t	typeref:struct:crand_uniform
crandf	./vendor/STC/include/stc/crand.h	/^STC_DEF double crandf(void)$/;"	f	typeref:typename:STC_DEF double
crange	./vendor/STC/include/stc/algo/crange.h	/^typedef struct { crange_value start, end, step, value; } crange;$/;"	t	typeref:struct:__anon74d0e1bc0108
crange: Integer range generator object	./vendor/STC/docs/algorithm_api.md	/^### crange: Integer range generator object$/;"	S	section:STC Algorithms""Integer range loops
crange_begin	./vendor/STC/include/stc/algo/crange.h	/^STC_INLINE crange_iter crange_begin(crange* self)$/;"	f	typeref:typename:STC_INLINE crange_iter
crange_end	./vendor/STC/include/stc/algo/crange.h	/^STC_INLINE crange_iter crange_end(crange* self)$/;"	f	typeref:typename:STC_INLINE crange_iter
crange_init	./vendor/STC/include/stc/algo/crange.h	/^#define crange_init /;"	d
crange_iter	./vendor/STC/include/stc/algo/crange.h	/^typedef struct { crange_value *ref, end, step; } crange_iter;$/;"	t	typeref:struct:__anon74d0e1bc0208
crange_make	./vendor/STC/include/stc/algo/crange.h	/^#define crange_make(...) c_MACRO_OVERLOAD(crange_make,/;"	d
crange_make_1	./vendor/STC/include/stc/algo/crange.h	/^#define crange_make_1(/;"	d
crange_make_2	./vendor/STC/include/stc/algo/crange.h	/^#define crange_make_2(/;"	d
crange_make_3	./vendor/STC/include/stc/algo/crange.h	/^STC_INLINE crange crange_make_3(crange_value start, crange_value stop, crange_value step)$/;"	f	typeref:typename:STC_INLINE crange
crange_next	./vendor/STC/include/stc/algo/crange.h	/^STC_INLINE void crange_next(crange_iter* it)$/;"	f	typeref:typename:STC_INLINE void
crange_value	./vendor/STC/include/stc/algo/crange.h	/^typedef intptr_t crange_value;$/;"	t	typeref:typename:intptr_t
create	./src/flecs.h	/^        static void create($/;"	f	struct:flecs::_::entity_observer_factory	typeref:typename:void
create_components	./src/components.c	/^void create_components(ecs_world_t *world)$/;"	f	typeref:typename:void
create_count	./src/flecs.h	/^        ecs_metric_t create_count;         \/**< Number of times table has been created *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1108	typeref:typename:ecs_metric_t
create_count	./src/flecs.h	/^        ecs_metric_t create_count;        \/**< Number of times id has been created *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1008	typeref:typename:ecs_metric_t
create_queries	./src/components.c	/^void create_queries(ecs_world_t *world)$/;"	f	typeref:typename:void
cregex	./vendor/STC/include/stc/cregex.h	/^} cregex;$/;"	t	typeref:struct:__anon7cecd9d80308
cregex_captures	./vendor/STC/include/stc/priv/cregex_prv.c	/^cregex_captures(const cregex* self) {$/;"	f	typeref:typename:int
cregex_compile	./vendor/STC/include/stc/cregex.h	/^#define cregex_compile(...) c_MACRO_OVERLOAD(cregex_compile,/;"	d
cregex_compile_2	./vendor/STC/include/stc/cregex.h	/^#define cregex_compile_2(/;"	d
cregex_compile_3	./vendor/STC/include/stc/priv/cregex_prv.c	/^cregex_compile_3(cregex *self, const char* pattern, int cflags) {$/;"	f	typeref:typename:int
cregex_drop	./vendor/STC/include/stc/priv/cregex_prv.c	/^cregex_drop(cregex* self) {$/;"	f	typeref:typename:void
cregex_find	./vendor/STC/include/stc/cregex.h	/^#define cregex_find(...) c_MACRO_OVERLOAD(cregex_find,/;"	d
cregex_find_3	./vendor/STC/include/stc/cregex.h	/^#define cregex_find_3(/;"	d
cregex_find_4	./vendor/STC/include/stc/priv/cregex_prv.c	/^cregex_find_4(const cregex* re, const char* input, csview match[], int mflags) {$/;"	f	typeref:typename:int
cregex_find_pattern	./vendor/STC/include/stc/cregex.h	/^#define cregex_find_pattern(...) c_MACRO_OVERLOAD(cregex_find_pattern,/;"	d
cregex_find_pattern_3	./vendor/STC/include/stc/cregex.h	/^#define cregex_find_pattern_3(/;"	d
cregex_find_pattern_4	./vendor/STC/include/stc/priv/cregex_prv.c	/^cregex_find_pattern_4(const char* pattern, const char* input,$/;"	f	typeref:typename:int
cregex_find_sv	./vendor/STC/include/stc/cregex.h	/^STC_INLINE int cregex_find_sv(const cregex* re, csview input, csview match[]) {$/;"	f	typeref:typename:STC_INLINE int
cregex_from	./vendor/STC/include/stc/cregex.h	/^#define cregex_from(...) c_MACRO_OVERLOAD(cregex_from,/;"	d
cregex_from_1	./vendor/STC/include/stc/cregex.h	/^#define cregex_from_1(/;"	d
cregex_from_2	./vendor/STC/include/stc/cregex.h	/^STC_INLINE cregex cregex_from_2(const char* pattern, int cflags) {$/;"	f	typeref:typename:STC_INLINE cregex
cregex_init	./vendor/STC/include/stc/cregex.h	/^STC_INLINE cregex cregex_init(void) {$/;"	f	typeref:typename:STC_INLINE cregex
cregex_is_match	./vendor/STC/include/stc/cregex.h	/^STC_INLINE bool cregex_is_match(const cregex* re, const char* input)$/;"	f	typeref:typename:STC_INLINE bool
cregex_iter	./vendor/STC/include/stc/cregex.h	/^} cregex_iter;$/;"	t	typeref:struct:__anon7cecd9d80408
cregex_replace	./vendor/STC/include/stc/cregex.h	/^#define cregex_replace(...) c_MACRO_OVERLOAD(cregex_replace,/;"	d
cregex_replace_3	./vendor/STC/include/stc/cregex.h	/^#define cregex_replace_3(/;"	d
cregex_replace_4	./vendor/STC/include/stc/cregex.h	/^STC_INLINE cstr cregex_replace_4(const cregex* re, const char* input, const char* replace, int c/;"	f	typeref:typename:STC_INLINE cstr
cregex_replace_pattern	./vendor/STC/include/stc/cregex.h	/^#define cregex_replace_pattern(...) c_MACRO_OVERLOAD(cregex_replace_pattern,/;"	d
cregex_replace_pattern_3	./vendor/STC/include/stc/cregex.h	/^#define cregex_replace_pattern_3(/;"	d
cregex_replace_pattern_4	./vendor/STC/include/stc/cregex.h	/^#define cregex_replace_pattern_4(/;"	d
cregex_replace_pattern_6	./vendor/STC/include/stc/priv/cregex_prv.c	/^cregex_replace_pattern_6(const char* pattern, const char* input, const char* replace, int count,$/;"	f	typeref:typename:cstr
cregex_replace_sv	./vendor/STC/include/stc/cregex.h	/^#define cregex_replace_sv(...) c_MACRO_OVERLOAD(cregex_replace_sv,/;"	d
cregex_replace_sv_3	./vendor/STC/include/stc/cregex.h	/^#define cregex_replace_sv_3(/;"	d
cregex_replace_sv_4	./vendor/STC/include/stc/cregex.h	/^#define cregex_replace_sv_4(/;"	d
cregex_replace_sv_6	./vendor/STC/include/stc/priv/cregex_prv.c	/^cregex_replace_sv_6(const cregex* re, csview input, const char* replace, int count,$/;"	f	typeref:typename:cstr
cregex_result	./vendor/STC/include/stc/cregex.h	/^} cregex_result;$/;"	t	typeref:enum:__anon7cecd9d80203
crimson	./vendor/fmt/include/color.h	/^  crimson = 0xDC143C,                  \/\/ rgb(220,20,60)$/;"	e	enum:color
cspan_CMPLX_FLD	./vendor/STC/include/stc/cspan.h	/^#define cspan_CMPLX_FLD(/;"	d
cspan_at	./vendor/STC/include/stc/cspan.h	/^#define cspan_at(/;"	d
cspan_back	./vendor/STC/include/stc/cspan.h	/^#define cspan_back(/;"	d
cspan_from	./vendor/STC/include/stc/cspan.h	/^#define cspan_from(/;"	d
cspan_from_array	./vendor/STC/include/stc/cspan.h	/^#define cspan_from_array(/;"	d
cspan_from_n	./vendor/STC/include/stc/cspan.h	/^#define cspan_from_n(/;"	d
cspan_front	./vendor/STC/include/stc/cspan.h	/^#define cspan_front(/;"	d
cspan_get_layout	./vendor/STC/include/stc/cspan.h	/^#define cspan_get_layout(/;"	d
cspan_index	./vendor/STC/include/stc/cspan.h	/^#define cspan_index(/;"	d
cspan_init	./vendor/STC/include/stc/cspan.h	/^#define cspan_init(/;"	d
cspan_is_colmajor	./vendor/STC/include/stc/cspan.h	/^#define cspan_is_colmajor(/;"	d
cspan_is_rowmajor	./vendor/STC/include/stc/cspan.h	/^#define cspan_is_rowmajor(/;"	d
cspan_layout	./vendor/STC/include/stc/cspan.h	/^typedef enum {c_ROWMAJOR, c_COLMAJOR} cspan_layout;$/;"	t	typeref:enum:__anone018744f0103
cspan_md	./vendor/STC/include/stc/cspan.h	/^#define cspan_md(/;"	d
cspan_md_layout	./vendor/STC/include/stc/cspan.h	/^#define cspan_md_layout(/;"	d
cspan_print	./vendor/STC/include/stc/cspan.h	/^#define cspan_print(...) c_MACRO_OVERLOAD(cspan_print,/;"	d
cspan_print_2	./vendor/STC/include/stc/cspan.h	/^#define cspan_print_2(/;"	d
cspan_print_3	./vendor/STC/include/stc/cspan.h	/^#define cspan_print_3(/;"	d
cspan_print_4	./vendor/STC/include/stc/cspan.h	/^#define cspan_print_4(/;"	d
cspan_print_5	./vendor/STC/include/stc/cspan.h	/^#define cspan_print_5(/;"	d
cspan_print_6	./vendor/STC/include/stc/cspan.h	/^#define cspan_print_6(/;"	d
cspan_print_complex	./vendor/STC/include/stc/cspan.h	/^#define cspan_print_complex(/;"	d
cspan_rank	./vendor/STC/include/stc/cspan.h	/^#define cspan_rank(/;"	d
cspan_size	./vendor/STC/include/stc/cspan.h	/^#define cspan_size(self) _cspan_size(/;"	d
cspan_slice	./vendor/STC/include/stc/cspan.h	/^#define cspan_slice(/;"	d
cspan_submd2	./vendor/STC/include/stc/cspan.h	/^#define cspan_submd2(/;"	d
cspan_submd3	./vendor/STC/include/stc/cspan.h	/^#define cspan_submd3(...) c_MACRO_OVERLOAD(cspan_submd3,/;"	d
cspan_submd3_2	./vendor/STC/include/stc/cspan.h	/^#define cspan_submd3_2(/;"	d
cspan_submd3_3	./vendor/STC/include/stc/cspan.h	/^#define cspan_submd3_3(/;"	d
cspan_submd4	./vendor/STC/include/stc/cspan.h	/^#define cspan_submd4(...) c_MACRO_OVERLOAD(cspan_submd4,/;"	d
cspan_submd4_2	./vendor/STC/include/stc/cspan.h	/^#define cspan_submd4_2(/;"	d
cspan_submd4_3	./vendor/STC/include/stc/cspan.h	/^#define cspan_submd4_3(/;"	d
cspan_submd4_4	./vendor/STC/include/stc/cspan.h	/^#define cspan_submd4_4(/;"	d
cspan_subspan	./vendor/STC/include/stc/cspan.h	/^#define cspan_subspan(/;"	d
cspan_swap_axes	./vendor/STC/include/stc/cspan.h	/^#define cspan_swap_axes(/;"	d
cspan_transpose	./vendor/STC/include/stc/cspan.h	/^#define cspan_transpose(/;"	d
cspan_transposed2	./vendor/STC/include/stc/cspan.h	/^#define cspan_transposed2(/;"	d
csrand	./vendor/STC/include/stc/crand.h	/^STC_DEF void csrand(uint64_t seed)$/;"	f	typeref:typename:STC_DEF void
cstr	./vendor/STC/include/stc/types.h	/^typedef union cstr {$/;"	u
cstr	./vendor/STC/include/stc/types.h	/^} cstr;$/;"	t	typeref:union:cstr
cstr methods returning csview	./vendor/STC/docs/csview_api.md	/^#### cstr methods returning csview$/;"	t	section:STC [csview](../include/stc/csview.h): Sub-string View""Methods
cstr_advance	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE cstr_iter cstr_advance(cstr_iter it, intptr_t u8pos) {$/;"	f	typeref:typename:STC_INLINE cstr_iter
cstr_append	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE char* cstr_append(cstr* self, const char* str)$/;"	f	typeref:typename:STC_INLINE char *
cstr_append_fmt	./vendor/STC/include/stc/priv/cstr_prv.c	/^STC_DEF intptr_t cstr_append_fmt(cstr* self, const char* fmt, ...) {$/;"	f	typeref:typename:STC_DEF intptr_t
cstr_append_n	./vendor/STC/include/stc/priv/cstr_prv.c	/^STC_DEF char* cstr_append_n(cstr* self, const char* str, const intptr_t len) {$/;"	f	typeref:typename:STC_DEF char *
cstr_append_s	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE char* cstr_append_s(cstr* self, cstr s)$/;"	f	typeref:typename:STC_INLINE char *
cstr_append_sv	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE char* cstr_append_sv(cstr* self, csview sv)$/;"	f	typeref:typename:STC_INLINE char *
cstr_append_uninit	./vendor/STC/include/stc/priv/cstr_prv.c	/^STC_DEF char* cstr_append_uninit(cstr *self, intptr_t len) {$/;"	f	typeref:typename:STC_DEF char *
cstr_assign	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE char* cstr_assign(cstr* self, const char* str)$/;"	f	typeref:typename:STC_INLINE char *
cstr_assign_n	./vendor/STC/include/stc/priv/cstr_prv.c	/^STC_DEF char* cstr_assign_n(cstr* self, const char* str, const intptr_t len) {$/;"	f	typeref:typename:STC_DEF char *
cstr_assign_sv	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE char* cstr_assign_sv(cstr* self, csview sv)$/;"	f	typeref:typename:STC_INLINE char *
cstr_begin	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE cstr_iter cstr_begin(const cstr* self) {$/;"	f	typeref:typename:STC_INLINE cstr_iter
cstr_buf	./vendor/STC/include/stc/types.h	/^typedef struct { cstr_value* data; intptr_t size, cap; } cstr_buf;$/;"	t	typeref:struct:__anon0ab7b7af0408
cstr_buffer	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE cstr_buf cstr_buffer(cstr* s) {$/;"	f	typeref:typename:STC_INLINE cstr_buf
cstr_capacity	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE intptr_t cstr_capacity(const cstr* self)$/;"	f	typeref:typename:STC_INLINE intptr_t
cstr_casefold_sv	./vendor/STC/include/stc/priv/cstr_prv.c	/^cstr cstr_casefold_sv(csview sv)$/;"	f	typeref:typename:cstr
cstr_clear	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE void cstr_clear(cstr* self)$/;"	f	typeref:typename:STC_INLINE void
cstr_clone	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE cstr cstr_clone(cstr s) {$/;"	f	typeref:typename:STC_INLINE cstr
cstr_cmp	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE int cstr_cmp(const cstr* s1, const cstr* s2)$/;"	f	typeref:typename:STC_INLINE int
cstr_contains	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE bool cstr_contains(const cstr* self, const char* search)$/;"	f	typeref:typename:STC_INLINE bool
cstr_contains_s	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE bool cstr_contains_s(const cstr* self, cstr search)$/;"	f	typeref:typename:STC_INLINE bool
cstr_contains_sv	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE bool cstr_contains_sv(const cstr* self, csview search)$/;"	f	typeref:typename:STC_INLINE bool
cstr_copy	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE char* cstr_copy(cstr* self, cstr s) {$/;"	f	typeref:typename:STC_INLINE char *
cstr_data	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE char* cstr_data(cstr* self)$/;"	f	typeref:typename:STC_INLINE char *
cstr_drop	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE void cstr_drop(cstr* self) {$/;"	f	typeref:typename:STC_INLINE void
cstr_empty	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE bool cstr_empty(const cstr* self)$/;"	f	typeref:typename:STC_INLINE bool
cstr_end	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE cstr_iter cstr_end(const cstr* self) {$/;"	f	typeref:typename:STC_INLINE cstr_iter
cstr_ends_with	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE bool cstr_ends_with(const cstr* self, const char* sub)$/;"	f	typeref:typename:STC_INLINE bool
cstr_ends_with_s	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE bool cstr_ends_with_s(const cstr* self, cstr sub)$/;"	f	typeref:typename:STC_INLINE bool
cstr_ends_with_sv	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE bool cstr_ends_with_sv(const cstr* self, csview sub) {$/;"	f	typeref:typename:STC_INLINE bool
cstr_eq	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE bool cstr_eq(const cstr* s1, const cstr* s2) {$/;"	f	typeref:typename:STC_INLINE bool
cstr_equals	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE bool cstr_equals(const cstr* self, const char* str)$/;"	f	typeref:typename:STC_INLINE bool
cstr_equals_s	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE bool cstr_equals_s(const cstr* self, cstr s)$/;"	f	typeref:typename:STC_INLINE bool
cstr_equals_sv	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE bool cstr_equals_sv(const cstr* self, csview sv)$/;"	f	typeref:typename:STC_INLINE bool
cstr_erase	./vendor/STC/include/stc/priv/cstr_prv.c	/^STC_DEF void cstr_erase(cstr* self, const intptr_t pos, intptr_t len) {$/;"	f	typeref:typename:STC_DEF void
cstr_find	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE intptr_t cstr_find(const cstr* self, const char* search) {$/;"	f	typeref:typename:STC_INLINE intptr_t
cstr_find_at	./vendor/STC/include/stc/priv/cstr_prv.c	/^STC_DEF intptr_t cstr_find_at(const cstr* self, const intptr_t pos, const char* search) {$/;"	f	typeref:typename:STC_DEF intptr_t
cstr_find_s	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE intptr_t cstr_find_s(const cstr* self, cstr search)$/;"	f	typeref:typename:STC_INLINE intptr_t
cstr_find_sv	./vendor/STC/include/stc/priv/cstr_prv.c	/^STC_DEF intptr_t cstr_find_sv(const cstr* self, csview search) {$/;"	f	typeref:typename:STC_DEF intptr_t
cstr_from	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE cstr cstr_from(const char* str)$/;"	f	typeref:typename:STC_INLINE cstr
cstr_from_fmt	./vendor/STC/include/stc/priv/cstr_prv.c	/^STC_DEF cstr cstr_from_fmt(const char* fmt, ...) {$/;"	f	typeref:typename:STC_DEF cstr
cstr_from_n	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE cstr cstr_from_n(const char* str, const intptr_t len) {$/;"	f	typeref:typename:STC_INLINE cstr
cstr_from_pos	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE cstr cstr_from_pos(cstr s, intptr_t pos, intptr_t len)$/;"	f	typeref:typename:STC_INLINE cstr
cstr_from_sv	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE cstr cstr_from_sv(csview sv)$/;"	f	typeref:typename:STC_INLINE cstr
cstr_from_zv	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE cstr cstr_from_zv(czview zv)$/;"	f	typeref:typename:STC_INLINE cstr
cstr_getdelim	./vendor/STC/include/stc/priv/cstr_prv.c	/^STC_DEF bool cstr_getdelim(cstr *self, const int delim, FILE *fp) {$/;"	f	typeref:typename:STC_DEF bool
cstr_getline	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE bool cstr_getline(cstr *self, FILE *fp)$/;"	f	typeref:typename:STC_INLINE bool
cstr_hash	./vendor/STC/include/stc/priv/cstr_prv.c	/^STC_DEF uint64_t cstr_hash(const cstr *self) {$/;"	f	typeref:typename:STC_DEF uint64_t
cstr_icmp	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE int cstr_icmp(const cstr* s1, const cstr* s2)$/;"	f	typeref:typename:STC_INLINE int
cstr_iends_with	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE bool cstr_iends_with(const cstr* self, const char* sub) {$/;"	f	typeref:typename:STC_INLINE bool
cstr_iequals	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE bool cstr_iequals(const cstr* self, const char* str)$/;"	f	typeref:typename:STC_INLINE bool
cstr_init	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE cstr cstr_init(void)$/;"	f	typeref:typename:STC_INLINE cstr
cstr_insert	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE void cstr_insert(cstr* self, intptr_t pos, const char* str)$/;"	f	typeref:typename:STC_INLINE void
cstr_insert_s	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE void cstr_insert_s(cstr* self, intptr_t pos, cstr s)$/;"	f	typeref:typename:STC_INLINE void
cstr_insert_sv	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE void cstr_insert_sv(cstr* self, intptr_t pos, csview sv)$/;"	f	typeref:typename:STC_INLINE void
cstr_is_long	./vendor/STC/include/stc/priv/cstr_prv.h	/^#define cstr_is_long(/;"	d
cstr_istarts_with	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE bool cstr_istarts_with(const cstr* self, const char* sub) {$/;"	f	typeref:typename:STC_INLINE bool
cstr_iter	./vendor/STC/include/stc/types.h	/^} cstr_iter;$/;"	t	typeref:union:__anon0ab7b7af070a
cstr_l_cap	./vendor/STC/include/stc/priv/cstr_prv.h	/^    #define cstr_l_cap(/;"	d
cstr_l_data	./vendor/STC/include/stc/priv/cstr_prv.h	/^#define cstr_l_data(/;"	d
cstr_l_drop	./vendor/STC/include/stc/priv/cstr_prv.h	/^#define cstr_l_drop(/;"	d
cstr_l_set_cap	./vendor/STC/include/stc/priv/cstr_prv.h	/^    #define cstr_l_set_cap(/;"	d
cstr_l_set_size	./vendor/STC/include/stc/priv/cstr_prv.h	/^#define cstr_l_set_size(/;"	d
cstr_l_size	./vendor/STC/include/stc/priv/cstr_prv.h	/^#define cstr_l_size(/;"	d
cstr_lit	./vendor/STC/include/stc/priv/cstr_prv.h	/^#define cstr_lit(/;"	d
cstr_lowercase	./vendor/STC/include/stc/priv/cstr_prv.c	/^void cstr_lowercase(cstr* self)$/;"	f	typeref:typename:void
cstr_move	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE cstr cstr_move(cstr* self) {$/;"	f	typeref:typename:STC_INLINE cstr
cstr_next	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE void cstr_next(cstr_iter* it) {$/;"	f	typeref:typename:STC_INLINE void
cstr_null	./vendor/STC/include/stc/priv/cstr_prv.h	/^#define cstr_null /;"	d
cstr_pop	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE void cstr_pop(cstr* self) {$/;"	f	typeref:typename:STC_INLINE void
cstr_printf	./vendor/STC/include/stc/priv/cstr_prv.c	/^STC_DEF intptr_t cstr_printf(cstr* self, const char* fmt, ...) {$/;"	f	typeref:typename:STC_DEF intptr_t
cstr_push	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE char* cstr_push(cstr* self, const char* chr)$/;"	f	typeref:typename:STC_INLINE char *
cstr_replace	./vendor/STC/include/stc/priv/cstr_prv.h	/^#define cstr_replace(...) c_MACRO_OVERLOAD(cstr_replace,/;"	d
cstr_replace_3	./vendor/STC/include/stc/priv/cstr_prv.h	/^#define cstr_replace_3(/;"	d
cstr_replace_4	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE void cstr_replace_4(cstr* self, const char* search, const char* repl, int32_t count) /;"	f	typeref:typename:STC_INLINE void
cstr_replace_at	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE void cstr_replace_at(cstr* self, intptr_t pos, intptr_t len, const char* repl)$/;"	f	typeref:typename:STC_INLINE void
cstr_replace_at_s	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE void cstr_replace_at_s(cstr* self, intptr_t pos, intptr_t len, cstr repl)$/;"	f	typeref:typename:STC_INLINE void
cstr_replace_at_sv	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE void cstr_replace_at_sv(cstr* self, intptr_t pos, intptr_t len, const csview repl) {$/;"	f	typeref:typename:STC_INLINE void
cstr_replace_sv	./vendor/STC/include/stc/priv/cstr_prv.c	/^STC_DEF cstr cstr_replace_sv(csview in, csview search, csview repl, int32_t count) {$/;"	f	typeref:typename:STC_DEF cstr
cstr_reserve	./vendor/STC/include/stc/priv/cstr_prv.c	/^STC_DEF char* cstr_reserve(cstr* self, const intptr_t cap) {$/;"	f	typeref:typename:STC_DEF char *
cstr_resize	./vendor/STC/include/stc/priv/cstr_prv.c	/^STC_DEF char* cstr_resize(cstr* self, const intptr_t size, const char value) {$/;"	f	typeref:typename:STC_DEF char *
cstr_s_cap	./vendor/STC/include/stc/priv/cstr_prv.h	/^        cstr_s_cap = cstr_s_last - 1 };$/;"	e	enum:__anonf6322e5d0103
cstr_s_data	./vendor/STC/include/stc/priv/cstr_prv.h	/^#define cstr_s_data(/;"	d
cstr_s_last	./vendor/STC/include/stc/priv/cstr_prv.h	/^enum  { cstr_s_last = sizeof(cstr_buf) - 1,$/;"	e	enum:__anonf6322e5d0103
cstr_s_set_size	./vendor/STC/include/stc/priv/cstr_prv.h	/^#define cstr_s_set_size(/;"	d
cstr_s_size	./vendor/STC/include/stc/priv/cstr_prv.h	/^#define cstr_s_size(/;"	d
cstr_shrink_to_fit	./vendor/STC/include/stc/priv/cstr_prv.c	/^STC_DEF void cstr_shrink_to_fit(cstr* self) {$/;"	f	typeref:typename:STC_DEF void
cstr_size	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE intptr_t cstr_size(const cstr* self)$/;"	f	typeref:typename:STC_INLINE intptr_t
cstr_starts_with	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE bool cstr_starts_with(const cstr* self, const char* sub) {$/;"	f	typeref:typename:STC_INLINE bool
cstr_starts_with_s	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE bool cstr_starts_with_s(const cstr* self, cstr sub)$/;"	f	typeref:typename:STC_INLINE bool
cstr_starts_with_sv	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE bool cstr_starts_with_sv(const cstr* self, csview sub) {$/;"	f	typeref:typename:STC_INLINE bool
cstr_str	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE const char* cstr_str(const cstr* self)$/;"	f	typeref:typename:STC_INLINE const char *
cstr_sv	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE csview cstr_sv(const cstr* s) {$/;"	f	typeref:typename:STC_INLINE csview
cstr_take	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE cstr* cstr_take(cstr* self, const cstr s) {$/;"	f	typeref:typename:STC_INLINE cstr *
cstr_tocase	./vendor/STC/include/stc/priv/cstr_prv.c	/^static cstr cstr_tocase(csview sv, int k) {$/;"	f	typeref:typename:cstr	file:
cstr_tolower	./vendor/STC/include/stc/priv/cstr_prv.c	/^cstr cstr_tolower(const char* str)$/;"	f	typeref:typename:cstr
cstr_tolower_sv	./vendor/STC/include/stc/priv/cstr_prv.c	/^cstr cstr_tolower_sv(csview sv)$/;"	f	typeref:typename:cstr
cstr_topos	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE intptr_t cstr_topos(const cstr* self, cstr_iter it)$/;"	f	typeref:typename:STC_INLINE intptr_t
cstr_toraw	./vendor/STC/include/stc/priv/cstr_prv.h	/^#define cstr_toraw(/;"	d
cstr_toupper	./vendor/STC/include/stc/priv/cstr_prv.c	/^cstr cstr_toupper(const char* str)$/;"	f	typeref:typename:cstr
cstr_toupper_sv	./vendor/STC/include/stc/priv/cstr_prv.c	/^cstr cstr_toupper_sv(csview sv)$/;"	f	typeref:typename:cstr
cstr_u8_at	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE const char* cstr_u8_at(const cstr* self, intptr_t u8idx)$/;"	f	typeref:typename:STC_INLINE const char *
cstr_u8_chr	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE csview cstr_u8_chr(const cstr* self, intptr_t u8idx) {$/;"	f	typeref:typename:STC_INLINE csview
cstr_u8_erase	./vendor/STC/include/stc/priv/cstr_prv.c	/^STC_DEF void cstr_u8_erase(cstr* self, const intptr_t bytepos, const intptr_t u8len) {$/;"	f	typeref:typename:STC_DEF void
cstr_u8_replace_at	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE void cstr_u8_replace_at(cstr* self, intptr_t bytepos, intptr_t u8len, csview repl)$/;"	f	typeref:typename:STC_INLINE void
cstr_u8_size	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE intptr_t cstr_u8_size(const cstr* self)$/;"	f	typeref:typename:STC_INLINE intptr_t
cstr_u8_size_n	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE intptr_t cstr_u8_size_n(const cstr* self, intptr_t nbytes)$/;"	f	typeref:typename:STC_INLINE intptr_t
cstr_u8_topos	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE intptr_t cstr_u8_topos(const cstr* self, intptr_t u8idx)$/;"	f	typeref:typename:STC_INLINE intptr_t
cstr_uppercase	./vendor/STC/include/stc/priv/cstr_prv.c	/^void cstr_uppercase(cstr* self)$/;"	f	typeref:typename:void
cstr_valid_utf8	./vendor/STC/include/stc/priv/cstr_prv.c	/^bool cstr_valid_utf8(const cstr* self)$/;"	f	typeref:typename:bool
cstr_value	./vendor/STC/include/stc/types.h	/^typedef char cstr_value;$/;"	t	typeref:typename:char
cstr_vfmt	./vendor/STC/include/stc/priv/cstr_prv.c	/^STC_DEF intptr_t cstr_vfmt(cstr* self, intptr_t start, const char* fmt, va_list args) {$/;"	f	typeref:typename:STC_DEF intptr_t
cstr_with_capacity	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE cstr cstr_with_capacity(const intptr_t cap) {$/;"	f	typeref:typename:STC_INLINE cstr
cstr_with_size	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE cstr cstr_with_size(const intptr_t size, const char value) {$/;"	f	typeref:typename:STC_INLINE cstr
cstr_zv	./vendor/STC/include/stc/priv/cstr_prv.h	/^STC_INLINE czview cstr_zv(const cstr* s) {$/;"	f	typeref:typename:STC_INLINE czview
cstride_t	./vendor/STC/include/stc/cspan.h	/^typedef STC_CSPAN_INDEX_TYPE cextent_t, cstride_t;$/;"	t	typeref:typename:STC_CSPAN_INDEX_TYPE
cstring_set	./vendor/fmt/include/base.h	/^  cstring_set = set(type::cstring_type),$/;"	e	enum:detail::__anonea363bd90103
cstring_type	./vendor/fmt/include/base.h	/^  cstring_type,$/;"	e	enum:detail::type
cstring_view	./vendor/fmt/include/os.h	/^using cstring_view = basic_cstring_view<char>;$/;"	t	typeref:typename:basic_cstring_view<char>
csv	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    csv,$/;"	e	enum:picobench::report_output_format
csview	./vendor/STC/include/stc/types.h	/^typedef struct csview {$/;"	s
csview	./vendor/STC/include/stc/types.h	/^} csview;$/;"	t	typeref:struct:csview
csview_advance	./vendor/STC/include/stc/csview.h	/^STC_DEF csview_iter csview_advance(csview_iter it, intptr_t u8pos) {$/;"	f	typeref:typename:STC_DEF csview_iter
csview_at	./vendor/STC/include/stc/csview.h	/^STC_INLINE const char* csview_at(csview sv, intptr_t idx)$/;"	f	typeref:typename:STC_INLINE const char *
csview_begin	./vendor/STC/include/stc/csview.h	/^STC_INLINE csview_iter csview_begin(const csview* self) {$/;"	f	typeref:typename:STC_INLINE csview_iter
csview_clear	./vendor/STC/include/stc/csview.h	/^STC_INLINE void     csview_clear(csview* self) { *self = csview_init(); }$/;"	f	typeref:typename:STC_INLINE void
csview_clone	./vendor/STC/include/stc/csview.h	/^#define             csview_clone(/;"	d
csview_cmp	./vendor/STC/include/stc/csview.h	/^STC_INLINE int csview_cmp(const csview* x, const csview* y) {$/;"	f	typeref:typename:STC_INLINE int
csview_contains	./vendor/STC/include/stc/csview.h	/^STC_INLINE bool csview_contains(csview sv, const char* str)$/;"	f	typeref:typename:STC_INLINE bool
csview_drop	./vendor/STC/include/stc/csview.h	/^#define             csview_drop(/;"	d
csview_empty	./vendor/STC/include/stc/csview.h	/^STC_INLINE bool     csview_empty(csview sv) { return sv.size == 0; }$/;"	f	typeref:typename:STC_INLINE bool
csview_end	./vendor/STC/include/stc/csview.h	/^STC_INLINE csview_iter csview_end(const csview* self) {$/;"	f	typeref:typename:STC_INLINE csview_iter
csview_ends_with	./vendor/STC/include/stc/csview.h	/^STC_INLINE bool csview_ends_with(csview sv, const char* str) {$/;"	f	typeref:typename:STC_INLINE bool
csview_eq	./vendor/STC/include/stc/csview.h	/^STC_INLINE bool csview_eq(const csview* x, const csview* y)$/;"	f	typeref:typename:STC_INLINE bool
csview_equals	./vendor/STC/include/stc/csview.h	/^STC_INLINE bool csview_equals(csview sv, const char* str)$/;"	f	typeref:typename:STC_INLINE bool
csview_equals_sv	./vendor/STC/include/stc/csview.h	/^STC_INLINE bool csview_equals_sv(csview sv1, csview sv2)$/;"	f	typeref:typename:STC_INLINE bool
csview_find	./vendor/STC/include/stc/csview.h	/^STC_INLINE intptr_t csview_find(csview sv, const char* str)$/;"	f	typeref:typename:STC_INLINE intptr_t
csview_find_sv	./vendor/STC/include/stc/csview.h	/^STC_DEF intptr_t csview_find_sv(csview sv, csview search) {$/;"	f	typeref:typename:STC_DEF intptr_t
csview_from	./vendor/STC/include/stc/csview.h	/^STC_INLINE csview   csview_from(const char* str)$/;"	f	typeref:typename:STC_INLINE csview
csview_from_n	./vendor/STC/include/stc/csview.h	/^STC_INLINE csview   csview_from_n(const char* str, intptr_t n)$/;"	f	typeref:typename:STC_INLINE csview
csview_hash	./vendor/STC/include/stc/csview.h	/^STC_DEF uint64_t csview_hash(const csview *self)$/;"	f	typeref:typename:STC_DEF uint64_t
csview_icmp	./vendor/STC/include/stc/csview.h	/^STC_INLINE int csview_icmp(const csview* x, const csview* y)$/;"	f	typeref:typename:STC_INLINE int
csview_init	./vendor/STC/include/stc/csview.h	/^#define             csview_init(/;"	d
csview_iter	./vendor/STC/include/stc/types.h	/^} csview_iter;$/;"	t	typeref:union:__anon0ab7b7af010a
csview_last	./vendor/STC/include/stc/csview.h	/^STC_INLINE csview csview_last(csview sv, intptr_t len)$/;"	f	typeref:typename:STC_INLINE csview
csview_next	./vendor/STC/include/stc/csview.h	/^STC_INLINE void csview_next(csview_iter* it) {$/;"	f	typeref:typename:STC_INLINE void
csview_size	./vendor/STC/include/stc/csview.h	/^STC_INLINE intptr_t csview_size(csview sv) { return sv.size; }$/;"	f	typeref:typename:STC_INLINE intptr_t
csview_slice	./vendor/STC/include/stc/csview.h	/^STC_INLINE csview csview_slice(csview sv, intptr_t p1, intptr_t p2) {$/;"	f	typeref:typename:STC_INLINE csview
csview_slice_ex	./vendor/STC/include/stc/csview.h	/^STC_DEF csview csview_slice_ex(csview sv, intptr_t p1, intptr_t p2) {$/;"	f	typeref:typename:STC_DEF csview
csview_starts_with	./vendor/STC/include/stc/csview.h	/^STC_INLINE bool csview_starts_with(csview sv, const char* str) {$/;"	f	typeref:typename:STC_INLINE bool
csview_substr	./vendor/STC/include/stc/csview.h	/^STC_INLINE csview csview_substr(csview sv, intptr_t pos, intptr_t n) {$/;"	f	typeref:typename:STC_INLINE csview
csview_substr_ex	./vendor/STC/include/stc/csview.h	/^STC_DEF csview csview_substr_ex(csview sv, intptr_t pos, intptr_t n) {$/;"	f	typeref:typename:STC_DEF csview
csview_token	./vendor/STC/include/stc/csview.h	/^STC_DEF csview csview_token(csview sv, const char* sep, intptr_t* start) {$/;"	f	typeref:typename:STC_DEF csview
csview_u8_at	./vendor/STC/include/stc/csview.h	/^STC_INLINE const char* csview_u8_at(csview sv, intptr_t u8idx)$/;"	f	typeref:typename:STC_INLINE const char *
csview_u8_last	./vendor/STC/include/stc/csview.h	/^STC_INLINE csview csview_u8_last(csview sv, intptr_t u8len) {$/;"	f	typeref:typename:STC_INLINE csview
csview_u8_size	./vendor/STC/include/stc/csview.h	/^STC_INLINE intptr_t csview_u8_size(csview sv)$/;"	f	typeref:typename:STC_INLINE intptr_t
csview_u8_substr	./vendor/STC/include/stc/csview.h	/^STC_INLINE csview csview_u8_substr(csview sv, intptr_t bytepos, intptr_t u8len) {$/;"	f	typeref:typename:STC_INLINE csview
csview_u8_valid	./vendor/STC/include/stc/csview.h	/^STC_INLINE bool csview_u8_valid(csview sv) \/\/ requires linking with utf8 symbols$/;"	f	typeref:typename:STC_INLINE bool
csview_value	./vendor/STC/include/stc/types.h	/^typedef const char csview_value;$/;"	t	typeref:typename:const char
ctest	./vendor/STC/misc/tests/ctest.h	/^struct ctest {$/;"	s
ctest_err	./vendor/STC/misc/tests/ctest.h	/^static jmp_buf ctest_err;$/;"	v	typeref:typename:jmp_buf
ctest_errorbuffer	./vendor/STC/misc/tests/ctest.h	/^static char ctest_errorbuffer[MSG_SIZE];$/;"	v	typeref:typename:char[]
ctest_errormsg	./vendor/STC/misc/tests/ctest.h	/^static char* ctest_errormsg;$/;"	v	typeref:typename:char *
ctest_errorsize	./vendor/STC/misc/tests/ctest.h	/^static size_t ctest_errorsize;$/;"	v	typeref:typename:size_t
ctest_filter_func	./vendor/STC/misc/tests/ctest.h	/^typedef int (*ctest_filter_func)(struct ctest*);$/;"	t	typeref:typename:int (*)(struct ctest *)
ctest_main	./vendor/STC/misc/tests/ctest.h	/^int ctest_main(int argc, const char *argv[])$/;"	f	typeref:typename:int
ctest_nullary_run_func	./vendor/STC/misc/tests/ctest.h	/^typedef void (*ctest_nullary_run_func)(void);$/;"	t	typeref:typename:void (*)(void)
ctest_run_func_union	./vendor/STC/misc/tests/ctest.h	/^union ctest_run_func_union {$/;"	u
ctest_setup_func	./vendor/STC/misc/tests/ctest.h	/^typedef void (*ctest_setup_func)(void*);$/;"	t	typeref:typename:void (*)(void *)
ctest_teardown_func	./vendor/STC/misc/tests/ctest.h	/^typedef void (*ctest_teardown_func)(void*);$/;"	t	typeref:typename:void (*)(void *)
ctest_unary_run_func	./vendor/STC/misc/tests/ctest.h	/^typedef void (*ctest_unary_run_func)(void*);$/;"	t	typeref:typename:void (*)(void *)
ctor	./src/flecs.h	/^    ecs_xtor_t ctor;            \/**< ctor *\/$/;"	m	struct:ecs_type_hooks_t	typeref:typename:ecs_xtor_t
ctor	./src/flecs.h	/^ecs_xtor_t ctor() {$/;"	f	namespace:flecs::_	typeref:typename:ecs_xtor_t
ctor_and_insert_one_i32	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^static void ctor_and_insert_one_i32(picobench::state& s)$/;"	f	typeref:typename:void	file:
ctor_impl	./src/flecs.h	/^void ctor_impl(void *ptr, int32_t count, const ecs_type_info_t *info) {$/;"	f	namespace:flecs::_	typeref:typename:void
ctor_move_dtor	./src/flecs.h	/^    ecs_move_t ctor_move_dtor;$/;"	m	struct:ecs_type_hooks_t	typeref:typename:ecs_move_t
ctor_move_dtor	./src/flecs.h	/^ecs_move_t ctor_move_dtor() {$/;"	f	namespace:flecs::_	typeref:typename:ecs_move_t
ctor_move_dtor_impl	./src/flecs.h	/^void ctor_move_dtor_impl(void *dst_ptr, void *src_ptr, int32_t count, $/;"	f	namespace:flecs::_	typeref:typename:void
ctrl	./src/flecs.c	/^        ecs_rule_ctrl_ctx_t ctrl;$/;"	m	union:ecs_rule_op_ctx_t::__anon7d4a4177340a	typeref:typename:ecs_rule_ctrl_ctx_t	file:
ctrlflow	./src/flecs.c	/^    ecs_rule_compile_ctrlflow_t ctrlflow[FLECS_QUERY_SCOPE_NESTING_MAX];$/;"	m	struct:__anon7d4a41773608	typeref:typename:ecs_rule_compile_ctrlflow_t[]	file:
ctx	./src/flecs.c	/^    ecs_count_targets_metric_ctx_t *ctx;$/;"	m	struct:__anon7d4a41771408	typeref:typename:ecs_count_targets_metric_ctx_t *	file:
ctx	./src/flecs.c	/^    ecs_id_metric_ctx_t *ctx;$/;"	m	struct:__anon7d4a41771108	typeref:typename:ecs_id_metric_ctx_t *	file:
ctx	./src/flecs.c	/^    ecs_id_metric_ctx_t *ctx;$/;"	m	struct:__anon7d4a41771608	typeref:typename:ecs_id_metric_ctx_t *	file:
ctx	./src/flecs.c	/^    ecs_member_metric_ctx_t *ctx;$/;"	m	struct:__anon7d4a41771008	typeref:typename:ecs_member_metric_ctx_t *	file:
ctx	./src/flecs.c	/^    ecs_member_metric_ctx_t *ctx;$/;"	m	struct:__anon7d4a41771508	typeref:typename:ecs_member_metric_ctx_t *	file:
ctx	./src/flecs.c	/^    ecs_oneof_metric_ctx_t *ctx;$/;"	m	struct:__anon7d4a41771208	typeref:typename:ecs_oneof_metric_ctx_t *	file:
ctx	./src/flecs.c	/^    ecs_oneof_metric_ctx_t *ctx;$/;"	m	struct:__anon7d4a41771708	typeref:typename:ecs_oneof_metric_ctx_t *	file:
ctx	./src/flecs.c	/^    void *ctx;                       \/* Application context *\/$/;"	m	struct:ecs_world_t	typeref:typename:void *	file:
ctx	./src/flecs.c	/^    void *ctx;                       \/* User context to pass to callback *\/$/;"	m	struct:ecs_query_t	typeref:typename:void *	file:
ctx	./src/flecs.c	/^    void *ctx;                      \/* Userdata for system *\/$/;"	m	struct:ecs_system_t	typeref:typename:void *	file:
ctx	./src/flecs.c	/^    void *ctx;$/;"	m	struct:ecs_action_elem_t	typeref:typename:void *	file:
ctx	./src/flecs.c	/^    void *ctx;$/;"	m	struct:ecs_http_server_t	typeref:typename:void *	file:
ctx	./src/flecs.h	/^    Base& ctx(E* ptr) {$/;"	f	struct:flecs::event_builder_base	typeref:typename:Base &
ctx	./src/flecs.h	/^    Base& ctx(const E* ptr) {$/;"	f	struct:flecs::event_builder_base	typeref:typename:Base &
ctx	./src/flecs.h	/^    Base& ctx(void *ptr) {$/;"	f	struct:flecs::observer_builder_i	typeref:typename:Base &
ctx	./src/flecs.h	/^    Base& ctx(void *ptr) {$/;"	f	struct:flecs::system_builder_i	typeref:typename:Base &
ctx	./src/flecs.h	/^    Class& ctx(E&& ptr) {$/;"	f	struct:flecs::event_builder_typed	typeref:typename:Class &
ctx	./src/flecs.h	/^    Class& ctx(const E& ptr) {$/;"	f	struct:flecs::event_builder_typed	typeref:typename:Class &
ctx	./src/flecs.h	/^    T* ctx() {$/;"	f	struct:flecs::iter	typeref:typename:T *
ctx	./src/flecs.h	/^    app_builder& ctx(void *value) {$/;"	f	struct:flecs::app_builder	typeref:typename:app_builder &
ctx	./src/flecs.h	/^    void *ctx;                        \/**< Passed to callback (optional) *\/$/;"	m	struct:__anon7d4a417c0d08	typeref:typename:void *
ctx	./src/flecs.h	/^    void *ctx;                       \/**< User defined context *\/$/;"	m	struct:ecs_type_hooks_t	typeref:typename:void *
ctx	./src/flecs.h	/^    void *ctx;                    \/* System context *\/$/;"	m	struct:ecs_iter_t	typeref:typename:void *
ctx	./src/flecs.h	/^    void *ctx;                  \/**< Callback context *\/$/;"	m	struct:ecs_observer_t	typeref:typename:void *
ctx	./src/flecs.h	/^    void *ctx;                \/**< Reserved for custom run\/frame actions *\/$/;"	m	struct:ecs_app_desc_t	typeref:typename:void *
ctx	./src/flecs.h	/^    void *ctx;            \/**< Group context, returned by on_group_create *\/$/;"	m	struct:ecs_query_group_info_t	typeref:typename:void *
ctx	./src/flecs.h	/^    void *ctx;$/;"	m	struct:ecs_observer_desc_t	typeref:typename:void *
ctx	./src/flecs.h	/^    void *ctx;$/;"	m	struct:ecs_query_desc_t	typeref:typename:void *
ctx	./src/flecs.h	/^    void *ctx;$/;"	m	struct:ecs_serializer_t	typeref:typename:void *
ctx	./src/flecs.h	/^    void *ctx;$/;"	m	struct:ecs_system_desc_t	typeref:typename:void *
ctx	./src/flecs.h	/^    void ctx(void *ctx) {$/;"	f	struct:flecs::observer	typeref:typename:void
ctx	./src/flecs.h	/^    void ctx(void *ctx) {$/;"	f	struct:flecs::system	typeref:typename:void
ctx	./src/flecs.h	/^    void* ctx() const {$/;"	f	struct:flecs::observer	typeref:typename:void *
ctx	./src/flecs.h	/^    void* ctx() const {$/;"	f	struct:flecs::system	typeref:typename:void *
ctx	./src/flecs.h	/^    void* ctx() {$/;"	f	struct:flecs::iter	typeref:typename:void *
ctx	./vendor/fmt/include/base.h	/^  basic_format_parse_context<Char>& ctx;$/;"	m	struct:detail::dynamic_spec_id_handler	typeref:typename:basic_format_parse_context<Char> &
ctx	./vendor/fmt/include/ranges.h	/^  FormatContext& ctx;$/;"	m	struct:detail::format_tuple_element	typeref:typename:FormatContext &
ctx	./vendor/fmt/include/ranges.h	/^  ParseContext& ctx;$/;"	m	struct:detail::parse_empty_specs	typeref:typename:ParseContext &
ctxData	./vendor/raylib5/include/raylib.h	/^    void *ctxData;              \/\/ Audio context data, depends on type$/;"	m	struct:Music	typeref:typename:void *
ctxType	./vendor/raylib5/include/raylib.h	/^    int ctxType;                \/\/ Type of music context (audio filetype)$/;"	m	struct:Music	typeref:typename:int
ctx_free	./src/flecs.c	/^    ecs_ctx_free_t ctx_free;         \/** Callback to free ctx *\/$/;"	m	struct:ecs_query_t	typeref:typename:ecs_ctx_free_t	file:
ctx_free	./src/flecs.c	/^    ecs_ctx_free_t ctx_free;         \/**< Callback to free ctx *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_ctx_free_t	file:
ctx_free	./src/flecs.c	/^    ecs_ctx_free_t ctx_free;$/;"	m	struct:ecs_system_t	typeref:typename:ecs_ctx_free_t	file:
ctx_free	./src/flecs.h	/^    ecs_ctx_free_t ctx_free;         \/**< Callback to free ctx *\/$/;"	m	struct:ecs_type_hooks_t	typeref:typename:ecs_ctx_free_t
ctx_free	./src/flecs.h	/^    ecs_ctx_free_t ctx_free;    \/**< Callback to free ctx *\/$/;"	m	struct:ecs_observer_t	typeref:typename:ecs_ctx_free_t
ctx_free	./src/flecs.h	/^    ecs_ctx_free_t ctx_free;$/;"	m	struct:ecs_observer_desc_t	typeref:typename:ecs_ctx_free_t
ctx_free	./src/flecs.h	/^    ecs_ctx_free_t ctx_free;$/;"	m	struct:ecs_query_desc_t	typeref:typename:ecs_ctx_free_t
ctx_free	./src/flecs.h	/^    ecs_ctx_free_t ctx_free;$/;"	m	struct:ecs_system_desc_t	typeref:typename:ecs_ctx_free_t
ctz	./vendor/fmt/include/format.h	/^inline auto ctz(uint32_t x) -> int {$/;"	f	namespace:detail	typeref:typename:int
ctzll	./vendor/fmt/include/format.h	/^inline auto ctzll(uint64_t x) -> int {$/;"	f	namespace:detail	typeref:typename:int
cur	./src/flecs.c	/^    ecs_id_record_t *cur;$/;"	m	struct:__anon7d4a41773108	typeref:typename:ecs_id_record_t *	file:
cur	./src/flecs.c	/^    ecs_rule_compile_ctrlflow_t *cur; \/* Current scope *\/$/;"	m	struct:__anon7d4a41773608	typeref:typename:ecs_rule_compile_ctrlflow_t *	file:
cur	./src/flecs.h	/^    ecs_expr_var_scope_t *cur;$/;"	m	struct:ecs_vars_t	typeref:typename:ecs_expr_var_scope_t *
cur	./src/flecs.h	/^    ecs_id_record_t *cur;$/;"	m	struct:ecs_term_iter_t	typeref:typename:ecs_id_record_t *
cur	./src/flecs.h	/^    struct ecs_table_cache_hdr_t *cur, *next;$/;"	m	struct:ecs_table_cache_iter_t	typeref:struct:ecs_table_cache_hdr_t *
cur_i	./src/flecs.c	/^    int32_t cur_i;              \/* Index in current result *\/$/;"	m	struct:ecs_pipeline_state_t	typeref:typename:int32_t	file:
cur_match	./src/flecs.h	/^    int32_t cur_match;$/;"	m	struct:ecs_term_iter_t	typeref:typename:int32_t
cur_op	./src/flecs.c	/^    ecs_pipeline_op_t *cur_op;  \/* Current pipeline op *\/$/;"	m	struct:ecs_pipeline_state_t	typeref:typename:ecs_pipeline_op_t *	file:
current	./src/flecs.c	/^    int32_t current;$/;"	m	struct:ecs_reachable_cache_t	typeref:typename:int32_t	file:
current	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^        EntryPointer current = EntryPointer();$/;"	m	struct:ska::detailv3::sherwood_v3_table::templated_iterator	typeref:typename:EntryPointer
current_mod_function	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    mod_function current_mod_function = &mod0;$/;"	m	struct:ska::prime_number_hash_policy	typeref:typename:mod_function
current_state	./vendor/fmt/include/base.h	/^    state current_state = state::start;$/;"	m	struct:detail::parse_format_specs::__anonea363bd91208	typeref:typename:state
current_suite_name	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    const char*& current_suite_name()$/;"	f	class:picobench::registry	typeref:typename:const char * &
current_turn_state	./src/turnbasedsystem.h	/^	enum TurnState current_turn_state;$/;"	m	struct:TurnComponentData	typeref:enum:TurnState
cursor	./src/flecs.c	/^    ecs_stack_cursor_t *cursor;$/;"	m	struct:ecs_value_stack_t	typeref:typename:ecs_stack_cursor_t *	file:
cursor	./src/flecs.h	/^    cursor(flecs::world_t *world, flecs::entity_t type_id, void *ptr) {$/;"	f	struct:flecs::cursor
cursor	./src/flecs.h	/^flecs::cursor cursor(flecs::entity_t tid, void *ptr) {$/;"	f	struct:flecs::world	typeref:typename:flecs::cursor
cursor	./src/flecs.h	/^flecs::cursor cursor(void *ptr) {$/;"	f	struct:flecs::world	typeref:typename:flecs::cursor
cursor	./src/flecs.h	/^struct cursor {$/;"	s	namespace:flecs
cursor_count	./src/flecs.c	/^    int32_t cursor_count;$/;"	m	struct:ecs_stack_t	typeref:typename:int32_t	file:
cursubid	./vendor/STC/include/stc/priv/cregex_prv.c	/^    short cursubid;      \/* id of current subexpression *\/$/;"	m	struct:_Parser	typeref:typename:short	file:
custom	./vendor/fmt/include/base.h	/^    custom_value<Context> custom;$/;"	m	union:detail::value::__anonea363bd9060a	typeref:typename:custom_value<Context>
custom_	./vendor/fmt/include/base.h	/^    detail::custom_value<Context> custom_;$/;"	m	class:basic_format_arg::handle	typeref:typename:detail::custom_value<Context>
custom_type	./vendor/fmt/include/base.h	/^  custom_type$/;"	e	enum:detail::type
custom_value	./vendor/fmt/include/base.h	/^template <typename Context> struct custom_value {$/;"	s	namespace:detail
cvec_int_add_item	./src/cvec.c	/^void cvec_int_add_item(CVecInt* cvec, int data)$/;"	f	typeref:typename:void
cvec_int_clear_idx	./src/cvec.c	/^void cvec_int_clear_idx(CVecInt *cvec, int idx)$/;"	f	typeref:typename:void
cvec_int_defragment	./src/cvec.c	/^void cvec_int_defragment(CVecInt *cvec)$/;"	f	typeref:typename:void
cvec_int_free	./src/cvec.c	/^void cvec_int_free(CVecInt* cvec)$/;"	f	typeref:typename:void
cvec_int_init	./src/cvec.c	/^void cvec_int_init(CVecInt* cvec)$/;"	f	typeref:typename:void
cvec_int_remove_idx	./src/cvec.c	/^void cvec_int_remove_idx(CVecInt* cvec, int idx)$/;"	f	typeref:typename:void
cvec_int_remove_idx_noshrink	./src/cvec.c	/^void cvec_int_remove_idx_noshrink(CVecInt* cvec, int idx)$/;"	f	typeref:typename:void
cvec_void_add_item	./src/cvec.c	/^void cvec_void_add_item(CVecVoid* cvec, void* data)$/;"	f	typeref:typename:void
cvec_void_clear_idx	./src/cvec.c	/^void cvec_void_clear_idx(CVecVoid *cvec, int idx)$/;"	f	typeref:typename:void
cvec_void_defragment	./src/cvec.c	/^void cvec_void_defragment(CVecVoid *cvec)$/;"	f	typeref:typename:void
cvec_void_free	./src/cvec.c	/^void cvec_void_free(CVecVoid* cvec)$/;"	f	typeref:typename:void
cvec_void_get_item	./src/cvec.h	/^#define cvec_void_get_item(/;"	d
cvec_void_init	./src/cvec.c	/^void cvec_void_init(CVecVoid* cvec)$/;"	f	typeref:typename:void
cvec_void_remove_idx	./src/cvec.c	/^void cvec_void_remove_idx(CVecVoid* cvec, int idx)$/;"	f	typeref:typename:void
cvec_void_remove_idx_noshrink	./src/cvec.c	/^void cvec_void_remove_idx_noshrink(CVecVoid* cvec, int idx)$/;"	f	typeref:typename:void
cyan	./vendor/fmt/include/color.h	/^  cyan = 0x00FFFF,                     \/\/ rgb(0,255,255)$/;"	e	enum:color
cyan	./vendor/fmt/include/color.h	/^  cyan,$/;"	e	enum:terminal_color
czview	./vendor/STC/include/stc/types.h	/^typedef struct czview {$/;"	s
czview	./vendor/STC/include/stc/types.h	/^} czview;$/;"	t	typeref:struct:czview
czview_advance	./vendor/STC/include/stc/czview.h	/^STC_INLINE czview_iter czview_advance(czview_iter it, intptr_t u8pos) {$/;"	f	typeref:typename:STC_INLINE czview_iter
czview_begin	./vendor/STC/include/stc/czview.h	/^STC_INLINE czview_iter czview_begin(const czview* self) {$/;"	f	typeref:typename:STC_INLINE czview_iter
czview_clear	./vendor/STC/include/stc/czview.h	/^STC_INLINE void     czview_clear(czview* self) { *self = c_zv(""); }$/;"	f	typeref:typename:STC_INLINE void
czview_clone	./vendor/STC/include/stc/czview.h	/^#define             czview_clone(/;"	d
czview_cmp	./vendor/STC/include/stc/czview.h	/^STC_INLINE int czview_cmp(const czview* x, const czview* y) {$/;"	f	typeref:typename:STC_INLINE int
czview_contains	./vendor/STC/include/stc/czview.h	/^STC_INLINE bool czview_contains(czview rs, const char* str)$/;"	f	typeref:typename:STC_INLINE bool
czview_drop	./vendor/STC/include/stc/czview.h	/^#define             czview_drop(/;"	d
czview_empty	./vendor/STC/include/stc/czview.h	/^STC_INLINE bool     czview_empty(czview rs) { return rs.size == 0; }$/;"	f	typeref:typename:STC_INLINE bool
czview_end	./vendor/STC/include/stc/czview.h	/^STC_INLINE czview_iter czview_end(const czview* self) {$/;"	f	typeref:typename:STC_INLINE czview_iter
czview_ends_with	./vendor/STC/include/stc/czview.h	/^STC_INLINE bool czview_ends_with(czview rs, const char* str) {$/;"	f	typeref:typename:STC_INLINE bool
czview_eq	./vendor/STC/include/stc/czview.h	/^STC_INLINE bool czview_eq(const czview* x, const czview* y)$/;"	f	typeref:typename:STC_INLINE bool
czview_equals	./vendor/STC/include/stc/czview.h	/^STC_INLINE bool czview_equals(czview rs, const char* str) {$/;"	f	typeref:typename:STC_INLINE bool
czview_find	./vendor/STC/include/stc/czview.h	/^STC_INLINE intptr_t czview_find(czview rs, const char* search) {$/;"	f	typeref:typename:STC_INLINE intptr_t
czview_from	./vendor/STC/include/stc/czview.h	/^STC_INLINE czview   czview_from(const char* str)$/;"	f	typeref:typename:STC_INLINE czview
czview_from_pos	./vendor/STC/include/stc/czview.h	/^STC_INLINE czview czview_from_pos(czview rs, intptr_t pos) {$/;"	f	typeref:typename:STC_INLINE czview
czview_hash	./vendor/STC/include/stc/czview.h	/^STC_INLINE uint64_t czview_hash(const czview *self)$/;"	f	typeref:typename:STC_INLINE uint64_t
czview_icmp	./vendor/STC/include/stc/czview.h	/^STC_INLINE int czview_icmp(const czview* x, const czview* y)$/;"	f	typeref:typename:STC_INLINE int
czview_init	./vendor/STC/include/stc/czview.h	/^#define             czview_init(/;"	d
czview_iter	./vendor/STC/include/stc/types.h	/^} czview_iter;$/;"	t	typeref:union:__anon0ab7b7af030a
czview_last	./vendor/STC/include/stc/czview.h	/^STC_INLINE czview czview_last(czview rs, intptr_t count)$/;"	f	typeref:typename:STC_INLINE czview
czview_next	./vendor/STC/include/stc/czview.h	/^STC_INLINE void czview_next(czview_iter* it) {$/;"	f	typeref:typename:STC_INLINE void
czview_size	./vendor/STC/include/stc/czview.h	/^STC_INLINE intptr_t czview_size(czview rs) { return rs.size; }$/;"	f	typeref:typename:STC_INLINE intptr_t
czview_starts_with	./vendor/STC/include/stc/czview.h	/^STC_INLINE bool czview_starts_with(czview rs, const char* str) {$/;"	f	typeref:typename:STC_INLINE bool
czview_sv	./vendor/STC/include/stc/czview.h	/^STC_INLINE csview   czview_sv(czview rs) { return c_sv_2(rs.str, rs.size); }$/;"	f	typeref:typename:STC_INLINE csview
czview_toraw	./vendor/STC/include/stc/czview.h	/^#define             czview_toraw(/;"	d
czview_u8_at	./vendor/STC/include/stc/czview.h	/^STC_INLINE const char* czview_u8_at(czview rs, intptr_t u8idx)$/;"	f	typeref:typename:STC_INLINE const char *
czview_u8_from_pos	./vendor/STC/include/stc/czview.h	/^STC_INLINE czview czview_u8_from_pos(czview rs, intptr_t u8idx)$/;"	f	typeref:typename:STC_INLINE czview
czview_u8_last	./vendor/STC/include/stc/czview.h	/^STC_INLINE czview czview_u8_last(czview rs, intptr_t u8len) {$/;"	f	typeref:typename:STC_INLINE czview
czview_u8_size	./vendor/STC/include/stc/czview.h	/^STC_INLINE intptr_t czview_u8_size(czview rs)$/;"	f	typeref:typename:STC_INLINE intptr_t
czview_u8_valid	./vendor/STC/include/stc/czview.h	/^STC_INLINE bool czview_u8_valid(czview rs) \/\/ requires linking with utf8 symbols$/;"	f	typeref:typename:STC_INLINE bool
czview_value	./vendor/STC/include/stc/types.h	/^typedef csview_value czview_value;$/;"	t	typeref:typename:csview_value
dark_blue	./vendor/fmt/include/color.h	/^  dark_blue = 0x00008B,                \/\/ rgb(0,0,139)$/;"	e	enum:color
dark_cyan	./vendor/fmt/include/color.h	/^  dark_cyan = 0x008B8B,                \/\/ rgb(0,139,139)$/;"	e	enum:color
dark_golden_rod	./vendor/fmt/include/color.h	/^  dark_golden_rod = 0xB8860B,          \/\/ rgb(184,134,11)$/;"	e	enum:color
dark_gray	./vendor/fmt/include/color.h	/^  dark_gray = 0xA9A9A9,                \/\/ rgb(169,169,169)$/;"	e	enum:color
dark_green	./vendor/fmt/include/color.h	/^  dark_green = 0x006400,               \/\/ rgb(0,100,0)$/;"	e	enum:color
dark_khaki	./vendor/fmt/include/color.h	/^  dark_khaki = 0xBDB76B,               \/\/ rgb(189,183,107)$/;"	e	enum:color
dark_magenta	./vendor/fmt/include/color.h	/^  dark_magenta = 0x8B008B,             \/\/ rgb(139,0,139)$/;"	e	enum:color
dark_olive_green	./vendor/fmt/include/color.h	/^  dark_olive_green = 0x556B2F,         \/\/ rgb(85,107,47)$/;"	e	enum:color
dark_orange	./vendor/fmt/include/color.h	/^  dark_orange = 0xFF8C00,              \/\/ rgb(255,140,0)$/;"	e	enum:color
dark_orchid	./vendor/fmt/include/color.h	/^  dark_orchid = 0x9932CC,              \/\/ rgb(153,50,204)$/;"	e	enum:color
dark_red	./vendor/fmt/include/color.h	/^  dark_red = 0x8B0000,                 \/\/ rgb(139,0,0)$/;"	e	enum:color
dark_salmon	./vendor/fmt/include/color.h	/^  dark_salmon = 0xE9967A,              \/\/ rgb(233,150,122)$/;"	e	enum:color
dark_sea_green	./vendor/fmt/include/color.h	/^  dark_sea_green = 0x8FBC8F,           \/\/ rgb(143,188,143)$/;"	e	enum:color
dark_slate_blue	./vendor/fmt/include/color.h	/^  dark_slate_blue = 0x483D8B,          \/\/ rgb(72,61,139)$/;"	e	enum:color
dark_slate_gray	./vendor/fmt/include/color.h	/^  dark_slate_gray = 0x2F4F4F,          \/\/ rgb(47,79,79)$/;"	e	enum:color
dark_turquoise	./vendor/fmt/include/color.h	/^  dark_turquoise = 0x00CED1,           \/\/ rgb(0,206,209)$/;"	e	enum:color
dark_violet	./vendor/fmt/include/color.h	/^  dark_violet = 0x9400D3,              \/\/ rgb(148,0,211)$/;"	e	enum:color
data	./src/cvec.h	/^	int *data;$/;"	m	struct:__anonbf71e1100108	typeref:typename:int *
data	./src/cvec.h	/^	void **data;$/;"	m	struct:__anonbf71e1100208	typeref:typename:void **
data	./src/flecs.c	/^    ecs_data_t *data;$/;"	m	struct:ecs_table_leaf_t	typeref:typename:ecs_data_t *	file:
data	./src/flecs.c	/^    ecs_data_t data;                 \/* Component storage *\/$/;"	m	struct:ecs_table_t	typeref:typename:ecs_data_t	file:
data	./src/flecs.c	/^    ecs_vec_t data;                  \/* Vector with component data *\/$/;"	m	struct:ecs_column_t	typeref:typename:ecs_vec_t	file:
data	./src/flecs.c	/^    uint64_t *data;$/;"	m	struct:ecs_bitset_t	typeref:typename:uint64_t *	file:
data	./src/flecs.c	/^    void *data;                 \/* Store data in sparse array to reduce  $/;"	m	struct:ecs_page_t	typeref:typename:void *	file:
data	./src/flecs.c	/^    void *data;$/;"	m	struct:ecs_stack_page_t	typeref:typename:void *	file:
data	./src/flecs.h	/^    static enum_data_impl<E> data;$/;"	m	struct:flecs::_::enum_type	typeref:typename:enum_data_impl<E>
data	./src/flecs.h	/^    void **data;       \/**< Array with component data to insert. Each element in$/;"	m	struct:ecs_bulk_desc_t	typeref:typename:void **
data	./src/flecs.h	/^enum_data_impl<E> enum_type<E>::data;$/;"	m	class:flecs::_::enum_type<E>	typeref:typename:enum_data_impl<E>
data	./src/flecs.h	/^struct data {$/;"	s	struct:flecs::units
data	./vendor/STC/include/c11/fmt.h	/^    char* data;$/;"	m	struct:__anon6f5400bc0108	typeref:typename:char *
data	./vendor/STC/include/stc/types.h	/^    struct { cstr_value data[ sizeof(cstr_buf) ]; } sml;$/;"	m	struct:cstr::__anon0ab7b7af0508	typeref:typename:cstr_value[]
data	./vendor/STC/include/stc/types.h	/^    struct { cstr_value* data; size_t size, ncap; } lon;$/;"	m	struct:cstr::__anon0ab7b7af0608	typeref:typename:cstr_value *
data	./vendor/STC/include/stc/types.h	/^typedef struct { cstr_value* data; intptr_t size, cap; } cstr_buf;$/;"	m	struct:__anon0ab7b7af0408	typeref:typename:cstr_value *
data	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        std::vector<benchmark_problem_space> data;$/;"	m	struct:picobench::report::benchmark	typeref:typename:std::vector<benchmark_problem_space>
data	./vendor/STC/misc/tests/ctest.h	/^    void* data;$/;"	m	struct:ctest	typeref:typename:void *
data	./vendor/fmt/include/args.h	/^  auto data() const -> const basic_format_arg<Context>* {$/;"	f	class:dynamic_format_arg_store	typeref:typename:const basic_format_arg<Context> *
data	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR auto data() const noexcept -> const T* { return ptr_; }$/;"	f	class:detail::buffer	typeref:typename:FMT_CONSTEXPR auto
data	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR auto data() noexcept -> T* { return ptr_; }$/;"	f	class:detail::buffer	typeref:typename:FMT_CONSTEXPR auto
data	./vendor/fmt/include/base.h	/^  const Char* data;$/;"	m	struct:detail::string_value	typeref:typename:const Char *
data	./vendor/fmt/include/base.h	/^  const named_arg_info<Char>* data;$/;"	m	struct:detail::named_arg_value	typeref:typename:const named_arg_info<Char> *
data	./vendor/fmt/include/base.h	/^  constexpr auto data() const -> const Char* {$/;"	f	struct:detail::fill_t	typeref:typename:const Char *
data	./vendor/fmt/include/base.h	/^  constexpr auto data() const noexcept -> const Char* { return data_; }$/;"	f	class:basic_string_view	typeref:typename:auto
data	./vendor/fmt/include/compile.h	/^  basic_string_view<Char> data;$/;"	m	struct:detail::text	typeref:typename:basic_string_view<Char>
data	./vendor/fmt/include/format-inl.h	/^  T* data;$/;"	m	struct:detail::span	typeref:typename:T *
data	./vendor/fmt/include/format.h	/^  Char data[N] = {};$/;"	m	struct:detail_exported::fixed_string	typeref:typename:Char[]
data	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 auto data() const -> const char* { return str_; }$/;"	f	class:format_int	typeref:typename:const char *
data	./vendor/raylib5/include/raygui.h	/^        void *data;             \/\/ Image raw data$/;"	m	struct:Image	typeref:typename:void *
data	./vendor/raylib5/include/raylib.h	/^    void *data;                 \/\/ Buffer data pointer$/;"	m	struct:Wave	typeref:typename:void *
data	./vendor/raylib5/include/raylib.h	/^    void *data;             \/\/ Image raw data$/;"	m	struct:Image	typeref:typename:void *
data_	./vendor/fmt/include/args.h	/^  std::vector<basic_format_arg<Context>> data_;$/;"	m	class:dynamic_format_arg_store	typeref:typename:std::vector<basic_format_arg<Context>>
data_	./vendor/fmt/include/base.h	/^  T data_[buffer_size];$/;"	m	class:detail::counting_buffer	typeref:typename:T[]
data_	./vendor/fmt/include/base.h	/^  T data_[buffer_size];$/;"	m	class:detail::iterator_buffer	typeref:typename:T[]
data_	./vendor/fmt/include/base.h	/^  char data_[max_size] = {' '};$/;"	m	struct:detail::fill_t	typeref:typename:char[]
data_	./vendor/fmt/include/base.h	/^  const Char* data_;$/;"	m	class:basic_string_view	typeref:typename:const Char *
data_	./vendor/fmt/include/format.h	/^  string_view data_;$/;"	m	class:bytes	typeref:typename:string_view
data_	./vendor/fmt/include/os.h	/^  const Char* data_;$/;"	m	class:basic_cstring_view	typeref:typename:const Char *
data_fields	./src/flecs.h	/^    ecs_flags64_t data_fields; \/**< Bitset with fields that have data *\/$/;"	m	struct:ecs_filter_t	typeref:typename:ecs_flags64_t
data_size	./src/flecs.h	/^    int32_t data_size;$/;"	m	struct:ecs_block_allocator_t	typeref:typename:int32_t
data_t	./vendor/fmt/include/format.h	/^  struct data_t {$/;"	s	function:detail::bit_cast
datarate	./src/flecs.h	/^struct datarate {$/;"	s	struct:flecs::units
date	./vendor/STC/misc/examples/sortedmaps/multimap.c	/^struct OlympicsData { int year; const char *city, *country, *date; } ol_data[] = {$/;"	m	struct:OlympicsData	typeref:typename:const char *	file:
date	./vendor/STC/misc/examples/sortedmaps/multimap.c	/^typedef struct { int year; cstr city, date; } OlympicLoc;$/;"	m	struct:__anonc17d532c0108	typeref:typename:cstr	file:
day	./vendor/fmt/include/chrono.h	/^  constexpr auto day() const noexcept -> fmt::day { return day_; }$/;"	f	class:year_month_day	typeref:typename:auto
day	./vendor/fmt/include/chrono.h	/^  constexpr explicit day(unsigned d) noexcept$/;"	f	class:day
day	./vendor/fmt/include/chrono.h	/^class day {$/;"	c
day	./vendor/fmt/include/chrono.h	/^using day = std::chrono::day;$/;"	t	typeref:typename:std::chrono::day
day_	./vendor/fmt/include/chrono.h	/^  fmt::day day_;$/;"	m	class:year_month_day	typeref:typename:fmt::day
days	./vendor/fmt/include/chrono.h	/^  auto days() const -> Rep { return static_cast<Rep>(s.count() \/ 86400); }$/;"	f	struct:detail::chrono_formatter	typeref:typename:Rep
days_per_week	./vendor/fmt/include/chrono.h	/^  static constexpr int days_per_week = 7;$/;"	m	class:detail::tm_writer	typeref:typename:int
dbg	./src/flecs.h	/^inline void dbg(const char *fmt, ...) {$/;"	f	namespace:flecs::log	typeref:typename:void
dealloc	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    void dealloc() {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:void
deallocate	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void deallocate(T* obj) noexcept {$/;"	f	class:robin_hood::detail::BulkPoolAllocator	typeref:typename:void
deallocate	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 void deallocate() {$/;"	f	class:basic_memory_buffer	typeref:typename:FMT_CONSTEXPR20 void
deallocate_buckets	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    void deallocate_buckets() {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:void
deallocate_data	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    void deallocate_data(EntryPointer begin, size_t num_slots_minus_one, int8_t max_lookups)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:void
debug	./src/flecs.h	/^    bool debug;                     \/**< Is this a debug build *\/$/;"	m	struct:ecs_build_info_t	typeref:typename:bool
debug	./vendor/fmt/include/base.h	/^  debug = 1,   \/\/ '?'$/;"	e	enum:presentation_type
debug_	./vendor/fmt/include/std.h	/^  bool debug_ = false;$/;"	m	struct:formatter	typeref:typename:bool
debug_string	./vendor/fmt/include/ranges.h	/^enum class range_format { disabled, map, set, sequence, string, debug_string };$/;"	e	enum:range_format
dec	./vendor/fmt/include/base.h	/^  dec = 3,  \/\/ 'd'$/;"	e	enum:presentation_type
decay_t	./src/flecs.h	/^using decay_t = typename std::decay<T>::type;$/;"	t	namespace:flecs	typeref:typename:std::decay<T>::type
decimal_fp	./vendor/fmt/include/format.h	/^template <typename T> struct decimal_fp {$/;"	s	namespace:detail::dragonbox
decimal_point	./vendor/fmt/include/format.h	/^  std::basic_string<Char> decimal_point;$/;"	m	struct:detail::loc_writer	typeref:typename:std::basic_string<Char>
decimal_point	./vendor/fmt/include/format.h	/^template <> inline auto decimal_point(locale_ref loc) -> wchar_t {$/;"	f	namespace:detail	typeref:typename:wchar_t
decimal_point	./vendor/fmt/include/format.h	/^template <typename Char> inline auto decimal_point(locale_ref loc) -> Char {$/;"	f	namespace:detail	typeref:typename:Char
decimal_point_	./vendor/fmt/include/format.h	/^  std::string decimal_point_;$/;"	m	class:format_facet	typeref:typename:std::string
decimal_point_impl	./vendor/fmt/include/format-inl.h	/^FMT_FUNC auto decimal_point_impl(locale_ref loc) -> Char {$/;"	f	namespace:detail	typeref:typename:Char
decimal_point_impl	./vendor/fmt/include/format-inl.h	/^template <typename Char> FMT_FUNC Char decimal_point_impl(locale_ref) {$/;"	f	namespace:detail	typeref:typename:FMT_FUNC Char
decl_stmt	./src/flecs.c	/^    bool decl_stmt;$/;"	m	struct:__anon7d4a41771908	typeref:typename:bool	file:
decl_type	./src/flecs.c	/^    bool decl_type;$/;"	m	struct:__anon7d4a41771908	typeref:typename:bool	file:
deep_pink	./vendor/fmt/include/color.h	/^  deep_pink = 0xFF1493,                \/\/ rgb(255,20,147)$/;"	e	enum:color
deep_sky_blue	./vendor/fmt/include/color.h	/^  deep_sky_blue = 0x00BFFF,            \/\/ rgb(0,191,255)$/;"	e	enum:color
default	./vendor/STC/misc/benchmarks/various/rust_hashmap.rs	/^    fn default() -> Self {$/;"	P	implementation:MyHasher
default_arg_formatter	./vendor/fmt/include/format.h	/^template <typename Char> struct default_arg_formatter {$/;"	s	namespace:detail
default_color	./src/glyph.h	/^	Color default_color;$/;"	m	struct:Tileset	typeref:typename:Color
default_max_load_factor	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    static constexpr float default_max_load_factor = 0.8F;$/;"	m	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:float
default_query_flags	./src/flecs.c	/^    ecs_flags32_t default_query_flags;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_flags32_t	file:
default_samples	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    int default_samples() const$/;"	f	class:picobench::runner	typeref:typename:int
default_scope_type	./src/flecs.c	/^    ecs_entity_t default_scope_type[STACK_MAX_SIZE];$/;"	m	struct:__anon7d4a41771908	typeref:typename:ecs_entity_t[]	file:
default_state_iterations	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    const std::vector<size_t>& default_state_iterations() const$/;"	f	class:picobench::runner	typeref:typename:const std::vector<size_t> &
defer	./src/flecs.c	/^    int32_t defer;$/;"	m	struct:ecs_stage_t	typeref:typename:int32_t	file:
defer	./src/flecs.h	/^    void defer(const Func& func) const {$/;"	f	struct:flecs::world	typeref:typename:void
defer_begin	./src/flecs.h	/^    bool defer_begin() const {$/;"	f	struct:flecs::world	typeref:typename:bool
defer_count	./src/flecs.c	/^    int32_t defer_count;$/;"	m	struct:ecs_suspend_readonly_state_t	typeref:typename:int32_t	file:
defer_end	./src/flecs.h	/^    bool defer_end() const {$/;"	f	struct:flecs::world	typeref:typename:bool
defer_resume	./src/flecs.h	/^    void defer_resume() const {$/;"	f	struct:flecs::world	typeref:typename:void
defer_stack	./src/flecs.c	/^    ecs_stack_t defer_stack;$/;"	m	struct:ecs_suspend_readonly_state_t	typeref:typename:ecs_stack_t	file:
defer_suspend	./src/flecs.h	/^    void defer_suspend() const {$/;"	f	struct:flecs::world	typeref:typename:void
delegate	./src/flecs.h	/^struct delegate { };$/;"	s	namespace:flecs::_
delegate	./src/flecs.h	/^using delegate = _::each_delegate<typename std::decay<Func>::type, Args...>;$/;"	t	namespace:flecs	typeref:typename:_::each_delegate<typename std::decay<Func>::type,Args...>
delete_count	./src/flecs.h	/^        ecs_metric_t delete_count;         \/**< Number of times table has been deleted *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1108	typeref:typename:ecs_metric_t
delete_count	./src/flecs.h	/^        ecs_metric_t delete_count;        \/**< Number of times id has been deleted *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1008	typeref:typename:ecs_metric_t
delete_count	./src/flecs.h	/^        ecs_metric_t delete_count;$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1308	typeref:typename:ecs_metric_t
delete_count	./src/flecs.h	/^        int64_t delete_count;          \/**< Selete commands processed *\/$/;"	m	struct:ecs_world_info_t::__anon7d4a417c0708	typeref:typename:int64_t
delete_id	./src/flecs.c	/^    bool delete_id;$/;"	m	struct:ecs_marked_id_t	typeref:typename:bool	file:
delete_with	./src/flecs.h	/^    void delete_with() const {$/;"	f	struct:flecs::world	typeref:typename:void
delete_with	./src/flecs.h	/^    void delete_with(entity_t first, entity_t second) const {$/;"	f	struct:flecs::world	typeref:typename:void
delete_with	./src/flecs.h	/^    void delete_with(entity_t second) const {$/;"	f	struct:flecs::world	typeref:typename:void
delete_with	./src/flecs.h	/^    void delete_with(id_t the_id) const {$/;"	f	struct:flecs::world	typeref:typename:void
delta_system_time	./src/flecs.h	/^    ecs_ftime_t delta_system_time() const {$/;"	f	struct:flecs::iter	typeref:typename:ecs_ftime_t
delta_system_time	./src/flecs.h	/^    ecs_ftime_t delta_system_time;\/* Time elapsed since last system invocation *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_ftime_t
delta_time	./src/flecs.h	/^        ecs_metric_t delta_time;           \/**< Delta_time. *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1508	typeref:typename:ecs_metric_t
delta_time	./src/flecs.h	/^    app_builder& delta_time(ecs_ftime_t value) {$/;"	f	struct:flecs::app_builder	typeref:typename:app_builder &
delta_time	./src/flecs.h	/^    ecs_ftime_t delta_time() const {$/;"	f	struct:flecs::iter	typeref:typename:ecs_ftime_t
delta_time	./src/flecs.h	/^    ecs_ftime_t delta_time() const {$/;"	f	struct:flecs::world	typeref:typename:ecs_ftime_t
delta_time	./src/flecs.h	/^    ecs_ftime_t delta_time;           \/**< Time passed to or computed by ecs_progress *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:ecs_ftime_t
delta_time	./src/flecs.h	/^    ecs_ftime_t delta_time;       \/* Time elapsed since last frame *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_ftime_t
delta_time	./src/flecs.h	/^    ecs_ftime_t delta_time;   \/**< Frame time increment (0 for measured values) *\/$/;"	m	struct:ecs_app_desc_t	typeref:typename:ecs_ftime_t
delta_time_raw	./src/flecs.h	/^    ecs_ftime_t delta_time_raw;       \/**< Raw delta time (no time scaling) *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:ecs_ftime_t
demo1	./vendor/STC/misc/examples/algorithms/filterdemos.c	/^void demo1(void)$/;"	f	typeref:typename:void
demo2	./vendor/STC/misc/examples/algorithms/filterdemos.c	/^void demo2(void)$/;"	f	typeref:typename:void
demo3	./vendor/STC/misc/examples/algorithms/filterdemos.c	/^void demo3(void)$/;"	f	typeref:typename:void
demo4	./vendor/STC/misc/examples/algorithms/filterdemos.c	/^void demo4(void)$/;"	f	typeref:typename:void
dense	./src/flecs.c	/^    ecs_vec_t dense;$/;"	m	struct:ecs_entity_index_t	typeref:typename:ecs_vec_t	file:
dense	./src/flecs.h	/^    ecs_vec_t dense;         \/* Dense array with indices to sparse array. The$/;"	m	struct:ecs_sparse_t	typeref:typename:ecs_vec_t
dense	./src/flecs.h	/^    int32_t dense;        \/* Index in dense array *\/    $/;"	m	struct:ecs_record_t	typeref:typename:int32_t
depends_on	./src/flecs.h	/^    Self& depends_on() {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
depends_on	./src/flecs.h	/^    Self& depends_on(E second)$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
depends_on	./src/flecs.h	/^    Self& depends_on(entity_t second) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
depth	./src/flecs.h	/^    int32_t depth() const {$/;"	f	struct:flecs::entity_view	typeref:typename:int32_t
depth	./src/flecs.h	/^    int32_t depth() {$/;"	f	struct:flecs::table	typeref:typename:int32_t
depth	./src/flecs.h	/^    int32_t depth(flecs::entity_t rel) const {$/;"	f	struct:flecs::entity_view	typeref:typename:int32_t
depth	./src/flecs.h	/^    int32_t depth(flecs::entity_t rel) {$/;"	f	struct:flecs::table	typeref:typename:int32_t
depth	./src/flecs.h	/^    int32_t depth;$/;"	m	struct:ecs_meta_cursor_t	typeref:typename:int32_t
depth	./vendor/raylib5/include/raylib.h	/^    Texture depth;          \/\/ Depth buffer attachment texture$/;"	m	struct:RenderTexture	typeref:typename:Texture
depth_ids	./src/flecs.c	/^    ecs_vec_t depth_ids;$/;"	m	struct:ecs_store_t	typeref:typename:ecs_vec_t	file:
dequeue_count	./src/flecs.c	/^    int32_t dequeue_count; \/* number of dequeues in last stats interval *\/ $/;"	m	struct:ecs_http_server_t	typeref:typename:int32_t	file:
dequeue_retries	./src/flecs.c	/^    int32_t dequeue_retries;    $/;"	m	struct:__anon7d4a41770808	typeref:typename:int32_t	file:
dequeue_timeout	./src/flecs.c	/^    double dequeue_timeout; \/* used to not lock request queue too often *\/$/;"	m	struct:ecs_http_server_t	typeref:typename:double	file:
dequeue_timeout	./src/flecs.c	/^    double dequeue_timeout;$/;"	m	struct:__anon7d4a41770808	typeref:typename:double	file:
desc	./src/flecs.c	/^    const char *desc;$/;"	m	struct:meta_parse_ctx_t	typeref:typename:const char *	file:
desc	./src/flecs.h	/^    Base& desc() {$/;"	f	struct:flecs::term_id_builder_i	typeref:typename:Base &
desc	./src/flecs.h	/^    ecs_opaque_desc_t desc = {};$/;"	m	struct:flecs::opaque	typeref:typename:ecs_opaque_desc_t
desc	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        const char* desc;$/;"	m	struct:picobench::runner::cmd_line_option	typeref:typename:const char *
desc_	./vendor/fmt/include/base.h	/^  unsigned long long desc_;$/;"	m	class:basic_format_args	typeref:typename:unsigned long long
descriptor	./vendor/fmt/include/os.h	/^  auto descriptor() const noexcept -> int { return fd_; }$/;"	f	class:file	typeref:typename:auto
deser_stack	./src/flecs.c	/^    ecs_stack_t deser_stack;$/;"	m	struct:ecs_stage_allocators_t	typeref:typename:ecs_stack_t	file:
deserialize	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  void deserialize(Deserializer& deserializer, bool hash_compatible) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:void
deserialize	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  static robin_map deserialize(Deserializer& deserializer,$/;"	f	class:tsl::robin_map	typeref:typename:robin_map
deserialize_impl	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  void deserialize_impl(Deserializer& deserializer, bool hash_compatible) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:void
deserialize_value	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^static T deserialize_value(Deserializer& deserializer) {$/;"	f	namespace:tsl::detail_robin_hash	typeref:typename:T
destroy	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        void destroy(M& ROBIN_HOOD_UNUSED(map) \/*unused*\/) noexcept {}$/;"	f	class:robin_hood::detail::Table::DataNode	typeref:typename:void
destroy	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        void destroy(M& map) noexcept {$/;"	f	class:robin_hood::detail::Table::DataNode	typeref:typename:void
destroy	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void destroy() {$/;"	f	class:robin_hood::detail::Table	typeref:typename:void
destroyDoNotDeallocate	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        void destroyDoNotDeallocate() noexcept {$/;"	f	class:robin_hood::detail::Table::DataNode	typeref:typename:void
destroyDoNotDeallocate	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        void destroyDoNotDeallocate() noexcept {}$/;"	f	class:robin_hood::detail::Table::DataNode	typeref:typename:void
destroy_value	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    void destroy_value()$/;"	f	struct:ska::detailv3::sherwood_v3_entry	typeref:typename:void
destroy_value	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  void destroy_value() noexcept {$/;"	f	class:tsl::detail_robin_hash::bucket_entry	typeref:typename:void
destruct	./src/flecs.h	/^    static void destruct(void *obj) {$/;"	f	struct:flecs::_::each_delegate	typeref:typename:void
destruct	./src/flecs.h	/^    void destruct() const {$/;"	f	struct:flecs::entity	typeref:typename:void
destruct	./src/flecs.h	/^    void destruct() {$/;"	f	struct:flecs::query_base	typeref:typename:void
destruct	./src/flecs.h	/^    void destruct() {$/;"	f	struct:flecs::rule_base	typeref:typename:void
destruct_obj	./src/flecs.h	/^template<class Ty> inline void destruct_obj(Ty* _ptr) { _ptr->~Ty(); }$/;"	f	namespace:flecs::_	typeref:typename:void
detail	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^namespace detail {$/;"	n	namespace:robin_hood
detail	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^namespace detail {$/;"	n	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE
detail	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^namespace detail::wyhash {$/;"	n	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE
detail	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^namespace detail {$/;"	n	namespace:tsl::rh
detail	./vendor/fmt/include/args.h	/^namespace detail {$/;"	n
detail	./vendor/fmt/include/base.h	/^namespace detail {$/;"	n
detail	./vendor/fmt/include/chrono.h	/^namespace detail {$/;"	n
detail	./vendor/fmt/include/color.h	/^namespace detail {$/;"	n
detail	./vendor/fmt/include/compile.h	/^namespace detail {$/;"	n
detail	./vendor/fmt/include/format-inl.h	/^namespace detail {$/;"	n
detail	./vendor/fmt/include/format.h	/^namespace detail {$/;"	n
detail	./vendor/fmt/include/os.h	/^namespace detail {$/;"	n
detail	./vendor/fmt/include/ostream.h	/^namespace detail {$/;"	n
detail	./vendor/fmt/include/printf.h	/^namespace detail {$/;"	n
detail	./vendor/fmt/include/ranges.h	/^namespace detail {$/;"	n
detail	./vendor/fmt/include/std.h	/^namespace detail {$/;"	n
detail	./vendor/fmt/include/xchar.h	/^namespace detail {$/;"	n
detail_exported	./vendor/fmt/include/format.h	/^namespace detail_exported {$/;"	n
detail_robin_hash	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^namespace detail_robin_hash {$/;"	n	namespace:tsl
detailv3	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^namespace detailv3$/;"	n	namespace:ska
detect_avalanching	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^using detect_avalanching = typename T::is_avalanching;$/;"	t	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail	typeref:typename:T::is_avalanching
detect_is_transparent	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^using detect_is_transparent = typename T::is_transparent;$/;"	t	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail	typeref:typename:T::is_transparent
detect_iterator	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^using detect_iterator = typename T::iterator;$/;"	t	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail	typeref:typename:T::iterator
detect_reserve	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^using detect_reserve = decltype(std::declval<T&>().reserve(size_t{}));$/;"	t	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail
detector	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^struct detector {$/;"	s	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail
detector	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^struct detector<Default, std::void_t<Op<Args...>>, Op, Args...> {$/;"	s	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail
df	./vendor/STC/misc/benchmarks/plotbench/plot.py	/^    df = df[df.Compiler == comp[n]]$/;"	v
df	./vendor/STC/misc/benchmarks/plotbench/plot.py	/^df = df[df.Method != 'total']$/;"	v
df	./vendor/STC/misc/benchmarks/plotbench/plot.py	/^df = pd.read_csv(file)$/;"	v
diff	./src/flecs.c	/^    ecs_table_diff_t *diff;          \/* Index into diff vector, if non trivial edge *\/$/;"	m	struct:ecs_graph_edge_t	typeref:typename:ecs_table_diff_t *	file:
diff_builder	./src/flecs.c	/^    ecs_table_diff_builder_t diff_builder;$/;"	m	struct:ecs_world_allocators_t	typeref:typename:ecs_table_diff_builder_t	file:
difference_type	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        using difference_type = std::ptrdiff_t;$/;"	t	class:robin_hood::detail::Table::Iter	typeref:typename:std::ptrdiff_t
difference_type	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^        using difference_type = segmented_vector::difference_type;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector::iter_t	typeref:typename:segmented_vector::difference_type
difference_type	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using difference_type = typename std::allocator_traits<allocator_type>::difference_type;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:std::allocator_traits<allocator_type>::difference_type
difference_type	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using difference_type = typename value_container_type::difference_type;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:value_container_type::difference_type
difference_type	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        typedef std::ptrdiff_t            difference_type;$/;"	t	class:emhash7::HashMap::const_iterator	typeref:typename:std::ptrdiff_t
difference_type	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        typedef std::ptrdiff_t            difference_type;$/;"	t	class:emhash7::HashMap::iterator	typeref:typename:std::ptrdiff_t
difference_type	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^        using difference_type = ptrdiff_t;$/;"	t	struct:ska::detailv3::sherwood_v3_table::templated_iterator	typeref:typename:ptrdiff_t
difference_type	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    using difference_type = std::ptrdiff_t;$/;"	t	class:ska::detailv3::sherwood_v3_table	typeref:typename:std::ptrdiff_t
difference_type	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^    using difference_type = std::ptrdiff_t;$/;"	t	class:tsl::detail_robin_hash::robin_hash::robin_iterator	typeref:typename:std::ptrdiff_t
difference_type	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  using difference_type = std::ptrdiff_t;$/;"	t	class:tsl::detail_robin_hash::robin_hash	typeref:typename:std::ptrdiff_t
difference_type	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  using difference_type = typename ht::difference_type;$/;"	t	class:tsl::robin_map	typeref:typename:ht::difference_type
difference_type	./vendor/fmt/include/base.h	/^  using difference_type = ptrdiff_t;$/;"	t	class:basic_appender	typeref:typename:ptrdiff_t
digit_grouping	./vendor/fmt/include/format.h	/^  digit_grouping(std::string grouping, std::basic_string<Char> sep)$/;"	f	class:detail::digit_grouping
digit_grouping	./vendor/fmt/include/format.h	/^  explicit digit_grouping(locale_ref loc, bool localized = true) {$/;"	f	class:detail::digit_grouping
digit_grouping	./vendor/fmt/include/format.h	/^template <typename Char> class digit_grouping {$/;"	c	namespace:detail
digits10	./vendor/fmt/include/format.h	/^template <> constexpr auto digits10<int128_opt>() noexcept -> int { return 38; }$/;"	f	namespace:detail	typeref:typename:auto
digits10	./vendor/fmt/include/format.h	/^template <> constexpr auto digits10<uint128_t>() noexcept -> int { return 38; }$/;"	f	namespace:detail	typeref:typename:auto
digits10	./vendor/fmt/include/format.h	/^template <typename Int> constexpr auto digits10() noexcept -> int {$/;"	f	namespace:detail	typeref:typename:auto
digits2	./vendor/fmt/include/format.h	/^constexpr auto digits2(size_t value) -> const char* {$/;"	f	namespace:detail	typeref:typename:const char *
dim	./src/flecs.h	/^    void dim(int32_t entity_count) const {$/;"	f	struct:flecs::world	typeref:typename:void
dim_gray	./vendor/fmt/include/color.h	/^  dim_gray = 0x696969,                 \/\/ rgb(105,105,105)$/;"	e	enum:color
dimension	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        size_t dimension; \/\/ number of iterations for the problem space$/;"	m	struct:picobench::report::benchmark_problem_space	typeref:typename:size_t
dining	./vendor/STC/misc/examples/coroutines/dining_philosophers.c	/^int dining(struct Dining* d)$/;"	f	typeref:typename:int
dir	./src/flecs.c	/^    ecs_flags32_t dir;$/;"	m	struct:__anon7d4a41772908	typeref:typename:ecs_flags32_t	file:
direction	./vendor/raylib5/include/raylib.h	/^    Vector3 direction;      \/\/ Ray direction$/;"	m	struct:Ray	typeref:typename:Vector3
dirty_state	./src/flecs.c	/^    int32_t *dirty_state;            \/* Keep track of changes in columns *\/$/;"	m	struct:ecs_table_t	typeref:typename:int32_t *	file:
disable	./src/flecs.h	/^    Self& disable() {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
disable	./src/flecs.h	/^    Self& disable(flecs::id_t first, flecs::id_t second) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
disable	./src/flecs.h	/^    Self& disable(flecs::id_t id) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
disable	./src/flecs.h	/^    Self& disable(flecs::id_t second) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
disabled	./vendor/fmt/include/ranges.h	/^enum class range_format { disabled, map, set, sequence, string, debug_string };$/;"	e	enum:range_format
disassemble	./Makefile	/^disassemble: $(OBJ_C)$/;"	t
discard_count	./src/flecs.h	/^        ecs_metric_t discard_count;$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1308	typeref:typename:ecs_metric_t
discard_count	./src/flecs.h	/^        int64_t discard_count;         \/**< Commands discarded, happens when entity is no longe/;"	m	struct:ecs_world_info_t::__anon7d4a417c0708	typeref:typename:int64_t
dispatcher	./vendor/fmt/include/chrono.h	/^    dispatcher(std::time_t t) : time_(t) {}$/;"	f	struct:gmtime::dispatcher
dispatcher	./vendor/fmt/include/chrono.h	/^    dispatcher(std::time_t t) : time_(t) {}$/;"	f	struct:localtime::dispatcher
dispatcher	./vendor/fmt/include/chrono.h	/^  struct dispatcher {$/;"	s	function:gmtime
dispatcher	./vendor/fmt/include/chrono.h	/^  struct dispatcher {$/;"	s	function:localtime
display_string	./vendor/fmt/include/std.h	/^  auto display_string() const -> std::string {$/;"	f	class:path	typeref:typename:std::string
dist_and_fingerprint_from_hash	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] constexpr auto dist_and_fingerprint_from_hash(uint64_t hash) const -> dist_and/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:dist_and_fingerprint_type
dist_and_fingerprint_type	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using dist_and_fingerprint_type = decltype(Bucket::m_dist_and_fingerprint);$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table
dist_dec	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] static constexpr auto dist_dec(dist_and_fingerprint_type x) -> dist_and_finger/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:dist_and_fingerprint_type
dist_from_ideal_bucket	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  distance_type dist_from_ideal_bucket() const noexcept {$/;"	f	class:tsl::detail_robin_hash::bucket_entry	typeref:typename:distance_type
dist_inc	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] static constexpr auto dist_inc(dist_and_fingerprint_type x) -> dist_and_finger/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:dist_and_fingerprint_type
dist_inc	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    static constexpr uint32_t dist_inc = 1U << 8U;             \/\/ skip 1 byte fingerprint$/;"	m	struct:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::bucket_type::standard	typeref:typename:uint32_t
distance	./vendor/raylib5/include/raylib.h	/^    float distance;         \/\/ Distance to the nearest hit$/;"	m	struct:RayCollision	typeref:typename:float
distance_from_desired	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    int8_t distance_from_desired = -1;$/;"	m	struct:ska::detailv3::sherwood_v3_entry	typeref:typename:int8_t
distance_type	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  using distance_type = std::int16_t;$/;"	t	class:tsl::detail_robin_hash::bucket_entry	typeref:typename:std::int16_t
distance_type	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  using distance_type = typename bucket_entry::distance_type;$/;"	t	class:tsl::detail_robin_hash::robin_hash	typeref:typename:bucket_entry::distance_type
div_small_pow10_infos	./vendor/fmt/include/format-inl.h	/^} div_small_pow10_infos[] = {{10, 16}, {100, 16}};$/;"	v	namespace:detail::dragonbox	typeref:struct:detail::dragonbox::__anonf306e7170108[]
divide_by_10_to_kappa_plus_1	./vendor/fmt/include/format-inl.h	/^inline auto divide_by_10_to_kappa_plus_1(uint32_t n) noexcept -> uint32_t {$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
divide_by_10_to_kappa_plus_1	./vendor/fmt/include/format-inl.h	/^inline auto divide_by_10_to_kappa_plus_1(uint64_t n) noexcept -> uint64_t {$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
divisor	./vendor/fmt/include/format-inl.h	/^  uint32_t divisor;$/;"	m	struct:detail::dragonbox::__anonf306e7170108	typeref:typename:uint32_t
divmod_assign	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 auto divmod_assign(const bigint& divisor) -> int {$/;"	f	class:detail::bigint	typeref:typename:int
dlclose_	./src/flecs.h	/^    ecs_os_api_dlclose_t dlclose_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_dlclose_t
dlopen_	./src/flecs.h	/^    ecs_os_api_dlopen_t dlopen_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_dlopen_t
dlproc_	./src/flecs.h	/^    ecs_os_api_dlproc_t dlproc_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_dlproc_t
dmap	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^template <class K, class V> using dmap = ankerl::unordered_dense::map<K, V>;$/;"	t	typeref:typename:ankerl::unordered_dense::map<K,V>	file:
do_assign	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    std::pair<iterator, bool> do_assign(K&& key, V&& val)$/;"	f	class:emhash7::HashMap	typeref:typename:std::pair<iterator,bool>
do_at	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto do_at(K const& key) -> Q& {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:Q &
do_at	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto do_at(K const& key) const -> Q const& {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:Q const &
do_check_arg_id	./vendor/fmt/include/base.h	/^FMT_CONSTEXPR void basic_format_parse_context<Char>::do_check_arg_id(int id) {$/;"	f	class:basic_format_parse_context	typeref:typename:FMT_CONSTEXPR void
do_count_digits	./vendor/fmt/include/format.h	/^FMT_INLINE auto do_count_digits(uint32_t n) -> int {$/;"	f	namespace:detail	typeref:typename:int
do_count_digits	./vendor/fmt/include/format.h	/^inline auto do_count_digits(uint64_t n) -> int {$/;"	f	namespace:detail	typeref:typename:int
do_erase	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    void do_erase(value_idx_type bucket_idx) {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:void
do_erase_key	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto do_erase_key(K&& key) -> size_t {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:size_t
do_find	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto do_find(K const& key) -> iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:iterator
do_find	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto do_find(K const& key) const -> const_iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:const_iterator
do_format	./vendor/fmt/include/chrono.h	/^  auto do_format(const std::tm& tm, FormatContext& ctx,$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
do_format	./vendor/fmt/include/ranges.h	/^  auto do_format(const tuple_join_view<Char, T...>& value, FormatContext& ctx,$/;"	f	struct:formatter	typeref:typename:FormatContext::iterator
do_format	./vendor/fmt/include/ranges.h	/^  auto do_format(const tuple_join_view<Char, T...>&, FormatContext& ctx,$/;"	f	struct:formatter	typeref:typename:FormatContext::iterator
do_format	./vendor/fmt/include/std.h	/^  FMT_CONSTEXPR auto do_format(const std::complex<T>& c,$/;"	f	struct:formatter	typeref:typename:OutputIt
do_format_decimal	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR20 auto do_format_decimal(Char* out, UInt value, int size)$/;"	f	namespace:detail	typeref:typename:Char *
do_import	./src/flecs.h	/^ecs_entity_t do_import(world& world, const char *symbol) {$/;"	f	namespace:flecs::_	typeref:typename:ecs_entity_t
do_insert	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    std::pair<iterator, bool> do_insert(K&& key, V&& val)$/;"	f	class:emhash7::HashMap	typeref:typename:std::pair<iterator,bool>
do_insert	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    std::pair<iterator, bool> do_insert(const value_type& value)$/;"	f	class:emhash7::HashMap	typeref:typename:std::pair<iterator,bool>
do_insert	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    std::pair<iterator, bool> do_insert(value_type&& value)$/;"	f	class:emhash7::HashMap	typeref:typename:std::pair<iterator,bool>
do_insert_or_assign	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto do_insert_or_assign(K&& key, M&& mapped) -> std::pair<iterator, bool> {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:std::pair<iterator,bool>
do_insert_unqiue	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    size_type do_insert_unqiue(K&& key, V&& val)$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
do_map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto do_map(T& val) -> T& {$/;"	f	struct:detail::arg_mapper	typeref:typename:T &
do_map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto do_map(T&) -> unformattable {$/;"	f	struct:detail::arg_mapper	typeref:typename:unformattable
do_parse	./vendor/fmt/include/ranges.h	/^  FMT_CONSTEXPR auto do_parse(ParseContext& ctx,$/;"	f	struct:formatter	typeref:typename:decltype(ctx.begin ())
do_place_element	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto do_place_element(dist_and_fingerprint_type dist_and_fingerprint, value_idx_type bucket_/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:std::pair<iterator,bool>
do_put	./vendor/fmt/include/format-inl.h	/^FMT_API FMT_FUNC auto format_facet<std::locale>::do_put($/;"	f	class:format_facet::locale	typeref:typename:bool
do_throw	./vendor/fmt/include/format.h	/^template <typename Exception> inline void do_throw(const Exception& x) {$/;"	f	namespace:detail	typeref:typename:void
do_try_emplace	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto do_try_emplace(K&& key, Args&&... args) -> std::pair<iterator, bool> {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:std::pair<iterator,bool>
do_write	./vendor/fmt/include/chrono.h	/^inline void do_write(buffer<Char>& buf, const std::tm& time,$/;"	f	namespace:detail	typeref:typename:void
do_write_float	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR20 auto do_write_float(OutputIt out, const DecimalFP& f,$/;"	f	namespace:detail	typeref:typename:OutputIt
doc	./src/flecs.h	/^namespace doc {$/;"	n	namespace:flecs
doc_brief	./src/flecs.h	/^const char* doc_brief() const {$/;"	f	struct:flecs::entity_view	typeref:typename:const char *
doc_color	./src/flecs.h	/^const char* doc_color() const {$/;"	f	struct:flecs::entity_view	typeref:typename:const char *
doc_detail	./src/flecs.h	/^const char* doc_detail() const {$/;"	f	struct:flecs::entity_view	typeref:typename:const char *
doc_link	./src/flecs.h	/^const char* doc_link() const {$/;"	f	struct:flecs::entity_view	typeref:typename:const char *
doc_name	./src/flecs.h	/^    Base& doc_name(const char *doc_name) {$/;"	f	struct:flecs::alert_builder_i	typeref:typename:Base &
doc_name	./src/flecs.h	/^    const char *doc_name;$/;"	m	struct:ecs_alert_desc_t	typeref:typename:const char *
doc_name	./src/flecs.h	/^const char* doc_name() const {$/;"	f	struct:flecs::entity_view	typeref:typename:const char *
dodger_blue	./vendor/fmt/include/color.h	/^  dodger_blue = 0x1E90FF,              \/\/ rgb(30,144,255)$/;"	e	enum:color
done	./vendor/STC/include/stc/algo/filter.h	/^    bool done, sb[c_NFILTERS];$/;"	m	struct:_flt_base	typeref:typename:bool
dont_serialize_results	./src/flecs.h	/^    bool dont_serialize_results;    \/**< If true, query won't be evaluated *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
dot_type	./vendor/STC/include/stc/priv/cregex_prv.c	/^    int dot_type;$/;"	m	struct:_Parser	typeref:typename:int	file:
dotall	./vendor/STC/include/stc/priv/cregex_prv.c	/^    bool dotall;$/;"	m	struct:__anon4ce7005a0408	typeref:typename:bool	file:
dotmember	./src/flecs.h	/^    const char *dotmember;$/;"	m	struct:ecs_metric_desc_t	typeref:typename:const char *
dotmember	./src/flecs.h	/^inline metric_builder& metric_builder::dotmember(const char *expr) {$/;"	f	class:flecs::metric_builder	typeref:typename:metric_builder &
double_bigit	./vendor/fmt/include/format.h	/^  using double_bigit = uint64_t;$/;"	t	class:detail::bigint	typeref:typename:uint64_t
double_type	./vendor/fmt/include/base.h	/^  double_type,$/;"	e	enum:detail::type
double_value	./vendor/fmt/include/base.h	/^    double double_value;$/;"	m	union:detail::value::__anonea363bd9060a	typeref:typename:double
down	./src/flecs.c	/^    ecs_trav_down_t *down;$/;"	m	struct:__anon7d4a41772a08	typeref:typename:ecs_trav_down_t *	file:
dragon	./vendor/fmt/include/format.h	/^enum dragon {$/;"	g	namespace:detail
dragonbox	./vendor/fmt/include/format-inl.h	/^namespace dragonbox {$/;"	n	namespace:detail
dragonbox	./vendor/fmt/include/format.h	/^namespace dragonbox {$/;"	n	namespace:detail
draw	./src/main.c	/^void draw(double delta)$/;"	f	typeref:typename:void
draw	./vendor/STC/misc/examples/algorithms/shape.c	/^    void (*draw)(const Shape*);$/;"	m	struct:ShapeAPI	typeref:typename:void (*)(const Shape *)	file:
draw	./vendor/STC/misc/examples/algorithms/shape.cpp	/^void Polygon::draw() const$/;"	f	class:Polygon	typeref:typename:void
draw	./vendor/STC/misc/examples/algorithms/shape.cpp	/^void Triangle::draw() const$/;"	f	class:Triangle	typeref:typename:void
drop	./vendor/STC/misc/examples/algorithms/shape.c	/^    void (*drop)(Shape*);$/;"	m	struct:ShapeAPI	typeref:typename:void (*)(Shape *)	file:
dtor	./src/flecs.c	/^    ecs_poly_dtor_t dtor;      $/;"	m	struct:ecs_system_t	typeref:typename:ecs_poly_dtor_t	file:
dtor	./src/flecs.c	/^    ecs_poly_dtor_t dtor;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_poly_dtor_t	file:
dtor	./src/flecs.c	/^    ecs_poly_dtor_t dtor;$/;"	m	struct:ecs_rule_t	typeref:typename:ecs_poly_dtor_t	file:
dtor	./src/flecs.h	/^    ecs_poly_dtor_t dtor;      \/**< Dtor mixin *\/$/;"	m	struct:ecs_filter_t	typeref:typename:ecs_poly_dtor_t
dtor	./src/flecs.h	/^    ecs_poly_dtor_t dtor;$/;"	m	struct:ecs_observer_t	typeref:typename:ecs_poly_dtor_t
dtor	./src/flecs.h	/^    ecs_xtor_t dtor;            \/**< dtor *\/$/;"	m	struct:ecs_type_hooks_t	typeref:typename:ecs_xtor_t
dtor	./src/flecs.h	/^ecs_xtor_t dtor() {$/;"	f	namespace:flecs::_	typeref:typename:ecs_xtor_t
dtor_impl	./src/flecs.h	/^void dtor_impl(void *ptr, int32_t count, const ecs_type_info_t *info) {$/;"	f	namespace:flecs::_	typeref:typename:void
dtor_unit	./src/flecs.c	/^static void dtor_unit($/;"	f	file:
dtor_unit_prefix	./src/flecs.c	/^static void dtor_unit_prefix($/;"	f	file:
dummy	./vendor/fmt/include/base.h	/^    using dummy = int[];$/;"	t	function:detail::format_arg_store::format_arg_store	typeref:typename:int[]
dump_statics	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    void dump_statics(bool show_cache) const$/;"	f	class:emhash7::HashMap	typeref:typename:void
duration	./src/flecs.h	/^struct duration {$/;"	s	struct:flecs::units
duration	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    typedef std::chrono::duration<rep, period> duration;$/;"	t	struct:picobench::high_res_clock	typeref:typename:std::chrono::duration<rep,period>
duration_ns	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    uint64_t duration_ns() const { return _duration_ns; }$/;"	f	class:picobench::state	typeref:typename:uint64_t
dword	./vendor/fmt/include/format-inl.h	/^using dword = conditional_t<sizeof(long) == 4, unsigned long, unsigned>;$/;"	t	namespace:detail
dynamic_arg_list	./vendor/fmt/include/args.h	/^class dynamic_arg_list {$/;"	c	namespace:detail
dynamic_args_	./vendor/fmt/include/args.h	/^  detail::dynamic_arg_list dynamic_args_;$/;"	m	class:dynamic_format_arg_store	typeref:typename:detail::dynamic_arg_list
dynamic_format_arg_store	./vendor/fmt/include/args.h	/^class dynamic_format_arg_store$/;"	c
dynamic_format_specs	./vendor/fmt/include/base.h	/^template <typename Char = char> struct dynamic_format_specs : format_specs {$/;"	s	namespace:detail
dynamic_spec_id_handler	./vendor/fmt/include/base.h	/^template <typename Char> struct dynamic_spec_id_handler {$/;"	s	namespace:detail
e	./vendor/fmt/include/format.h	/^  int e;$/;"	m	struct:detail::basic_fp	typeref:typename:int
e_from_helper	./src/flecs.c	/^ecs_entity_t e_from_helper($/;"	f	typeref:typename:ecs_entity_t	file:
each	./src/flecs.c	/^        ecs_rule_each_ctx_t each;$/;"	m	union:ecs_rule_op_ctx_t::__anon7d4a4177340a	typeref:typename:ecs_rule_each_ctx_t	file:
each	./src/flecs.h	/^    T each(Func&& func) {$/;"	f	struct:flecs::_::node_builder	typeref:typename:T
each	./src/flecs.h	/^    void each(Func&& func) const {$/;"	f	struct:flecs::iterable	typeref:typename:void
each	./src/flecs.h	/^    void each(Func&& func) {$/;"	f	struct:flecs::filter_builder	typeref:typename:void
each	./src/flecs.h	/^    void each(const Func& func) const { $/;"	f	struct:flecs::entity_view	typeref:typename:void
each	./src/flecs.h	/^    void each(const Func& func) {$/;"	f	struct:flecs::array	typeref:typename:void
each	./src/flecs.h	/^    void each(flecs::entity e, Func&& func) const {$/;"	f	struct:flecs::iterable	typeref:typename:void
each	./src/flecs.h	/^    void each(flecs::iter& it, Func&& func) const {$/;"	f	struct:flecs::iterable	typeref:typename:void
each	./src/flecs.h	/^    void each(flecs::world_t *world, Func&& func) const {$/;"	f	struct:flecs::iterable	typeref:typename:void
each	./src/flecs.h	/^inline void entity_view::each(const Func& func) const {$/;"	f	class:flecs::entity_view	typeref:typename:void
each	./src/flecs.h	/^inline void entity_view::each(const flecs::entity_view& rel, const Func& func) const {$/;"	f	class:flecs::entity_view	typeref:typename:void
each	./src/flecs.h	/^inline void entity_view::each(flecs::id_t pred, flecs::id_t obj, const Func& func) const {$/;"	f	class:flecs::entity_view	typeref:typename:void
each	./src/flecs.h	/^inline void world::each(Func&& func) const {$/;"	f	class:flecs::world	typeref:typename:void
each	./src/flecs.h	/^inline void world::each(flecs::id_t term_id, Func&& func) const {$/;"	f	class:flecs::world	typeref:typename:void
each_column	./src/flecs.h	/^    each_column(const _::term_ptr& term, size_t row) $/;"	f	struct:flecs::_::each_column
each_column	./src/flecs.h	/^struct each_column { };$/;"	s	namespace:flecs::_
each_column	./src/flecs.h	/^struct each_column<T, if_t< !is_pointer<T>::value && $/;"	s	namespace:flecs::_
each_column	./src/flecs.h	/^struct each_column<T, if_t< !is_pointer<T>::value &&$/;"	s	namespace:flecs::_
each_column	./src/flecs.h	/^struct each_column<T, if_t< is_empty<actual_type_t<T>>::value && $/;"	s	namespace:flecs::_
each_column	./src/flecs.h	/^struct each_column<T, if_t< is_pointer<T>::value && $/;"	s	namespace:flecs::_
each_column_base	./src/flecs.h	/^    each_column_base(const _::term_ptr& term, size_t row) $/;"	f	struct:flecs::_::each_column_base
each_column_base	./src/flecs.h	/^struct each_column_base {$/;"	s	namespace:flecs::_
each_delegate	./src/flecs.h	/^    explicit each_delegate(Func&& func) noexcept $/;"	f	struct:flecs::_::each_delegate
each_delegate	./src/flecs.h	/^    explicit each_delegate(const Func& func) noexcept $/;"	f	struct:flecs::_::each_delegate
each_delegate	./src/flecs.h	/^struct each_delegate : public delegate {$/;"	s	namespace:flecs::_
each_enum	./src/flecs.h	/^    static constexpr underlying_type_t<E> each_enum(Args... args) {$/;"	f	struct:flecs::_::enum_reflection	typeref:typename:underlying_type_t<E>
each_enum_range	./src/flecs.h	/^    static constexpr underlying_type_t<E> each_enum_range(underlying_type_t<E> last_value, Args./;"	f	struct:flecs::_::enum_reflection	typeref:typename:underlying_type_t<E>
each_mask_range	./src/flecs.h	/^    static constexpr underlying_type_t<E> each_mask_range(underlying_type_t<E> last_value, Args./;"	f	struct:flecs::_::enum_reflection	typeref:typename:underlying_type_t<E>
each_ref_column	./src/flecs.h	/^    each_ref_column(const _::term_ptr& term, size_t row) $/;"	f	struct:flecs::_::each_ref_column
each_ref_column	./src/flecs.h	/^struct each_ref_column : public each_column<T> {$/;"	s	namespace:flecs::_
each_term	./src/flecs.h	/^    void each_term(const Func& func) const {$/;"	f	struct:flecs::query_base	typeref:typename:void
each_term	./src/flecs.h	/^    void each_term(const Func& func) const {$/;"	f	struct:flecs::rule_base	typeref:typename:void
each_term	./src/flecs.h	/^    void each_term(const Func& func) {$/;"	f	struct:flecs::filter_base	typeref:typename:void
ecs_abort	./src/flecs.h	/^#define ecs_abort(/;"	d
ecs_abort_	./src/flecs.c	/^void ecs_abort_($/;"	f	typeref:typename:void
ecs_action_elem_t	./src/flecs.c	/^typedef struct ecs_action_elem_t {$/;"	s	file:
ecs_action_elem_t	./src/flecs.c	/^} ecs_action_elem_t;$/;"	t	typeref:struct:ecs_action_elem_t	file:
ecs_add	./src/flecs.h	/^#define ecs_add(/;"	d
ecs_add_fullpath	./src/flecs.h	/^#define ecs_add_fullpath(/;"	d
ecs_add_id	./src/flecs.c	/^void ecs_add_id($/;"	f	typeref:typename:void
ecs_add_pair	./src/flecs.h	/^#define ecs_add_pair(/;"	d
ecs_add_path	./src/flecs.h	/^#define ecs_add_path(/;"	d
ecs_add_path_w_sep	./src/flecs.c	/^ecs_entity_t ecs_add_path_w_sep($/;"	f	typeref:typename:ecs_entity_t
ecs_alert	./src/flecs.h	/^#define ecs_alert(/;"	d
ecs_alert_desc_t	./src/flecs.h	/^typedef struct ecs_alert_desc_t {$/;"	s
ecs_alert_desc_t	./src/flecs.h	/^} ecs_alert_desc_t;$/;"	t	typeref:struct:ecs_alert_desc_t
ecs_alert_init	./src/flecs.c	/^ecs_entity_t ecs_alert_init($/;"	f	typeref:typename:ecs_entity_t
ecs_alert_severity_filter_t	./src/flecs.h	/^typedef struct ecs_alert_severity_filter_t {$/;"	s
ecs_alert_severity_filter_t	./src/flecs.h	/^} ecs_alert_severity_filter_t;$/;"	t	typeref:struct:ecs_alert_severity_filter_t
ecs_allocator_t	./src/flecs.h	/^struct ecs_allocator_t {$/;"	s
ecs_allocator_t	./src/flecs.h	/^typedef struct ecs_allocator_t ecs_allocator_t;$/;"	t	typeref:struct:ecs_allocator_t
ecs_app_desc	./src/flecs.c	/^static ecs_app_desc_t ecs_app_desc;$/;"	v	typeref:typename:ecs_app_desc_t	file:
ecs_app_desc_t	./src/flecs.h	/^typedef struct ecs_app_desc_t {$/;"	s
ecs_app_desc_t	./src/flecs.h	/^} ecs_app_desc_t;$/;"	t	typeref:struct:ecs_app_desc_t
ecs_app_frame_action_t	./src/flecs.h	/^typedef int(*ecs_app_frame_action_t)($/;"	t	typeref:typename:int (*)(ecs_world_t * world,const ecs_app_desc_t * desc)
ecs_app_init_action_t	./src/flecs.h	/^typedef int(*ecs_app_init_action_t)($/;"	t	typeref:typename:int (*)(ecs_world_t * world)
ecs_app_run	./src/flecs.c	/^int ecs_app_run($/;"	f	typeref:typename:int
ecs_app_run_action_t	./src/flecs.h	/^typedef int(*ecs_app_run_action_t)($/;"	t	typeref:typename:int (*)(ecs_world_t * world,ecs_app_desc_t * desc)
ecs_app_run_frame	./src/flecs.c	/^int ecs_app_run_frame($/;"	f	typeref:typename:int
ecs_app_set_frame_action	./src/flecs.c	/^int ecs_app_set_frame_action($/;"	f	typeref:typename:int
ecs_app_set_run_action	./src/flecs.c	/^int ecs_app_set_run_action($/;"	f	typeref:typename:int
ecs_array	./src/flecs.h	/^#define ecs_array(/;"	d
ecs_array_desc_t	./src/flecs.h	/^typedef struct ecs_array_desc_t {$/;"	s
ecs_array_desc_t	./src/flecs.h	/^} ecs_array_desc_t;$/;"	t	typeref:struct:ecs_array_desc_t
ecs_array_init	./src/flecs.c	/^ecs_entity_t ecs_array_init($/;"	f	typeref:typename:ecs_entity_t
ecs_array_to_json	./src/flecs.c	/^char* ecs_array_to_json($/;"	f	typeref:typename:char *
ecs_array_to_json_buf	./src/flecs.c	/^int ecs_array_to_json_buf($/;"	f	typeref:typename:int
ecs_asprintf	./src/flecs.c	/^char* ecs_asprintf($/;"	f	typeref:typename:char *
ecs_assert	./src/flecs.h	/^#define ecs_assert(/;"	d
ecs_assert_log_	./src/flecs.c	/^void ecs_assert_log_($/;"	f	typeref:typename:void
ecs_assert_var	./src/flecs.h	/^#define ecs_assert_var(/;"	d
ecs_astresc	./src/flecs.c	/^char* ecs_astresc($/;"	f	typeref:typename:char *
ecs_async_stage_free	./src/flecs.c	/^void ecs_async_stage_free($/;"	f	typeref:typename:void
ecs_async_stage_new	./src/flecs.c	/^ecs_world_t* ecs_async_stage_new($/;"	f	typeref:typename:ecs_world_t *
ecs_atfini	./src/flecs.c	/^void ecs_atfini($/;"	f	typeref:typename:void
ecs_bitmask	./src/flecs.h	/^#define ecs_bitmask(/;"	d
ecs_bitmask_constant_t	./src/flecs.h	/^typedef struct ecs_bitmask_constant_t {$/;"	s
ecs_bitmask_constant_t	./src/flecs.h	/^} ecs_bitmask_constant_t;$/;"	t	typeref:struct:ecs_bitmask_constant_t
ecs_bitmask_desc_t	./src/flecs.h	/^typedef struct ecs_bitmask_desc_t {$/;"	s
ecs_bitmask_desc_t	./src/flecs.h	/^} ecs_bitmask_desc_t;$/;"	t	typeref:struct:ecs_bitmask_desc_t
ecs_bitmask_init	./src/flecs.c	/^ecs_entity_t ecs_bitmask_init($/;"	f	typeref:typename:ecs_entity_t
ecs_bitset_t	./src/flecs.c	/^typedef struct ecs_bitset_t {$/;"	s	file:
ecs_bitset_t	./src/flecs.c	/^} ecs_bitset_t;$/;"	t	typeref:struct:ecs_bitset_t	file:
ecs_block_allocator_alloc_count	./src/flecs.c	/^int64_t ecs_block_allocator_alloc_count = 0;$/;"	v	typeref:typename:int64_t
ecs_block_allocator_block_t	./src/flecs.h	/^typedef struct ecs_block_allocator_block_t {$/;"	s
ecs_block_allocator_block_t	./src/flecs.h	/^} ecs_block_allocator_block_t;$/;"	t	typeref:struct:ecs_block_allocator_block_t
ecs_block_allocator_chunk_header_t	./src/flecs.h	/^typedef struct ecs_block_allocator_chunk_header_t {$/;"	s
ecs_block_allocator_chunk_header_t	./src/flecs.h	/^} ecs_block_allocator_chunk_header_t;$/;"	t	typeref:struct:ecs_block_allocator_chunk_header_t
ecs_block_allocator_free_count	./src/flecs.c	/^int64_t ecs_block_allocator_free_count = 0;$/;"	v	typeref:typename:int64_t
ecs_block_allocator_t	./src/flecs.h	/^typedef struct ecs_block_allocator_t {$/;"	s
ecs_block_allocator_t	./src/flecs.h	/^} ecs_block_allocator_t;$/;"	t	typeref:struct:ecs_block_allocator_t
ecs_bool_t	./src/flecs.h	/^typedef bool ecs_bool_t;$/;"	t	typeref:typename:bool
ecs_bucket_entry_t	./src/flecs.h	/^typedef struct ecs_bucket_entry_t {$/;"	s
ecs_bucket_entry_t	./src/flecs.h	/^} ecs_bucket_entry_t;$/;"	t	typeref:struct:ecs_bucket_entry_t
ecs_bucket_t	./src/flecs.h	/^typedef struct ecs_bucket_t {$/;"	s
ecs_bucket_t	./src/flecs.h	/^} ecs_bucket_t;$/;"	t	typeref:struct:ecs_bucket_t
ecs_build_info_t	./src/flecs.h	/^typedef struct ecs_build_info_t {$/;"	s
ecs_build_info_t	./src/flecs.h	/^} ecs_build_info_t;$/;"	t	typeref:struct:ecs_build_info_t
ecs_bulk_desc_t	./src/flecs.h	/^typedef struct ecs_bulk_desc_t {$/;"	s
ecs_bulk_desc_t	./src/flecs.h	/^} ecs_bulk_desc_t;$/;"	t	typeref:struct:ecs_bulk_desc_t
ecs_bulk_init	./src/flecs.c	/^const ecs_entity_t* ecs_bulk_init($/;"	f	typeref:typename:const ecs_entity_t *
ecs_bulk_new	./src/flecs.h	/^#define ecs_bulk_new(/;"	d
ecs_bulk_new_w_id	./src/flecs.c	/^const ecs_entity_t* ecs_bulk_new_w_id($/;"	f	typeref:typename:const ecs_entity_t *
ecs_byte_t	./src/flecs.h	/^typedef unsigned char ecs_byte_t;$/;"	t	typeref:typename:unsigned char
ecs_chained_iter_fini	./src/flecs.c	/^void ecs_chained_iter_fini($/;"	f	typeref:typename:void	file:
ecs_char_t	./src/flecs.h	/^typedef char ecs_char_t;$/;"	t	typeref:typename:char
ecs_check	./src/flecs.h	/^#define ecs_check(/;"	d
ecs_childof	./src/flecs.h	/^#define ecs_childof(/;"	d
ecs_children	./src/flecs.c	/^ecs_iter_t ecs_children($/;"	f	typeref:typename:ecs_iter_t
ecs_children_next	./src/flecs.c	/^bool ecs_children_next($/;"	f	typeref:typename:bool
ecs_chresc	./src/flecs.c	/^char* ecs_chresc($/;"	f	typeref:typename:char *
ecs_chrparse	./src/flecs.c	/^const char* ecs_chrparse($/;"	f	typeref:typename:const char *
ecs_clear	./src/flecs.c	/^void ecs_clear($/;"	f	typeref:typename:void
ecs_clone	./src/flecs.c	/^ecs_entity_t ecs_clone($/;"	f	typeref:typename:ecs_entity_t
ecs_cmd_1_t	./src/flecs.c	/^typedef struct ecs_cmd_1_t {$/;"	s	file:
ecs_cmd_1_t	./src/flecs.c	/^} ecs_cmd_1_t;$/;"	t	typeref:struct:ecs_cmd_1_t	file:
ecs_cmd_entry_t	./src/flecs.c	/^typedef struct ecs_cmd_entry_t {$/;"	s	file:
ecs_cmd_entry_t	./src/flecs.c	/^} ecs_cmd_entry_t;$/;"	t	typeref:struct:ecs_cmd_entry_t	file:
ecs_cmd_kind_t	./src/flecs.c	/^typedef enum ecs_cmd_kind_t {$/;"	g	file:
ecs_cmd_kind_t	./src/flecs.c	/^} ecs_cmd_kind_t;$/;"	t	typeref:enum:ecs_cmd_kind_t	file:
ecs_cmd_n_t	./src/flecs.c	/^typedef struct ecs_cmd_n_t {$/;"	s	file:
ecs_cmd_n_t	./src/flecs.c	/^} ecs_cmd_n_t;$/;"	t	typeref:struct:ecs_cmd_n_t	file:
ecs_cmd_t	./src/flecs.c	/^typedef struct ecs_cmd_t {$/;"	s	file:
ecs_cmd_t	./src/flecs.c	/^} ecs_cmd_t;$/;"	t	typeref:struct:ecs_cmd_t	file:
ecs_column_t	./src/flecs.c	/^typedef struct ecs_column_t {$/;"	s	file:
ecs_column_t	./src/flecs.c	/^} ecs_column_t;$/;"	t	typeref:struct:ecs_column_t	file:
ecs_commands_t	./src/flecs.c	/^typedef struct ecs_commands_t {$/;"	s	file:
ecs_commands_t	./src/flecs.c	/^} ecs_commands_t;$/;"	t	typeref:struct:ecs_commands_t	file:
ecs_commit	./src/flecs.c	/^bool ecs_commit($/;"	f	typeref:typename:bool
ecs_compare	./src/flecs.h	/^#define ecs_compare(/;"	d
ecs_compare_action_t	./src/flecs.h	/^typedef int (*ecs_compare_action_t)($/;"	t	typeref:typename:int (*)(const void * ptr1,const void * ptr2)
ecs_component	./src/flecs.h	/^#define ecs_component(/;"	d
ecs_component_desc_t	./src/flecs.h	/^typedef struct ecs_component_desc_t {$/;"	s
ecs_component_desc_t	./src/flecs.h	/^} ecs_component_desc_t;$/;"	t	typeref:struct:ecs_component_desc_t
ecs_component_init	./src/flecs.c	/^ecs_entity_t ecs_component_init($/;"	f	typeref:typename:ecs_entity_t
ecs_component_t	./src/flecs.h	/^#define ecs_component_t(/;"	d
ecs_copy	./src/flecs.h	/^#define ecs_copy(/;"	d
ecs_copy_ctor_illegal	./src/flecs.h	/^inline void ecs_copy_ctor_illegal($/;"	f	namespace:flecs::_	typeref:typename:void
ecs_copy_illegal	./src/flecs.h	/^inline void ecs_copy_illegal($/;"	f	namespace:flecs::_	typeref:typename:void
ecs_copy_t	./src/flecs.h	/^typedef void (*ecs_copy_t)($/;"	t	typeref:typename:void (*)(void * dst_ptr,const void * src_ptr,int32_t count,const ecs_type_info_t * type_info)
ecs_count	./src/flecs.h	/^#define ecs_count(/;"	d
ecs_count_id	./src/flecs.c	/^int32_t ecs_count_id($/;"	f	typeref:typename:int32_t
ecs_count_targets_metric_ctx_t	./src/flecs.c	/^} ecs_count_targets_metric_ctx_t;$/;"	t	typeref:struct:__anon7d4a41770f08	file:
ecs_counter_t	./src/flecs.h	/^typedef struct ecs_counter_t {$/;"	s
ecs_counter_t	./src/flecs.h	/^} ecs_counter_t;$/;"	t	typeref:struct:ecs_counter_t
ecs_cpp_component_register	./src/flecs.c	/^ecs_entity_t ecs_cpp_component_register($/;"	f	typeref:typename:ecs_entity_t
ecs_cpp_component_register_explicit	./src/flecs.c	/^ecs_entity_t ecs_cpp_component_register_explicit($/;"	f	typeref:typename:ecs_entity_t
ecs_cpp_component_validate	./src/flecs.c	/^void ecs_cpp_component_validate($/;"	f	typeref:typename:void
ecs_cpp_enum_constant_register	./src/flecs.c	/^ecs_entity_t ecs_cpp_enum_constant_register($/;"	f	typeref:typename:ecs_entity_t
ecs_cpp_enum_init	./src/flecs.c	/^void ecs_cpp_enum_init($/;"	f	typeref:typename:void
ecs_cpp_get_constant_name	./src/flecs.c	/^char* ecs_cpp_get_constant_name($/;"	f	typeref:typename:char *
ecs_cpp_get_symbol_name	./src/flecs.c	/^char* ecs_cpp_get_symbol_name($/;"	f	typeref:typename:char *
ecs_cpp_get_type_name	./src/flecs.c	/^char* ecs_cpp_get_type_name($/;"	f	typeref:typename:char *
ecs_cpp_last_member	./src/flecs.c	/^const ecs_member_t* ecs_cpp_last_member($/;"	f	typeref:typename:const ecs_member_t *
ecs_cpp_reset_count_get	./src/flecs.c	/^int32_t ecs_cpp_reset_count_get(void) {$/;"	f	typeref:typename:int32_t
ecs_cpp_reset_count_inc	./src/flecs.c	/^int32_t ecs_cpp_reset_count_inc(void) {$/;"	f	typeref:typename:int32_t
ecs_cpp_strip_prefix	./src/flecs.c	/^ecs_size_t ecs_cpp_strip_prefix($/;"	f	typeref:typename:ecs_size_t	file:
ecs_cpp_trim_module	./src/flecs.c	/^const char* ecs_cpp_trim_module($/;"	f	typeref:typename:const char *
ecs_cpp_trim_type_name	./src/flecs.c	/^void ecs_cpp_trim_type_name($/;"	f	typeref:typename:void	file:
ecs_ctor	./src/flecs.h	/^#define ecs_ctor(/;"	d
ecs_ctor_illegal	./src/flecs.h	/^inline void ecs_ctor_illegal(void *, int32_t, const ecs_type_info_t *ti) {$/;"	f	namespace:flecs::_	typeref:typename:void
ecs_ctx_free_t	./src/flecs.h	/^typedef void (*ecs_ctx_free_t)($/;"	t	typeref:typename:void (*)(void * ctx)
ecs_data_t	./src/flecs.c	/^struct ecs_data_t {$/;"	s	file:
ecs_data_t	./src/flecs.h	/^typedef struct ecs_data_t ecs_data_t;$/;"	t	typeref:struct:ecs_data_t
ecs_dbg	./src/flecs.h	/^#define ecs_dbg ecs_dbg_/;"	d
ecs_dbg_1	./src/flecs.h	/^#define ecs_dbg_1(/;"	d
ecs_dbg_2	./src/flecs.h	/^#define ecs_dbg_2(/;"	d
ecs_dbg_3	./src/flecs.h	/^#define ecs_dbg_3(/;"	d
ecs_dbg_assert	./src/flecs.h	/^#define ecs_dbg_assert(/;"	d
ecs_default_ctor	./src/flecs.c	/^void ecs_default_ctor($/;"	f	typeref:typename:void
ecs_default_lookup_path	./src/flecs.c	/^static ecs_entity_t ecs_default_lookup_path[2] = { 0, 0 };$/;"	v	typeref:typename:ecs_entity_t[2]	file:
ecs_defer_begin	./src/flecs.c	/^bool ecs_defer_begin($/;"	f	typeref:typename:bool
ecs_defer_end	./src/flecs.c	/^bool ecs_defer_end($/;"	f	typeref:typename:bool
ecs_defer_resume	./src/flecs.c	/^void ecs_defer_resume($/;"	f	typeref:typename:void
ecs_defer_suspend	./src/flecs.c	/^void ecs_defer_suspend($/;"	f	typeref:typename:void
ecs_delete	./src/flecs.c	/^void ecs_delete($/;"	f	typeref:typename:void
ecs_delete_children	./src/flecs.h	/^#define ecs_delete_children(/;"	d
ecs_delete_empty_tables	./src/flecs.c	/^int32_t ecs_delete_empty_tables($/;"	f	typeref:typename:int32_t
ecs_delete_with	./src/flecs.c	/^void ecs_delete_with($/;"	f	typeref:typename:void
ecs_dependson	./src/flecs.h	/^#define ecs_dependson(/;"	d
ecs_deprecated	./src/flecs.h	/^#define ecs_deprecated(/;"	d
ecs_deprecated_	./src/flecs.c	/^void ecs_deprecated_($/;"	f	typeref:typename:void
ecs_dim	./src/flecs.c	/^void ecs_dim($/;"	f	typeref:typename:void
ecs_doc_get_brief	./src/flecs.c	/^const char* ecs_doc_get_brief($/;"	f	typeref:typename:const char *
ecs_doc_get_color	./src/flecs.c	/^const char* ecs_doc_get_color($/;"	f	typeref:typename:const char *
ecs_doc_get_detail	./src/flecs.c	/^const char* ecs_doc_get_detail($/;"	f	typeref:typename:const char *
ecs_doc_get_link	./src/flecs.c	/^const char* ecs_doc_get_link($/;"	f	typeref:typename:const char *
ecs_doc_get_name	./src/flecs.c	/^const char* ecs_doc_get_name($/;"	f	typeref:typename:const char *
ecs_doc_set_brief	./src/flecs.c	/^void ecs_doc_set_brief($/;"	f	typeref:typename:void
ecs_doc_set_color	./src/flecs.c	/^void ecs_doc_set_color($/;"	f	typeref:typename:void
ecs_doc_set_detail	./src/flecs.c	/^void ecs_doc_set_detail($/;"	f	typeref:typename:void
ecs_doc_set_link	./src/flecs.c	/^void ecs_doc_set_link($/;"	f	typeref:typename:void
ecs_doc_set_name	./src/flecs.c	/^void ecs_doc_set_name($/;"	f	typeref:typename:void
ecs_dtor	./src/flecs.h	/^#define ecs_dtor(/;"	d
ecs_dtor_illegal	./src/flecs.h	/^inline void ecs_dtor_illegal(void *, int32_t, const ecs_type_info_t *ti) {$/;"	f	namespace:flecs::_	typeref:typename:void
ecs_dummy_check	./src/flecs.h	/^#define ecs_dummy_check\\/;"	d
ecs_eis	./src/flecs.c	/^#define ecs_eis(/;"	d	file:
ecs_emit	./src/flecs.c	/^void ecs_emit($/;"	f	typeref:typename:void
ecs_emplace	./src/flecs.h	/^#define ecs_emplace(/;"	d
ecs_emplace_id	./src/flecs.c	/^void* ecs_emplace_id($/;"	f	typeref:typename:void *
ecs_emplace_pair	./src/flecs.h	/^#define ecs_emplace_pair(/;"	d
ecs_enable	./src/flecs.c	/^void ecs_enable($/;"	f	typeref:typename:void
ecs_enable_component	./src/flecs.h	/^#define ecs_enable_component(/;"	d
ecs_enable_id	./src/flecs.c	/^void ecs_enable_id($/;"	f	typeref:typename:void
ecs_enable_pair	./src/flecs.h	/^#define ecs_enable_pair(/;"	d
ecs_enable_range_check	./src/flecs.c	/^bool ecs_enable_range_check($/;"	f	typeref:typename:bool
ecs_enqueue	./src/flecs.c	/^void ecs_enqueue($/;"	f	typeref:typename:void
ecs_ensure	./src/flecs.h	/^#define ecs_ensure(/;"	d
ecs_ensure_id	./src/flecs.c	/^void* ecs_ensure_id($/;"	f	typeref:typename:void *
ecs_ensure_modified_id	./src/flecs.c	/^void* ecs_ensure_modified_id($/;"	f	typeref:typename:void *
ecs_ensure_pair	./src/flecs.h	/^#define ecs_ensure_pair(/;"	d
ecs_ensure_pair_object	./src/flecs.h	/^#define ecs_ensure_pair_object /;"	d
ecs_ensure_pair_second	./src/flecs.h	/^#define ecs_ensure_pair_second(/;"	d
ecs_entity	./src/flecs.h	/^#define ecs_entity(/;"	d
ecs_entity_desc_t	./src/flecs.h	/^typedef struct ecs_entity_desc_t {$/;"	s
ecs_entity_desc_t	./src/flecs.h	/^} ecs_entity_desc_t;$/;"	t	typeref:struct:ecs_entity_desc_t
ecs_entity_filter_iter_t	./src/flecs.c	/^typedef struct ecs_entity_filter_iter_t {$/;"	s	file:
ecs_entity_filter_iter_t	./src/flecs.c	/^} ecs_entity_filter_iter_t;$/;"	t	typeref:struct:ecs_entity_filter_iter_t	file:
ecs_entity_filter_t	./src/flecs.c	/^typedef struct ecs_entity_filter_t {$/;"	s	file:
ecs_entity_filter_t	./src/flecs.c	/^} ecs_entity_filter_t;$/;"	t	typeref:struct:ecs_entity_filter_t	file:
ecs_entity_from_json	./src/flecs.c	/^const char* ecs_entity_from_json($/;"	f	typeref:typename:const char *
ecs_entity_index_page_t	./src/flecs.c	/^typedef struct ecs_entity_index_page_t {$/;"	s	file:
ecs_entity_index_page_t	./src/flecs.c	/^} ecs_entity_index_page_t;$/;"	t	typeref:struct:ecs_entity_index_page_t	file:
ecs_entity_index_t	./src/flecs.c	/^typedef struct ecs_entity_index_t {$/;"	s	file:
ecs_entity_index_t	./src/flecs.c	/^} ecs_entity_index_t;$/;"	t	typeref:struct:ecs_entity_index_t	file:
ecs_entity_init	./src/flecs.c	/^ecs_entity_t ecs_entity_init($/;"	f	typeref:typename:ecs_entity_t
ecs_entity_str	./src/flecs.c	/^char* ecs_entity_str($/;"	f	typeref:typename:char *
ecs_entity_t	./src/flecs.h	/^typedef ecs_id_t ecs_entity_t;$/;"	t	typeref:typename:ecs_id_t
ecs_entity_t_comb	./src/flecs.h	/^#define ecs_entity_t_comb(/;"	d
ecs_entity_t_hi	./src/flecs.h	/^#define ecs_entity_t_hi(/;"	d
ecs_entity_t_lo	./src/flecs.h	/^#define ecs_entity_t_lo(/;"	d
ecs_entity_to_json	./src/flecs.c	/^char* ecs_entity_to_json($/;"	f	typeref:typename:char *
ecs_entity_to_json_buf	./src/flecs.c	/^int ecs_entity_to_json_buf($/;"	f	typeref:typename:int
ecs_entity_to_json_desc_t	./src/flecs.h	/^typedef struct ecs_entity_to_json_desc_t {$/;"	s
ecs_entity_to_json_desc_t	./src/flecs.h	/^} ecs_entity_to_json_desc_t;$/;"	t	typeref:struct:ecs_entity_to_json_desc_t
ecs_enum	./src/flecs.h	/^#define ecs_enum(/;"	d
ecs_enum_constant_t	./src/flecs.h	/^typedef struct ecs_enum_constant_t {$/;"	s
ecs_enum_constant_t	./src/flecs.h	/^} ecs_enum_constant_t;$/;"	t	typeref:struct:ecs_enum_constant_t
ecs_enum_desc_t	./src/flecs.h	/^typedef struct ecs_enum_desc_t {$/;"	s
ecs_enum_desc_t	./src/flecs.h	/^} ecs_enum_desc_t;$/;"	t	typeref:struct:ecs_enum_desc_t
ecs_enum_init	./src/flecs.c	/^ecs_entity_t ecs_enum_init($/;"	f	typeref:typename:ecs_entity_t
ecs_err	./src/flecs.h	/^#define ecs_err(...) ecs_err_/;"	d
ecs_err_	./src/flecs.h	/^#define ecs_err_(/;"	d
ecs_event_desc_t	./src/flecs.h	/^typedef struct ecs_event_desc_t {$/;"	s
ecs_event_desc_t	./src/flecs.h	/^} ecs_event_desc_t;$/;"	t	typeref:struct:ecs_event_desc_t
ecs_event_id_record_t	./src/flecs.c	/^typedef struct ecs_event_id_record_t {$/;"	s	file:
ecs_event_id_record_t	./src/flecs.c	/^} ecs_event_id_record_t;$/;"	t	typeref:struct:ecs_event_id_record_t	file:
ecs_event_record_t	./src/flecs.h	/^typedef struct ecs_event_record_t {$/;"	s
ecs_event_record_t	./src/flecs.h	/^} ecs_event_record_t;$/;"	t	typeref:struct:ecs_event_record_t
ecs_exists	./src/flecs.c	/^bool ecs_exists($/;"	f	typeref:typename:bool
ecs_expr_oper_t	./src/flecs.c	/^typedef enum ecs_expr_oper_t {$/;"	g	file:
ecs_expr_oper_t	./src/flecs.c	/^} ecs_expr_oper_t;$/;"	t	typeref:enum:ecs_expr_oper_t	file:
ecs_expr_value_t	./src/flecs.c	/^typedef struct ecs_expr_value_t {$/;"	s	file:
ecs_expr_value_t	./src/flecs.c	/^} ecs_expr_value_t;$/;"	t	typeref:struct:ecs_expr_value_t	file:
ecs_expr_var_scope_t	./src/flecs.h	/^typedef struct ecs_expr_var_scope_t {$/;"	s
ecs_expr_var_scope_t	./src/flecs.h	/^} ecs_expr_var_scope_t;$/;"	t	typeref:struct:ecs_expr_var_scope_t
ecs_expr_var_t	./src/flecs.h	/^typedef struct ecs_expr_var_t {$/;"	s
ecs_expr_var_t	./src/flecs.h	/^} ecs_expr_var_t;$/;"	t	typeref:struct:ecs_expr_var_t
ecs_f32_t	./src/flecs.h	/^typedef float ecs_f32_t;$/;"	t	typeref:typename:float
ecs_f64_t	./src/flecs.h	/^typedef double ecs_f64_t;$/;"	t	typeref:typename:double
ecs_fatal	./src/flecs.h	/^#define ecs_fatal(...) ecs_fatal_/;"	d
ecs_fatal_	./src/flecs.h	/^#define ecs_fatal_(/;"	d
ecs_field	./src/flecs.h	/^#define ecs_field(/;"	d
ecs_field_column_index	./src/flecs.c	/^int32_t ecs_field_column_index($/;"	f	typeref:typename:int32_t
ecs_field_id	./src/flecs.c	/^ecs_id_t ecs_field_id($/;"	f	typeref:typename:ecs_id_t
ecs_field_is_readonly	./src/flecs.c	/^bool ecs_field_is_readonly($/;"	f	typeref:typename:bool
ecs_field_is_self	./src/flecs.c	/^bool ecs_field_is_self($/;"	f	typeref:typename:bool
ecs_field_is_set	./src/flecs.c	/^bool ecs_field_is_set($/;"	f	typeref:typename:bool
ecs_field_is_writeonly	./src/flecs.c	/^bool ecs_field_is_writeonly($/;"	f	typeref:typename:bool
ecs_field_size	./src/flecs.c	/^size_t ecs_field_size($/;"	f	typeref:typename:size_t
ecs_field_src	./src/flecs.c	/^ecs_entity_t ecs_field_src($/;"	f	typeref:typename:ecs_entity_t
ecs_field_w_size	./src/flecs.c	/^void* ecs_field_w_size($/;"	f	typeref:typename:void *
ecs_filter	./src/flecs.h	/^#define ecs_filter(/;"	d
ecs_filter_chain_iter	./src/flecs.c	/^ecs_iter_t ecs_filter_chain_iter($/;"	f	typeref:typename:ecs_iter_t
ecs_filter_copy	./src/flecs.c	/^void ecs_filter_copy($/;"	f	typeref:typename:void
ecs_filter_desc_t	./src/flecs.h	/^typedef struct ecs_filter_desc_t {$/;"	s
ecs_filter_desc_t	./src/flecs.h	/^} ecs_filter_desc_t;$/;"	t	typeref:struct:ecs_filter_desc_t
ecs_filter_finalize	./src/flecs.c	/^int ecs_filter_finalize($/;"	f	typeref:typename:int
ecs_filter_finalize_ctx_t	./src/flecs.c	/^} ecs_filter_finalize_ctx_t;$/;"	t	typeref:struct:__anon7d4a41770308	file:
ecs_filter_find_this_var	./src/flecs.c	/^int32_t ecs_filter_find_this_var($/;"	f	typeref:typename:int32_t
ecs_filter_fini	./src/flecs.c	/^void ecs_filter_fini($/;"	f	typeref:typename:void
ecs_filter_init	./src/flecs.c	/^ecs_filter_t* ecs_filter_init($/;"	f	typeref:typename:ecs_filter_t *
ecs_filter_iter	./src/flecs.c	/^ecs_iter_t ecs_filter_iter($/;"	f	typeref:typename:ecs_iter_t
ecs_filter_iter_t	./src/flecs.h	/^typedef struct ecs_filter_iter_t {$/;"	s
ecs_filter_iter_t	./src/flecs.h	/^} ecs_filter_iter_t;$/;"	t	typeref:struct:ecs_filter_iter_t
ecs_filter_move	./src/flecs.c	/^void ecs_filter_move($/;"	f	typeref:typename:void
ecs_filter_next	./src/flecs.c	/^bool ecs_filter_next($/;"	f	typeref:typename:bool
ecs_filter_next_instanced	./src/flecs.c	/^bool ecs_filter_next_instanced($/;"	f	typeref:typename:bool
ecs_filter_pivot_term	./src/flecs.c	/^int32_t ecs_filter_pivot_term($/;"	f	typeref:typename:int32_t
ecs_filter_str	./src/flecs.c	/^char* ecs_filter_str($/;"	f	typeref:typename:char *
ecs_filter_t	./src/flecs.h	/^struct ecs_filter_t {$/;"	s
ecs_filter_t	./src/flecs.h	/^typedef struct ecs_filter_t ecs_filter_t;$/;"	t	typeref:struct:ecs_filter_t
ecs_filter_t_magic	./src/flecs.h	/^#define ecs_filter_t_magic /;"	d
ecs_filter_t_mixins	./src/flecs.c	/^ecs_mixins_t ecs_filter_t_mixins = {$/;"	v	typeref:typename:ecs_mixins_t
ecs_filter_t_tag	./src/flecs.c	/^#define ecs_filter_t_tag /;"	d	file:
ecs_fini	./src/flecs.c	/^int ecs_fini($/;"	f	typeref:typename:int
ecs_fini_action_t	./src/flecs.h	/^typedef void (*ecs_fini_action_t)($/;"	t	typeref:typename:void (*)(ecs_world_t * world,void * ctx)
ecs_flags16_t	./src/flecs.h	/^typedef uint16_t ecs_flags16_t;$/;"	t	typeref:typename:uint16_t
ecs_flags32_t	./src/flecs.h	/^typedef uint32_t ecs_flags32_t;$/;"	t	typeref:typename:uint32_t
ecs_flags64_t	./src/flecs.h	/^typedef uint64_t ecs_flags64_t;$/;"	t	typeref:typename:uint64_t
ecs_flags8_t	./src/flecs.h	/^typedef uint8_t ecs_flags8_t;$/;"	t	typeref:typename:uint8_t
ecs_flatten	./src/flecs.c	/^void ecs_flatten($/;"	f	typeref:typename:void
ecs_flatten_desc_t	./src/flecs.h	/^typedef struct ecs_flatten_desc_t {$/;"	s
ecs_flatten_desc_t	./src/flecs.h	/^} ecs_flatten_desc_t;$/;"	t	typeref:struct:ecs_flatten_desc_t
ecs_float_t	./src/flecs.h	/^#define ecs_float_t /;"	d
ecs_frame_begin	./src/flecs.c	/^ecs_ftime_t ecs_frame_begin($/;"	f	typeref:typename:ecs_ftime_t
ecs_frame_end	./src/flecs.c	/^void ecs_frame_end($/;"	f	typeref:typename:void
ecs_from_json_ctx_t	./src/flecs.c	/^} ecs_from_json_ctx_t;$/;"	t	typeref:struct:__anon7d4a41771d08	file:
ecs_from_json_desc_t	./src/flecs.h	/^typedef struct ecs_from_json_desc_t {$/;"	s
ecs_from_json_desc_t	./src/flecs.h	/^} ecs_from_json_desc_t;$/;"	t	typeref:struct:ecs_from_json_desc_t
ecs_ftime_t	./src/flecs.h	/^#define ecs_ftime_t /;"	d
ecs_gauge_t	./src/flecs.h	/^typedef struct ecs_gauge_t {$/;"	s
ecs_gauge_t	./src/flecs.h	/^} ecs_gauge_t;$/;"	t	typeref:struct:ecs_gauge_t
ecs_get	./src/flecs.h	/^#define ecs_get(/;"	d
ecs_get_alert	./src/flecs.c	/^ecs_entity_t ecs_get_alert($/;"	f	typeref:typename:ecs_entity_t
ecs_get_alert_count	./src/flecs.c	/^int32_t ecs_get_alert_count($/;"	f	typeref:typename:int32_t
ecs_get_alive	./src/flecs.c	/^ecs_entity_t ecs_get_alive($/;"	f	typeref:typename:ecs_entity_t
ecs_get_binding_ctx	./src/flecs.c	/^void* ecs_get_binding_ctx($/;"	f	typeref:typename:void *
ecs_get_build_info	./src/flecs.c	/^const ecs_build_info_t* ecs_get_build_info(void) {$/;"	f	typeref:typename:const ecs_build_info_t *
ecs_get_ctx	./src/flecs.c	/^void* ecs_get_ctx($/;"	f	typeref:typename:void *
ecs_get_depth	./src/flecs.c	/^int32_t ecs_get_depth($/;"	f	typeref:typename:int32_t
ecs_get_dtor	./src/flecs.c	/^ecs_poly_dtor_t* ecs_get_dtor($/;"	f	typeref:typename:ecs_poly_dtor_t *
ecs_get_entity	./src/flecs.c	/^ecs_entity_t ecs_get_entity($/;"	f	typeref:typename:ecs_entity_t
ecs_get_fullpath	./src/flecs.h	/^#define ecs_get_fullpath(/;"	d
ecs_get_fullpath_buf	./src/flecs.h	/^#define ecs_get_fullpath_buf(/;"	d
ecs_get_hooks	./src/flecs.h	/^#define ecs_get_hooks(/;"	d
ecs_get_hooks_id	./src/flecs.c	/^const ecs_type_hooks_t* ecs_get_hooks_id($/;"	f	typeref:typename:const ecs_type_hooks_t *
ecs_get_id	./src/flecs.c	/^const void* ecs_get_id($/;"	f	typeref:typename:const void *
ecs_get_interval	./src/flecs.c	/^ecs_ftime_t ecs_get_interval($/;"	f	typeref:typename:ecs_ftime_t
ecs_get_iterable	./src/flecs.c	/^ecs_iterable_t* ecs_get_iterable($/;"	f	typeref:typename:ecs_iterable_t *
ecs_get_lookup_path	./src/flecs.c	/^ecs_entity_t* ecs_get_lookup_path($/;"	f	typeref:typename:ecs_entity_t *
ecs_get_max_id	./src/flecs.c	/^ecs_entity_t ecs_get_max_id($/;"	f	typeref:typename:ecs_entity_t
ecs_get_mut	./src/flecs.h	/^#define ecs_get_mut(/;"	d
ecs_get_mut_id	./src/flecs.c	/^void* ecs_get_mut_id($/;"	f	typeref:typename:void *
ecs_get_mut_pair	./src/flecs.h	/^#define ecs_get_mut_pair(/;"	d
ecs_get_mut_pair_object	./src/flecs.h	/^#define ecs_get_mut_pair_object /;"	d
ecs_get_mut_pair_second	./src/flecs.h	/^#define ecs_get_mut_pair_second(/;"	d
ecs_get_name	./src/flecs.c	/^const char* ecs_get_name($/;"	f	typeref:typename:const char *
ecs_get_observable	./src/flecs.c	/^ecs_observable_t* ecs_get_observable($/;"	f	typeref:typename:ecs_observable_t *
ecs_get_pair	./src/flecs.h	/^#define ecs_get_pair(/;"	d
ecs_get_pair_object	./src/flecs.h	/^#define ecs_get_pair_object /;"	d
ecs_get_pair_second	./src/flecs.h	/^#define ecs_get_pair_second(/;"	d
ecs_get_parent	./src/flecs.c	/^ecs_entity_t ecs_get_parent($/;"	f	typeref:typename:ecs_entity_t
ecs_get_path	./src/flecs.h	/^#define ecs_get_path(/;"	d
ecs_get_path_w_sep	./src/flecs.c	/^char* ecs_get_path_w_sep($/;"	f	typeref:typename:char *
ecs_get_path_w_sep_buf	./src/flecs.c	/^void ecs_get_path_w_sep_buf($/;"	f	typeref:typename:void
ecs_get_pipeline	./src/flecs.c	/^ecs_entity_t ecs_get_pipeline($/;"	f	typeref:typename:ecs_entity_t
ecs_get_scope	./src/flecs.c	/^ecs_entity_t ecs_get_scope($/;"	f	typeref:typename:ecs_entity_t
ecs_get_stage	./src/flecs.c	/^ecs_world_t* ecs_get_stage($/;"	f	typeref:typename:ecs_world_t *
ecs_get_stage_count	./src/flecs.c	/^int32_t ecs_get_stage_count($/;"	f	typeref:typename:int32_t
ecs_get_stage_id	./src/flecs.c	/^int32_t ecs_get_stage_id($/;"	f	typeref:typename:int32_t
ecs_get_symbol	./src/flecs.c	/^const char* ecs_get_symbol($/;"	f	typeref:typename:const char *
ecs_get_table	./src/flecs.c	/^ecs_table_t* ecs_get_table($/;"	f	typeref:typename:ecs_table_t *
ecs_get_target	./src/flecs.c	/^ecs_entity_t ecs_get_target($/;"	f	typeref:typename:ecs_entity_t
ecs_get_target_for_id	./src/flecs.c	/^ecs_entity_t ecs_get_target_for_id($/;"	f	typeref:typename:ecs_entity_t
ecs_get_timeout	./src/flecs.c	/^ecs_ftime_t ecs_get_timeout($/;"	f	typeref:typename:ecs_ftime_t
ecs_get_type	./src/flecs.c	/^const ecs_type_t* ecs_get_type($/;"	f	typeref:typename:const ecs_type_t *
ecs_get_type_info	./src/flecs.c	/^const ecs_type_info_t* ecs_get_type_info($/;"	f	typeref:typename:const ecs_type_info_t *
ecs_get_typeid	./src/flecs.c	/^ecs_entity_t ecs_get_typeid($/;"	f	typeref:typename:ecs_entity_t
ecs_get_with	./src/flecs.c	/^ecs_id_t ecs_get_with($/;"	f	typeref:typename:ecs_id_t
ecs_get_world	./src/flecs.c	/^const ecs_world_t* ecs_get_world($/;"	f	typeref:typename:const ecs_world_t *
ecs_get_world_info	./src/flecs.c	/^const ecs_world_info_t* ecs_get_world_info($/;"	f	typeref:typename:const ecs_world_info_t *
ecs_graph_edge_hdr_t	./src/flecs.c	/^typedef struct ecs_graph_edge_hdr_t {$/;"	s	file:
ecs_graph_edge_hdr_t	./src/flecs.c	/^} ecs_graph_edge_hdr_t;$/;"	t	typeref:struct:ecs_graph_edge_hdr_t	file:
ecs_graph_edge_t	./src/flecs.c	/^typedef struct ecs_graph_edge_t {$/;"	s	file:
ecs_graph_edge_t	./src/flecs.c	/^} ecs_graph_edge_t;$/;"	t	typeref:struct:ecs_graph_edge_t	file:
ecs_graph_edges_t	./src/flecs.c	/^typedef struct ecs_graph_edges_t {$/;"	s	file:
ecs_graph_edges_t	./src/flecs.c	/^} ecs_graph_edges_t;$/;"	t	typeref:struct:ecs_graph_edges_t	file:
ecs_graph_node_t	./src/flecs.c	/^typedef struct ecs_graph_node_t {$/;"	s	file:
ecs_graph_node_t	./src/flecs.c	/^} ecs_graph_node_t;$/;"	t	typeref:struct:ecs_graph_node_t	file:
ecs_group_by_action_t	./src/flecs.h	/^typedef uint64_t (*ecs_group_by_action_t)($/;"	t	typeref:typename:uint64_t (*)(ecs_world_t * world,ecs_table_t * table,ecs_id_t group_id,void * ctx)
ecs_group_create_action_t	./src/flecs.h	/^typedef void* (*ecs_group_create_action_t)($/;"	t	typeref:typename:void * (*)(ecs_world_t * world,uint64_t group_id,void * group_by_ctx)
ecs_group_delete_action_t	./src/flecs.h	/^typedef void (*ecs_group_delete_action_t)($/;"	t	typeref:typename:void (*)(ecs_world_t * world,uint64_t group_id,void * group_ctx,void * group_by_ctx)
ecs_has	./src/flecs.h	/^#define ecs_has(/;"	d
ecs_has_id	./src/flecs.c	/^bool ecs_has_id($/;"	f	typeref:typename:bool
ecs_has_pair	./src/flecs.h	/^#define ecs_has_pair(/;"	d
ecs_hash_value_action_t	./src/flecs.h	/^typedef uint64_t (*ecs_hash_value_action_t)($/;"	t	typeref:typename:uint64_t (*)(const void * ptr)
ecs_hashed_string_t	./src/flecs.c	/^typedef struct ecs_hashed_string_t {$/;"	s	file:
ecs_hashed_string_t	./src/flecs.c	/^} ecs_hashed_string_t;$/;"	t	typeref:struct:ecs_hashed_string_t	file:
ecs_hashmap_t	./src/flecs.h	/^} ecs_hashmap_t;$/;"	t	typeref:struct:__anon7d4a417c0408
ecs_header_t	./src/flecs.h	/^typedef struct ecs_header_t {$/;"	s
ecs_header_t	./src/flecs.h	/^} ecs_header_t;$/;"	t	typeref:struct:ecs_header_t
ecs_hm_bucket_t	./src/flecs.h	/^} ecs_hm_bucket_t;$/;"	t	typeref:struct:__anon7d4a417c0308
ecs_http_busy_count	./src/flecs.c	/^int64_t ecs_http_busy_count = 0;$/;"	v	typeref:typename:int64_t
ecs_http_connection_impl_t	./src/flecs.c	/^} ecs_http_connection_impl_t;$/;"	t	typeref:struct:__anon7d4a41770808	file:
ecs_http_connection_t	./src/flecs.h	/^} ecs_http_connection_t;$/;"	t	typeref:struct:__anon7d4a417c0808
ecs_http_fragment_t	./src/flecs.c	/^} ecs_http_fragment_t;$/;"	t	typeref:struct:__anon7d4a41770708	file:
ecs_http_get_header	./src/flecs.c	/^const char* ecs_http_get_header($/;"	f	typeref:typename:const char *
ecs_http_get_param	./src/flecs.c	/^const char* ecs_http_get_param($/;"	f	typeref:typename:const char *
ecs_http_key_value_t	./src/flecs.h	/^} ecs_http_key_value_t;$/;"	t	typeref:struct:__anon7d4a417c0908
ecs_http_method_t	./src/flecs.h	/^} ecs_http_method_t;$/;"	t	typeref:enum:__anon7d4a417c0a03
ecs_http_reply_action_t	./src/flecs.h	/^typedef bool (*ecs_http_reply_action_t)($/;"	t	typeref:typename:bool (*)(const ecs_http_request_t * request,ecs_http_reply_t * reply,void * ctx)
ecs_http_reply_t	./src/flecs.h	/^} ecs_http_reply_t;$/;"	t	typeref:struct:__anon7d4a417c0c08
ecs_http_request_entry_t	./src/flecs.c	/^typedef struct ecs_http_request_entry_t {$/;"	s	file:
ecs_http_request_entry_t	./src/flecs.c	/^} ecs_http_request_entry_t;$/;"	t	typeref:struct:ecs_http_request_entry_t	file:
ecs_http_request_handled_error_count	./src/flecs.c	/^int64_t ecs_http_request_handled_error_count = 0;$/;"	v	typeref:typename:int64_t
ecs_http_request_handled_ok_count	./src/flecs.c	/^int64_t ecs_http_request_handled_ok_count = 0;$/;"	v	typeref:typename:int64_t
ecs_http_request_impl_t	./src/flecs.c	/^} ecs_http_request_impl_t;$/;"	t	typeref:struct:__anon7d4a41770908	file:
ecs_http_request_invalid_count	./src/flecs.c	/^int64_t ecs_http_request_invalid_count = 0;$/;"	v	typeref:typename:int64_t
ecs_http_request_key_t	./src/flecs.c	/^typedef struct ecs_http_request_key_t {$/;"	s	file:
ecs_http_request_key_t	./src/flecs.c	/^} ecs_http_request_key_t;$/;"	t	typeref:struct:ecs_http_request_key_t	file:
ecs_http_request_not_handled_count	./src/flecs.c	/^int64_t ecs_http_request_not_handled_count = 0;$/;"	v	typeref:typename:int64_t
ecs_http_request_preflight_count	./src/flecs.c	/^int64_t ecs_http_request_preflight_count = 0;$/;"	v	typeref:typename:int64_t
ecs_http_request_received_count	./src/flecs.c	/^int64_t ecs_http_request_received_count = 0;$/;"	v	typeref:typename:int64_t
ecs_http_request_t	./src/flecs.h	/^} ecs_http_request_t;$/;"	t	typeref:struct:__anon7d4a417c0b08
ecs_http_send_error_count	./src/flecs.c	/^int64_t ecs_http_send_error_count = 0;$/;"	v	typeref:typename:int64_t
ecs_http_send_ok_count	./src/flecs.c	/^int64_t ecs_http_send_ok_count = 0;$/;"	v	typeref:typename:int64_t
ecs_http_send_queue_t	./src/flecs.c	/^typedef struct ecs_http_send_queue_t {$/;"	s	file:
ecs_http_send_queue_t	./src/flecs.c	/^} ecs_http_send_queue_t;$/;"	t	typeref:struct:ecs_http_send_queue_t	file:
ecs_http_send_request_t	./src/flecs.c	/^typedef struct ecs_http_send_request_t {$/;"	s	file:
ecs_http_send_request_t	./src/flecs.c	/^} ecs_http_send_request_t;$/;"	t	typeref:struct:ecs_http_send_request_t	file:
ecs_http_server_ctx	./src/flecs.c	/^void* ecs_http_server_ctx($/;"	f	typeref:typename:void *
ecs_http_server_dequeue	./src/flecs.c	/^void ecs_http_server_dequeue($/;"	f	typeref:typename:void
ecs_http_server_desc_t	./src/flecs.h	/^} ecs_http_server_desc_t;$/;"	t	typeref:struct:__anon7d4a417c0d08
ecs_http_server_fini	./src/flecs.c	/^void ecs_http_server_fini($/;"	f	typeref:typename:void
ecs_http_server_http_request	./src/flecs.c	/^int ecs_http_server_http_request($/;"	f	typeref:typename:int
ecs_http_server_init	./src/flecs.c	/^ecs_http_server_t* ecs_http_server_init($/;"	f	typeref:typename:ecs_http_server_t *
ecs_http_server_request	./src/flecs.c	/^int ecs_http_server_request($/;"	f	typeref:typename:int
ecs_http_server_start	./src/flecs.c	/^int ecs_http_server_start($/;"	f	typeref:typename:int
ecs_http_server_stop	./src/flecs.c	/^void ecs_http_server_stop($/;"	f	typeref:typename:void
ecs_http_server_t	./src/flecs.c	/^struct ecs_http_server_t {$/;"	s	file:
ecs_http_server_t	./src/flecs.h	/^typedef struct ecs_http_server_t ecs_http_server_t;$/;"	t	typeref:struct:ecs_http_server_t
ecs_http_socket_t	./src/flecs.c	/^typedef SOCKET ecs_http_socket_t;$/;"	t	typeref:typename:SOCKET	file:
ecs_http_socket_t	./src/flecs.c	/^typedef int ecs_http_socket_t;$/;"	t	typeref:typename:int	file:
ecs_i16_t	./src/flecs.h	/^typedef int16_t ecs_i16_t;$/;"	t	typeref:typename:int16_t
ecs_i32_t	./src/flecs.h	/^typedef int32_t ecs_i32_t;$/;"	t	typeref:typename:int32_t
ecs_i64_t	./src/flecs.h	/^typedef int64_t ecs_i64_t;$/;"	t	typeref:typename:int64_t
ecs_i8_t	./src/flecs.h	/^typedef int8_t ecs_i8_t;$/;"	t	typeref:typename:int8_t
ecs_id	./src/flecs.h	/^#define ecs_id(/;"	d
ecs_id_flag_str	./src/flecs.c	/^const char* ecs_id_flag_str($/;"	f	typeref:typename:const char *
ecs_id_get_flags	./src/flecs.c	/^ecs_flags32_t ecs_id_get_flags($/;"	f	typeref:typename:ecs_flags32_t
ecs_id_in_use	./src/flecs.c	/^bool ecs_id_in_use($/;"	f	typeref:typename:bool
ecs_id_is_pair	./src/flecs.c	/^bool ecs_id_is_pair($/;"	f	typeref:typename:bool
ecs_id_is_tag	./src/flecs.c	/^bool ecs_id_is_tag($/;"	f	typeref:typename:bool
ecs_id_is_union	./src/flecs.c	/^bool ecs_id_is_union($/;"	f	typeref:typename:bool
ecs_id_is_valid	./src/flecs.c	/^bool ecs_id_is_valid($/;"	f	typeref:typename:bool
ecs_id_is_wildcard	./src/flecs.c	/^bool ecs_id_is_wildcard($/;"	f	typeref:typename:bool
ecs_id_match	./src/flecs.c	/^bool ecs_id_match($/;"	f	typeref:typename:bool
ecs_id_metric_ctx_t	./src/flecs.c	/^} ecs_id_metric_ctx_t;$/;"	t	typeref:struct:__anon7d4a41770d08	file:
ecs_id_record_elem_t	./src/flecs.c	/^typedef struct ecs_id_record_elem_t {$/;"	s	file:
ecs_id_record_elem_t	./src/flecs.c	/^} ecs_id_record_elem_t;$/;"	t	typeref:struct:ecs_id_record_elem_t	file:
ecs_id_record_t	./src/flecs.c	/^struct ecs_id_record_t {$/;"	s	file:
ecs_id_record_t	./src/flecs.h	/^typedef struct ecs_id_record_t ecs_id_record_t;$/;"	t	typeref:struct:ecs_id_record_t
ecs_id_str	./src/flecs.c	/^char* ecs_id_str($/;"	f	typeref:typename:char *
ecs_id_str_buf	./src/flecs.c	/^void ecs_id_str_buf($/;"	f	typeref:typename:void
ecs_id_t	./src/flecs.h	/^typedef uint64_t ecs_id_t;$/;"	t	typeref:typename:uint64_t
ecs_identifier_is_0	./src/flecs.c	/^bool ecs_identifier_is_0($/;"	f	typeref:typename:bool
ecs_import	./src/flecs.c	/^ecs_entity_t ecs_import($/;"	f	typeref:typename:ecs_entity_t
ecs_import_c	./src/flecs.c	/^ecs_entity_t ecs_import_c($/;"	f	typeref:typename:ecs_entity_t
ecs_import_from_library	./src/flecs.c	/^ecs_entity_t ecs_import_from_library($/;"	f	typeref:typename:ecs_entity_t
ecs_init	./src/flecs.c	/^ecs_world_t *ecs_init(void) {$/;"	f	typeref:typename:ecs_world_t *
ecs_init_w_args	./src/flecs.c	/^ecs_world_t* ecs_init_w_args($/;"	f	typeref:typename:ecs_world_t *
ecs_inout_kind_t	./src/flecs.h	/^typedef enum ecs_inout_kind_t {$/;"	g
ecs_inout_kind_t	./src/flecs.h	/^} ecs_inout_kind_t;$/;"	t	typeref:enum:ecs_inout_kind_t
ecs_interpolate_string	./src/flecs.c	/^char* ecs_interpolate_string($/;"	f	typeref:typename:char *
ecs_iptr_t	./src/flecs.h	/^typedef intptr_t ecs_iptr_t;$/;"	t	typeref:typename:intptr_t
ecs_is_alive	./src/flecs.c	/^bool ecs_is_alive($/;"	f	typeref:typename:bool
ecs_is_deferred	./src/flecs.c	/^bool ecs_is_deferred($/;"	f	typeref:typename:bool
ecs_is_enabled_component	./src/flecs.h	/^#define ecs_is_enabled_component(/;"	d
ecs_is_enabled_id	./src/flecs.c	/^bool ecs_is_enabled_id($/;"	f	typeref:typename:bool
ecs_is_enabled_pair	./src/flecs.h	/^#define ecs_is_enabled_pair(/;"	d
ecs_is_fini	./src/flecs.c	/^bool ecs_is_fini($/;"	f	typeref:typename:bool
ecs_is_valid	./src/flecs.c	/^bool ecs_is_valid($/;"	f	typeref:typename:bool
ecs_isa	./src/flecs.h	/^#define ecs_isa(/;"	d
ecs_iter_action_t	./src/flecs.h	/^typedef void (*ecs_iter_action_t)($/;"	t	typeref:typename:void (*)(ecs_iter_t * it)
ecs_iter_cache_t	./src/flecs.h	/^typedef struct ecs_iter_cache_t {$/;"	s
ecs_iter_cache_t	./src/flecs.h	/^} ecs_iter_cache_t;$/;"	t	typeref:struct:ecs_iter_cache_t
ecs_iter_count	./src/flecs.c	/^int32_t ecs_iter_count($/;"	f	typeref:typename:int32_t
ecs_iter_fini	./src/flecs.c	/^void ecs_iter_fini($/;"	f	typeref:typename:void
ecs_iter_fini_action_t	./src/flecs.h	/^typedef void (*ecs_iter_fini_action_t)($/;"	t	typeref:typename:void (*)(ecs_iter_t * it)
ecs_iter_first	./src/flecs.c	/^ecs_entity_t ecs_iter_first($/;"	f	typeref:typename:ecs_entity_t
ecs_iter_get_var	./src/flecs.c	/^ecs_entity_t ecs_iter_get_var($/;"	f	typeref:typename:ecs_entity_t
ecs_iter_get_var_as_range	./src/flecs.c	/^ecs_table_range_t ecs_iter_get_var_as_range($/;"	f	typeref:typename:ecs_table_range_t
ecs_iter_get_var_as_table	./src/flecs.c	/^ecs_table_t* ecs_iter_get_var_as_table($/;"	f	typeref:typename:ecs_table_t *
ecs_iter_init_action_t	./src/flecs.h	/^typedef void (*ecs_iter_init_action_t)($/;"	t	typeref:typename:void (*)(const ecs_world_t * world,const ecs_poly_t * iterable,ecs_iter_t * it,ecs_term_t * filter)
ecs_iter_is_true	./src/flecs.c	/^bool ecs_iter_is_true($/;"	f	typeref:typename:bool
ecs_iter_kind_t	./src/flecs.h	/^typedef enum ecs_iter_kind_t {$/;"	g
ecs_iter_kind_t	./src/flecs.h	/^} ecs_iter_kind_t;$/;"	t	typeref:enum:ecs_iter_kind_t
ecs_iter_next	./src/flecs.c	/^bool ecs_iter_next($/;"	f	typeref:typename:bool
ecs_iter_next_action_t	./src/flecs.h	/^typedef bool (*ecs_iter_next_action_t)($/;"	t	typeref:typename:bool (*)(ecs_iter_t * it)
ecs_iter_poly	./src/flecs.c	/^void ecs_iter_poly($/;"	f	typeref:typename:void
ecs_iter_private_t	./src/flecs.h	/^typedef struct ecs_iter_private_t {$/;"	s
ecs_iter_private_t	./src/flecs.h	/^} ecs_iter_private_t;$/;"	t	typeref:struct:ecs_iter_private_t
ecs_iter_set_var	./src/flecs.c	/^void ecs_iter_set_var($/;"	f	typeref:typename:void
ecs_iter_set_var_as_range	./src/flecs.c	/^void ecs_iter_set_var_as_range($/;"	f	typeref:typename:void
ecs_iter_set_var_as_table	./src/flecs.c	/^void ecs_iter_set_var_as_table($/;"	f	typeref:typename:void
ecs_iter_str	./src/flecs.c	/^char* ecs_iter_str($/;"	f	typeref:typename:char *
ecs_iter_t	./src/flecs.h	/^struct ecs_iter_t {$/;"	s
ecs_iter_t	./src/flecs.h	/^typedef struct ecs_iter_t ecs_iter_t;$/;"	t	typeref:struct:ecs_iter_t
ecs_iter_to_json	./src/flecs.c	/^char* ecs_iter_to_json($/;"	f	typeref:typename:char *
ecs_iter_to_json_buf	./src/flecs.c	/^int ecs_iter_to_json_buf($/;"	f	typeref:typename:int
ecs_iter_to_json_desc_t	./src/flecs.h	/^typedef struct ecs_iter_to_json_desc_t {$/;"	s
ecs_iter_to_json_desc_t	./src/flecs.h	/^} ecs_iter_to_json_desc_t;$/;"	t	typeref:struct:ecs_iter_to_json_desc_t
ecs_iter_to_vars	./src/flecs.c	/^void ecs_iter_to_vars($/;"	f	typeref:typename:void
ecs_iter_var_is_constrained	./src/flecs.c	/^bool ecs_iter_var_is_constrained($/;"	f	typeref:typename:bool
ecs_iterable_t	./src/flecs.h	/^typedef struct ecs_iterable_t {$/;"	s
ecs_iterable_t	./src/flecs.h	/^} ecs_iterable_t;$/;"	t	typeref:struct:ecs_iterable_t
ecs_journal_kind_t	./src/flecs.h	/^typedef enum ecs_journal_kind_t {$/;"	g
ecs_journal_kind_t	./src/flecs.h	/^} ecs_journal_kind_t;$/;"	t	typeref:enum:ecs_journal_kind_t
ecs_json_ser_ctx_t	./src/flecs.c	/^typedef struct ecs_json_ser_ctx_t {$/;"	s	file:
ecs_json_ser_ctx_t	./src/flecs.c	/^} ecs_json_ser_ctx_t;$/;"	t	typeref:struct:ecs_json_ser_ctx_t	file:
ecs_json_token_t	./src/flecs.c	/^typedef enum ecs_json_token_t {$/;"	g	file:
ecs_json_token_t	./src/flecs.c	/^} ecs_json_token_t;$/;"	t	typeref:enum:ecs_json_token_t	file:
ecs_json_value_ser_ctx_t	./src/flecs.c	/^typedef struct ecs_json_value_ser_ctx_t {$/;"	s	file:
ecs_json_value_ser_ctx_t	./src/flecs.c	/^} ecs_json_value_ser_ctx_t;$/;"	t	typeref:struct:ecs_json_value_ser_ctx_t	file:
ecs_log	./src/flecs.h	/^#define ecs_log(/;"	d
ecs_log_	./src/flecs.c	/^void ecs_log_($/;"	f	typeref:typename:void
ecs_log_enable_colors	./src/flecs.c	/^bool ecs_log_enable_colors($/;"	f	typeref:typename:bool
ecs_log_enable_timedelta	./src/flecs.c	/^bool ecs_log_enable_timedelta($/;"	f	typeref:typename:bool
ecs_log_enable_timestamp	./src/flecs.c	/^bool ecs_log_enable_timestamp($/;"	f	typeref:typename:bool
ecs_log_get_level	./src/flecs.c	/^int ecs_log_get_level(void) {$/;"	f	typeref:typename:int
ecs_log_last_error	./src/flecs.c	/^int ecs_log_last_error(void)$/;"	f	typeref:typename:int
ecs_log_pop	./src/flecs.h	/^#define ecs_log_pop() ecs_log_pop_/;"	d
ecs_log_pop_	./src/flecs.c	/^void ecs_log_pop_($/;"	f	typeref:typename:void
ecs_log_pop_1	./src/flecs.h	/^#define ecs_log_pop_1(/;"	d
ecs_log_pop_2	./src/flecs.h	/^#define ecs_log_pop_2(/;"	d
ecs_log_pop_3	./src/flecs.h	/^#define ecs_log_pop_3(/;"	d
ecs_log_push	./src/flecs.h	/^#define ecs_log_push() ecs_log_push_/;"	d
ecs_log_push_	./src/flecs.c	/^void ecs_log_push_($/;"	f	typeref:typename:void
ecs_log_push_1	./src/flecs.h	/^#define ecs_log_push_1(/;"	d
ecs_log_push_2	./src/flecs.h	/^#define ecs_log_push_2(/;"	d
ecs_log_push_3	./src/flecs.h	/^#define ecs_log_push_3(/;"	d
ecs_log_set_level	./src/flecs.c	/^int ecs_log_set_level($/;"	f	typeref:typename:int
ecs_logv	./src/flecs.h	/^#define ecs_logv(/;"	d
ecs_logv_	./src/flecs.c	/^void ecs_logv_($/;"	f	typeref:typename:void
ecs_lookup	./src/flecs.c	/^ecs_entity_t ecs_lookup($/;"	f	typeref:typename:ecs_entity_t
ecs_lookup_child	./src/flecs.c	/^ecs_entity_t ecs_lookup_child($/;"	f	typeref:typename:ecs_entity_t
ecs_lookup_fullpath	./src/flecs.h	/^#define ecs_lookup_fullpath(/;"	d
ecs_lookup_path	./src/flecs.h	/^#define ecs_lookup_path(/;"	d
ecs_lookup_path_w_sep	./src/flecs.c	/^ecs_entity_t ecs_lookup_path_w_sep($/;"	f	typeref:typename:ecs_entity_t
ecs_lookup_symbol	./src/flecs.c	/^ecs_entity_t ecs_lookup_symbol($/;"	f	typeref:typename:ecs_entity_t
ecs_make_alive	./src/flecs.c	/^void ecs_make_alive($/;"	f	typeref:typename:void
ecs_make_alive_id	./src/flecs.c	/^void ecs_make_alive_id($/;"	f	typeref:typename:void
ecs_make_pair	./src/flecs.c	/^ecs_id_t ecs_make_pair($/;"	f	typeref:typename:ecs_id_t
ecs_map_clear	./src/flecs.c	/^void ecs_map_clear($/;"	f	typeref:typename:void
ecs_map_copy	./src/flecs.c	/^void ecs_map_copy($/;"	f	typeref:typename:void
ecs_map_count	./src/flecs.h	/^#define ecs_map_count(/;"	d
ecs_map_data_t	./src/flecs.h	/^typedef uint64_t ecs_map_data_t;$/;"	t	typeref:typename:uint64_t
ecs_map_ensure	./src/flecs.c	/^ecs_map_val_t* ecs_map_ensure($/;"	f	typeref:typename:ecs_map_val_t *
ecs_map_ensure_alloc	./src/flecs.c	/^void* ecs_map_ensure_alloc($/;"	f	typeref:typename:void *
ecs_map_ensure_alloc_t	./src/flecs.h	/^#define ecs_map_ensure_alloc_t(/;"	d
ecs_map_ensure_ref	./src/flecs.h	/^#define ecs_map_ensure_ref(/;"	d
ecs_map_fini	./src/flecs.c	/^void ecs_map_fini($/;"	f	typeref:typename:void
ecs_map_get	./src/flecs.c	/^ecs_map_val_t* ecs_map_get($/;"	f	typeref:typename:ecs_map_val_t *
ecs_map_get_deref	./src/flecs.h	/^#define ecs_map_get_deref(m, T, k) ECS_CAST(T*, ecs_map_get_deref_/;"	d
ecs_map_get_deref_	./src/flecs.c	/^void* ecs_map_get_deref_($/;"	f	typeref:typename:void *
ecs_map_get_ref	./src/flecs.h	/^#define ecs_map_get_ref(/;"	d
ecs_map_init	./src/flecs.c	/^void ecs_map_init($/;"	f	typeref:typename:void
ecs_map_init_if	./src/flecs.c	/^void ecs_map_init_if($/;"	f	typeref:typename:void
ecs_map_init_w_params	./src/flecs.c	/^void ecs_map_init_w_params($/;"	f	typeref:typename:void
ecs_map_init_w_params_if	./src/flecs.c	/^void ecs_map_init_w_params_if($/;"	f	typeref:typename:void
ecs_map_insert	./src/flecs.c	/^void ecs_map_insert($/;"	f	typeref:typename:void
ecs_map_insert_alloc	./src/flecs.c	/^void* ecs_map_insert_alloc($/;"	f	typeref:typename:void *
ecs_map_insert_alloc_t	./src/flecs.h	/^#define ecs_map_insert_alloc_t(/;"	d
ecs_map_insert_ptr	./src/flecs.h	/^#define ecs_map_insert_ptr(/;"	d
ecs_map_is_init	./src/flecs.h	/^#define ecs_map_is_init(/;"	d
ecs_map_iter	./src/flecs.c	/^ecs_map_iter_t ecs_map_iter($/;"	f	typeref:typename:ecs_map_iter_t
ecs_map_iter_t	./src/flecs.h	/^typedef struct ecs_map_iter_t {$/;"	s
ecs_map_iter_t	./src/flecs.h	/^} ecs_map_iter_t;$/;"	t	typeref:struct:ecs_map_iter_t
ecs_map_key	./src/flecs.h	/^#define ecs_map_key(/;"	d
ecs_map_key_t	./src/flecs.h	/^typedef ecs_map_data_t ecs_map_key_t;$/;"	t	typeref:typename:ecs_map_data_t
ecs_map_next	./src/flecs.c	/^bool ecs_map_next($/;"	f	typeref:typename:bool
ecs_map_params_fini	./src/flecs.c	/^void ecs_map_params_fini($/;"	f	typeref:typename:void
ecs_map_params_init	./src/flecs.c	/^void ecs_map_params_init($/;"	f	typeref:typename:void
ecs_map_params_t	./src/flecs.h	/^typedef struct ecs_map_params_t {$/;"	s
ecs_map_params_t	./src/flecs.h	/^} ecs_map_params_t;$/;"	t	typeref:struct:ecs_map_params_t
ecs_map_ptr	./src/flecs.h	/^#define ecs_map_ptr(/;"	d
ecs_map_ref	./src/flecs.h	/^#define ecs_map_ref(/;"	d
ecs_map_remove	./src/flecs.c	/^ecs_map_val_t ecs_map_remove($/;"	f	typeref:typename:ecs_map_val_t
ecs_map_remove_free	./src/flecs.c	/^void ecs_map_remove_free($/;"	f	typeref:typename:void
ecs_map_remove_ptr	./src/flecs.h	/^#define ecs_map_remove_ptr(/;"	d
ecs_map_t	./src/flecs.h	/^typedef struct ecs_map_t {$/;"	s
ecs_map_t	./src/flecs.h	/^} ecs_map_t;$/;"	t	typeref:struct:ecs_map_t
ecs_map_val_t	./src/flecs.h	/^typedef ecs_map_data_t ecs_map_val_t;$/;"	t	typeref:typename:ecs_map_data_t
ecs_map_value	./src/flecs.h	/^#define ecs_map_value(/;"	d
ecs_marked_id_t	./src/flecs.c	/^typedef struct ecs_marked_id_t {$/;"	s	file:
ecs_marked_id_t	./src/flecs.c	/^} ecs_marked_id_t;$/;"	t	typeref:struct:ecs_marked_id_t	file:
ecs_measure_frame_time	./src/flecs.c	/^void ecs_measure_frame_time($/;"	f	typeref:typename:void
ecs_measure_system_time	./src/flecs.c	/^void ecs_measure_system_time($/;"	f	typeref:typename:void
ecs_member_metric_ctx_t	./src/flecs.c	/^} ecs_member_metric_ctx_t;$/;"	t	typeref:struct:__anon7d4a41770c08	file:
ecs_member_t	./src/flecs.h	/^typedef struct ecs_member_t {$/;"	s
ecs_member_t	./src/flecs.h	/^} ecs_member_t;$/;"	t	typeref:struct:ecs_member_t
ecs_member_value_range_t	./src/flecs.h	/^typedef struct ecs_member_value_range_t {$/;"	s
ecs_member_value_range_t	./src/flecs.h	/^} ecs_member_value_range_t;$/;"	t	typeref:struct:ecs_member_value_range_t
ecs_merge	./src/flecs.c	/^void ecs_merge($/;"	f	typeref:typename:void
ecs_meta_bounds_float	./src/flecs.c	/^} ecs_meta_bounds_float[EcsMetaTypeOpKindLast + 1] = {$/;"	v	typeref:struct:__anon7d4a41772008[]	file:
ecs_meta_bounds_signed	./src/flecs.c	/^} ecs_meta_bounds_signed[EcsMetaTypeOpKindLast + 1] = {$/;"	v	typeref:struct:__anon7d4a41771e08[]	file:
ecs_meta_bounds_unsigned	./src/flecs.c	/^} ecs_meta_bounds_unsigned[EcsMetaTypeOpKindLast + 1] = {$/;"	v	typeref:struct:__anon7d4a41771f08[]	file:
ecs_meta_cursor	./src/flecs.c	/^ecs_meta_cursor_t ecs_meta_cursor($/;"	f	typeref:typename:ecs_meta_cursor_t
ecs_meta_cursor_t	./src/flecs.h	/^typedef struct ecs_meta_cursor_t {$/;"	s
ecs_meta_cursor_t	./src/flecs.h	/^} ecs_meta_cursor_t;$/;"	t	typeref:struct:ecs_meta_cursor_t
ecs_meta_dotmember	./src/flecs.c	/^int ecs_meta_dotmember($/;"	f	typeref:typename:int
ecs_meta_dtor_serialized	./src/flecs.c	/^void ecs_meta_dtor_serialized($/;"	f	file:
ecs_meta_elem	./src/flecs.c	/^int ecs_meta_elem($/;"	f	typeref:typename:int
ecs_meta_error	./src/flecs.c	/^#define ecs_meta_error(/;"	d	file:
ecs_meta_from_desc	./src/flecs.c	/^int ecs_meta_from_desc($/;"	f	typeref:typename:int
ecs_meta_get_bool	./src/flecs.c	/^bool ecs_meta_get_bool($/;"	f	typeref:typename:bool
ecs_meta_get_char	./src/flecs.c	/^char ecs_meta_get_char($/;"	f	typeref:typename:char
ecs_meta_get_entity	./src/flecs.c	/^ecs_entity_t ecs_meta_get_entity($/;"	f	typeref:typename:ecs_entity_t
ecs_meta_get_float	./src/flecs.c	/^double ecs_meta_get_float($/;"	f	typeref:typename:double
ecs_meta_get_id	./src/flecs.c	/^ecs_entity_t ecs_meta_get_id($/;"	f	typeref:typename:ecs_entity_t
ecs_meta_get_int	./src/flecs.c	/^int64_t ecs_meta_get_int($/;"	f	typeref:typename:int64_t
ecs_meta_get_member	./src/flecs.c	/^const char* ecs_meta_get_member($/;"	f	typeref:typename:const char *
ecs_meta_get_member_id	./src/flecs.c	/^ecs_entity_t ecs_meta_get_member_id($/;"	f	typeref:typename:ecs_entity_t
ecs_meta_get_ptr	./src/flecs.c	/^void* ecs_meta_get_ptr($/;"	f	typeref:typename:void *
ecs_meta_get_string	./src/flecs.c	/^const char* ecs_meta_get_string($/;"	f	typeref:typename:const char *
ecs_meta_get_type	./src/flecs.c	/^ecs_entity_t ecs_meta_get_type($/;"	f	typeref:typename:ecs_entity_t
ecs_meta_get_uint	./src/flecs.c	/^uint64_t ecs_meta_get_uint($/;"	f	typeref:typename:uint64_t
ecs_meta_get_unit	./src/flecs.c	/^ecs_entity_t ecs_meta_get_unit($/;"	f	typeref:typename:ecs_entity_t
ecs_meta_is_collection	./src/flecs.c	/^bool ecs_meta_is_collection($/;"	f	typeref:typename:bool
ecs_meta_member	./src/flecs.c	/^int ecs_meta_member($/;"	f	typeref:typename:int
ecs_meta_next	./src/flecs.c	/^int ecs_meta_next($/;"	f	typeref:typename:int
ecs_meta_pop	./src/flecs.c	/^int ecs_meta_pop($/;"	f	typeref:typename:int
ecs_meta_ptr_to_float	./src/flecs.c	/^double ecs_meta_ptr_to_float($/;"	f	typeref:typename:double
ecs_meta_push	./src/flecs.c	/^int ecs_meta_push($/;"	f	typeref:typename:int
ecs_meta_scope_t	./src/flecs.h	/^typedef struct ecs_meta_scope_t {$/;"	s
ecs_meta_scope_t	./src/flecs.h	/^} ecs_meta_scope_t;$/;"	t	typeref:struct:ecs_meta_scope_t
ecs_meta_serialize_t	./src/flecs.h	/^typedef int (*ecs_meta_serialize_t)($/;"	t	typeref:typename:int (*)(const ecs_serializer_t * ser,const void * src)
ecs_meta_set_bool	./src/flecs.c	/^int ecs_meta_set_bool($/;"	f	typeref:typename:int
ecs_meta_set_char	./src/flecs.c	/^int ecs_meta_set_char($/;"	f	typeref:typename:int
ecs_meta_set_entity	./src/flecs.c	/^int ecs_meta_set_entity($/;"	f	typeref:typename:int
ecs_meta_set_float	./src/flecs.c	/^int ecs_meta_set_float($/;"	f	typeref:typename:int
ecs_meta_set_id	./src/flecs.c	/^int ecs_meta_set_id($/;"	f	typeref:typename:int
ecs_meta_set_int	./src/flecs.c	/^int ecs_meta_set_int($/;"	f	typeref:typename:int
ecs_meta_set_null	./src/flecs.c	/^int ecs_meta_set_null($/;"	f	typeref:typename:int
ecs_meta_set_string	./src/flecs.c	/^int ecs_meta_set_string($/;"	f	typeref:typename:int
ecs_meta_set_string_literal	./src/flecs.c	/^int ecs_meta_set_string_literal($/;"	f	typeref:typename:int
ecs_meta_set_uint	./src/flecs.c	/^int ecs_meta_set_uint($/;"	f	typeref:typename:int
ecs_meta_set_value	./src/flecs.c	/^int ecs_meta_set_value($/;"	f	typeref:typename:int
ecs_meta_token_t	./src/flecs.c	/^typedef char ecs_meta_token_t[ECS_META_IDENTIFIER_LENGTH];$/;"	t	typeref:typename:char[ECS_META_IDENTIFIER_LENGTH]	file:
ecs_meta_type_init_default_ctor	./src/flecs.c	/^void ecs_meta_type_init_default_ctor(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
ecs_meta_type_op_kind_t	./src/flecs.h	/^typedef enum ecs_meta_type_op_kind_t {$/;"	g
ecs_meta_type_op_kind_t	./src/flecs.h	/^} ecs_meta_type_op_kind_t;$/;"	t	typeref:enum:ecs_meta_type_op_kind_t
ecs_meta_type_op_t	./src/flecs.h	/^typedef struct ecs_meta_type_op_t {$/;"	s
ecs_meta_type_op_t	./src/flecs.h	/^} ecs_meta_type_op_t;$/;"	t	typeref:struct:ecs_meta_type_op_t
ecs_meta_type_serialized_init	./src/flecs.c	/^void ecs_meta_type_serialized_init($/;"	f	typeref:typename:void
ecs_metric	./src/flecs.h	/^#define ecs_metric(/;"	d
ecs_metric_copy	./src/flecs.c	/^void ecs_metric_copy($/;"	f	typeref:typename:void
ecs_metric_ctx_t	./src/flecs.c	/^} ecs_metric_ctx_t;$/;"	t	typeref:struct:__anon7d4a41770b08	file:
ecs_metric_desc_t	./src/flecs.h	/^typedef struct ecs_metric_desc_t {$/;"	s
ecs_metric_desc_t	./src/flecs.h	/^} ecs_metric_desc_t;$/;"	t	typeref:struct:ecs_metric_desc_t
ecs_metric_init	./src/flecs.c	/^ecs_entity_t ecs_metric_init($/;"	f	typeref:typename:ecs_entity_t
ecs_metric_reduce	./src/flecs.c	/^void ecs_metric_reduce($/;"	f	typeref:typename:void
ecs_metric_reduce_last	./src/flecs.c	/^void ecs_metric_reduce_last($/;"	f	typeref:typename:void
ecs_metric_t	./src/flecs.h	/^typedef union ecs_metric_t {$/;"	u
ecs_metric_t	./src/flecs.h	/^} ecs_metric_t;$/;"	t	typeref:union:ecs_metric_t
ecs_mini	./src/flecs.c	/^ecs_world_t *ecs_mini(void) {$/;"	f	typeref:typename:ecs_world_t *
ecs_mixin_kind_t	./src/flecs.c	/^typedef enum ecs_mixin_kind_t {$/;"	g	file:
ecs_mixin_kind_t	./src/flecs.c	/^} ecs_mixin_kind_t;$/;"	t	typeref:enum:ecs_mixin_kind_t	file:
ecs_mixins_t	./src/flecs.c	/^struct ecs_mixins_t {$/;"	s	file:
ecs_mixins_t	./src/flecs.h	/^typedef struct ecs_mixins_t ecs_mixins_t;$/;"	t	typeref:struct:ecs_mixins_t
ecs_modified	./src/flecs.h	/^#define ecs_modified(/;"	d
ecs_modified_id	./src/flecs.c	/^void ecs_modified_id($/;"	f	typeref:typename:void
ecs_modified_pair	./src/flecs.h	/^#define ecs_modified_pair(/;"	d
ecs_module_action_t	./src/flecs.h	/^typedef void (*ecs_module_action_t)($/;"	t	typeref:typename:void (*)(ecs_world_t * world)
ecs_module_init	./src/flecs.c	/^ecs_entity_t ecs_module_init($/;"	f	typeref:typename:ecs_entity_t
ecs_module_path_from_c	./src/flecs.c	/^char* ecs_module_path_from_c($/;"	f	typeref:typename:char *
ecs_monitor_set_t	./src/flecs.c	/^typedef struct ecs_monitor_set_t {$/;"	s	file:
ecs_monitor_set_t	./src/flecs.c	/^} ecs_monitor_set_t;$/;"	t	typeref:struct:ecs_monitor_set_t	file:
ecs_monitor_t	./src/flecs.c	/^typedef struct ecs_monitor_t {$/;"	s	file:
ecs_monitor_t	./src/flecs.c	/^} ecs_monitor_t;$/;"	t	typeref:struct:ecs_monitor_t	file:
ecs_move	./src/flecs.h	/^#define ecs_move(/;"	d
ecs_move_ctor_illegal	./src/flecs.h	/^inline void ecs_move_ctor_illegal($/;"	f	namespace:flecs::_	typeref:typename:void
ecs_move_illegal	./src/flecs.h	/^inline void ecs_move_illegal(void *, void *, int32_t, const ecs_type_info_t *ti) {$/;"	f	namespace:flecs::_	typeref:typename:void
ecs_move_t	./src/flecs.h	/^typedef void (*ecs_move_t)($/;"	t	typeref:typename:void (*)(void * dst_ptr,void * src_ptr,int32_t count,const ecs_type_info_t * type_info)
ecs_new	./src/flecs.h	/^#define ecs_new(world, T) ecs_new_/;"	d
ecs_new_entity	./src/flecs.h	/^#define ecs_new_entity(/;"	d
ecs_new_from_fullpath	./src/flecs.h	/^#define ecs_new_from_fullpath(/;"	d
ecs_new_from_path	./src/flecs.h	/^#define ecs_new_from_path(/;"	d
ecs_new_from_path_w_sep	./src/flecs.c	/^ecs_entity_t ecs_new_from_path_w_sep($/;"	f	typeref:typename:ecs_entity_t
ecs_new_id	./src/flecs.c	/^ecs_entity_t ecs_new_id($/;"	f	typeref:typename:ecs_entity_t
ecs_new_low_id	./src/flecs.c	/^ecs_entity_t ecs_new_low_id($/;"	f	typeref:typename:ecs_entity_t
ecs_new_prefab	./src/flecs.h	/^#define ecs_new_prefab(/;"	d
ecs_new_w_id	./src/flecs.c	/^ecs_entity_t ecs_new_w_id($/;"	f	typeref:typename:ecs_entity_t
ecs_new_w_pair	./src/flecs.h	/^#define ecs_new_w_pair(/;"	d
ecs_new_w_table	./src/flecs.c	/^ecs_entity_t ecs_new_w_table($/;"	f	typeref:typename:ecs_entity_t
ecs_observable_t	./src/flecs.h	/^struct ecs_observable_t {$/;"	s
ecs_observable_t	./src/flecs.h	/^typedef struct ecs_observable_t ecs_observable_t;$/;"	t	typeref:struct:ecs_observable_t
ecs_observer	./src/flecs.h	/^#define ecs_observer(/;"	d
ecs_observer_default_run_action	./src/flecs.c	/^bool ecs_observer_default_run_action(ecs_iter_t *it) {$/;"	f	typeref:typename:bool
ecs_observer_desc_t	./src/flecs.h	/^typedef struct ecs_observer_desc_t {$/;"	s
ecs_observer_desc_t	./src/flecs.h	/^} ecs_observer_desc_t;$/;"	t	typeref:struct:ecs_observer_desc_t
ecs_observer_get_binding_ctx	./src/flecs.c	/^void* ecs_observer_get_binding_ctx($/;"	f	typeref:typename:void *
ecs_observer_get_ctx	./src/flecs.c	/^void* ecs_observer_get_ctx($/;"	f	typeref:typename:void *
ecs_observer_get_filter	./src/flecs.c	/^const ecs_filter_t* ecs_observer_get_filter($/;"	f	typeref:typename:const ecs_filter_t *
ecs_observer_init	./src/flecs.c	/^ecs_entity_t ecs_observer_init($/;"	f	typeref:typename:ecs_entity_t
ecs_observer_t	./src/flecs.h	/^struct ecs_observer_t {$/;"	s
ecs_observer_t	./src/flecs.h	/^typedef struct ecs_observer_t ecs_observer_t;$/;"	t	typeref:struct:ecs_observer_t
ecs_observer_t_magic	./src/flecs.h	/^#define ecs_observer_t_magic /;"	d
ecs_observer_t_mixins	./src/flecs.c	/^ecs_mixins_t ecs_observer_t_mixins = {$/;"	v	typeref:typename:ecs_mixins_t
ecs_observer_t_tag	./src/flecs.c	/^#define ecs_observer_t_tag /;"	d	file:
ecs_offset	./src/flecs.h	/^#define ecs_offset(/;"	d
ecs_on_add	./src/flecs.h	/^#define ecs_on_add(/;"	d
ecs_on_commands_action_t	./src/flecs.c	/^typedef void (*ecs_on_commands_action_t)($/;"	t	typeref:typename:void (*)(const ecs_stage_t * stage,const ecs_vec_t * commands,void * ctx)	file:
ecs_on_remove	./src/flecs.h	/^#define ecs_on_remove(/;"	d
ecs_on_set	./src/flecs.c	/^void ecs_on_set(EcsIdentifier)(ecs_iter_t *it) {$/;"	f	file:
ecs_on_set	./src/flecs.h	/^#define ecs_on_set(/;"	d
ecs_oneof_metric_ctx_t	./src/flecs.c	/^} ecs_oneof_metric_ctx_t;$/;"	t	typeref:struct:__anon7d4a41770e08	file:
ecs_opaque	./src/flecs.h	/^#define ecs_opaque(/;"	d
ecs_opaque_desc_t	./src/flecs.h	/^typedef struct ecs_opaque_desc_t {$/;"	s
ecs_opaque_desc_t	./src/flecs.h	/^} ecs_opaque_desc_t;$/;"	t	typeref:struct:ecs_opaque_desc_t
ecs_opaque_init	./src/flecs.c	/^ecs_entity_t ecs_opaque_init($/;"	f	typeref:typename:ecs_entity_t
ecs_oper_kind_t	./src/flecs.h	/^typedef enum ecs_oper_kind_t {$/;"	g
ecs_oper_kind_t	./src/flecs.h	/^} ecs_oper_kind_t;$/;"	t	typeref:enum:ecs_oper_kind_t
ecs_order_by_action_t	./src/flecs.h	/^typedef int (*ecs_order_by_action_t)($/;"	t	typeref:typename:int (*)(ecs_entity_t e1,const void * ptr1,ecs_entity_t e2,const void * ptr2)
ecs_os_abort	./src/flecs.h	/^#define ecs_os_abort(/;"	d
ecs_os_adec	./src/flecs.h	/^#define ecs_os_adec(/;"	d
ecs_os_ainc	./src/flecs.h	/^#define ecs_os_ainc(/;"	d
ecs_os_alloca	./src/flecs.h	/^#define ecs_os_alloca(/;"	d
ecs_os_alloca_n	./src/flecs.h	/^#define ecs_os_alloca_n(/;"	d
ecs_os_alloca_t	./src/flecs.h	/^#define ecs_os_alloca_t(/;"	d
ecs_os_api	./src/flecs.c	/^ecs_os_api_t ecs_os_api = {$/;"	v	typeref:typename:ecs_os_api_t
ecs_os_api_abort_t	./src/flecs.h	/^void (*ecs_os_api_abort_t)($/;"	t	typeref:typename:void (*)(void)
ecs_os_api_ainc_t	./src/flecs.h	/^int32_t (*ecs_os_api_ainc_t)($/;"	t	typeref:typename:int32_t (*)(int32_t * value)
ecs_os_api_calloc	./src/flecs.c	/^void* ecs_os_api_calloc(ecs_size_t size) {$/;"	f	typeref:typename:void *	file:
ecs_os_api_calloc_count	./src/flecs.c	/^int64_t ecs_os_api_calloc_count = 0;$/;"	v	typeref:typename:int64_t
ecs_os_api_calloc_t	./src/flecs.h	/^void* (*ecs_os_api_calloc_t)($/;"	t	typeref:typename:void * (*)(ecs_size_t size)
ecs_os_api_cond_broadcast_t	./src/flecs.h	/^void (*ecs_os_api_cond_broadcast_t)($/;"	t	typeref:typename:void (*)(ecs_os_cond_t cond)
ecs_os_api_cond_free_t	./src/flecs.h	/^void (*ecs_os_api_cond_free_t)($/;"	t	typeref:typename:void (*)(ecs_os_cond_t cond)
ecs_os_api_cond_new_t	./src/flecs.h	/^ecs_os_cond_t (*ecs_os_api_cond_new_t)($/;"	t	typeref:typename:ecs_os_cond_t (*)(void)
ecs_os_api_cond_signal_t	./src/flecs.h	/^void (*ecs_os_api_cond_signal_t)($/;"	t	typeref:typename:void (*)(ecs_os_cond_t cond)
ecs_os_api_cond_wait_t	./src/flecs.h	/^void (*ecs_os_api_cond_wait_t)($/;"	t	typeref:typename:void (*)(ecs_os_cond_t cond,ecs_os_mutex_t mutex)
ecs_os_api_dlclose_t	./src/flecs.h	/^void (*ecs_os_api_dlclose_t)($/;"	t	typeref:typename:void (*)(ecs_os_dl_t lib)
ecs_os_api_dlopen_t	./src/flecs.h	/^ecs_os_dl_t (*ecs_os_api_dlopen_t)($/;"	t	typeref:typename:ecs_os_dl_t (*)(const char * libname)
ecs_os_api_dlproc_t	./src/flecs.h	/^ecs_os_proc_t (*ecs_os_api_dlproc_t)($/;"	t	typeref:typename:ecs_os_proc_t (*)(ecs_os_dl_t lib,const char * procname)
ecs_os_api_enable_high_timer_resolution_t	./src/flecs.h	/^void (*ecs_os_api_enable_high_timer_resolution_t)($/;"	t	typeref:typename:void (*)(bool enable)
ecs_os_api_fini_t	./src/flecs.h	/^void (*ecs_os_api_fini_t)(void);$/;"	t	typeref:typename:void (*)(void)
ecs_os_api_free	./src/flecs.c	/^void ecs_os_api_free(void *ptr) {$/;"	f	typeref:typename:void	file:
ecs_os_api_free_count	./src/flecs.c	/^int64_t ecs_os_api_free_count = 0;$/;"	v	typeref:typename:int64_t
ecs_os_api_free_t	./src/flecs.h	/^void (*ecs_os_api_free_t)($/;"	t	typeref:typename:void (*)(void * ptr)
ecs_os_api_get_time_t	./src/flecs.h	/^void (*ecs_os_api_get_time_t)($/;"	t	typeref:typename:void (*)(ecs_time_t * time_out)
ecs_os_api_init_count	./src/flecs.c	/^static int ecs_os_api_init_count = 0;$/;"	v	typeref:typename:int	file:
ecs_os_api_init_t	./src/flecs.h	/^void (*ecs_os_api_init_t)(void);$/;"	t	typeref:typename:void (*)(void)
ecs_os_api_initialized	./src/flecs.c	/^static bool ecs_os_api_initialized = false;$/;"	v	typeref:typename:bool	file:
ecs_os_api_initializing	./src/flecs.c	/^static bool ecs_os_api_initializing = false;$/;"	v	typeref:typename:bool	file:
ecs_os_api_lainc_t	./src/flecs.h	/^int64_t (*ecs_os_api_lainc_t)($/;"	t	typeref:typename:int64_t (*)(int64_t * value)
ecs_os_api_log_t	./src/flecs.h	/^void (*ecs_os_api_log_t)($/;"	t	typeref:typename:void (*)(int32_t level,const char * file,int32_t line,const char * msg)
ecs_os_api_malloc	./src/flecs.c	/^void* ecs_os_api_malloc(ecs_size_t size) {$/;"	f	typeref:typename:void *	file:
ecs_os_api_malloc_count	./src/flecs.c	/^int64_t ecs_os_api_malloc_count = 0;$/;"	v	typeref:typename:int64_t
ecs_os_api_malloc_t	./src/flecs.h	/^void* (*ecs_os_api_malloc_t)($/;"	t	typeref:typename:void * (*)(ecs_size_t size)
ecs_os_api_module_to_dl	./src/flecs.c	/^char* ecs_os_api_module_to_dl(const char *module) {$/;"	f	typeref:typename:char *	file:
ecs_os_api_module_to_etc	./src/flecs.c	/^char* ecs_os_api_module_to_etc(const char *module) {$/;"	f	typeref:typename:char *	file:
ecs_os_api_module_to_path_t	./src/flecs.h	/^char* (*ecs_os_api_module_to_path_t)($/;"	t	typeref:typename:char * (*)(const char * module_id)
ecs_os_api_mutex_free_t	./src/flecs.h	/^void (*ecs_os_api_mutex_free_t)($/;"	t	typeref:typename:void (*)(ecs_os_mutex_t mutex)
ecs_os_api_mutex_lock_t	./src/flecs.h	/^void (*ecs_os_api_mutex_lock_t)($/;"	t	typeref:typename:void (*)(ecs_os_mutex_t mutex)
ecs_os_api_mutex_new_t	./src/flecs.h	/^ecs_os_mutex_t (*ecs_os_api_mutex_new_t)($/;"	t	typeref:typename:ecs_os_mutex_t (*)(void)
ecs_os_api_mutex_unlock_t	./src/flecs.h	/^void (*ecs_os_api_mutex_unlock_t)($/;"	t	typeref:typename:void (*)(ecs_os_mutex_t mutex)
ecs_os_api_now_t	./src/flecs.h	/^uint64_t (*ecs_os_api_now_t)(void);$/;"	t	typeref:typename:uint64_t (*)(void)
ecs_os_api_realloc	./src/flecs.c	/^void* ecs_os_api_realloc(void *ptr, ecs_size_t size) {$/;"	f	typeref:typename:void *	file:
ecs_os_api_realloc_count	./src/flecs.c	/^int64_t ecs_os_api_realloc_count = 0;$/;"	v	typeref:typename:int64_t
ecs_os_api_realloc_t	./src/flecs.h	/^void* (*ecs_os_api_realloc_t)($/;"	t	typeref:typename:void * (*)(void * ptr,ecs_size_t size)
ecs_os_api_sleep_t	./src/flecs.h	/^void (*ecs_os_api_sleep_t)($/;"	t	typeref:typename:void (*)(int32_t sec,int32_t nanosec)
ecs_os_api_strdup	./src/flecs.c	/^char* ecs_os_api_strdup(const char *str) {$/;"	f	typeref:typename:char *	file:
ecs_os_api_strdup_t	./src/flecs.h	/^char* (*ecs_os_api_strdup_t)($/;"	t	typeref:typename:char * (*)(const char * str)
ecs_os_api_t	./src/flecs.h	/^typedef struct ecs_os_api_t {$/;"	s
ecs_os_api_t	./src/flecs.h	/^} ecs_os_api_t;$/;"	t	typeref:struct:ecs_os_api_t
ecs_os_api_task_join_t	./src/flecs.h	/^void* (*ecs_os_api_task_join_t)($/;"	t	typeref:typename:void * (*)(ecs_os_thread_t thread)
ecs_os_api_task_new_t	./src/flecs.h	/^ecs_os_thread_t (*ecs_os_api_task_new_t)($/;"	t	typeref:typename:ecs_os_thread_t (*)(ecs_os_thread_callback_t callback,void * param)
ecs_os_api_thread_join_t	./src/flecs.h	/^void* (*ecs_os_api_thread_join_t)($/;"	t	typeref:typename:void * (*)(ecs_os_thread_t thread)
ecs_os_api_thread_new_t	./src/flecs.h	/^ecs_os_thread_t (*ecs_os_api_thread_new_t)($/;"	t	typeref:typename:ecs_os_thread_t (*)(ecs_os_thread_callback_t callback,void * param)
ecs_os_api_thread_self_t	./src/flecs.h	/^ecs_os_thread_id_t (*ecs_os_api_thread_self_t)(void);$/;"	t	typeref:typename:ecs_os_thread_id_t (*)(void)
ecs_os_calloc	./src/flecs.h	/^#define ecs_os_calloc(/;"	d
ecs_os_calloc_n	./src/flecs.h	/^#define ecs_os_calloc_n(/;"	d
ecs_os_calloc_t	./src/flecs.h	/^#define ecs_os_calloc_t(/;"	d
ecs_os_cond_broadcast	./src/flecs.h	/^#define ecs_os_cond_broadcast(/;"	d
ecs_os_cond_free	./src/flecs.h	/^#define ecs_os_cond_free(/;"	d
ecs_os_cond_new	./src/flecs.h	/^#define ecs_os_cond_new(/;"	d
ecs_os_cond_signal	./src/flecs.h	/^#define ecs_os_cond_signal(/;"	d
ecs_os_cond_t	./src/flecs.h	/^typedef uintptr_t ecs_os_cond_t;$/;"	t	typeref:typename:uintptr_t
ecs_os_cond_wait	./src/flecs.h	/^#define ecs_os_cond_wait(/;"	d
ecs_os_dbg	./src/flecs.c	/^void ecs_os_dbg($/;"	f	typeref:typename:void
ecs_os_dec	./src/flecs.h	/^#define ecs_os_dec(/;"	d
ecs_os_dl_t	./src/flecs.h	/^typedef uintptr_t ecs_os_dl_t;$/;"	t	typeref:typename:uintptr_t
ecs_os_dlclose	./src/flecs.h	/^#define ecs_os_dlclose(/;"	d
ecs_os_dlopen	./src/flecs.h	/^#define ecs_os_dlopen(/;"	d
ecs_os_dlproc	./src/flecs.h	/^#define ecs_os_dlproc(/;"	d
ecs_os_err	./src/flecs.c	/^void ecs_os_err($/;"	f	typeref:typename:void
ecs_os_fatal	./src/flecs.c	/^void ecs_os_fatal($/;"	f	typeref:typename:void
ecs_os_fini	./src/flecs.c	/^void ecs_os_fini(void) {$/;"	f	typeref:typename:void
ecs_os_fopen	./src/flecs.h	/^#define ecs_os_fopen(/;"	d
ecs_os_free	./src/flecs.h	/^#define ecs_os_free(/;"	d
ecs_os_get_api	./src/flecs.c	/^ecs_os_api_t ecs_os_get_api(void) {$/;"	f	typeref:typename:ecs_os_api_t
ecs_os_get_time	./src/flecs.h	/^#define ecs_os_get_time(/;"	d
ecs_os_gettime	./src/flecs.c	/^void ecs_os_gettime(ecs_time_t *time) {$/;"	f	typeref:typename:void	file:
ecs_os_has_dl	./src/flecs.c	/^bool ecs_os_has_dl(void) {$/;"	f	typeref:typename:bool
ecs_os_has_heap	./src/flecs.c	/^bool ecs_os_has_heap(void) {$/;"	f	typeref:typename:bool
ecs_os_has_logging	./src/flecs.c	/^bool ecs_os_has_logging(void) {$/;"	f	typeref:typename:bool
ecs_os_has_modules	./src/flecs.c	/^bool ecs_os_has_modules(void) {$/;"	f	typeref:typename:bool
ecs_os_has_task_support	./src/flecs.c	/^bool ecs_os_has_task_support(void) {$/;"	f	typeref:typename:bool
ecs_os_has_threading	./src/flecs.c	/^bool ecs_os_has_threading(void) {$/;"	f	typeref:typename:bool
ecs_os_has_time	./src/flecs.c	/^bool ecs_os_has_time(void) {$/;"	f	typeref:typename:bool
ecs_os_inc	./src/flecs.h	/^#define ecs_os_inc(/;"	d
ecs_os_init	./src/flecs.c	/^void ecs_os_init(void)$/;"	f	typeref:typename:void
ecs_os_isinf	./src/flecs.h	/^#define ecs_os_isinf(/;"	d
ecs_os_isnan	./src/flecs.h	/^#define ecs_os_isnan(/;"	d
ecs_os_ladec	./src/flecs.h	/^#define ecs_os_ladec(/;"	d
ecs_os_lainc	./src/flecs.h	/^#define ecs_os_lainc(/;"	d
ecs_os_ldec	./src/flecs.h	/^#define ecs_os_ldec(/;"	d
ecs_os_linc	./src/flecs.h	/^#define ecs_os_linc(/;"	d
ecs_os_malloc	./src/flecs.h	/^#define ecs_os_malloc(/;"	d
ecs_os_malloc_n	./src/flecs.h	/^#define ecs_os_malloc_n(/;"	d
ecs_os_malloc_t	./src/flecs.h	/^#define ecs_os_malloc_t(/;"	d
ecs_os_memcmp	./src/flecs.h	/^#define ecs_os_memcmp(/;"	d
ecs_os_memcmp_t	./src/flecs.h	/^#define ecs_os_memcmp_t(/;"	d
ecs_os_memcpy	./src/flecs.h	/^#define ecs_os_memcpy(/;"	d
ecs_os_memcpy_n	./src/flecs.h	/^#define ecs_os_memcpy_n(/;"	d
ecs_os_memcpy_t	./src/flecs.h	/^#define ecs_os_memcpy_t(/;"	d
ecs_os_memdup	./src/flecs.c	/^void* ecs_os_memdup($/;"	f	typeref:typename:void *
ecs_os_memdup_n	./src/flecs.h	/^#define ecs_os_memdup_n(/;"	d
ecs_os_memdup_t	./src/flecs.h	/^#define ecs_os_memdup_t(/;"	d
ecs_os_memmove	./src/flecs.h	/^#define ecs_os_memmove(/;"	d
ecs_os_memmove_n	./src/flecs.h	/^#define ecs_os_memmove_n(/;"	d
ecs_os_memmove_t	./src/flecs.h	/^#define ecs_os_memmove_t(/;"	d
ecs_os_memset	./src/flecs.h	/^#define ecs_os_memset(/;"	d
ecs_os_memset_n	./src/flecs.h	/^#define ecs_os_memset_n(/;"	d
ecs_os_memset_t	./src/flecs.h	/^#define ecs_os_memset_t(/;"	d
ecs_os_module_to_dl	./src/flecs.h	/^#define ecs_os_module_to_dl(/;"	d
ecs_os_module_to_etc	./src/flecs.h	/^#define ecs_os_module_to_etc(/;"	d
ecs_os_mutex_free	./src/flecs.h	/^#define ecs_os_mutex_free(/;"	d
ecs_os_mutex_lock	./src/flecs.h	/^#define ecs_os_mutex_lock(/;"	d
ecs_os_mutex_new	./src/flecs.h	/^#define ecs_os_mutex_new(/;"	d
ecs_os_mutex_t	./src/flecs.h	/^typedef uintptr_t ecs_os_mutex_t;$/;"	t	typeref:typename:uintptr_t
ecs_os_mutex_unlock	./src/flecs.h	/^#define ecs_os_mutex_unlock(/;"	d
ecs_os_now	./src/flecs.h	/^#define ecs_os_now(/;"	d
ecs_os_proc_t	./src/flecs.h	/^typedef void (*ecs_os_proc_t)(void);$/;"	t	typeref:typename:void (*)(void)
ecs_os_realloc	./src/flecs.h	/^#define ecs_os_realloc(/;"	d
ecs_os_realloc_n	./src/flecs.h	/^#define ecs_os_realloc_n(/;"	d
ecs_os_realloc_t	./src/flecs.h	/^#define ecs_os_realloc_t(/;"	d
ecs_os_set_api	./src/flecs.c	/^void ecs_os_set_api($/;"	f	typeref:typename:void
ecs_os_set_api_defaults	./src/flecs.c	/^void ecs_os_set_api_defaults(void)$/;"	f	typeref:typename:void
ecs_os_sleep	./src/flecs.h	/^#define ecs_os_sleep(/;"	d
ecs_os_snprintf	./src/flecs.h	/^#define ecs_os_snprintf(/;"	d
ecs_os_sock_t	./src/flecs.h	/^typedef uintptr_t ecs_os_sock_t;$/;"	t	typeref:typename:uintptr_t
ecs_os_sprintf	./src/flecs.h	/^#define ecs_os_sprintf(/;"	d
ecs_os_strcat	./src/flecs.h	/^#define ecs_os_strcat(/;"	d
ecs_os_strcmp	./src/flecs.h	/^#define ecs_os_strcmp(/;"	d
ecs_os_strcpy	./src/flecs.h	/^#define ecs_os_strcpy(/;"	d
ecs_os_strdup	./src/flecs.h	/^#define ecs_os_strdup(/;"	d
ecs_os_strerror	./src/flecs.c	/^const char* ecs_os_strerror(int err) {$/;"	f	typeref:typename:const char *
ecs_os_strlen	./src/flecs.h	/^#define ecs_os_strlen(/;"	d
ecs_os_strncmp	./src/flecs.h	/^#define ecs_os_strncmp(/;"	d
ecs_os_strncpy	./src/flecs.h	/^#define ecs_os_strncpy(/;"	d
ecs_os_strset	./src/flecs.c	/^void ecs_os_strset(char **str, const char *value) {$/;"	f	typeref:typename:void
ecs_os_task_join	./src/flecs.h	/^#define ecs_os_task_join(/;"	d
ecs_os_task_new	./src/flecs.h	/^#define ecs_os_task_new(/;"	d
ecs_os_thread_callback_t	./src/flecs.h	/^void* (*ecs_os_thread_callback_t)($/;"	t	typeref:typename:void * (*)(void *)
ecs_os_thread_id_t	./src/flecs.h	/^typedef uint64_t ecs_os_thread_id_t;$/;"	t	typeref:typename:uint64_t
ecs_os_thread_join	./src/flecs.h	/^#define ecs_os_thread_join(/;"	d
ecs_os_thread_new	./src/flecs.h	/^#define ecs_os_thread_new(/;"	d
ecs_os_thread_self	./src/flecs.h	/^#define ecs_os_thread_self(/;"	d
ecs_os_thread_t	./src/flecs.h	/^typedef uintptr_t ecs_os_thread_t;$/;"	t	typeref:typename:uintptr_t
ecs_os_trace	./src/flecs.c	/^void ecs_os_trace($/;"	f	typeref:typename:void
ecs_os_vsprintf	./src/flecs.h	/^#define ecs_os_vsprintf(/;"	d
ecs_os_warn	./src/flecs.c	/^void ecs_os_warn($/;"	f	typeref:typename:void
ecs_os_zeromem	./src/flecs.h	/^#define ecs_os_zeromem(/;"	d
ecs_override	./src/flecs.h	/^#define ecs_override(/;"	d
ecs_override_id	./src/flecs.c	/^void ecs_override_id($/;"	f	typeref:typename:void
ecs_override_pair	./src/flecs.h	/^#define ecs_override_pair(/;"	d
ecs_owns	./src/flecs.h	/^#define ecs_owns(/;"	d
ecs_owns_id	./src/flecs.c	/^bool ecs_owns_id($/;"	f	typeref:typename:bool
ecs_owns_pair	./src/flecs.h	/^#define ecs_owns_pair(/;"	d
ecs_page_iter	./src/flecs.c	/^ecs_iter_t ecs_page_iter($/;"	f	typeref:typename:ecs_iter_t
ecs_page_iter_t	./src/flecs.h	/^typedef struct ecs_page_iter_t {$/;"	s
ecs_page_iter_t	./src/flecs.h	/^} ecs_page_iter_t;$/;"	t	typeref:struct:ecs_page_iter_t
ecs_page_next	./src/flecs.c	/^bool ecs_page_next($/;"	f	typeref:typename:bool
ecs_page_next_instanced	./src/flecs.c	/^bool ecs_page_next_instanced($/;"	f	typeref:typename:bool	file:
ecs_page_t	./src/flecs.c	/^typedef struct ecs_page_t {$/;"	s	file:
ecs_page_t	./src/flecs.c	/^} ecs_page_t;$/;"	t	typeref:struct:ecs_page_t	file:
ecs_pair	./src/flecs.h	/^#define ecs_pair(/;"	d
ecs_pair_first	./src/flecs.h	/^#define ecs_pair_first(/;"	d
ecs_pair_object	./src/flecs.h	/^#define ecs_pair_object /;"	d
ecs_pair_relation	./src/flecs.h	/^#define ecs_pair_relation /;"	d
ecs_pair_second	./src/flecs.h	/^#define ecs_pair_second(/;"	d
ecs_pair_t	./src/flecs.h	/^#define ecs_pair_t(/;"	d
ecs_parse_digit	./src/flecs.c	/^const char* ecs_parse_digit($/;"	f	typeref:typename:const char *
ecs_parse_expr	./src/flecs.c	/^const char* ecs_parse_expr($/;"	f	typeref:typename:const char *
ecs_parse_expr_desc_t	./src/flecs.h	/^typedef struct ecs_parse_expr_desc_t {$/;"	s
ecs_parse_expr_desc_t	./src/flecs.h	/^} ecs_parse_expr_desc_t;$/;"	t	typeref:struct:ecs_parse_expr_desc_t
ecs_parse_expr_token	./src/flecs.c	/^const char *ecs_parse_expr_token($/;"	f	typeref:typename:const char *
ecs_parse_identifier	./src/flecs.c	/^const char* ecs_parse_identifier($/;"	f	typeref:typename:const char *
ecs_parse_term	./src/flecs.c	/^char* ecs_parse_term($/;"	f	typeref:typename:char *
ecs_parse_token	./src/flecs.c	/^const char* ecs_parse_token($/;"	f	typeref:typename:const char *
ecs_parse_ws	./src/flecs.c	/^const char* ecs_parse_ws($/;"	f	typeref:typename:const char *
ecs_parse_ws_eol	./src/flecs.c	/^const char* ecs_parse_ws_eol($/;"	f	typeref:typename:const char *
ecs_parser_error	./src/flecs.h	/^#define ecs_parser_error(/;"	d
ecs_parser_error_	./src/flecs.c	/^void ecs_parser_error_($/;"	f	typeref:typename:void
ecs_parser_errorv	./src/flecs.h	/^#define ecs_parser_errorv(/;"	d
ecs_parser_errorv_	./src/flecs.c	/^void ecs_parser_errorv_($/;"	f	typeref:typename:void
ecs_pipeline	./src/flecs.h	/^#define ecs_pipeline(/;"	d
ecs_pipeline_desc_t	./src/flecs.h	/^typedef struct ecs_pipeline_desc_t {$/;"	s
ecs_pipeline_desc_t	./src/flecs.h	/^} ecs_pipeline_desc_t;$/;"	t	typeref:struct:ecs_pipeline_desc_t
ecs_pipeline_init	./src/flecs.c	/^ecs_entity_t ecs_pipeline_init($/;"	f	typeref:typename:ecs_entity_t
ecs_pipeline_op_t	./src/flecs.c	/^typedef struct ecs_pipeline_op_t {$/;"	s	file:
ecs_pipeline_op_t	./src/flecs.c	/^} ecs_pipeline_op_t;$/;"	t	typeref:struct:ecs_pipeline_op_t	file:
ecs_pipeline_state_t	./src/flecs.c	/^struct ecs_pipeline_state_t {$/;"	s	file:
ecs_pipeline_state_t	./src/flecs.c	/^typedef struct ecs_pipeline_state_t ecs_pipeline_state_t;$/;"	t	typeref:struct:ecs_pipeline_state_t	file:
ecs_pipeline_stats_copy_last	./src/flecs.c	/^void ecs_pipeline_stats_copy_last($/;"	f	typeref:typename:void
ecs_pipeline_stats_fini	./src/flecs.c	/^void ecs_pipeline_stats_fini($/;"	f	typeref:typename:void
ecs_pipeline_stats_get	./src/flecs.c	/^bool ecs_pipeline_stats_get($/;"	f	typeref:typename:bool
ecs_pipeline_stats_reduce	./src/flecs.c	/^void ecs_pipeline_stats_reduce($/;"	f	typeref:typename:void
ecs_pipeline_stats_reduce_last	./src/flecs.c	/^void ecs_pipeline_stats_reduce_last($/;"	f	typeref:typename:void
ecs_pipeline_stats_repeat_last	./src/flecs.c	/^void ecs_pipeline_stats_repeat_last($/;"	f	typeref:typename:void
ecs_pipeline_stats_t	./src/flecs.h	/^typedef struct ecs_pipeline_stats_t {$/;"	s
ecs_pipeline_stats_t	./src/flecs.h	/^} ecs_pipeline_stats_t;$/;"	t	typeref:struct:ecs_pipeline_stats_t
ecs_plecs_from_file	./src/flecs.c	/^int ecs_plecs_from_file($/;"	f	typeref:typename:int
ecs_plecs_from_str	./src/flecs.c	/^int ecs_plecs_from_str($/;"	f	typeref:typename:int
ecs_poly_assert	./src/flecs.c	/^#define ecs_poly_assert(/;"	d	file:
ecs_poly_bind	./src/flecs.c	/^#define ecs_poly_bind(/;"	d	file:
ecs_poly_bind_	./src/flecs.c	/^EcsPoly* ecs_poly_bind_($/;"	f	typeref:typename:EcsPoly *
ecs_poly_bind_get	./src/flecs.c	/^#define ecs_poly_bind_get(/;"	d	file:
ecs_poly_bind_get_	./src/flecs.c	/^const EcsPoly* ecs_poly_bind_get_($/;"	f	typeref:typename:const EcsPoly *
ecs_poly_dtor_t	./src/flecs.h	/^typedef void (*ecs_poly_dtor_t)($/;"	t	typeref:typename:void (*)(ecs_poly_t * poly)
ecs_poly_fini	./src/flecs.c	/^#define ecs_poly_fini(/;"	d	file:
ecs_poly_fini_	./src/flecs.c	/^void ecs_poly_fini_($/;"	f	typeref:typename:void
ecs_poly_free	./src/flecs.c	/^#define ecs_poly_free(/;"	d	file:
ecs_poly_get	./src/flecs.c	/^#define ecs_poly_get(/;"	d	file:
ecs_poly_get_	./src/flecs.c	/^ecs_poly_t* ecs_poly_get_($/;"	f	typeref:typename:ecs_poly_t *
ecs_poly_id	./src/flecs.h	/^#define ecs_poly_id(/;"	d
ecs_poly_init	./src/flecs.c	/^#define ecs_poly_init(/;"	d	file:
ecs_poly_init_	./src/flecs.c	/^void* ecs_poly_init_($/;"	f	typeref:typename:void *
ecs_poly_is	./src/flecs.h	/^#define ecs_poly_is(/;"	d
ecs_poly_is_	./src/flecs.c	/^bool ecs_poly_is_($/;"	f	typeref:typename:bool
ecs_poly_modified	./src/flecs.c	/^#define ecs_poly_modified(/;"	d	file:
ecs_poly_modified_	./src/flecs.c	/^void ecs_poly_modified_($/;"	f	typeref:typename:void
ecs_poly_new	./src/flecs.c	/^#define ecs_poly_new(/;"	d	file:
ecs_poly_t	./src/flecs.h	/^typedef void ecs_poly_t;$/;"	t	typeref:typename:void
ecs_primitive	./src/flecs.h	/^#define ecs_primitive(/;"	d
ecs_primitive_desc_t	./src/flecs.h	/^typedef struct ecs_primitive_desc_t {$/;"	s
ecs_primitive_desc_t	./src/flecs.h	/^} ecs_primitive_desc_t;$/;"	t	typeref:struct:ecs_primitive_desc_t
ecs_primitive_init	./src/flecs.c	/^ecs_entity_t ecs_primitive_init($/;"	f	typeref:typename:ecs_entity_t
ecs_primitive_kind_t	./src/flecs.h	/^typedef enum ecs_primitive_kind_t {$/;"	g
ecs_primitive_kind_t	./src/flecs.h	/^} ecs_primitive_kind_t;$/;"	t	typeref:enum:ecs_primitive_kind_t
ecs_primitive_to_expr_buf	./src/flecs.c	/^int ecs_primitive_to_expr_buf($/;"	f	typeref:typename:int
ecs_print	./src/flecs.h	/^#define ecs_print(/;"	d
ecs_print_	./src/flecs.c	/^void ecs_print_($/;"	f	typeref:typename:void
ecs_printv	./src/flecs.h	/^#define ecs_printv(/;"	d
ecs_printv_	./src/flecs.c	/^void ecs_printv_($/;"	f	typeref:typename:void
ecs_progress	./src/flecs.c	/^bool ecs_progress($/;"	f	typeref:typename:bool
ecs_ptr_from_json	./src/flecs.c	/^const char* ecs_ptr_from_json($/;"	f	typeref:typename:const char *
ecs_ptr_to_expr	./src/flecs.c	/^char* ecs_ptr_to_expr($/;"	f	typeref:typename:char *
ecs_ptr_to_expr_buf	./src/flecs.c	/^int ecs_ptr_to_expr_buf($/;"	f	typeref:typename:int
ecs_ptr_to_json	./src/flecs.c	/^char* ecs_ptr_to_json($/;"	f	typeref:typename:char *
ecs_ptr_to_json_buf	./src/flecs.c	/^int ecs_ptr_to_json_buf($/;"	f	typeref:typename:int
ecs_ptr_to_str	./src/flecs.c	/^char* ecs_ptr_to_str($/;"	f	typeref:typename:char *
ecs_ptr_to_str_buf	./src/flecs.c	/^int ecs_ptr_to_str_buf($/;"	f	typeref:typename:int
ecs_quantity	./src/flecs.h	/^#define ecs_quantity(/;"	d
ecs_quantity_init	./src/flecs.c	/^ecs_entity_t ecs_quantity_init($/;"	f	typeref:typename:ecs_entity_t
ecs_query	./src/flecs.h	/^#define ecs_query(/;"	d
ecs_query_allocators_t	./src/flecs.c	/^typedef struct ecs_query_allocators_t {$/;"	s	file:
ecs_query_allocators_t	./src/flecs.c	/^} ecs_query_allocators_t;$/;"	t	typeref:struct:ecs_query_allocators_t	file:
ecs_query_changed	./src/flecs.c	/^bool ecs_query_changed($/;"	f	typeref:typename:bool
ecs_query_desc_t	./src/flecs.h	/^typedef struct ecs_query_desc_t {$/;"	s
ecs_query_desc_t	./src/flecs.h	/^} ecs_query_desc_t;$/;"	t	typeref:struct:ecs_query_desc_t
ecs_query_empty_table_count	./src/flecs.c	/^int32_t ecs_query_empty_table_count($/;"	f	typeref:typename:int32_t
ecs_query_entity_count	./src/flecs.c	/^int32_t ecs_query_entity_count($/;"	f	typeref:typename:int32_t
ecs_query_event_t	./src/flecs.c	/^typedef struct ecs_query_event_t {$/;"	s	file:
ecs_query_event_t	./src/flecs.c	/^} ecs_query_event_t;$/;"	t	typeref:struct:ecs_query_event_t	file:
ecs_query_eventkind_t	./src/flecs.c	/^typedef enum ecs_query_eventkind_t {$/;"	g	file:
ecs_query_eventkind_t	./src/flecs.c	/^} ecs_query_eventkind_t;$/;"	t	typeref:enum:ecs_query_eventkind_t	file:
ecs_query_fini	./src/flecs.c	/^void ecs_query_fini($/;"	f	typeref:typename:void
ecs_query_get_binding_ctx	./src/flecs.c	/^void* ecs_query_get_binding_ctx($/;"	f	typeref:typename:void *
ecs_query_get_ctx	./src/flecs.c	/^void* ecs_query_get_ctx($/;"	f	typeref:typename:void *
ecs_query_get_filter	./src/flecs.c	/^const ecs_filter_t* ecs_query_get_filter($/;"	f	typeref:typename:const ecs_filter_t *
ecs_query_get_group_ctx	./src/flecs.c	/^void* ecs_query_get_group_ctx($/;"	f	typeref:typename:void *
ecs_query_get_group_info	./src/flecs.c	/^const ecs_query_group_info_t* ecs_query_get_group_info($/;"	f	typeref:typename:const ecs_query_group_info_t *
ecs_query_group_info_t	./src/flecs.h	/^typedef struct ecs_query_group_info_t {$/;"	s
ecs_query_group_info_t	./src/flecs.h	/^} ecs_query_group_info_t;$/;"	t	typeref:struct:ecs_query_group_info_t
ecs_query_init	./src/flecs.c	/^ecs_query_t* ecs_query_init($/;"	f	typeref:typename:ecs_query_t *
ecs_query_iter	./src/flecs.c	/^ecs_iter_t ecs_query_iter($/;"	f	typeref:typename:ecs_iter_t
ecs_query_iter_t	./src/flecs.h	/^typedef struct ecs_query_iter_t {$/;"	s
ecs_query_iter_t	./src/flecs.h	/^} ecs_query_iter_t;$/;"	t	typeref:struct:ecs_query_iter_t
ecs_query_new	./src/flecs.h	/^#define ecs_query_new(/;"	d
ecs_query_next	./src/flecs.c	/^bool ecs_query_next($/;"	f	typeref:typename:bool
ecs_query_next_instanced	./src/flecs.c	/^bool ecs_query_next_instanced($/;"	f	typeref:typename:bool
ecs_query_next_table	./src/flecs.c	/^bool ecs_query_next_table($/;"	f	typeref:typename:bool
ecs_query_orphaned	./src/flecs.c	/^bool ecs_query_orphaned($/;"	f	typeref:typename:bool
ecs_query_populate	./src/flecs.c	/^int ecs_query_populate($/;"	f	typeref:typename:int
ecs_query_set_group	./src/flecs.c	/^void ecs_query_set_group($/;"	f	typeref:typename:void
ecs_query_skip	./src/flecs.c	/^void ecs_query_skip($/;"	f	typeref:typename:void
ecs_query_stats_copy_last	./src/flecs.c	/^void ecs_query_stats_copy_last($/;"	f	typeref:typename:void
ecs_query_stats_get	./src/flecs.c	/^void ecs_query_stats_get($/;"	f	typeref:typename:void
ecs_query_stats_reduce	./src/flecs.c	/^void ecs_query_stats_reduce($/;"	f	typeref:typename:void
ecs_query_stats_reduce_last	./src/flecs.c	/^void ecs_query_stats_reduce_last($/;"	f	typeref:typename:void
ecs_query_stats_repeat_last	./src/flecs.c	/^void ecs_query_stats_repeat_last($/;"	f	typeref:typename:void
ecs_query_stats_t	./src/flecs.h	/^typedef struct ecs_query_stats_t {$/;"	s
ecs_query_stats_t	./src/flecs.h	/^} ecs_query_stats_t;$/;"	t	typeref:struct:ecs_query_stats_t
ecs_query_str	./src/flecs.c	/^char* ecs_query_str($/;"	f	typeref:typename:char *
ecs_query_t	./src/flecs.c	/^struct ecs_query_t {$/;"	s	file:
ecs_query_t	./src/flecs.h	/^typedef struct ecs_query_t ecs_query_t;$/;"	t	typeref:struct:ecs_query_t
ecs_query_t_magic	./src/flecs.h	/^#define ecs_query_t_magic /;"	d
ecs_query_t_mixins	./src/flecs.c	/^ecs_mixins_t ecs_query_t_mixins = {$/;"	v	typeref:typename:ecs_mixins_t
ecs_query_t_tag	./src/flecs.c	/^#define ecs_query_t_tag /;"	d	file:
ecs_query_table_count	./src/flecs.c	/^int32_t ecs_query_table_count($/;"	f	typeref:typename:int32_t
ecs_query_table_list_t	./src/flecs.c	/^typedef struct ecs_query_table_list_t {$/;"	s	file:
ecs_query_table_list_t	./src/flecs.c	/^} ecs_query_table_list_t;$/;"	t	typeref:struct:ecs_query_table_list_t	file:
ecs_query_table_match_t	./src/flecs.c	/^struct ecs_query_table_match_t {$/;"	s	file:
ecs_query_table_match_t	./src/flecs.h	/^typedef struct ecs_query_table_match_t ecs_query_table_match_t;$/;"	t	typeref:struct:ecs_query_table_match_t
ecs_query_table_t	./src/flecs.c	/^typedef struct ecs_query_table_t {$/;"	s	file:
ecs_query_table_t	./src/flecs.c	/^} ecs_query_table_t;$/;"	t	typeref:struct:ecs_query_table_t	file:
ecs_quit	./src/flecs.c	/^void ecs_quit($/;"	f	typeref:typename:void
ecs_randomize_timers	./src/flecs.c	/^void ecs_randomize_timers($/;"	f	typeref:typename:void
ecs_reachable_cache_t	./src/flecs.c	/^typedef struct ecs_reachable_cache_t {$/;"	s	file:
ecs_reachable_cache_t	./src/flecs.c	/^} ecs_reachable_cache_t;$/;"	t	typeref:struct:ecs_reachable_cache_t	file:
ecs_reachable_elem_t	./src/flecs.c	/^typedef struct ecs_reachable_elem_t {$/;"	s	file:
ecs_reachable_elem_t	./src/flecs.c	/^} ecs_reachable_elem_t;$/;"	t	typeref:struct:ecs_reachable_elem_t	file:
ecs_read_begin	./src/flecs.c	/^const ecs_record_t* ecs_read_begin($/;"	f	typeref:typename:const ecs_record_t *
ecs_read_end	./src/flecs.c	/^void ecs_read_end($/;"	f	typeref:typename:void
ecs_readonly_begin	./src/flecs.c	/^bool ecs_readonly_begin($/;"	f	typeref:typename:bool
ecs_readonly_end	./src/flecs.c	/^void ecs_readonly_end($/;"	f	typeref:typename:void
ecs_record_ensure	./src/flecs.h	/^#define ecs_record_ensure(/;"	d
ecs_record_ensure_id	./src/flecs.c	/^void* ecs_record_ensure_id($/;"	f	typeref:typename:void *
ecs_record_ensure_pair	./src/flecs.h	/^#define ecs_record_ensure_pair(/;"	d
ecs_record_ensure_pair_object	./src/flecs.h	/^#define ecs_record_ensure_pair_object /;"	d
ecs_record_ensure_pair_second	./src/flecs.h	/^#define ecs_record_ensure_pair_second(/;"	d
ecs_record_find	./src/flecs.c	/^ecs_record_t* ecs_record_find($/;"	f	typeref:typename:ecs_record_t *
ecs_record_get	./src/flecs.h	/^#define ecs_record_get(/;"	d
ecs_record_get_column	./src/flecs.c	/^void* ecs_record_get_column($/;"	f	typeref:typename:void *
ecs_record_get_entity	./src/flecs.c	/^ecs_entity_t ecs_record_get_entity($/;"	f	typeref:typename:ecs_entity_t
ecs_record_get_id	./src/flecs.c	/^const void* ecs_record_get_id($/;"	f	typeref:typename:const void *
ecs_record_get_pair	./src/flecs.h	/^#define ecs_record_get_pair(/;"	d
ecs_record_get_pair_second	./src/flecs.h	/^#define ecs_record_get_pair_second(/;"	d
ecs_record_has	./src/flecs.h	/^#define ecs_record_has(/;"	d
ecs_record_has_id	./src/flecs.c	/^bool ecs_record_has_id($/;"	f	typeref:typename:bool
ecs_record_t	./src/flecs.h	/^struct ecs_record_t {$/;"	s
ecs_record_t	./src/flecs.h	/^typedef struct ecs_record_t ecs_record_t;$/;"	t	typeref:struct:ecs_record_t
ecs_ref_get	./src/flecs.h	/^#define ecs_ref_get(/;"	d
ecs_ref_get_id	./src/flecs.c	/^void* ecs_ref_get_id($/;"	f	typeref:typename:void *
ecs_ref_init	./src/flecs.h	/^#define ecs_ref_init(/;"	d
ecs_ref_init_id	./src/flecs.c	/^ecs_ref_t ecs_ref_init_id($/;"	f	typeref:typename:ecs_ref_t
ecs_ref_t	./src/flecs.h	/^struct ecs_ref_t {$/;"	s
ecs_ref_t	./src/flecs.h	/^typedef struct ecs_ref_t ecs_ref_t;$/;"	t	typeref:struct:ecs_ref_t
ecs_ref_update	./src/flecs.c	/^void ecs_ref_update($/;"	f	typeref:typename:void
ecs_remove	./src/flecs.h	/^#define ecs_remove(/;"	d
ecs_remove_all	./src/flecs.c	/^void ecs_remove_all($/;"	f	typeref:typename:void
ecs_remove_id	./src/flecs.c	/^void ecs_remove_id($/;"	f	typeref:typename:void
ecs_remove_pair	./src/flecs.h	/^#define ecs_remove_pair(/;"	d
ecs_reset_clock	./src/flecs.c	/^void ecs_reset_clock($/;"	f	typeref:typename:void
ecs_reset_timer	./src/flecs.c	/^void ecs_reset_timer($/;"	f	typeref:typename:void
ecs_rest_cmd_capture_t	./src/flecs.c	/^} ecs_rest_cmd_capture_t;$/;"	t	typeref:struct:__anon7d4a41771c08	file:
ecs_rest_cmd_sync_capture_t	./src/flecs.c	/^} ecs_rest_cmd_sync_capture_t;$/;"	t	typeref:struct:__anon7d4a41771b08	file:
ecs_rest_ctx_t	./src/flecs.c	/^} ecs_rest_ctx_t;$/;"	t	typeref:struct:__anon7d4a41771a08	file:
ecs_rest_server_fini	./src/flecs.c	/^void ecs_rest_server_fini($/;"	f	typeref:typename:void
ecs_rest_server_init	./src/flecs.c	/^ecs_http_server_t* ecs_rest_server_init($/;"	f	typeref:typename:ecs_http_server_t *
ecs_rule	./src/flecs.h	/^#define ecs_rule(/;"	d
ecs_rule_and_ctx_t	./src/flecs.c	/^} ecs_rule_and_ctx_t;$/;"	t	typeref:struct:__anon7d4a41772508	file:
ecs_rule_compile_ctrlflow_t	./src/flecs.c	/^} ecs_rule_compile_ctrlflow_t;$/;"	t	typeref:struct:__anon7d4a41773508	file:
ecs_rule_compile_ctx_t	./src/flecs.c	/^} ecs_rule_compile_ctx_t;$/;"	t	typeref:struct:__anon7d4a41773608	file:
ecs_rule_ctrl_ctx_t	./src/flecs.c	/^} ecs_rule_ctrl_ctx_t;$/;"	t	typeref:struct:__anon7d4a41773208	file:
ecs_rule_each_ctx_t	./src/flecs.c	/^} ecs_rule_each_ctx_t;$/;"	t	typeref:struct:__anon7d4a41772f08	file:
ecs_rule_eq_ctx_t	./src/flecs.c	/^} ecs_rule_eq_ctx_t;$/;"	t	typeref:struct:__anon7d4a41772e08	file:
ecs_rule_find_var	./src/flecs.c	/^int32_t ecs_rule_find_var($/;"	f	typeref:typename:int32_t
ecs_rule_fini	./src/flecs.c	/^void ecs_rule_fini($/;"	f	typeref:typename:void
ecs_rule_get_filter	./src/flecs.c	/^const ecs_filter_t* ecs_rule_get_filter($/;"	f	typeref:typename:const ecs_filter_t *
ecs_rule_ids_ctx_t	./src/flecs.c	/^} ecs_rule_ids_ctx_t;$/;"	t	typeref:struct:__anon7d4a41773108	file:
ecs_rule_init	./src/flecs.c	/^ecs_rule_t* ecs_rule_init($/;"	f	typeref:typename:ecs_rule_t *
ecs_rule_iter	./src/flecs.c	/^ecs_iter_t ecs_rule_iter($/;"	f	typeref:typename:ecs_iter_t
ecs_rule_iter_t	./src/flecs.h	/^typedef struct ecs_rule_iter_t {$/;"	s
ecs_rule_iter_t	./src/flecs.h	/^} ecs_rule_iter_t;$/;"	t	typeref:struct:ecs_rule_iter_t
ecs_rule_lbl_t	./src/flecs.c	/^typedef int16_t ecs_rule_lbl_t;$/;"	t	typeref:typename:int16_t	file:
ecs_rule_new	./src/flecs.h	/^#define ecs_rule_new(/;"	d
ecs_rule_next	./src/flecs.c	/^bool ecs_rule_next($/;"	f	typeref:typename:bool
ecs_rule_next_instanced	./src/flecs.c	/^bool ecs_rule_next_instanced($/;"	f	typeref:typename:bool
ecs_rule_op_ctx_t	./src/flecs.c	/^typedef struct ecs_rule_op_ctx_t {$/;"	s	file:
ecs_rule_op_ctx_t	./src/flecs.c	/^} ecs_rule_op_ctx_t;$/;"	t	typeref:struct:ecs_rule_op_ctx_t	file:
ecs_rule_op_kind_t	./src/flecs.c	/^} ecs_rule_op_kind_t;$/;"	t	typeref:enum:__anon7d4a41772303	file:
ecs_rule_op_profile_t	./src/flecs.h	/^typedef struct ecs_rule_op_profile_t {$/;"	s
ecs_rule_op_profile_t	./src/flecs.h	/^} ecs_rule_op_profile_t;$/;"	t	typeref:struct:ecs_rule_op_profile_t
ecs_rule_op_t	./src/flecs.c	/^typedef struct ecs_rule_op_t {$/;"	s	file:
ecs_rule_op_t	./src/flecs.c	/^} ecs_rule_op_t;$/;"	t	typeref:struct:ecs_rule_op_t	file:
ecs_rule_parse_vars	./src/flecs.c	/^const char* ecs_rule_parse_vars($/;"	f	typeref:typename:const char *
ecs_rule_ref_t	./src/flecs.c	/^} ecs_rule_ref_t;$/;"	t	typeref:union:__anon7d4a4177240a	file:
ecs_rule_run_ctx_t	./src/flecs.c	/^} ecs_rule_run_ctx_t;$/;"	t	typeref:struct:__anon7d4a41773708	file:
ecs_rule_setthis_ctx_t	./src/flecs.c	/^} ecs_rule_setthis_ctx_t;$/;"	t	typeref:struct:__anon7d4a41773008	file:
ecs_rule_str	./src/flecs.c	/^char* ecs_rule_str($/;"	f	typeref:typename:char *
ecs_rule_str_w_profile	./src/flecs.c	/^char* ecs_rule_str_w_profile($/;"	f	typeref:typename:char *
ecs_rule_t	./src/flecs.c	/^struct ecs_rule_t {$/;"	s	file:
ecs_rule_t	./src/flecs.h	/^typedef struct ecs_rule_t ecs_rule_t;$/;"	t	typeref:struct:ecs_rule_t
ecs_rule_t_magic	./src/flecs.h	/^#define ecs_rule_t_magic /;"	d
ecs_rule_t_mixins	./src/flecs.c	/^static ecs_mixins_t ecs_rule_t_mixins = {$/;"	v	typeref:typename:ecs_mixins_t	file:
ecs_rule_t_tag	./src/flecs.c	/^#define ecs_rule_t_tag /;"	d	file:
ecs_rule_trav_ctx_t	./src/flecs.c	/^} ecs_rule_trav_ctx_t;$/;"	t	typeref:struct:__anon7d4a41772d08	file:
ecs_rule_trivial_ctx_t	./src/flecs.c	/^} ecs_rule_trivial_ctx_t;$/;"	t	typeref:struct:__anon7d4a41773308	file:
ecs_rule_up_ctx_t	./src/flecs.c	/^} ecs_rule_up_ctx_t;$/;"	t	typeref:struct:__anon7d4a41772a08	file:
ecs_rule_var_cache_t	./src/flecs.c	/^} ecs_rule_var_cache_t;$/;"	t	typeref:struct:__anon7d4a41773808	file:
ecs_rule_var_count	./src/flecs.c	/^int32_t ecs_rule_var_count($/;"	f	typeref:typename:int32_t
ecs_rule_var_is_entity	./src/flecs.c	/^bool ecs_rule_var_is_entity($/;"	f	typeref:typename:bool
ecs_rule_var_name	./src/flecs.c	/^const char* ecs_rule_var_name($/;"	f	typeref:typename:const char *
ecs_rule_var_t	./src/flecs.c	/^typedef struct ecs_rule_var_t {$/;"	s	file:
ecs_rule_var_t	./src/flecs.c	/^} ecs_rule_var_t;$/;"	t	typeref:struct:ecs_rule_var_t	file:
ecs_run	./src/flecs.c	/^ecs_entity_t ecs_run($/;"	f	typeref:typename:ecs_entity_t
ecs_run_action_t	./src/flecs.h	/^typedef void (*ecs_run_action_t)($/;"	t	typeref:typename:void (*)(ecs_iter_t * it)
ecs_run_aperiodic	./src/flecs.c	/^void ecs_run_aperiodic($/;"	f	typeref:typename:void
ecs_run_intern	./src/flecs.c	/^ecs_entity_t ecs_run_intern($/;"	f	typeref:typename:ecs_entity_t
ecs_run_pipeline	./src/flecs.c	/^void ecs_run_pipeline($/;"	f	typeref:typename:void
ecs_run_post_frame	./src/flecs.c	/^void ecs_run_post_frame($/;"	f	typeref:typename:void
ecs_run_w_filter	./src/flecs.c	/^ecs_entity_t ecs_run_w_filter($/;"	f	typeref:typename:ecs_entity_t
ecs_run_worker	./src/flecs.c	/^ecs_entity_t ecs_run_worker($/;"	f	typeref:typename:ecs_entity_t
ecs_san_assert	./src/flecs.h	/^#define ecs_san_assert(/;"	d
ecs_script	./src/flecs.h	/^#define ecs_script(/;"	d
ecs_script_clear	./src/flecs.c	/^void ecs_script_clear($/;"	f	typeref:typename:void
ecs_script_desc_t	./src/flecs.h	/^typedef struct ecs_script_desc_t {$/;"	s
ecs_script_desc_t	./src/flecs.h	/^} ecs_script_desc_t;$/;"	t	typeref:struct:ecs_script_desc_t
ecs_script_init	./src/flecs.c	/^ecs_entity_t ecs_script_init($/;"	f	typeref:typename:ecs_entity_t
ecs_script_update	./src/flecs.c	/^int ecs_script_update($/;"	f	typeref:typename:int
ecs_search	./src/flecs.c	/^int32_t ecs_search($/;"	f	typeref:typename:int32_t
ecs_search_offset	./src/flecs.c	/^int32_t ecs_search_offset($/;"	f	typeref:typename:int32_t
ecs_search_relation	./src/flecs.c	/^int32_t ecs_search_relation($/;"	f	typeref:typename:int32_t
ecs_serializer_t	./src/flecs.h	/^typedef struct ecs_serializer_t {$/;"	s
ecs_serializer_t	./src/flecs.h	/^} ecs_serializer_t;$/;"	t	typeref:struct:ecs_serializer_t
ecs_set	./src/flecs.h	/^#define ecs_set(/;"	d
ecs_set_alias	./src/flecs.c	/^void ecs_set_alias($/;"	f	typeref:typename:void
ecs_set_automerge	./src/flecs.c	/^void ecs_set_automerge($/;"	f	typeref:typename:void
ecs_set_binding_ctx	./src/flecs.c	/^void ecs_set_binding_ctx($/;"	f	typeref:typename:void
ecs_set_ctx	./src/flecs.c	/^void ecs_set_ctx($/;"	f	typeref:typename:void
ecs_set_default_query_flags	./src/flecs.c	/^void ecs_set_default_query_flags($/;"	f	typeref:typename:void
ecs_set_entity_generation	./src/flecs.c	/^void ecs_set_entity_generation($/;"	f	typeref:typename:void
ecs_set_entity_range	./src/flecs.c	/^void ecs_set_entity_range($/;"	f	typeref:typename:void
ecs_set_hooks	./src/flecs.h	/^#define ecs_set_hooks(/;"	d
ecs_set_hooks_id	./src/flecs.c	/^void ecs_set_hooks_id($/;"	f	typeref:typename:void
ecs_set_id	./src/flecs.c	/^ecs_entity_t ecs_set_id($/;"	f	typeref:typename:ecs_entity_t
ecs_set_interval	./src/flecs.c	/^ecs_entity_t ecs_set_interval($/;"	f	typeref:typename:ecs_entity_t
ecs_set_lookup_path	./src/flecs.c	/^ecs_entity_t* ecs_set_lookup_path($/;"	f	typeref:typename:ecs_entity_t *
ecs_set_name	./src/flecs.c	/^ecs_entity_t ecs_set_name($/;"	f	typeref:typename:ecs_entity_t
ecs_set_name_prefix	./src/flecs.c	/^const char* ecs_set_name_prefix($/;"	f	typeref:typename:const char *
ecs_set_os_api_impl	./src/flecs.c	/^void ecs_set_os_api_impl(void) {$/;"	f	typeref:typename:void
ecs_set_override	./src/flecs.h	/^#define ecs_set_override(/;"	d
ecs_set_pair	./src/flecs.h	/^#define ecs_set_pair(/;"	d
ecs_set_pair_object	./src/flecs.h	/^#define ecs_set_pair_object /;"	d
ecs_set_pair_second	./src/flecs.h	/^#define ecs_set_pair_second(/;"	d
ecs_set_pipeline	./src/flecs.c	/^void ecs_set_pipeline($/;"	f	typeref:typename:void
ecs_set_ptr	./src/flecs.h	/^#define ecs_set_ptr(/;"	d
ecs_set_rate	./src/flecs.c	/^ecs_entity_t ecs_set_rate($/;"	f	typeref:typename:ecs_entity_t
ecs_set_scope	./src/flecs.c	/^ecs_entity_t ecs_set_scope($/;"	f	typeref:typename:ecs_entity_t
ecs_set_stage_count	./src/flecs.c	/^void ecs_set_stage_count($/;"	f	typeref:typename:void
ecs_set_symbol	./src/flecs.c	/^ecs_entity_t ecs_set_symbol($/;"	f	typeref:typename:ecs_entity_t
ecs_set_target_fps	./src/flecs.c	/^void ecs_set_target_fps($/;"	f	typeref:typename:void
ecs_set_task_threads	./src/flecs.c	/^void ecs_set_task_threads($/;"	f	typeref:typename:void
ecs_set_threads	./src/flecs.c	/^void ecs_set_threads($/;"	f	typeref:typename:void
ecs_set_tick_source	./src/flecs.c	/^void ecs_set_tick_source($/;"	f	typeref:typename:void
ecs_set_time_scale	./src/flecs.c	/^void ecs_set_time_scale($/;"	f	typeref:typename:void
ecs_set_timeout	./src/flecs.c	/^ecs_entity_t ecs_set_timeout($/;"	f	typeref:typename:ecs_entity_t
ecs_set_with	./src/flecs.c	/^ecs_entity_t ecs_set_with($/;"	f	typeref:typename:ecs_entity_t
ecs_shares	./src/flecs.h	/^#define ecs_shares(/;"	d
ecs_shares_id	./src/flecs.h	/^#define ecs_shares_id(/;"	d
ecs_shares_pair	./src/flecs.h	/^#define ecs_shares_pair(/;"	d
ecs_should_log	./src/flecs.c	/^bool ecs_should_log(int32_t level) {$/;"	f	typeref:typename:bool
ecs_should_log_1	./src/flecs.h	/^#define ecs_should_log_1(/;"	d
ecs_should_log_2	./src/flecs.h	/^#define ecs_should_log_2(/;"	d
ecs_should_log_3	./src/flecs.h	/^#define ecs_should_log_3(/;"	d
ecs_should_quit	./src/flecs.c	/^bool ecs_should_quit($/;"	f	typeref:typename:bool
ecs_singleton_add	./src/flecs.h	/^#define ecs_singleton_add(/;"	d
ecs_singleton_ensure	./src/flecs.h	/^#define ecs_singleton_ensure(/;"	d
ecs_singleton_get	./src/flecs.h	/^#define ecs_singleton_get(/;"	d
ecs_singleton_modified	./src/flecs.h	/^#define ecs_singleton_modified(/;"	d
ecs_singleton_remove	./src/flecs.h	/^#define ecs_singleton_remove(/;"	d
ecs_singleton_set	./src/flecs.h	/^#define ecs_singleton_set(/;"	d
ecs_singleton_set_ptr	./src/flecs.h	/^#define ecs_singleton_set_ptr(/;"	d
ecs_size_t	./src/flecs.h	/^typedef int32_t ecs_size_t;$/;"	t	typeref:typename:int32_t
ecs_sleepf	./src/flecs.c	/^void ecs_sleepf($/;"	f	typeref:typename:void
ecs_snapshot_free	./src/flecs.c	/^void ecs_snapshot_free($/;"	f	typeref:typename:void
ecs_snapshot_iter	./src/flecs.c	/^ecs_iter_t ecs_snapshot_iter($/;"	f	typeref:typename:ecs_iter_t
ecs_snapshot_iter_t	./src/flecs.h	/^typedef struct ecs_snapshot_iter_t {$/;"	s
ecs_snapshot_iter_t	./src/flecs.h	/^} ecs_snapshot_iter_t;$/;"	t	typeref:struct:ecs_snapshot_iter_t
ecs_snapshot_next	./src/flecs.c	/^bool ecs_snapshot_next($/;"	f	typeref:typename:bool
ecs_snapshot_restore	./src/flecs.c	/^void ecs_snapshot_restore($/;"	f	typeref:typename:void
ecs_snapshot_t	./src/flecs.c	/^struct ecs_snapshot_t {$/;"	s	file:
ecs_snapshot_t	./src/flecs.h	/^typedef struct ecs_snapshot_t ecs_snapshot_t;$/;"	t	typeref:struct:ecs_snapshot_t
ecs_snapshot_take	./src/flecs.c	/^ecs_snapshot_t* ecs_snapshot_take($/;"	f	typeref:typename:ecs_snapshot_t *
ecs_snapshot_take_w_iter	./src/flecs.c	/^ecs_snapshot_t* ecs_snapshot_take_w_iter($/;"	f	typeref:typename:ecs_snapshot_t *
ecs_sort_table	./src/flecs.h	/^#define ecs_sort_table(/;"	d
ecs_sort_table_action_t	./src/flecs.h	/^typedef void (*ecs_sort_table_action_t)($/;"	t	typeref:typename:void (*)(ecs_world_t * world,ecs_table_t * table,ecs_entity_t * entities,void * ptr,int32_t size,int32_t lo,int32_t hi,ecs_order_by_action_t order_by)
ecs_sparse_add	./src/flecs.c	/^void* ecs_sparse_add($/;"	f	typeref:typename:void *
ecs_sparse_add_t	./src/flecs.h	/^#define ecs_sparse_add_t(/;"	d
ecs_sparse_count	./src/flecs.c	/^int32_t ecs_sparse_count($/;"	f	typeref:typename:int32_t
ecs_sparse_get	./src/flecs.c	/^void* ecs_sparse_get($/;"	f	typeref:typename:void *
ecs_sparse_get_dense	./src/flecs.c	/^void* ecs_sparse_get_dense($/;"	f	typeref:typename:void *
ecs_sparse_get_dense_t	./src/flecs.h	/^#define ecs_sparse_get_dense_t(/;"	d
ecs_sparse_get_t	./src/flecs.h	/^#define ecs_sparse_get_t(/;"	d
ecs_sparse_init	./src/flecs.c	/^void ecs_sparse_init($/;"	f	typeref:typename:void
ecs_sparse_init_t	./src/flecs.h	/^#define ecs_sparse_init_t(/;"	d
ecs_sparse_last_id	./src/flecs.c	/^uint64_t ecs_sparse_last_id($/;"	f	typeref:typename:uint64_t
ecs_sparse_t	./src/flecs.h	/^typedef struct ecs_sparse_t {$/;"	s
ecs_sparse_t	./src/flecs.h	/^} ecs_sparse_t;$/;"	t	typeref:struct:ecs_sparse_t
ecs_stack_allocator_alloc_count	./src/flecs.c	/^int64_t ecs_stack_allocator_alloc_count = 0;$/;"	v	typeref:typename:int64_t
ecs_stack_allocator_free_count	./src/flecs.c	/^int64_t ecs_stack_allocator_free_count = 0;$/;"	v	typeref:typename:int64_t
ecs_stack_cursor_t	./src/flecs.h	/^typedef struct ecs_stack_cursor_t {$/;"	s
ecs_stack_cursor_t	./src/flecs.h	/^} ecs_stack_cursor_t;$/;"	t	typeref:struct:ecs_stack_cursor_t
ecs_stack_page_t	./src/flecs.c	/^typedef struct ecs_stack_page_t {$/;"	s	file:
ecs_stack_page_t	./src/flecs.c	/^} ecs_stack_page_t;$/;"	t	typeref:struct:ecs_stack_page_t	file:
ecs_stack_t	./src/flecs.c	/^typedef struct ecs_stack_t {$/;"	s	file:
ecs_stack_t	./src/flecs.c	/^} ecs_stack_t;$/;"	t	typeref:struct:ecs_stack_t	file:
ecs_stage_allocators_t	./src/flecs.c	/^typedef struct ecs_stage_allocators_t {$/;"	s	file:
ecs_stage_allocators_t	./src/flecs.c	/^} ecs_stage_allocators_t;$/;"	t	typeref:struct:ecs_stage_allocators_t	file:
ecs_stage_is_async	./src/flecs.c	/^bool ecs_stage_is_async($/;"	f	typeref:typename:bool
ecs_stage_is_readonly	./src/flecs.c	/^bool ecs_stage_is_readonly($/;"	f	typeref:typename:bool
ecs_stage_t	./src/flecs.c	/^struct ecs_stage_t {$/;"	s	file:
ecs_stage_t	./src/flecs.h	/^typedef struct ecs_stage_t ecs_stage_t;$/;"	t	typeref:struct:ecs_stage_t
ecs_stage_t_magic	./src/flecs.h	/^#define ecs_stage_t_magic /;"	d
ecs_stage_t_mixins	./src/flecs.c	/^ecs_mixins_t ecs_stage_t_mixins = {$/;"	v	typeref:typename:ecs_mixins_t
ecs_stage_t_tag	./src/flecs.c	/^#define ecs_stage_t_tag /;"	d	file:
ecs_start_timer	./src/flecs.c	/^void ecs_start_timer($/;"	f	typeref:typename:void
ecs_stop_timer	./src/flecs.c	/^void ecs_stop_timer($/;"	f	typeref:typename:void
ecs_store_t	./src/flecs.c	/^typedef struct ecs_store_t {$/;"	s	file:
ecs_store_t	./src/flecs.c	/^} ecs_store_t;$/;"	t	typeref:struct:ecs_store_t	file:
ecs_strbuf_append	./src/flecs.c	/^void ecs_strbuf_append($/;"	f	typeref:typename:void
ecs_strbuf_appendbool	./src/flecs.c	/^void ecs_strbuf_appendbool($/;"	f	typeref:typename:void
ecs_strbuf_appendch	./src/flecs.c	/^void ecs_strbuf_appendch($/;"	f	typeref:typename:void
ecs_strbuf_appendflt	./src/flecs.c	/^void ecs_strbuf_appendflt($/;"	f	typeref:typename:void
ecs_strbuf_appendint	./src/flecs.c	/^void ecs_strbuf_appendint($/;"	f	typeref:typename:void
ecs_strbuf_appendlit	./src/flecs.h	/^#define ecs_strbuf_appendlit(/;"	d
ecs_strbuf_appendstr	./src/flecs.c	/^void ecs_strbuf_appendstr($/;"	f	typeref:typename:void
ecs_strbuf_appendstrn	./src/flecs.c	/^void ecs_strbuf_appendstrn($/;"	f	typeref:typename:void
ecs_strbuf_get	./src/flecs.c	/^char* ecs_strbuf_get($/;"	f	typeref:typename:char *
ecs_strbuf_get_small	./src/flecs.c	/^char* ecs_strbuf_get_small($/;"	f	typeref:typename:char *
ecs_strbuf_list_append	./src/flecs.c	/^void ecs_strbuf_list_append($/;"	f	typeref:typename:void
ecs_strbuf_list_appendch	./src/flecs.c	/^void ecs_strbuf_list_appendch($/;"	f	typeref:typename:void
ecs_strbuf_list_appendlit	./src/flecs.h	/^#define ecs_strbuf_list_appendlit(/;"	d
ecs_strbuf_list_appendstr	./src/flecs.c	/^void ecs_strbuf_list_appendstr($/;"	f	typeref:typename:void
ecs_strbuf_list_appendstrn	./src/flecs.c	/^void ecs_strbuf_list_appendstrn($/;"	f	typeref:typename:void
ecs_strbuf_list_elem	./src/flecs.h	/^typedef struct ecs_strbuf_list_elem {$/;"	s
ecs_strbuf_list_elem	./src/flecs.h	/^} ecs_strbuf_list_elem;$/;"	t	typeref:struct:ecs_strbuf_list_elem
ecs_strbuf_list_next	./src/flecs.c	/^void ecs_strbuf_list_next($/;"	f	typeref:typename:void
ecs_strbuf_list_pop	./src/flecs.c	/^void ecs_strbuf_list_pop($/;"	f	typeref:typename:void
ecs_strbuf_list_push	./src/flecs.c	/^void ecs_strbuf_list_push($/;"	f	typeref:typename:void
ecs_strbuf_mergebuff	./src/flecs.c	/^void ecs_strbuf_mergebuff($/;"	f	typeref:typename:void
ecs_strbuf_reset	./src/flecs.c	/^void ecs_strbuf_reset($/;"	f	typeref:typename:void
ecs_strbuf_t	./src/flecs.h	/^typedef struct ecs_strbuf_t {$/;"	s
ecs_strbuf_t	./src/flecs.h	/^} ecs_strbuf_t;$/;"	t	typeref:struct:ecs_strbuf_t
ecs_strbuf_vappend	./src/flecs.c	/^void ecs_strbuf_vappend($/;"	f	typeref:typename:void
ecs_strbuf_written	./src/flecs.c	/^int32_t ecs_strbuf_written($/;"	f	typeref:typename:int32_t
ecs_strerror	./src/flecs.c	/^const char* ecs_strerror($/;"	f	typeref:typename:const char *
ecs_stresc	./src/flecs.c	/^ecs_size_t ecs_stresc($/;"	f	typeref:typename:ecs_size_t
ecs_string_t	./src/flecs.h	/^typedef char* ecs_string_t;$/;"	t	typeref:typename:char *
ecs_strip_generation	./src/flecs.c	/^ecs_id_t ecs_strip_generation($/;"	f	typeref:typename:ecs_id_t
ecs_struct	./src/flecs.h	/^#define ecs_struct(/;"	d
ecs_struct_desc_t	./src/flecs.h	/^typedef struct ecs_struct_desc_t {$/;"	s
ecs_struct_desc_t	./src/flecs.h	/^} ecs_struct_desc_t;$/;"	t	typeref:struct:ecs_struct_desc_t
ecs_struct_init	./src/flecs.c	/^ecs_entity_t ecs_struct_init($/;"	f	typeref:typename:ecs_entity_t
ecs_suspend_readonly_state_t	./src/flecs.c	/^typedef struct ecs_suspend_readonly_state_t {$/;"	s	file:
ecs_suspend_readonly_state_t	./src/flecs.c	/^} ecs_suspend_readonly_state_t;$/;"	t	typeref:struct:ecs_suspend_readonly_state_t	file:
ecs_switch_header_t	./src/flecs.c	/^typedef struct ecs_switch_header_t {$/;"	s	file:
ecs_switch_header_t	./src/flecs.c	/^} ecs_switch_header_t;$/;"	t	typeref:struct:ecs_switch_header_t	file:
ecs_switch_node_t	./src/flecs.c	/^typedef struct ecs_switch_node_t {$/;"	s	file:
ecs_switch_node_t	./src/flecs.c	/^} ecs_switch_node_t;$/;"	t	typeref:struct:ecs_switch_node_t	file:
ecs_switch_t	./src/flecs.c	/^struct ecs_switch_t {    $/;"	s	file:
ecs_switch_t	./src/flecs.h	/^typedef struct ecs_switch_t ecs_switch_t;$/;"	t	typeref:struct:ecs_switch_t
ecs_sync_stats_t	./src/flecs.h	/^typedef struct ecs_sync_stats_t {$/;"	s
ecs_sync_stats_t	./src/flecs.h	/^} ecs_sync_stats_t;$/;"	t	typeref:struct:ecs_sync_stats_t
ecs_system	./src/flecs.h	/^#define ecs_system(/;"	d
ecs_system_desc_t	./src/flecs.h	/^typedef struct ecs_system_desc_t {$/;"	s
ecs_system_desc_t	./src/flecs.h	/^} ecs_system_desc_t;$/;"	t	typeref:struct:ecs_system_desc_t
ecs_system_get_binding_ctx	./src/flecs.c	/^void* ecs_system_get_binding_ctx($/;"	f	typeref:typename:void *
ecs_system_get_ctx	./src/flecs.c	/^void* ecs_system_get_ctx($/;"	f	typeref:typename:void *
ecs_system_get_query	./src/flecs.c	/^ecs_query_t* ecs_system_get_query($/;"	f	typeref:typename:ecs_query_t *
ecs_system_init	./src/flecs.c	/^ecs_entity_t ecs_system_init($/;"	f	typeref:typename:ecs_entity_t
ecs_system_stats_copy_last	./src/flecs.c	/^void ecs_system_stats_copy_last($/;"	f	typeref:typename:void
ecs_system_stats_get	./src/flecs.c	/^bool ecs_system_stats_get($/;"	f	typeref:typename:bool
ecs_system_stats_reduce	./src/flecs.c	/^void ecs_system_stats_reduce($/;"	f	typeref:typename:void
ecs_system_stats_reduce_last	./src/flecs.c	/^void ecs_system_stats_reduce_last($/;"	f	typeref:typename:void
ecs_system_stats_repeat_last	./src/flecs.c	/^void ecs_system_stats_repeat_last($/;"	f	typeref:typename:void
ecs_system_stats_t	./src/flecs.h	/^typedef struct ecs_system_stats_t {$/;"	s
ecs_system_stats_t	./src/flecs.h	/^} ecs_system_stats_t;$/;"	t	typeref:struct:ecs_system_stats_t
ecs_system_t	./src/flecs.c	/^typedef struct ecs_system_t {$/;"	s	file:
ecs_system_t	./src/flecs.c	/^} ecs_system_t;$/;"	t	typeref:struct:ecs_system_t	file:
ecs_system_t_magic	./src/flecs.c	/^#define ecs_system_t_magic /;"	d	file:
ecs_system_t_mixins	./src/flecs.c	/^ecs_mixins_t ecs_system_t_mixins = {$/;"	v	typeref:typename:ecs_mixins_t
ecs_system_t_tag	./src/flecs.c	/^#define ecs_system_t_tag /;"	d	file:
ecs_table__t	./src/flecs.c	/^typedef struct ecs_table__t {$/;"	s	file:
ecs_table__t	./src/flecs.c	/^} ecs_table__t;$/;"	t	typeref:struct:ecs_table__t	file:
ecs_table_add_id	./src/flecs.c	/^ecs_table_t* ecs_table_add_id($/;"	f	typeref:typename:ecs_table_t *
ecs_table_cache_fini	./src/flecs.c	/^void ecs_table_cache_fini($/;"	f	typeref:typename:void
ecs_table_cache_get	./src/flecs.c	/^void* ecs_table_cache_get($/;"	f	typeref:typename:void *
ecs_table_cache_hdr_t	./src/flecs.c	/^typedef struct ecs_table_cache_hdr_t {$/;"	s	file:
ecs_table_cache_hdr_t	./src/flecs.c	/^} ecs_table_cache_hdr_t;$/;"	t	typeref:struct:ecs_table_cache_hdr_t	file:
ecs_table_cache_init	./src/flecs.c	/^void ecs_table_cache_init($/;"	f	typeref:typename:void
ecs_table_cache_insert	./src/flecs.c	/^void ecs_table_cache_insert($/;"	f	typeref:typename:void
ecs_table_cache_insert_w_empty	./src/flecs.c	/^void ecs_table_cache_insert_w_empty($/;"	f	typeref:typename:void
ecs_table_cache_is_empty	./src/flecs.c	/^bool ecs_table_cache_is_empty($/;"	f	typeref:typename:bool
ecs_table_cache_iter_t	./src/flecs.h	/^typedef struct ecs_table_cache_iter_t {$/;"	s
ecs_table_cache_iter_t	./src/flecs.h	/^} ecs_table_cache_iter_t;$/;"	t	typeref:struct:ecs_table_cache_iter_t
ecs_table_cache_list_t	./src/flecs.c	/^typedef struct ecs_table_cache_list_t {$/;"	s	file:
ecs_table_cache_list_t	./src/flecs.c	/^} ecs_table_cache_list_t;$/;"	t	typeref:struct:ecs_table_cache_list_t	file:
ecs_table_cache_remove	./src/flecs.c	/^void* ecs_table_cache_remove($/;"	f	typeref:typename:void *
ecs_table_cache_replace	./src/flecs.c	/^void ecs_table_cache_replace($/;"	f	typeref:typename:void
ecs_table_cache_set_empty	./src/flecs.c	/^bool ecs_table_cache_set_empty($/;"	f	typeref:typename:bool
ecs_table_cache_t	./src/flecs.c	/^typedef struct ecs_table_cache_t {$/;"	s	file:
ecs_table_cache_t	./src/flecs.c	/^} ecs_table_cache_t;$/;"	t	typeref:struct:ecs_table_cache_t	file:
ecs_table_column_count	./src/flecs.c	/^int32_t ecs_table_column_count($/;"	f	typeref:typename:int32_t
ecs_table_column_to_type_index	./src/flecs.c	/^int32_t ecs_table_column_to_type_index($/;"	f	typeref:typename:int32_t
ecs_table_count	./src/flecs.c	/^int32_t ecs_table_count($/;"	f	typeref:typename:int32_t
ecs_table_diff_builder_t	./src/flecs.c	/^typedef struct ecs_table_diff_builder_t {$/;"	s	file:
ecs_table_diff_builder_t	./src/flecs.c	/^} ecs_table_diff_builder_t;$/;"	t	typeref:struct:ecs_table_diff_builder_t	file:
ecs_table_diff_t	./src/flecs.c	/^typedef struct ecs_table_diff_t {$/;"	s	file:
ecs_table_diff_t	./src/flecs.c	/^} ecs_table_diff_t;$/;"	t	typeref:struct:ecs_table_diff_t	file:
ecs_table_event_t	./src/flecs.c	/^typedef struct ecs_table_event_t {$/;"	s	file:
ecs_table_event_t	./src/flecs.c	/^} ecs_table_event_t;$/;"	t	typeref:struct:ecs_table_event_t	file:
ecs_table_eventkind_t	./src/flecs.c	/^typedef enum ecs_table_eventkind_t {$/;"	g	file:
ecs_table_eventkind_t	./src/flecs.c	/^} ecs_table_eventkind_t;$/;"	t	typeref:enum:ecs_table_eventkind_t	file:
ecs_table_find	./src/flecs.c	/^ecs_table_t* ecs_table_find($/;"	f	typeref:typename:ecs_table_t *
ecs_table_get	./src/flecs.h	/^#define ecs_table_get(/;"	d
ecs_table_get_column	./src/flecs.c	/^void* ecs_table_get_column($/;"	f	typeref:typename:void *
ecs_table_get_column_index	./src/flecs.c	/^int32_t ecs_table_get_column_index($/;"	f	typeref:typename:int32_t
ecs_table_get_column_size	./src/flecs.c	/^size_t ecs_table_get_column_size($/;"	f	typeref:typename:size_t
ecs_table_get_depth	./src/flecs.c	/^int32_t ecs_table_get_depth($/;"	f	typeref:typename:int32_t
ecs_table_get_id	./src/flecs.c	/^void* ecs_table_get_id($/;"	f	typeref:typename:void *
ecs_table_get_pair	./src/flecs.h	/^#define ecs_table_get_pair(/;"	d
ecs_table_get_pair_second	./src/flecs.h	/^#define ecs_table_get_pair_second(/;"	d
ecs_table_get_type	./src/flecs.c	/^const ecs_type_t* ecs_table_get_type($/;"	f	typeref:typename:const ecs_type_t *
ecs_table_get_type_index	./src/flecs.c	/^int32_t ecs_table_get_type_index($/;"	f	typeref:typename:int32_t
ecs_table_has_flags	./src/flecs.c	/^bool ecs_table_has_flags($/;"	f	typeref:typename:bool
ecs_table_has_id	./src/flecs.c	/^bool ecs_table_has_id($/;"	f	typeref:typename:bool
ecs_table_leaf_t	./src/flecs.c	/^typedef struct ecs_table_leaf_t {$/;"	s	file:
ecs_table_leaf_t	./src/flecs.c	/^} ecs_table_leaf_t;$/;"	t	typeref:struct:ecs_table_leaf_t	file:
ecs_table_lock	./src/flecs.c	/^void ecs_table_lock($/;"	f	typeref:typename:void
ecs_table_range_t	./src/flecs.h	/^typedef struct ecs_table_range_t {$/;"	s
ecs_table_range_t	./src/flecs.h	/^} ecs_table_range_t;$/;"	t	typeref:struct:ecs_table_range_t
ecs_table_record_t	./src/flecs.c	/^struct ecs_table_record_t {$/;"	s	file:
ecs_table_record_t	./src/flecs.h	/^typedef struct ecs_table_record_t ecs_table_record_t;$/;"	t	typeref:struct:ecs_table_record_t
ecs_table_remove_id	./src/flecs.c	/^ecs_table_t* ecs_table_remove_id($/;"	f	typeref:typename:ecs_table_t *
ecs_table_str	./src/flecs.c	/^char* ecs_table_str($/;"	f	typeref:typename:char *
ecs_table_swap_rows	./src/flecs.c	/^void ecs_table_swap_rows($/;"	f	typeref:typename:void
ecs_table_t	./src/flecs.c	/^struct ecs_table_t {$/;"	s	file:
ecs_table_t	./src/flecs.h	/^typedef struct ecs_table_t ecs_table_t;$/;"	t	typeref:struct:ecs_table_t
ecs_table_t_magic	./src/flecs.h	/^#define ecs_table_t_magic /;"	d
ecs_table_t_mixins	./src/flecs.c	/^#define ecs_table_t_mixins /;"	d	file:
ecs_table_t_tag	./src/flecs.c	/^#define ecs_table_t_tag /;"	d	file:
ecs_table_type_to_column_index	./src/flecs.c	/^int32_t ecs_table_type_to_column_index($/;"	f	typeref:typename:int32_t
ecs_table_unlock	./src/flecs.c	/^void ecs_table_unlock($/;"	f	typeref:typename:void
ecs_term_chain_iter	./src/flecs.c	/^ecs_iter_t ecs_term_chain_iter($/;"	f	typeref:typename:ecs_iter_t
ecs_term_copy	./src/flecs.c	/^ecs_term_t ecs_term_copy($/;"	f	typeref:typename:ecs_term_t
ecs_term_finalize	./src/flecs.c	/^int ecs_term_finalize($/;"	f	typeref:typename:int
ecs_term_fini	./src/flecs.c	/^void ecs_term_fini($/;"	f	typeref:typename:void
ecs_term_id_is_set	./src/flecs.c	/^bool ecs_term_id_is_set($/;"	f	typeref:typename:bool
ecs_term_id_t	./src/flecs.h	/^typedef struct ecs_term_id_t {$/;"	s
ecs_term_id_t	./src/flecs.h	/^} ecs_term_id_t;$/;"	t	typeref:struct:ecs_term_id_t
ecs_term_is_initialized	./src/flecs.c	/^bool ecs_term_is_initialized($/;"	f	typeref:typename:bool
ecs_term_iter	./src/flecs.c	/^ecs_iter_t ecs_term_iter($/;"	f	typeref:typename:ecs_iter_t
ecs_term_iter_t	./src/flecs.h	/^typedef struct ecs_term_iter_t {$/;"	s
ecs_term_iter_t	./src/flecs.h	/^} ecs_term_iter_t;$/;"	t	typeref:struct:ecs_term_iter_t
ecs_term_match_0	./src/flecs.c	/^bool ecs_term_match_0($/;"	f	typeref:typename:bool
ecs_term_match_this	./src/flecs.c	/^bool ecs_term_match_this($/;"	f	typeref:typename:bool
ecs_term_move	./src/flecs.c	/^ecs_term_t ecs_term_move($/;"	f	typeref:typename:ecs_term_t
ecs_term_next	./src/flecs.c	/^bool ecs_term_next($/;"	f	typeref:typename:bool
ecs_term_str	./src/flecs.c	/^char* ecs_term_str($/;"	f	typeref:typename:char *
ecs_term_t	./src/flecs.h	/^struct ecs_term_t {$/;"	s
ecs_term_t	./src/flecs.h	/^typedef struct ecs_term_t ecs_term_t;$/;"	t	typeref:struct:ecs_term_t
ecs_throw	./src/flecs.h	/^#define ecs_throw(/;"	d
ecs_time_measure	./src/flecs.c	/^double ecs_time_measure($/;"	f	typeref:typename:double
ecs_time_sub	./src/flecs.c	/^ecs_time_t ecs_time_sub($/;"	f	typeref:typename:ecs_time_t
ecs_time_t	./src/flecs.h	/^typedef struct ecs_time_t {$/;"	s
ecs_time_t	./src/flecs.h	/^} ecs_time_t;$/;"	t	typeref:struct:ecs_time_t
ecs_time_to_double	./src/flecs.c	/^double ecs_time_to_double($/;"	f	typeref:typename:double
ecs_token_t	./src/flecs.c	/^typedef char ecs_token_t[ECS_MAX_TOKEN_SIZE];$/;"	t	typeref:typename:char[ECS_MAX_TOKEN_SIZE]	file:
ecs_trace	./src/flecs.h	/^#define ecs_trace(...) ecs_trace_/;"	d
ecs_trace	./src/flecs.h	/^#define ecs_trace(/;"	d
ecs_trace_	./src/flecs.h	/^#define ecs_trace_(/;"	d
ecs_trav_cache_t	./src/flecs.c	/^} ecs_trav_cache_t;$/;"	t	typeref:struct:__anon7d4a41772c08	file:
ecs_trav_down_elem_t	./src/flecs.c	/^} ecs_trav_down_elem_t;$/;"	t	typeref:struct:__anon7d4a41772608	file:
ecs_trav_down_t	./src/flecs.c	/^} ecs_trav_down_t;$/;"	t	typeref:struct:__anon7d4a41772708	file:
ecs_trav_elem_t	./src/flecs.c	/^} ecs_trav_elem_t;$/;"	t	typeref:struct:__anon7d4a41772b08	file:
ecs_trav_up_cache_t	./src/flecs.c	/^} ecs_trav_up_cache_t;$/;"	t	typeref:struct:__anon7d4a41772908	file:
ecs_trav_up_t	./src/flecs.c	/^} ecs_trav_up_t;$/;"	t	typeref:struct:__anon7d4a41772808	file:
ecs_trigger_t_magic	./src/flecs.h	/^#define ecs_trigger_t_magic /;"	d
ecs_type_hooks_t	./src/flecs.h	/^struct ecs_type_hooks_t {$/;"	s
ecs_type_hooks_t	./src/flecs.h	/^typedef struct ecs_type_hooks_t ecs_type_hooks_t;$/;"	t	typeref:struct:ecs_type_hooks_t
ecs_type_info_t	./src/flecs.h	/^struct ecs_type_info_t {$/;"	s
ecs_type_info_t	./src/flecs.h	/^typedef struct ecs_type_info_t ecs_type_info_t;$/;"	t	typeref:struct:ecs_type_info_t
ecs_type_info_to_json	./src/flecs.c	/^char* ecs_type_info_to_json($/;"	f	typeref:typename:char *
ecs_type_info_to_json_buf	./src/flecs.c	/^int ecs_type_info_to_json_buf($/;"	f	typeref:typename:int
ecs_type_kind_t	./src/flecs.h	/^typedef enum ecs_type_kind_t {$/;"	g
ecs_type_kind_t	./src/flecs.h	/^} ecs_type_kind_t;$/;"	t	typeref:enum:ecs_type_kind_t
ecs_type_str	./src/flecs.c	/^char* ecs_type_str($/;"	f	typeref:typename:char *
ecs_type_str_buf	./src/flecs.c	/^void ecs_type_str_buf($/;"	f	typeref:typename:void	file:
ecs_type_t	./src/flecs.h	/^} ecs_type_t;$/;"	t	typeref:struct:__anon7d4a417c0108
ecs_u16_t	./src/flecs.h	/^typedef uint16_t ecs_u16_t;$/;"	t	typeref:typename:uint16_t
ecs_u32_t	./src/flecs.h	/^typedef uint32_t ecs_u32_t;$/;"	t	typeref:typename:uint32_t
ecs_u64_t	./src/flecs.h	/^typedef uint64_t ecs_u64_t;$/;"	t	typeref:typename:uint64_t
ecs_u8_t	./src/flecs.h	/^typedef uint8_t ecs_u8_t;$/;"	t	typeref:typename:uint8_t
ecs_unit	./src/flecs.h	/^#define ecs_unit(/;"	d
ecs_unit_desc_t	./src/flecs.h	/^typedef struct ecs_unit_desc_t {$/;"	s
ecs_unit_desc_t	./src/flecs.h	/^} ecs_unit_desc_t;$/;"	t	typeref:struct:ecs_unit_desc_t
ecs_unit_init	./src/flecs.c	/^ecs_entity_t ecs_unit_init($/;"	f	typeref:typename:ecs_entity_t
ecs_unit_prefix	./src/flecs.h	/^#define ecs_unit_prefix(/;"	d
ecs_unit_prefix_desc_t	./src/flecs.h	/^typedef struct ecs_unit_prefix_desc_t {$/;"	s
ecs_unit_prefix_desc_t	./src/flecs.h	/^} ecs_unit_prefix_desc_t;$/;"	t	typeref:struct:ecs_unit_prefix_desc_t
ecs_unit_prefix_init	./src/flecs.c	/^ecs_entity_t ecs_unit_prefix_init($/;"	f	typeref:typename:ecs_entity_t
ecs_unit_translation_t	./src/flecs.h	/^typedef struct ecs_unit_translation_t {$/;"	s
ecs_unit_translation_t	./src/flecs.h	/^} ecs_unit_translation_t;$/;"	t	typeref:struct:ecs_unit_translation_t
ecs_uptr_t	./src/flecs.h	/^typedef uintptr_t ecs_uptr_t;$/;"	t	typeref:typename:uintptr_t
ecs_using_task_threads	./src/flecs.c	/^bool ecs_using_task_threads($/;"	f	typeref:typename:bool
ecs_value	./src/flecs.h	/^#define ecs_value(T, ptr) ((ecs_value_/;"	d
ecs_value_copy	./src/flecs.c	/^int ecs_value_copy($/;"	f	typeref:typename:int
ecs_value_copy_w_type_info	./src/flecs.c	/^int ecs_value_copy_w_type_info($/;"	f	typeref:typename:int
ecs_value_fini	./src/flecs.c	/^int ecs_value_fini($/;"	f	typeref:typename:int
ecs_value_fini_w_type_info	./src/flecs.c	/^int ecs_value_fini_w_type_info($/;"	f	typeref:typename:int
ecs_value_free	./src/flecs.c	/^int ecs_value_free($/;"	f	typeref:typename:int
ecs_value_init	./src/flecs.c	/^int ecs_value_init($/;"	f	typeref:typename:int
ecs_value_init_w_type_info	./src/flecs.c	/^int ecs_value_init_w_type_info($/;"	f	typeref:typename:int
ecs_value_move	./src/flecs.c	/^int ecs_value_move($/;"	f	typeref:typename:int
ecs_value_move_ctor	./src/flecs.c	/^int ecs_value_move_ctor($/;"	f	typeref:typename:int
ecs_value_move_ctor_w_type_info	./src/flecs.c	/^int ecs_value_move_ctor_w_type_info($/;"	f	typeref:typename:int
ecs_value_move_w_type_info	./src/flecs.c	/^int ecs_value_move_w_type_info($/;"	f	typeref:typename:int
ecs_value_new	./src/flecs.c	/^void* ecs_value_new($/;"	f	typeref:typename:void *
ecs_value_new_t	./src/flecs.h	/^#define ecs_value_new_t(/;"	d
ecs_value_new_w_type_info	./src/flecs.c	/^void* ecs_value_new_w_type_info($/;"	f	typeref:typename:void *
ecs_value_stack_t	./src/flecs.c	/^typedef struct ecs_value_stack_t {$/;"	s	file:
ecs_value_stack_t	./src/flecs.c	/^} ecs_value_stack_t;$/;"	t	typeref:struct:ecs_value_stack_t	file:
ecs_value_t	./src/flecs.h	/^typedef struct ecs_value_t {$/;"	s
ecs_value_t	./src/flecs.h	/^} ecs_value_t;$/;"	t	typeref:struct:ecs_value_t
ecs_var_id_t	./src/flecs.c	/^typedef uint8_t ecs_var_id_t;$/;"	t	typeref:typename:uint8_t	file:
ecs_var_kind_t	./src/flecs.c	/^} ecs_var_kind_t;$/;"	t	typeref:enum:__anon7d4a41772203	file:
ecs_var_t	./src/flecs.h	/^typedef struct ecs_var_t {$/;"	s
ecs_var_t	./src/flecs.h	/^} ecs_var_t;$/;"	t	typeref:struct:ecs_var_t
ecs_vars_declare	./src/flecs.c	/^ecs_expr_var_t* ecs_vars_declare($/;"	f	typeref:typename:ecs_expr_var_t *
ecs_vars_declare_w_value	./src/flecs.c	/^ecs_expr_var_t* ecs_vars_declare_w_value($/;"	f	typeref:typename:ecs_expr_var_t *
ecs_vars_fini	./src/flecs.c	/^void ecs_vars_fini($/;"	f	typeref:typename:void
ecs_vars_init	./src/flecs.c	/^void ecs_vars_init($/;"	f	typeref:typename:void
ecs_vars_lookup	./src/flecs.c	/^ecs_expr_var_t* ecs_vars_lookup($/;"	f	typeref:typename:ecs_expr_var_t *
ecs_vars_pop	./src/flecs.c	/^int ecs_vars_pop($/;"	f	typeref:typename:int
ecs_vars_push	./src/flecs.c	/^void ecs_vars_push($/;"	f	typeref:typename:void
ecs_vars_t	./src/flecs.h	/^typedef struct ecs_vars_t {$/;"	s
ecs_vars_t	./src/flecs.h	/^} ecs_vars_t;$/;"	t	typeref:struct:ecs_vars_t
ecs_vasprintf	./src/flecs.c	/^char* ecs_vasprintf($/;"	f	typeref:typename:char *
ecs_vec_append	./src/flecs.c	/^void* ecs_vec_append($/;"	f	typeref:typename:void *
ecs_vec_append_t	./src/flecs.h	/^#define ecs_vec_append_t(/;"	d
ecs_vec_clear	./src/flecs.c	/^void ecs_vec_clear($/;"	f	typeref:typename:void
ecs_vec_copy	./src/flecs.c	/^ecs_vec_t ecs_vec_copy($/;"	f	typeref:typename:ecs_vec_t
ecs_vec_copy_shrink	./src/flecs.c	/^ecs_vec_t ecs_vec_copy_shrink($/;"	f	typeref:typename:ecs_vec_t
ecs_vec_copy_shrink_t	./src/flecs.h	/^#define ecs_vec_copy_shrink_t(/;"	d
ecs_vec_copy_t	./src/flecs.h	/^#define ecs_vec_copy_t(/;"	d
ecs_vec_count	./src/flecs.c	/^int32_t ecs_vec_count($/;"	f	typeref:typename:int32_t
ecs_vec_fini	./src/flecs.c	/^void ecs_vec_fini($/;"	f	typeref:typename:void
ecs_vec_fini_t	./src/flecs.h	/^#define ecs_vec_fini_t(/;"	d
ecs_vec_first	./src/flecs.c	/^void* ecs_vec_first($/;"	f	typeref:typename:void *
ecs_vec_first_t	./src/flecs.h	/^#define ecs_vec_first_t(/;"	d
ecs_vec_get	./src/flecs.c	/^void* ecs_vec_get($/;"	f	typeref:typename:void *
ecs_vec_get_t	./src/flecs.h	/^#define ecs_vec_get_t(/;"	d
ecs_vec_grow	./src/flecs.c	/^void* ecs_vec_grow($/;"	f	typeref:typename:void *
ecs_vec_grow_t	./src/flecs.h	/^#define ecs_vec_grow_t(/;"	d
ecs_vec_init	./src/flecs.c	/^ecs_vec_t* ecs_vec_init($/;"	f	typeref:typename:ecs_vec_t *
ecs_vec_init_if	./src/flecs.c	/^void ecs_vec_init_if($/;"	f	typeref:typename:void
ecs_vec_init_if_t	./src/flecs.h	/^#define ecs_vec_init_if_t(/;"	d
ecs_vec_init_t	./src/flecs.h	/^#define ecs_vec_init_t(/;"	d
ecs_vec_last	./src/flecs.c	/^void* ecs_vec_last($/;"	f	typeref:typename:void *
ecs_vec_last_t	./src/flecs.h	/^#define ecs_vec_last_t(/;"	d
ecs_vec_reclaim	./src/flecs.c	/^void ecs_vec_reclaim($/;"	f	typeref:typename:void
ecs_vec_reclaim_t	./src/flecs.h	/^#define ecs_vec_reclaim_t(/;"	d
ecs_vec_remove	./src/flecs.c	/^void ecs_vec_remove($/;"	f	typeref:typename:void
ecs_vec_remove_last	./src/flecs.c	/^void ecs_vec_remove_last($/;"	f	typeref:typename:void
ecs_vec_remove_t	./src/flecs.h	/^#define ecs_vec_remove_t(/;"	d
ecs_vec_reset	./src/flecs.c	/^ecs_vec_t* ecs_vec_reset($/;"	f	typeref:typename:ecs_vec_t *
ecs_vec_reset_t	./src/flecs.h	/^#define ecs_vec_reset_t(/;"	d
ecs_vec_set_count	./src/flecs.c	/^void ecs_vec_set_count($/;"	f	typeref:typename:void
ecs_vec_set_count_t	./src/flecs.h	/^#define ecs_vec_set_count_t(/;"	d
ecs_vec_set_min_count	./src/flecs.c	/^void ecs_vec_set_min_count($/;"	f	typeref:typename:void
ecs_vec_set_min_count_t	./src/flecs.h	/^#define ecs_vec_set_min_count_t(/;"	d
ecs_vec_set_min_count_zeromem	./src/flecs.c	/^void ecs_vec_set_min_count_zeromem($/;"	f	typeref:typename:void
ecs_vec_set_min_count_zeromem_t	./src/flecs.h	/^#define ecs_vec_set_min_count_zeromem_t(/;"	d
ecs_vec_set_min_size	./src/flecs.c	/^void ecs_vec_set_min_size($/;"	f	typeref:typename:void
ecs_vec_set_min_size_t	./src/flecs.h	/^#define ecs_vec_set_min_size_t(/;"	d
ecs_vec_set_size	./src/flecs.c	/^void ecs_vec_set_size($/;"	f	typeref:typename:void
ecs_vec_set_size_t	./src/flecs.h	/^#define ecs_vec_set_size_t(/;"	d
ecs_vec_size	./src/flecs.c	/^int32_t ecs_vec_size($/;"	f	typeref:typename:int32_t
ecs_vec_t	./src/flecs.h	/^typedef struct ecs_vec_t {$/;"	s
ecs_vec_t	./src/flecs.h	/^} ecs_vec_t;$/;"	t	typeref:struct:ecs_vec_t
ecs_vector	./src/flecs.h	/^#define ecs_vector(/;"	d
ecs_vector_desc_t	./src/flecs.h	/^typedef struct ecs_vector_desc_t {$/;"	s
ecs_vector_desc_t	./src/flecs.h	/^} ecs_vector_desc_t;$/;"	t	typeref:struct:ecs_vector_desc_t
ecs_vector_init	./src/flecs.c	/^ecs_entity_t ecs_vector_init($/;"	f	typeref:typename:ecs_entity_t
ecs_warn	./src/flecs.h	/^#define ecs_warn(...) ecs_warn_/;"	d
ecs_warn_	./src/flecs.h	/^#define ecs_warn_(/;"	d
ecs_win_thread_t	./src/flecs.c	/^typedef struct ecs_win_thread_t {$/;"	s	file:
ecs_win_thread_t	./src/flecs.c	/^} ecs_win_thread_t;$/;"	t	typeref:struct:ecs_win_thread_t	file:
ecs_worker_iter	./src/flecs.c	/^ecs_iter_t ecs_worker_iter($/;"	f	typeref:typename:ecs_iter_t
ecs_worker_iter_t	./src/flecs.h	/^typedef struct ecs_worker_iter_t {$/;"	s
ecs_worker_iter_t	./src/flecs.h	/^} ecs_worker_iter_t;$/;"	t	typeref:struct:ecs_worker_iter_t
ecs_worker_next	./src/flecs.c	/^bool ecs_worker_next($/;"	f	typeref:typename:bool
ecs_worker_next_instanced	./src/flecs.c	/^bool ecs_worker_next_instanced($/;"	f	typeref:typename:bool	file:
ecs_world_allocators_t	./src/flecs.c	/^typedef struct ecs_world_allocators_t {$/;"	s	file:
ecs_world_allocators_t	./src/flecs.c	/^} ecs_world_allocators_t;$/;"	t	typeref:struct:ecs_world_allocators_t	file:
ecs_world_from_json	./src/flecs.c	/^const char* ecs_world_from_json($/;"	f	typeref:typename:const char *
ecs_world_from_json_file	./src/flecs.c	/^const char* ecs_world_from_json_file($/;"	f	typeref:typename:const char *
ecs_world_info_t	./src/flecs.h	/^typedef struct ecs_world_info_t {$/;"	s
ecs_world_info_t	./src/flecs.h	/^} ecs_world_info_t;$/;"	t	typeref:struct:ecs_world_info_t
ecs_world_stats_copy_last	./src/flecs.c	/^void ecs_world_stats_copy_last($/;"	f	typeref:typename:void
ecs_world_stats_get	./src/flecs.c	/^void ecs_world_stats_get($/;"	f	typeref:typename:void
ecs_world_stats_log	./src/flecs.c	/^void ecs_world_stats_log($/;"	f	typeref:typename:void
ecs_world_stats_reduce	./src/flecs.c	/^void ecs_world_stats_reduce($/;"	f	typeref:typename:void
ecs_world_stats_reduce_last	./src/flecs.c	/^void ecs_world_stats_reduce_last($/;"	f	typeref:typename:void
ecs_world_stats_repeat_last	./src/flecs.c	/^void ecs_world_stats_repeat_last($/;"	f	typeref:typename:void
ecs_world_stats_t	./src/flecs.h	/^typedef struct ecs_world_stats_t {$/;"	s
ecs_world_stats_t	./src/flecs.h	/^} ecs_world_stats_t;$/;"	t	typeref:struct:ecs_world_stats_t
ecs_world_t	./src/flecs.c	/^struct ecs_world_t {$/;"	s	file:
ecs_world_t	./src/flecs.h	/^typedef struct ecs_world_t ecs_world_t;$/;"	t	typeref:struct:ecs_world_t
ecs_world_t_magic	./src/flecs.h	/^#define ecs_world_t_magic /;"	d
ecs_world_t_mixins	./src/flecs.c	/^ecs_mixins_t ecs_world_t_mixins = {$/;"	v	typeref:typename:ecs_mixins_t
ecs_world_t_tag	./src/flecs.c	/^#define ecs_world_t_tag /;"	d	file:
ecs_world_to_json	./src/flecs.c	/^char* ecs_world_to_json($/;"	f	typeref:typename:char *
ecs_world_to_json_buf	./src/flecs.c	/^int ecs_world_to_json_buf($/;"	f	typeref:typename:int
ecs_world_to_json_desc_t	./src/flecs.h	/^typedef struct ecs_world_to_json_desc_t {$/;"	s
ecs_world_to_json_desc_t	./src/flecs.h	/^} ecs_world_to_json_desc_t;$/;"	t	typeref:struct:ecs_world_to_json_desc_t
ecs_write_begin	./src/flecs.c	/^ecs_record_t* ecs_write_begin($/;"	f	typeref:typename:ecs_record_t *
ecs_write_end	./src/flecs.c	/^void ecs_write_end($/;"	f	typeref:typename:void
ecs_write_flags_t	./src/flecs.c	/^typedef ecs_flags64_t ecs_write_flags_t;$/;"	t	typeref:typename:ecs_flags64_t	file:
ecs_write_kind_t	./src/flecs.c	/^typedef enum ecs_write_kind_t {$/;"	g	file:
ecs_write_kind_t	./src/flecs.c	/^} ecs_write_kind_t;$/;"	t	typeref:enum:ecs_write_kind_t	file:
ecs_write_state_t	./src/flecs.c	/^typedef struct ecs_write_state_t {$/;"	s	file:
ecs_write_state_t	./src/flecs.c	/^} ecs_write_state_t;$/;"	t	typeref:struct:ecs_write_state_t	file:
ecs_xtor_t	./src/flecs.h	/^typedef void (*ecs_xtor_t)($/;"	t	typeref:typename:void (*)(void * ptr,int32_t count,const ecs_type_info_t * type_info)
elapsed	./src/flecs.h	/^    ecs_ftime_t elapsed;$/;"	m	struct:__anon7d4a417c1808	typeref:typename:ecs_ftime_t
electric_current	./src/flecs.h	/^struct electric_current {$/;"	s	struct:flecs::units
elem	./src/flecs.h	/^    int elem(int32_t elem) {$/;"	f	struct:flecs::cursor	typeref:typename:int
elem_cur	./src/flecs.h	/^    int32_t elem_cur;         \/**< Current element (for collections) *\/$/;"	m	struct:ecs_meta_scope_t	typeref:typename:int32_t
elem_size	./src/flecs.c	/^    int32_t elem_size;$/;"	m	struct:sort_helper_t	typeref:typename:int32_t	file:
elem_size	./src/flecs.h	/^    ecs_size_t elem_size;$/;"	m	struct:ecs_vec_t	typeref:typename:ecs_size_t
element	./src/flecs.c	/^    int32_t element;    \/* First element for value *\/$/;"	m	struct:ecs_switch_header_t	typeref:typename:int32_t	file:
element_type	./vendor/fmt/include/ranges.h	/^  using element_type = detail::uncvref_type<map_type>;$/;"	t	struct:formatter	typeref:typename:detail::uncvref_type<map_type>
elems	./src/flecs.c	/^    ecs_size_t elems[EcsMixinMax];                        $/;"	m	struct:ecs_mixins_t	typeref:typename:ecs_size_t[]	file:
elems	./src/flecs.c	/^    ecs_vec_t elems;      \/* vector<ecs_trav_down_elem_t> *\/$/;"	m	struct:__anon7d4a41772708	typeref:typename:ecs_vec_t	file:
emhash7	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^namespace emhash7 {$/;"	n
emit	./src/flecs.h	/^    void emit() {$/;"	f	struct:flecs::event_builder_base	typeref:typename:void
emit	./src/flecs.h	/^inline void entity_view::emit(flecs::entity evt) {$/;"	f	class:flecs::entity_view	typeref:typename:void
emit	./src/flecs.h	/^void emit() {$/;"	f	struct:flecs::entity_view	typeref:typename:void
emit	./src/flecs.h	/^void emit(const Evt& payload) {$/;"	f	struct:flecs::entity_view	typeref:typename:void
emit	./src/flecs.h	/^void emit(flecs::entity_t evt) {$/;"	f	struct:flecs::entity_view	typeref:typename:void
emit_time	./src/flecs.h	/^        ecs_metric_t emit_time;            \/**< Time spent on notifying observers. *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1508	typeref:typename:ecs_metric_t
emit_time_total	./src/flecs.h	/^    ecs_ftime_t emit_time_total;      \/**< Total time spent notifying observers *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:ecs_ftime_t
emphasis	./vendor/fmt/include/color.h	/^enum class emphasis : uint8_t {$/;"	g	typeref:typename:uint8_t
emplace	./src/flecs.h	/^    Self& emplace(Args&&... args) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
emplace	./src/flecs.h	/^    void emplace(Args&&... args) const {$/;"	f	struct:flecs::world	typeref:typename:void
emplace	./src/flecs.h	/^inline void emplace(world_t *world, flecs::entity_t entity, flecs::id_t id, Args&&... args) {$/;"	f	namespace:flecs	typeref:typename:void
emplace	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    std::pair<iterator, bool> emplace(Args&&... args) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:std::pair<iterator,bool>
emplace	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto emplace(Args&&... args) -> std::pair<iterator, bool> {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:std::pair<iterator,bool>
emplace	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto emplace(K&& key) -> std::pair<iterator, bool> {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:std::pair<iterator,bool>
emplace	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    std::pair<iterator, bool> emplace(Args&&... args) noexcept$/;"	f	class:emhash7::HashMap	typeref:typename:std::pair<iterator,bool>
emplace	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    std::pair<iterator, bool> emplace(Key && key, Args &&... args)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:std::pair<iterator,bool>
emplace	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    std::pair<typename Table::iterator, bool> emplace()$/;"	f	class:ska::flat_hash_map	typeref:typename:std::pair<typename Table::iterator,bool>
emplace	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    std::pair<typename Table::iterator, bool> emplace(Args &&... args)$/;"	f	class:ska::flat_hash_set	typeref:typename:std::pair<typename Table::iterator,bool>
emplace	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    std::pair<typename Table::iterator, bool> emplace(const key_type & arg)$/;"	f	class:ska::flat_hash_set	typeref:typename:std::pair<typename Table::iterator,bool>
emplace	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    std::pair<typename Table::iterator, bool> emplace(const key_type && arg)$/;"	f	class:ska::flat_hash_set	typeref:typename:std::pair<typename Table::iterator,bool>
emplace	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    std::pair<typename Table::iterator, bool> emplace(key_type & arg)$/;"	f	class:ska::flat_hash_set	typeref:typename:std::pair<typename Table::iterator,bool>
emplace	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    std::pair<typename Table::iterator, bool> emplace(key_type && arg)$/;"	f	class:ska::flat_hash_set	typeref:typename:std::pair<typename Table::iterator,bool>
emplace	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    void emplace(int8_t distance, Args &&... args)$/;"	f	struct:ska::detailv3::sherwood_v3_entry	typeref:typename:void
emplace	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  std::pair<iterator, bool> emplace(Args&&... args) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:std::pair<iterator,bool>
emplace	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  std::pair<iterator, bool> emplace(Args&&... args) {$/;"	f	class:tsl::robin_map	typeref:typename:std::pair<iterator,bool>
emplace_arg	./vendor/fmt/include/args.h	/^  template <typename T> void emplace_arg(const T& arg) {$/;"	f	class:dynamic_format_arg_store	typeref:typename:void
emplace_arg	./vendor/fmt/include/args.h	/^  void emplace_arg(const detail::named_arg<char_type, T>& arg) {$/;"	f	class:dynamic_format_arg_store	typeref:typename:void
emplace_back	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto emplace_back(Args&&... args) -> reference {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:reference
emplace_first	./src/flecs.h	/^    Self& emplace_first(flecs::entity_t second, Args&&... args) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
emplace_hint	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    iterator emplace_hint(const_iterator position, Args&&... args) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:iterator
emplace_hint	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto emplace_hint(const_iterator \/*hint*\/, Args&&... args) -> iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:iterator
emplace_hint	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    iterator emplace_hint(const_iterator hint, Args&&... args)$/;"	f	class:emhash7::HashMap	typeref:typename:iterator
emplace_hint	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    iterator emplace_hint(const_iterator, Args &&... args)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:iterator
emplace_hint	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  iterator emplace_hint(const_iterator hint, Args&&... args) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:iterator
emplace_hint	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  iterator emplace_hint(const_iterator hint, Args&&... args) {$/;"	f	class:tsl::robin_map	typeref:typename:iterator
emplace_override	./src/flecs.h	/^    Self& emplace_override(Args&&... args) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
emplace_second	./src/flecs.h	/^    Self& emplace_second(flecs::entity_t first, Args&&... args) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
emplace_unique	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    size_type emplace_unique(Args&&... args) noexcept$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
empty	./src/components.h	/^struct TAG_Player{ int empty; } ;$/;"	m	struct:TAG_Player	typeref:typename:int
empty	./src/components.h	/^struct TAG_TurnActive{ int empty; } ;$/;"	m	struct:TAG_TurnActive	typeref:typename:int
empty	./src/components.h	/^struct TAG_TurnIdle{ int empty; } ;$/;"	m	struct:TAG_TurnIdle	typeref:typename:int
empty	./src/flecs.c	/^    bool empty;$/;"	m	struct:ecs_table_cache_hdr_t	typeref:typename:bool	file:
empty	./src/turnbasedsystem.h	/^typedef struct TAG_TCEnable { int empty; } TAG_TCEnable;$/;"	m	struct:TAG_TCEnable	typeref:typename:int
empty	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] auto empty() const noexcept -> bool {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:auto
empty	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] auto empty() const {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:auto
empty	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline bool empty() const { return _num_filled == 0; }$/;"	f	class:emhash7::HashMap	typeref:typename:bool
empty	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    bool empty() const$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:bool
empty	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  bool empty() const noexcept { return m_nb_elements == 0; }$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:bool
empty	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  bool empty() const noexcept {$/;"	f	class:tsl::detail_robin_hash::bucket_entry	typeref:typename:bool
empty	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  bool empty() const noexcept { return m_ht.empty(); }$/;"	f	class:tsl::robin_map	typeref:typename:bool
empty_count	./src/flecs.h	/^        ecs_metric_t empty_count;          \/**< Number of empty tables *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1108	typeref:typename:ecs_metric_t
empty_default_table	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static sherwood_v3_entry * empty_default_table()$/;"	f	struct:ska::detailv3::sherwood_v3_entry	typeref:typename:sherwood_v3_entry *
empty_table_count	./src/flecs.h	/^    int32_t empty_table_count;        \/**< Number of tables without entities *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int32_t
empty_tables	./src/flecs.c	/^    ecs_table_cache_list_t empty_tables;$/;"	m	struct:ecs_table_cache_t	typeref:typename:ecs_table_cache_list_t	file:
empty_tables	./src/flecs.h	/^    bool empty_tables;$/;"	m	struct:ecs_term_iter_t	typeref:typename:bool
ems	./vendor/fmt/include/color.h	/^  emphasis ems;$/;"	m	class:text_style	typeref:typename:emphasis
enable	./src/flecs.h	/^    Self& enable() {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
enable	./src/flecs.h	/^    Self& enable(flecs::id_t first, flecs::id_t second) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
enable	./src/flecs.h	/^    Self& enable(flecs::id_t id, bool toggle = true) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
enable	./src/flecs.h	/^    Self& enable(flecs::id_t second) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
enable	./src/turnbasedsystem.h	/^	int enable;$/;"	m	struct:TurnComponentData	typeref:typename:int
enable_colors	./src/flecs.h	/^inline void enable_colors(bool enabled = true) {$/;"	f	namespace:flecs::log	typeref:typename:void
enable_if_t	./src/flecs.h	/^using enable_if_t = typename std::enable_if<V, T>::type;$/;"	t	namespace:flecs	typeref:typename:std::enable_if<V,T>::type
enable_if_t	./vendor/fmt/include/base.h	/^using enable_if_t = typename std::enable_if<B, T>::type;$/;"	t	typeref:typename:std::enable_if<B,T>::type
enable_monitor	./src/flecs.h	/^    app_builder& enable_monitor(bool value = true) {$/;"	f	struct:flecs::app_builder	typeref:typename:app_builder &
enable_monitor	./src/flecs.h	/^    bool enable_monitor;      \/**< Periodically collect statistics *\/$/;"	m	struct:ecs_app_desc_t	typeref:typename:bool
enable_range_check	./src/flecs.h	/^    void enable_range_check(bool enabled) const {$/;"	f	struct:flecs::world	typeref:typename:void
enable_rest	./src/flecs.h	/^    app_builder& enable_rest(uint16_t port = 0) {$/;"	f	struct:flecs::app_builder	typeref:typename:app_builder &
enable_rest	./src/flecs.h	/^    bool enable_rest;         \/**< Enables ECS access over HTTP, necessary for explorer *\/$/;"	m	struct:ecs_app_desc_t	typeref:typename:bool
enable_timedelta	./src/flecs.h	/^inline void enable_timedelta(bool enabled = true) {$/;"	f	namespace:flecs::log	typeref:typename:void
enable_timestamp	./src/flecs.h	/^inline void enable_timestamp(bool enabled = true) {$/;"	f	namespace:flecs::log	typeref:typename:void
enabled	./src/flecs.h	/^    bool enabled() const {$/;"	f	struct:flecs::entity_view	typeref:typename:bool
enabled	./src/flecs.h	/^    bool enabled(flecs::id_t first, flecs::id_t second) const {$/;"	f	struct:flecs::entity_view	typeref:typename:bool
enabled	./src/flecs.h	/^    bool enabled(flecs::id_t id) const {$/;"	f	struct:flecs::entity_view	typeref:typename:bool
enabled	./src/flecs.h	/^    bool enabled(flecs::id_t second) const {$/;"	f	struct:flecs::entity_view	typeref:typename:bool
encode_types	./vendor/fmt/include/base.h	/^constexpr auto encode_types() -> unsigned long long {$/;"	f	namespace:detail	typeref:typename:unsigned long long
encode_types	./vendor/fmt/include/base.h	/^template <typename> constexpr auto encode_types() -> unsigned long long {$/;"	f	namespace:detail	typeref:typename:unsigned long long
end	./src/flecs.c	/^    int32_t end;$/;"	m	struct:__anon7d4a41772a08	typeref:typename:int32_t	file:
end	./src/flecs.h	/^    array_iterator<T> end() { return array_iterator<T>(nullptr, 0); }$/;"	f	struct:flecs::array	typeref:typename:array_iterator<T>
end	./src/flecs.h	/^    array_iterator<T> end() {$/;"	f	struct:flecs::array	typeref:typename:array_iterator<T>
end	./src/flecs.h	/^    flecs::id_t* end() const {$/;"	f	struct:flecs::type	typeref:typename:flecs::id_t *
end	./src/flecs.h	/^    row_iterator end() const {$/;"	f	struct:flecs::iter	typeref:typename:row_iterator
end	./vendor/STC/include/stc/algo/crange.h	/^typedef struct { crange_value *ref, end, step; } crange_iter;$/;"	m	struct:__anon74d0e1bc0208	typeref:typename:crange_value
end	./vendor/STC/include/stc/algo/crange.h	/^typedef struct { crange_value start, end, step, value; } crange;$/;"	m	struct:__anon74d0e1bc0108	typeref:typename:crange_value
end	./vendor/STC/include/stc/priv/cregex_prv.c	/^    _Rune *end;$/;"	m	struct:__anon4ce7005a0108	typeref:typename:_Rune *	file:
end	./vendor/STC/include/stc/types.h	/^    struct { csview chr; csview_value* end; } u8;$/;"	m	struct:__anon0ab7b7af010a::__anon0ab7b7af0208	typeref:typename:csview_value *
end	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    const_iterator end() const { \/\/ NOLINT(modernize-use-nodiscard)$/;"	f	class:robin_hood::detail::Table	typeref:typename:const_iterator
end	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    iterator end() {$/;"	f	class:robin_hood::detail::Table	typeref:typename:iterator
end	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] constexpr auto end() -> iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:iterator
end	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] constexpr auto end() const -> const_iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:const_iterator
end	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto end() const noexcept -> const_iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:auto
end	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto end() noexcept -> iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:auto
end	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline const_iterator end() const { return cend(); }$/;"	f	class:emhash7::HashMap	typeref:typename:const_iterator
end	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline iterator end() noexcept { return {this, _num_buckets}; }$/;"	f	class:emhash7::HashMap	typeref:typename:iterator
end	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    const_iterator end() const$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:const_iterator
end	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    iterator end()$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:iterator
end	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  const_iterator end() const noexcept { return cend(); }$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:const_iterator
end	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  iterator end() noexcept { return iterator(m_buckets + m_bucket_count); }$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:iterator
end	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  const_iterator end() const noexcept { return m_ht.end(); }$/;"	f	class:tsl::robin_map	typeref:typename:const_iterator
end	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  iterator end() noexcept { return m_ht.end(); }$/;"	f	class:tsl::robin_map	typeref:typename:iterator
end	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    iterator end()$/;"	f	class:picobench::state	typeref:typename:PICOBENCH_INLINE iterator
end	./vendor/fmt/include/base.h	/^  auto end() const noexcept -> const T* { return ptr_ + size_; }$/;"	f	class:detail::buffer	typeref:typename:auto
end	./vendor/fmt/include/base.h	/^  auto end() noexcept -> T* { return ptr_ + size_; }$/;"	f	class:detail::buffer	typeref:typename:auto
end	./vendor/fmt/include/base.h	/^  constexpr auto end() const noexcept -> iterator { return data_ + size_; }$/;"	f	class:basic_string_view	typeref:typename:auto
end	./vendor/fmt/include/base.h	/^  constexpr auto end() const noexcept -> iterator { return format_str_.end(); }$/;"	f	class:basic_format_parse_context	typeref:typename:auto
end	./vendor/fmt/include/chrono.h	/^  CodeUnit* end;$/;"	m	struct:detail::codecvt_result	typeref:typename:CodeUnit *
end	./vendor/fmt/include/color.h	/^  FMT_CONSTEXPR20 auto end() const noexcept -> const Char* {$/;"	f	struct:detail::ansi_color_escape	typeref:typename:FMT_CONSTEXPR20 auto
end	./vendor/fmt/include/compile.h	/^  size_t end;$/;"	m	struct:detail::parse_specs_result	typeref:typename:size_t
end	./vendor/fmt/include/format.h	/^  const Char* end;$/;"	m	struct:detail::find_escape_result	typeref:typename:const Char *
end	./vendor/fmt/include/ranges.h	/^  Sentinel end;$/;"	m	struct:join_view	typeref:typename:Sentinel
end	./vendor/fmt/include/ranges.h	/^  auto end() const -> typename Container::const_iterator { return c.end(); }$/;"	f	struct:detail::all	typeref:typename:Container::const_iterator
enqueue	./src/flecs.h	/^    void enqueue() {$/;"	f	struct:flecs::event_builder_base	typeref:typename:void
enqueue	./src/flecs.h	/^inline void entity_view::enqueue(flecs::entity evt) {$/;"	f	class:flecs::entity_view	typeref:typename:void
enqueue	./src/flecs.h	/^void enqueue() {$/;"	f	struct:flecs::entity_view	typeref:typename:void
enqueue	./src/flecs.h	/^void enqueue(const Evt& payload) {$/;"	f	struct:flecs::entity_view	typeref:typename:void
enqueue	./src/flecs.h	/^void enqueue(flecs::entity_t evt) {$/;"	f	struct:flecs::entity_view	typeref:typename:void
ensure	./src/flecs.c	/^void ensure($/;"	f	typeref:typename:void	file:
ensure	./src/flecs.h	/^    A& ensure() const {$/;"	f	struct:flecs::entity	typeref:typename:A &
ensure	./src/flecs.h	/^    First& ensure(entity_t second) const {$/;"	f	struct:flecs::entity	typeref:typename:First &
ensure	./src/flecs.h	/^    T& ensure() const {$/;"	f	struct:flecs::entity	typeref:typename:T &
ensure	./src/flecs.h	/^    void* ensure(entity_t comp) const {$/;"	f	struct:flecs::entity	typeref:typename:void *
ensure	./src/flecs.h	/^    void* ensure(entity_t first, entity_t second) const {$/;"	f	struct:flecs::entity	typeref:typename:void *
ensure	./src/flecs.h	/^inline T& world::ensure() const {$/;"	f	class:flecs::world	typeref:typename:T &
ensure_count	./src/flecs.h	/^        ecs_metric_t ensure_count;$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1308	typeref:typename:ecs_metric_t
ensure_count	./src/flecs.h	/^        int64_t ensure_count;          \/**< Ensure\/emplace commands processed *\/$/;"	m	struct:ecs_world_info_t::__anon7d4a417c0708	typeref:typename:int64_t
ensure_element	./src/flecs.h	/^    opaque& ensure_element(ElemType* (*func)(T *dst, size_t elem)) {$/;"	f	struct:flecs::opaque	typeref:typename:opaque &
ensure_element	./src/flecs.h	/^    void* (*ensure_element)($/;"	m	struct:EcsOpaque	typeref:typename:void * (*)(void * dst,size_t elem)
ensure_member	./src/flecs.h	/^    opaque& ensure_member(void* (*func)(T *dst, const char *member)) {$/;"	f	struct:flecs::opaque	typeref:typename:opaque &
ensure_member	./src/flecs.h	/^    void* (*ensure_member)($/;"	m	struct:EcsOpaque	typeref:typename:void * (*)(void * dst,const char * member)
ensure_ptrs	./src/flecs.h	/^    static bool ensure_ptrs(world_t *world, ecs_entity_t e, ArrayType& ptrs) {$/;"	f	struct:flecs::_::entity_with_delegate_impl	typeref:typename:bool
ensure_second	./src/flecs.h	/^    Second& ensure_second(entity_t first) const {$/;"	f	struct:flecs::entity	typeref:typename:Second &
ent_camera_create	./src/entities.c	/^void ent_camera_create($/;"	f	typeref:typename:void
ent_dog_create	./src/entities.c	/^void ent_dog_create($/;"	f	typeref:typename:void
ent_player_create	./src/entities.c	/^void ent_player_create($/;"	f	typeref:typename:void
entities	./src/flecs.c	/^    ecs_entity_t *entities;  $/;"	m	struct:ecs_cmd_n_t	typeref:typename:ecs_entity_t *	file:
entities	./src/flecs.c	/^    ecs_entity_t *entities;$/;"	m	struct:sort_helper_t	typeref:typename:ecs_entity_t *	file:
entities	./src/flecs.c	/^    ecs_vec_t entities;              \/* Entity ids *\/$/;"	m	struct:ecs_data_t	typeref:typename:ecs_vec_t	file:
entities	./src/flecs.c	/^    ecs_vec_t entities;$/;"	m	struct:__anon7d4a41772c08	typeref:typename:ecs_vec_t	file:
entities	./src/flecs.h	/^    ecs_entity_t *entities;       \/* Entity identifiers *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_entity_t *
entities	./src/flecs.h	/^    ecs_entity_t *entities; \/**< Entities to bulk insert. Entity ids provided by$/;"	m	struct:ecs_bulk_desc_t	typeref:typename:ecs_entity_t *
entities	./src/flecs.h	/^    flecs::field<const flecs::entity_t> entities() const {$/;"	f	struct:flecs::iter	typeref:typename:flecs::field<const flecs::entity_t>
entities	./src/flecs.h	/^    } entities;$/;"	m	struct:ecs_world_stats_t	typeref:struct:ecs_world_stats_t::__anon7d4a417c0f08
entity	./src/flecs.c	/^    ecs_entity_t entity;             \/* Entity id *\/$/;"	m	struct:ecs_cmd_t	typeref:typename:ecs_entity_t	file:
entity	./src/flecs.c	/^    ecs_entity_t entity;$/;"	m	struct:__anon7d4a41772b08	typeref:typename:ecs_entity_t	file:
entity	./src/flecs.c	/^    ecs_entity_t entity;$/;"	m	struct:ecs_system_t	typeref:typename:ecs_entity_t	file:
entity	./src/flecs.c	/^    ecs_entity_t entity;$/;"	m	union:__anon7d4a4177240a	typeref:typename:ecs_entity_t	file:
entity	./src/flecs.h	/^    Base& entity(flecs::entity_t e) {$/;"	f	struct:flecs::event_builder_base	typeref:typename:Base &
entity	./src/flecs.h	/^    Base& entity(flecs::entity_t entity) {$/;"	f	struct:flecs::term_id_builder_i	typeref:typename:Base &
entity	./src/flecs.h	/^    ecs_entity_t entity;       \/**< Entity associated with filter (optional) *\/$/;"	m	struct:ecs_filter_t	typeref:typename:ecs_entity_t
entity	./src/flecs.h	/^    ecs_entity_t entity;      \/* Set to customize entity handle associated with script *\/$/;"	m	struct:ecs_script_desc_t	typeref:typename:ecs_entity_t
entity	./src/flecs.h	/^    ecs_entity_t entity;     \/* Set when variable stores single entity *\/$/;"	m	struct:ecs_var_t	typeref:typename:ecs_entity_t
entity	./src/flecs.h	/^    ecs_entity_t entity;    \/* Entity *\/$/;"	m	struct:ecs_ref_t	typeref:typename:ecs_entity_t
entity	./src/flecs.h	/^    ecs_entity_t entity; \/**< Existing entity to use for type (optional) *\/$/;"	m	struct:ecs_array_desc_t	typeref:typename:ecs_entity_t
entity	./src/flecs.h	/^    ecs_entity_t entity; \/**< Existing entity to use for type (optional) *\/$/;"	m	struct:ecs_bitmask_desc_t	typeref:typename:ecs_entity_t
entity	./src/flecs.h	/^    ecs_entity_t entity; \/**< Existing entity to use for type (optional) *\/$/;"	m	struct:ecs_enum_desc_t	typeref:typename:ecs_entity_t
entity	./src/flecs.h	/^    ecs_entity_t entity; \/**< Existing entity to use for type (optional) *\/$/;"	m	struct:ecs_primitive_desc_t	typeref:typename:ecs_entity_t
entity	./src/flecs.h	/^    ecs_entity_t entity; \/**< Existing entity to use for type (optional) *\/$/;"	m	struct:ecs_struct_desc_t	typeref:typename:ecs_entity_t
entity	./src/flecs.h	/^    ecs_entity_t entity; \/**< Existing entity to use for type (optional) *\/$/;"	m	struct:ecs_vector_desc_t	typeref:typename:ecs_entity_t
entity	./src/flecs.h	/^    ecs_entity_t entity;$/;"	m	struct:EcsMetricSource	typeref:typename:ecs_entity_t
entity	./src/flecs.h	/^    ecs_entity_t entity;$/;"	m	struct:ecs_alert_desc_t	typeref:typename:ecs_entity_t
entity	./src/flecs.h	/^    ecs_entity_t entity;$/;"	m	struct:ecs_component_desc_t	typeref:typename:ecs_entity_t
entity	./src/flecs.h	/^    ecs_entity_t entity;$/;"	m	struct:ecs_event_desc_t	typeref:typename:ecs_entity_t
entity	./src/flecs.h	/^    ecs_entity_t entity;$/;"	m	struct:ecs_filter_desc_t	typeref:typename:ecs_entity_t
entity	./src/flecs.h	/^    ecs_entity_t entity;$/;"	m	struct:ecs_metric_desc_t	typeref:typename:ecs_entity_t
entity	./src/flecs.h	/^    ecs_entity_t entity;$/;"	m	struct:ecs_observer_desc_t	typeref:typename:ecs_entity_t
entity	./src/flecs.h	/^    ecs_entity_t entity;$/;"	m	struct:ecs_opaque_desc_t	typeref:typename:ecs_entity_t
entity	./src/flecs.h	/^    ecs_entity_t entity;$/;"	m	struct:ecs_pipeline_desc_t	typeref:typename:ecs_entity_t
entity	./src/flecs.h	/^    ecs_entity_t entity;$/;"	m	struct:ecs_system_desc_t	typeref:typename:ecs_entity_t
entity	./src/flecs.h	/^    ecs_entity_t entity;$/;"	m	struct:ecs_unit_desc_t	typeref:typename:ecs_entity_t
entity	./src/flecs.h	/^    ecs_entity_t entity;$/;"	m	struct:ecs_unit_prefix_desc_t	typeref:typename:ecs_entity_t
entity	./src/flecs.h	/^    entity() : entity_builder<entity>() { }$/;"	f	struct:flecs::entity
entity	./src/flecs.h	/^    explicit entity(const flecs::world_t *world, flecs::entity_t id) {$/;"	f	struct:flecs::entity
entity	./src/flecs.h	/^    explicit entity(entity_t id)$/;"	f	struct:flecs::entity
entity	./src/flecs.h	/^    explicit entity(world_t *world)$/;"	f	struct:flecs::entity
entity	./src/flecs.h	/^    explicit entity(world_t *world, const char *name)$/;"	f	struct:flecs::entity
entity	./src/flecs.h	/^    flecs::entity entity() const {$/;"	f	struct:flecs::query_base	typeref:typename:flecs::entity
entity	./src/flecs.h	/^    flecs::entity entity() {$/;"	f	struct:flecs::filter_base	typeref:typename:flecs::entity
entity	./src/flecs.h	/^    flecs::entity entity() {$/;"	f	struct:flecs::rule_base	typeref:typename:flecs::entity
entity	./src/flecs.h	/^    flecs::entity_t entity(E value) const {$/;"	f	struct:flecs::_::enum_type	typeref:typename:flecs::entity_t
entity	./src/flecs.h	/^flecs::entity ref<T>::entity() const {$/;"	f	class:flecs::ref	typeref:typename:flecs::entity
entity	./src/flecs.h	/^inline flecs::entity enum_data<E>::entity() const {$/;"	f	class:flecs::enum_data	typeref:typename:flecs::entity
entity	./src/flecs.h	/^inline flecs::entity enum_data<E>::entity(E value) const {$/;"	f	class:flecs::enum_data	typeref:typename:flecs::entity
entity	./src/flecs.h	/^inline flecs::entity enum_data<E>::entity(underlying_type_t<E> value) const {$/;"	f	class:flecs::enum_data	typeref:typename:flecs::entity
entity	./src/flecs.h	/^inline flecs::entity id::entity() const {$/;"	f	class:flecs::id	typeref:typename:flecs::entity
entity	./src/flecs.h	/^inline flecs::entity iter::entity(size_t row) const {$/;"	f	class:flecs::iter	typeref:typename:flecs::entity
entity	./src/flecs.h	/^inline flecs::entity world::entity(Args &&... args) const {$/;"	f	class:flecs::world	typeref:typename:flecs::entity
entity	./src/flecs.h	/^inline flecs::entity world::entity(E value) const {$/;"	f	class:flecs::world	typeref:typename:flecs::entity
entity	./src/flecs.h	/^inline flecs::entity world::entity(const char *name) const {$/;"	f	class:flecs::world	typeref:typename:flecs::entity
entity	./src/flecs.h	/^struct entity : entity_builder<entity>$/;"	s	namespace:flecs
entity	./src/grid.h	/^	ecs_entity_t entity;$/;"	m	struct:GridComponentData	typeref:typename:ecs_entity_t
entity_builder	./src/flecs.h	/^struct entity_builder : entity_view {$/;"	s	namespace:flecs
entity_filter	./src/flecs.c	/^    ecs_entity_filter_t *entity_filter; \/* Entity specific filters *\/$/;"	m	struct:ecs_query_table_match_t	typeref:typename:ecs_entity_filter_t *	file:
entity_filter	./src/flecs.c	/^    ecs_entity_filter_t *entity_filter;$/;"	m	struct:ecs_entity_filter_iter_t	typeref:typename:ecs_entity_filter_t *	file:
entity_id	./src/turnbasedsystem.h	/^    ecs_entity_t entity_id;$/;"	m	struct:TurnComponentData	typeref:typename:ecs_entity_t
entity_index	./src/flecs.c	/^    ecs_entity_index_t entity_index;$/;"	m	struct:ecs_snapshot_t	typeref:typename:ecs_entity_index_t	file:
entity_index	./src/flecs.c	/^    ecs_entity_index_t entity_index;$/;"	m	struct:ecs_store_t	typeref:typename:ecs_entity_index_t	file:
entity_iter	./src/flecs.h	/^    void *entity_iter;            \/* Filter applied after matching a table *\/$/;"	m	struct:ecs_iter_private_t	typeref:typename:void *
entity_observer_create	./src/flecs.h	/^    inline void entity_observer_create($/;"	f	namespace:flecs::_	typeref:typename:void
entity_observer_delegate	./src/flecs.h	/^    explicit entity_observer_delegate(Func&& func) noexcept $/;"	f	struct:flecs::_::entity_observer_delegate
entity_observer_delegate	./src/flecs.h	/^struct entity_observer_delegate : delegate {$/;"	s	namespace:flecs::_
entity_observer_factory	./src/flecs.h	/^    struct entity_observer_factory {$/;"	s	namespace:flecs::_
entity_observers	./src/flecs.c	/^    ecs_map_t entity_observers;      \/* map<trigger_id, trigger_t> *\/$/;"	m	struct:ecs_event_id_record_t	typeref:typename:ecs_map_t	file:
entity_payload_observer_delegate	./src/flecs.h	/^    explicit entity_payload_observer_delegate(Func&& func) noexcept $/;"	f	struct:flecs::_::entity_payload_observer_delegate
entity_payload_observer_delegate	./src/flecs.h	/^struct entity_payload_observer_delegate : delegate {$/;"	s	namespace:flecs::_
entity_t	./src/flecs.h	/^using entity_t = ecs_entity_t;$/;"	t	namespace:flecs	typeref:typename:ecs_entity_t
entity_to_depth	./src/flecs.c	/^    ecs_map_t entity_to_depth; \/* What it says *\/$/;"	m	struct:ecs_store_t	typeref:typename:ecs_map_t	file:
entity_to_json_desc_t	./src/flecs.h	/^using entity_to_json_desc_t = ecs_entity_to_json_desc_t;$/;"	t	namespace:flecs	typeref:typename:ecs_entity_to_json_desc_t
entity_view	./src/flecs.h	/^    entity_view() : flecs::id() { }$/;"	f	struct:flecs::entity_view
entity_view	./src/flecs.h	/^    entity_view(entity_t id) $/;"	f	struct:flecs::entity_view
entity_view	./src/flecs.h	/^    explicit entity_view(flecs::world_t *world, flecs::id_t id)$/;"	f	struct:flecs::entity_view
entity_view	./src/flecs.h	/^struct entity_view : public id {$/;"	s	namespace:flecs
entity_with_delegate	./src/flecs.h	/^struct entity_with_delegate {$/;"	s	namespace:flecs::_
entity_with_delegate	./src/flecs.h	/^struct entity_with_delegate<Func, if_t< is_callable<Func>::value > >$/;"	s	namespace:flecs::_
entity_with_delegate_impl	./src/flecs.h	/^struct entity_with_delegate_impl<arg_list<Args ...>> {$/;"	s	namespace:flecs::_
entries	./src/flecs.c	/^    ecs_sparse_t entries;       \/* <entity, op_entry_t> - command batching *\/$/;"	m	struct:ecs_commands_t	typeref:typename:ecs_sparse_t	file:
entries	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    EntryPointer entries = Entry::empty_default_table();$/;"	m	class:ska::detailv3::sherwood_v3_table	typeref:typename:EntryPointer
entry	./src/flecs.c	/^    ecs_cmd_entry_t *entry;$/;"	m	struct:ecs_cmd_t	typeref:typename:ecs_cmd_entry_t *	file:
entry	./src/flecs.h	/^    ecs_bucket_entry_t *entry;$/;"	m	struct:ecs_map_iter_t	typeref:typename:ecs_bucket_entry_t *
entry	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    entry(First&& key, Second&& val, size_type ibucket)$/;"	f	struct:emhash7::entry
entry	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    entry(K&& key, V&& val, size_type ibucket)$/;"	f	struct:emhash7::entry
entry	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    entry(const First& key, const Second& val, size_type ibucket)$/;"	f	struct:emhash7::entry
entry	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    entry(const entry& rhs)$/;"	f	struct:emhash7::entry
entry	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    entry(const std::pair<First, Second>& pair)$/;"	f	struct:emhash7::entry
entry	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    entry(entry&& rhs) noexcept$/;"	f	struct:emhash7::entry
entry	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    entry(std::pair<First, Second>&& pair)$/;"	f	struct:emhash7::entry
entry	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    entry(std::tuple<First, Second>&& tup)$/;"	f	struct:emhash7::entry
entry	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^struct entry {$/;"	s	namespace:emhash7
entry_allocator	./src/flecs.h	/^    struct ecs_block_allocator_t *entry_allocator;$/;"	m	struct:ecs_map_t	typeref:struct:ecs_block_allocator_t *
entry_allocator	./src/flecs.h	/^    struct ecs_block_allocator_t entry_allocator;$/;"	m	struct:ecs_map_params_t	typeref:struct:ecs_block_allocator_t
enum_constant_data	./src/flecs.h	/^struct enum_constant_data {$/;"	s	namespace:flecs::_
enum_constant_is_valid	./src/flecs.h	/^constexpr bool enum_constant_is_valid() {$/;"	f	namespace:flecs::_	typeref:typename:bool
enum_constant_t	./src/flecs.h	/^using enum_constant_t = ecs_enum_constant_t;$/;"	t	namespace:flecs	typeref:typename:ecs_enum_constant_t
enum_constant_to_name	./src/flecs.h	/^static const char* enum_constant_to_name() {$/;"	f	namespace:flecs::_	typeref:typename:const char *
enum_data	./src/flecs.h	/^    enum_data(flecs::world_t *world, _::enum_data_impl<E>& impl)$/;"	f	struct:flecs::enum_data
enum_data	./src/flecs.h	/^struct enum_data {$/;"	s	namespace:flecs
enum_data_impl	./src/flecs.h	/^struct enum_data_impl {$/;"	s	namespace:flecs::_
enum_is_valid	./src/flecs.h	/^struct enum_is_valid {$/;"	s	namespace:flecs::_
enum_last	./src/flecs.h	/^struct enum_last {$/;"	s	namespace:flecs
enum_reflection	./src/flecs.h	/^struct enum_reflection {$/;"	s	namespace:flecs::_
enum_type	./src/flecs.h	/^enum_data<E> enum_type(flecs::world_t *world) {$/;"	f	namespace:flecs	typeref:typename:enum_data<E>
enum_type	./src/flecs.h	/^struct enum_type {$/;"	s	namespace:flecs::_
enum_type_len	./src/flecs.h	/^constexpr size_t enum_type_len() {$/;"	f	namespace:flecs::_	typeref:typename:size_t
enums	./vendor/fmt/include/format.h	/^namespace enums {$/;"	n
eol	./vendor/STC/include/stc/priv/cregex_prv.c	/^    const char* eol;$/;"	m	struct:_Reljunk	typeref:typename:const char *	file:
eq	./src/flecs.c	/^        ecs_rule_eq_ctx_t eq;$/;"	m	union:ecs_rule_op_ctx_t::__anon7d4a4177340a	typeref:typename:ecs_rule_eq_ctx_t	file:
equal2	./vendor/fmt/include/format.h	/^inline auto equal2(const char* lhs, const char* rhs) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
equal2	./vendor/fmt/include/format.h	/^template <typename Char> auto equal2(const Char* lhs, const char* rhs) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
equal_range	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto equal_range(K const& key) -> std::pair<iterator, iterator> {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:std::pair<iterator,iterator>
equal_range	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto equal_range(K const& key) const -> std::pair<const_iterator, const_iterator> {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:std::pair<const_iterator,const_iterator>
equal_range	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto equal_range(Key const& key) -> std::pair<iterator, iterator> {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:std::pair<iterator,iterator>
equal_range	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto equal_range(const Key& key) const -> std::pair<const_iterator, const_iterator> {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:std::pair<const_iterator,const_iterator>
equal_range	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    std::pair<const_iterator, const_iterator> equal_range(const K& key) const$/;"	f	class:emhash7::HashMap	typeref:typename:std::pair<const_iterator,const_iterator>
equal_range	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    std::pair<iterator, iterator> equal_range(const Key& key) const noexcept$/;"	f	class:emhash7::HashMap	typeref:typename:std::pair<iterator,iterator>
equal_range	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    std::pair<const_iterator, const_iterator> equal_range(const FindKey & key) const$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:std::pair<const_iterator,const_iterator>
equal_range	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    std::pair<iterator, iterator> equal_range(const FindKey & key)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:std::pair<iterator,iterator>
equal_range	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  std::pair<const_iterator, const_iterator> equal_range($/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:std::pair<const_iterator,const_iterator>
equal_range	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  std::pair<const_iterator, const_iterator> equal_range(const K& key) const {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:std::pair<const_iterator,const_iterator>
equal_range	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  std::pair<iterator, iterator> equal_range(const K& key) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:std::pair<iterator,iterator>
equal_range	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  std::pair<iterator, iterator> equal_range(const K& key, std::size_t hash) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:std::pair<iterator,iterator>
equal_range	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  std::pair<const_iterator, const_iterator> equal_range($/;"	f	class:tsl::robin_map	typeref:typename:std::pair<const_iterator,const_iterator>
equal_range	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  std::pair<const_iterator, const_iterator> equal_range(const K& key) const {$/;"	f	class:tsl::robin_map	typeref:typename:std::pair<const_iterator,const_iterator>
equal_range	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  std::pair<const_iterator, const_iterator> equal_range(const Key& key) const {$/;"	f	class:tsl::robin_map	typeref:typename:std::pair<const_iterator,const_iterator>
equal_range	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  std::pair<iterator, iterator> equal_range(const K& key) {$/;"	f	class:tsl::robin_map	typeref:typename:std::pair<iterator,iterator>
equal_range	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  std::pair<iterator, iterator> equal_range(const K& key,$/;"	f	class:tsl::robin_map	typeref:typename:std::pair<iterator,iterator>
equal_range	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  std::pair<iterator, iterator> equal_range(const Key& key) {$/;"	f	class:tsl::robin_map	typeref:typename:std::pair<iterator,iterator>
equal_range	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  std::pair<iterator, iterator> equal_range(const Key& key,$/;"	f	class:tsl::robin_map	typeref:typename:std::pair<iterator,iterator>
equality_storage	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    typedef functor_storage<bool, key_equal> equality_storage;$/;"	t	struct:ska::detailv3::KeyOrValueEquality	typeref:typename:functor_storage<bool,key_equal>
erase	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    iterator erase(const_iterator pos) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:iterator
erase	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    iterator erase(iterator pos) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:iterator
erase	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    size_t erase(const key_type& key) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:size_t
erase	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto erase(K&& key) -> size_t {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:size_t
erase	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto erase(Key const& key) -> size_t {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:size_t
erase	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto erase(const_iterator first, const_iterator last) -> iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:iterator
erase	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto erase(const_iterator it) -> iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:iterator
erase	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto erase(iterator it) -> iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:iterator
erase	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    iterator erase(const_iterator cit)$/;"	f	class:emhash7::HashMap	typeref:typename:iterator
erase	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    iterator erase(iterator it)$/;"	f	class:emhash7::HashMap	typeref:typename:iterator
erase	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    size_type erase(const Key& key)$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
erase	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    convertible_to_iterator erase(const_iterator to_erase)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:convertible_to_iterator
erase	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    iterator erase(const_iterator begin_it, const_iterator end_it)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:iterator
erase	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    size_t erase(const FindKey & key)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:size_t
erase	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  iterator erase(const_iterator first, const_iterator last) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:iterator
erase	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  iterator erase(const_iterator pos) { return erase(mutable_iterator(pos)); }$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:iterator
erase	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  iterator erase(iterator pos) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:iterator
erase	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  size_type erase(const K& key) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:size_type
erase	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  size_type erase(const K& key, std::size_t hash) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:size_type
erase	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  iterator erase(const_iterator first, const_iterator last) {$/;"	f	class:tsl::robin_map	typeref:typename:iterator
erase	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  iterator erase(const_iterator pos) { return m_ht.erase(pos); }$/;"	f	class:tsl::robin_map	typeref:typename:iterator
erase	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  iterator erase(iterator pos) { return m_ht.erase(pos); }$/;"	f	class:tsl::robin_map	typeref:typename:iterator
erase	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  size_type erase(const K& key) {$/;"	f	class:tsl::robin_map	typeref:typename:size_type
erase	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  size_type erase(const K& key, std::size_t precalculated_hash) {$/;"	f	class:tsl::robin_map	typeref:typename:size_type
erase	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  size_type erase(const key_type& key) { return m_ht.erase(key); }$/;"	f	class:tsl::robin_map	typeref:typename:size_type
erase	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  size_type erase(const key_type& key, std::size_t precalculated_hash) {$/;"	f	class:tsl::robin_map	typeref:typename:size_type
erase_bucket	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    size_type erase_bucket(const size_type bucket)$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
erase_from_bucket	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  void erase_from_bucket(iterator pos) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:void
erase_if	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^auto erase_if(ankerl::unordered_dense::detail::table<Key, T, Hash, KeyEqual, AllocatorOrContaine/;"	f	namespace:std	typeref:typename:size_t
erase_if	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    size_type erase_if(Pred pred)$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
erase_key	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    size_type erase_key(const UType& key)$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
err	./src/flecs.h	/^inline void err(const char *fmt, ...) {$/;"	f	namespace:flecs::log	typeref:typename:void
error	./src/flecs.h	/^    ecs_member_value_range_t error;$/;"	m	struct:EcsMemberRanges	typeref:typename:ecs_member_value_range_t
error	./vendor/STC/include/stc/cregex.h	/^    int error;$/;"	m	struct:__anon7cecd9d80308	typeref:typename:int
error	./vendor/STC/include/stc/priv/cregex_prv.c	/^    int error;$/;"	m	struct:_Parser	typeref:typename:int	file:
error	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    error_t error = no_error;$/;"	m	class:picobench::report	typeref:typename:error_t
error	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    error_t error() const { return _error; }$/;"	f	class:picobench::runner	typeref:typename:error_t
error_bad_cmd_line_argument	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    error_bad_cmd_line_argument, \/\/ ill-formed command-line argument$/;"	e	enum:picobench::error_t
error_benchmark_compare	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    error_benchmark_compare, \/\/ two benchmarks of the same suite and dimension produced differ/;"	e	enum:picobench::error_t
error_count	./src/flecs.h	/^    int32_t error_count;$/;"	m	struct:EcsAlertsActive	typeref:typename:int32_t
error_range	./src/flecs.h	/^    ecs_member_value_range_t error_range;$/;"	m	struct:ecs_member_t	typeref:typename:ecs_member_value_range_t
error_range	./src/flecs.h	/^untyped_component& error_range(double min, double max) {$/;"	f	struct:flecs::untyped_component	typeref:typename:untyped_component &
error_sample_compare	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    error_sample_compare, \/\/ benchmark produced different results across samples$/;"	e	enum:picobench::error_t
error_str	./src/flecs.c	/^static char error_str[255];$/;"	v	typeref:typename:char[255]	file:
error_t	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^enum error_t$/;"	g	namespace:picobench
error_unknown_cmd_line_argument	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    error_unknown_cmd_line_argument, \/\/ command argument looks like a picobench one, but isn't$/;"	e	enum:picobench::error_t
errors	./src/flecs.c	/^    int32_t errors;$/;"	m	struct:__anon7d4a41771908	typeref:typename:int32_t	file:
eval_count	./src/flecs.h	/^    ecs_metric_t eval_count;                \/**< Number of times query is evaluated *\/$/;"	m	struct:ecs_query_stats_t	typeref:typename:ecs_metric_t
eval_count	./src/flecs.h	/^    int32_t eval_count;        \/**< Number of times query is evaluated *\/$/;"	m	struct:ecs_filter_t	typeref:typename:int32_t
evar_index	./src/flecs.c	/^    ecs_hashmap_t evar_index;     \/* Name index for entity variables *\/$/;"	m	struct:ecs_rule_t	typeref:typename:ecs_hashmap_t	file:
event	./src/flecs.c	/^    ecs_entity_t event;$/;"	m	struct:ecs_table_event_t	typeref:typename:ecs_entity_t	file:
event	./src/flecs.h	/^    Base& event() {$/;"	f	struct:flecs::observer_builder_i	typeref:typename:Base &
event	./src/flecs.h	/^    Base& event(entity_t evt) {$/;"	f	struct:flecs::observer_builder_i	typeref:typename:Base &
event	./src/flecs.h	/^    ecs_entity_t event;           \/* The event (if applicable) *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_entity_t
event	./src/flecs.h	/^    ecs_entity_t event;$/;"	m	struct:ecs_event_desc_t	typeref:typename:ecs_entity_t
event	./src/flecs.h	/^    ecs_entity_t event;$/;"	m	struct:ecs_event_record_t	typeref:typename:ecs_entity_t
event	./src/flecs.h	/^inline flecs::entity iter::event() const {$/;"	f	class:flecs::iter	typeref:typename:flecs::entity
event	./src/flecs.h	/^inline flecs::event_builder world::event(flecs::entity_t evt) const {$/;"	f	class:flecs::world	typeref:typename:flecs::event_builder
event	./src/flecs.h	/^inline flecs::event_builder_typed<E> world::event() const {$/;"	f	class:flecs::world	typeref:typename:flecs::event_builder_typed<E>
event_builder	./src/flecs.h	/^struct event_builder : event_builder_base<event_builder, void> {$/;"	s	namespace:flecs
event_builder_base	./src/flecs.h	/^    event_builder_base(flecs::world_t *world, flecs::entity_t event)$/;"	f	struct:flecs::event_builder_base
event_builder_base	./src/flecs.h	/^struct event_builder_base {$/;"	s	namespace:flecs
event_builder_typed	./src/flecs.h	/^struct event_builder_typed : event_builder_base<event_builder_typed<E>, E> {$/;"	s	namespace:flecs
event_count	./src/flecs.h	/^        int64_t event_count;           \/**< Enqueued custom events *\/$/;"	m	struct:ecs_world_info_t::__anon7d4a417c0708	typeref:typename:int64_t
event_count	./src/flecs.h	/^    int32_t event_count;$/;"	m	struct:ecs_observer_t	typeref:typename:int32_t
event_cur	./src/flecs.h	/^    int32_t event_cur;            \/* Unique event id. Used to dedup observer calls *\/$/;"	m	struct:ecs_iter_t	typeref:typename:int32_t
event_emit_count	./src/flecs.h	/^        ecs_metric_t event_emit_count;     \/**< Number of events emitted *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1408	typeref:typename:ecs_metric_t
event_from_func	./src/flecs.h	/^struct event_from_func<Func, if_t< arity<Func>::value == 1>> {$/;"	s	namespace:flecs::_
event_from_func	./src/flecs.h	/^struct event_from_func<Func, if_t< arity<Func>::value == 2>> {$/;"	s	namespace:flecs::_
event_from_func_t	./src/flecs.h	/^using event_from_func_t = typename event_from_func<Func>::type;$/;"	t	namespace:flecs::_	typeref:typename:event_from_func<Func>::type
event_id	./src/flecs.c	/^    int32_t event_id;$/;"	m	struct:ecs_world_t	typeref:typename:int32_t	file:
event_id	./src/flecs.h	/^    ecs_id_t event_id;            \/* The (component) id for the event *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_id_t
event_id	./src/flecs.h	/^inline flecs::id iter::event_id() const {$/;"	f	class:flecs::iter	typeref:typename:flecs::id
event_ids	./src/flecs.h	/^    ecs_map_t event_ids; \/* map<id, ecs_event_id_record_t> *\/$/;"	m	struct:ecs_event_record_t	typeref:typename:ecs_map_t
events	./src/flecs.h	/^    ecs_entity_t events[FLECS_EVENT_DESC_MAX];$/;"	m	struct:ecs_observer_desc_t	typeref:typename:ecs_entity_t[]
events	./src/flecs.h	/^    ecs_entity_t events[FLECS_EVENT_DESC_MAX];$/;"	m	struct:ecs_observer_t	typeref:typename:ecs_entity_t[]
events	./src/flecs.h	/^    ecs_sparse_t events;  \/* sparse<event, ecs_event_record_t> *\/$/;"	m	struct:ecs_observable_t	typeref:typename:ecs_sparse_t
events	./vendor/raylib5/include/raylib.h	/^    AutomationEvent *events;        \/\/ Events entries$/;"	m	struct:AutomationEventList	typeref:typename:AutomationEvent *
example3	./vendor/STC/misc/examples/smartpointers/music_arc.c	/^void example3(void)$/;"	f	typeref:typename:void
existing	./src/flecs.h	/^    bool existing;         \/**< Did the type exist or is it populated from reflection *\/$/;"	m	struct:EcsMetaType	typeref:typename:bool
exists	./src/flecs.h	/^    bool exists(flecs::entity_t e) const {$/;"	f	struct:flecs::world	typeref:typename:bool
exp	./vendor/fmt/include/base.h	/^  exp = 1,  \/\/ 'e' or 'E' (1 since there is no FP debug presentation)$/;"	e	enum:presentation_type
exp	./vendor/fmt/include/format.h	/^  exp,      \/\/ Exponent notation with the default precision of 6, e.g. 1.2e-3.$/;"	e	enum:detail::float_format
exp_	./vendor/fmt/include/format.h	/^  int exp_;$/;"	m	class:detail::bigint	typeref:typename:int
expire_time	./src/flecs.c	/^    ecs_ftime_t expire_time;   \/* Expiration duration *\/$/;"	m	struct:EcsAlertTimeout	typeref:typename:ecs_ftime_t	file:
exponent	./vendor/fmt/include/format.h	/^  int exponent;$/;"	m	struct:detail::big_decimal_fp	typeref:typename:int
exponent	./vendor/fmt/include/format.h	/^  int exponent;$/;"	m	struct:detail::dragonbox::decimal_fp	typeref:typename:int
exponent_bias	./vendor/fmt/include/format.h	/^template <typename Float> constexpr auto exponent_bias() -> int {$/;"	f	namespace:detail	typeref:typename:int
exponent_bits	./vendor/fmt/include/format.h	/^  static const int exponent_bits = 11;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
exponent_bits	./vendor/fmt/include/format.h	/^  static const int exponent_bits = 15;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
exponent_bits	./vendor/fmt/include/format.h	/^  static const int exponent_bits = 8;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
exponent_mask	./vendor/fmt/include/format.h	/^constexpr auto exponent_mask() ->$/;"	f	namespace:detail	typeref:typename:dragonbox::float_info<Float>::carrier_uint
expr	./src/flecs.h	/^    Base& expr(const char *expr) {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
expr	./src/flecs.h	/^    const char *expr; \/**< Full expression (used for logging) *\/$/;"	m	struct:ecs_from_json_desc_t	typeref:typename:const char *
expr	./src/flecs.h	/^    const char *expr;$/;"	m	struct:ecs_filter_desc_t	typeref:typename:const char *
expr	./src/flecs.h	/^    const char *expr;$/;"	m	struct:ecs_parse_expr_desc_t	typeref:typename:const char *
expr_ser_array	./src/flecs.c	/^int expr_ser_array($/;"	f	typeref:typename:int	file:
expr_ser_elements	./src/flecs.c	/^int expr_ser_elements($/;"	f	typeref:typename:int	file:
expr_ser_type_elements	./src/flecs.c	/^int expr_ser_type_elements($/;"	f	typeref:typename:int	file:
expr_ser_vector	./src/flecs.c	/^int expr_ser_vector($/;"	f	typeref:typename:int	file:
exprp	./vendor/STC/include/stc/priv/cregex_prv.c	/^    const char* exprp;   \/* pointer to next character in source expression *\/$/;"	m	struct:_Parser	typeref:typename:const char *	file:
ext_handler	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    typedef bool(*ext_handler)(udata_t user_data, const char* cmd_line); \/\/ external (user) ha/;"	t	class:picobench::runner	typeref:typename:bool (*)(udata_t user_data,const char * cmd_line)
extra_paths	./vendor/STC/src/singleheader.py	/^extra_paths = [path_join(top_dir, 'include'), path_join(top_dir, '..', 'include')]$/;"	v
extract	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto extract() && -> value_container_type {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:auto
eyeToScreenDistance	./vendor/raylib5/include/raylib.h	/^    float eyeToScreenDistance;      \/\/ Distance between eye and display in meters$/;"	m	struct:VrDeviceInfo	typeref:typename:float
f	./vendor/STC/include/stc/crand.h	/^    union {uint64_t i; double f;} u = {0x3FF0000000000000U | (crand_u64(rng) >> 12)};$/;"	m	union:crand_f64::__anondcbad282010a	typeref:typename:double
f	./vendor/fmt/include/format.h	/^  F f;$/;"	m	struct:detail::basic_fp	typeref:typename:F
f32_t	./src/flecs.h	/^using f32_t = ecs_f32_t;$/;"	t	namespace:flecs	typeref:typename:ecs_f32_t
f64_t	./src/flecs.h	/^using f64_t = ecs_f64_t;$/;"	t	namespace:flecs	typeref:typename:ecs_f64_t
f_isEven	./vendor/STC/misc/examples/algorithms/filterdemos.c	/^#define f_isEven(/;"	d	file:
f_isOdd	./vendor/STC/misc/examples/algorithms/forloops.c	/^    #define f_isOdd(/;"	d	file:
f_skipValue	./vendor/STC/misc/examples/algorithms/filterdemos.c	/^#define f_skipValue(/;"	d	file:
f_square	./vendor/STC/misc/examples/algorithms/filterdemos.c	/^#define f_square(/;"	d	file:
fac	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	m	struct:__anonfac950030208	typeref:typename:float	file:
fac	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	m	struct:__anonca721fef0208	typeref:typename:float	file:
fac	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	m	struct:__anona03d81450208	typeref:typename:float	file:
fac	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	m	struct:__anon0565975a0208	typeref:typename:float	file:
fac	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	m	struct:__anon603333870208	typeref:typename:float	file:
factor	./src/flecs.h	/^    int32_t factor; \/**< Factor to apply (e.g. "1000", "1000000", "1024") *\/$/;"	m	struct:ecs_unit_translation_t	typeref:typename:int32_t
faint	./vendor/fmt/include/color.h	/^  faint = 1 << 1,$/;"	e	enum:emphasis
fake_time	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^static struct fake_time$/;"	s	namespace:picobench
fallback	./vendor/fmt/include/chrono.h	/^    auto fallback(detail::null<>) -> bool {$/;"	f	struct:gmtime::dispatcher	typeref:typename:bool
fallback	./vendor/fmt/include/chrono.h	/^    auto fallback(detail::null<>) -> bool {$/;"	f	struct:localtime::dispatcher	typeref:typename:bool
fallback	./vendor/fmt/include/chrono.h	/^    auto fallback(int res) -> bool { return res == 0; }$/;"	f	struct:gmtime::dispatcher	typeref:typename:bool
fallback	./vendor/fmt/include/chrono.h	/^    auto fallback(int res) -> bool { return res == 0; }$/;"	f	struct:localtime::dispatcher	typeref:typename:bool
fallback_digit_grouping	./vendor/fmt/include/format.h	/^  constexpr fallback_digit_grouping(locale_ref, bool) {}$/;"	f	class:detail::fallback_digit_grouping
fallback_digit_grouping	./vendor/fmt/include/format.h	/^template <typename Char> class fallback_digit_grouping {$/;"	c	namespace:detail
fallback_file	./vendor/fmt/include/format-inl.h	/^template <typename F> class fallback_file : public file_base<F> {$/;"	c	namespace:detail
false	./src/flecs.h	/^#define false /;"	d
fastForward	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        void fastForward() noexcept {$/;"	f	class:robin_hood::detail::Table::Iter	typeref:typename:void
fast_forward_tag	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    struct fast_forward_tag {};$/;"	s	class:robin_hood::detail::Table
fastrange_2	./vendor/STC/include/stc/hmap.h	/^#define fastrange_2(/;"	d
fd_	./vendor/fmt/include/os.h	/^  int fd_;  \/\/ File descriptor.$/;"	m	class:file	typeref:typename:int
fg	./vendor/fmt/include/color.h	/^FMT_CONSTEXPR inline auto fg(detail::color_type foreground) noexcept$/;"	f	typeref:typename:FMT_CONSTEXPR auto
fib	./vendor/STC/misc/examples/coroutines/coroutines.c	/^    struct fibonacci fib;$/;"	m	struct:combined	typeref:struct:fibonacci	file:
fibonacci	./vendor/STC/misc/examples/coroutines/coroutines.c	/^int fibonacci(struct fibonacci* g) {$/;"	f	typeref:typename:int
fibonacci	./vendor/STC/misc/examples/coroutines/coroutines.c	/^struct fibonacci {$/;"	s	file:
fibonacci_hash_policy	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^struct fibonacci_hash_policy$/;"	s	namespace:ska
field	./src/flecs.h	/^    field(T* array, size_t count, bool is_shared = false)$/;"	f	struct:flecs::field
field	./src/flecs.h	/^    flecs::untyped_field field(int32_t index) const {$/;"	f	struct:flecs::iter	typeref:typename:flecs::untyped_field
field	./src/flecs.h	/^inline field<T>::field(iter &iter, int32_t index) {$/;"	f	class:flecs::field
field	./src/flecs.h	/^inline flecs::field<A> iter::field(int32_t index) const {$/;"	f	class:flecs::iter	typeref:typename:flecs::field<A>
field	./src/flecs.h	/^struct field {$/;"	s	namespace:flecs
field	./vendor/fmt/include/compile.h	/^template <typename Char, typename T, int N> struct field {$/;"	s	namespace:detail
field_at	./src/flecs.h	/^    A& field_at(int32_t index, size_t row) const {$/;"	f	struct:flecs::iter	typeref:typename:A &
field_at	./src/flecs.h	/^    const A& field_at(int32_t index, size_t row) const {$/;"	f	struct:flecs::iter	typeref:typename:const A &
field_at	./src/flecs.h	/^    void* field_at(int32_t index, size_t row) const {$/;"	f	struct:flecs::iter	typeref:typename:void *
field_count	./src/flecs.h	/^    int32_t field_count() const {$/;"	f	struct:flecs::iter	typeref:typename:int32_t
field_count	./src/flecs.h	/^    int32_t field_count() const {$/;"	f	struct:flecs::query_base	typeref:typename:int32_t
field_count	./src/flecs.h	/^    int32_t field_count() {$/;"	f	struct:flecs::filter_base	typeref:typename:int32_t
field_count	./src/flecs.h	/^    int32_t field_count;          \/* Number of fields in iterator *\/$/;"	m	struct:ecs_iter_t	typeref:typename:int32_t
field_count	./src/flecs.h	/^    int8_t field_count;       \/**< Number of fields in iterator for filter *\/$/;"	m	struct:ecs_filter_t	typeref:typename:int8_t
field_id	./src/flecs.c	/^    ecs_id_t field_id;$/;"	m	struct:__anon7d4a41773208	typeref:typename:ecs_id_t	file:
field_index	./src/flecs.c	/^    int32_t field_index; \/* Iterator field index *\/$/;"	m	struct:flecs_flat_table_term_t	typeref:typename:int32_t	file:
field_index	./src/flecs.c	/^    int8_t field_index;        \/* Query field corresponding with operation *\/$/;"	m	struct:ecs_rule_op_t	typeref:typename:int8_t	file:
field_index	./src/flecs.h	/^    int32_t field_index;        \/**< Index of field for term in iterator *\/$/;"	m	struct:ecs_term_t	typeref:typename:int32_t
field_type	./vendor/fmt/include/compile.h	/^struct field_type<T, enable_if_t<detail::is_named_arg<T>::value>> {$/;"	s	namespace:detail
field_type	./vendor/fmt/include/compile.h	/^template <typename T, typename Enable = void> struct field_type {$/;"	s	namespace:detail
file	./src/log.h	/^  const char *file;$/;"	m	struct:__anon638373710108	typeref:typename:const char *
file	./vendor/STC/misc/benchmarks/plotbench/plot.py	/^file = sys.argv[2] if len(sys.argv) > 2 else 'plot_win.csv'$/;"	v
file	./vendor/fmt/include/os.h	/^  explicit file(int fd) : fd_(fd) {}$/;"	f	class:file
file	./vendor/fmt/include/os.h	/^  file() noexcept : fd_(-1) {}$/;"	f	class:file
file	./vendor/fmt/include/os.h	/^  file(file&& other) noexcept : fd_(other.fd_) { other.fd_ = -1; }$/;"	f	class:file
file	./vendor/fmt/include/os.h	/^class FMT_API file {$/;"	c
file_	./vendor/fmt/include/format-inl.h	/^  F* file_;$/;"	m	class:detail::file_base	typeref:typename:F *
file_	./vendor/fmt/include/format-inl.h	/^  file_ref file_;$/;"	m	class:detail::file_print_buffer	typeref:typename:file_ref
file_	./vendor/fmt/include/os.h	/^  FILE* file_;$/;"	m	class:buffered_file	typeref:typename:FILE *
file_	./vendor/fmt/include/os.h	/^  file file_;$/;"	m	class:detail::file_buffer	typeref:typename:file
file_access	./vendor/fmt/include/ostream.h	/^class file_access {$/;"	c	namespace:detail
file_access	./vendor/fmt/include/ostream.h	/^template class file_access<file_access_tag, std::filebuf,$/;"	v	namespace:detail	typeref:meta:class
file_access_tag	./vendor/fmt/include/ostream.h	/^struct file_access_tag {};$/;"	s	namespace:detail::__anon5d689e190111
file_base	./vendor/fmt/include/format-inl.h	/^  file_base(F* file) : file_(file) {}$/;"	f	class:detail::file_base
file_base	./vendor/fmt/include/format-inl.h	/^template <typename F> class file_base {$/;"	c	namespace:detail
file_buffer	./vendor/fmt/include/os.h	/^class file_buffer final : public buffer<char> {$/;"	c	namespace:detail
file_callback	./src/log.c	/^static void file_callback(log_Event *ev) {$/;"	f	typeref:typename:void	file:
file_print_buffer	./vendor/fmt/include/format-inl.h	/^  explicit file_print_buffer(F* f) : buffer(grow, size_t()), file_(f) {$/;"	f	class:detail::file_print_buffer
file_print_buffer	./vendor/fmt/include/format-inl.h	/^  explicit file_print_buffer(F*) : buffer(nullptr, size_t()) {}$/;"	f	class:detail::file_print_buffer
file_print_buffer	./vendor/fmt/include/format-inl.h	/^class file_print_buffer : public buffer<char> {$/;"	c	namespace:detail
file_print_buffer	./vendor/fmt/include/format-inl.h	/^class file_print_buffer<F, enable_if_t<has_flockfile<F>::value>>$/;"	c	namespace:detail
file_read	./vendor/STC/misc/examples/coroutines/coread.c	/^int file_read(struct file_read* g)$/;"	f	typeref:typename:int
file_read	./vendor/STC/misc/examples/coroutines/coread.c	/^struct file_read {$/;"	s	file:
file_read	./vendor/STC/misc/examples/coroutines/filetask.c	/^int file_read(struct file_read* co, cco_runtime* rt)$/;"	f	typeref:typename:int
file_ref	./vendor/fmt/include/format-inl.h	/^using file_ref = decltype(get_file(static_cast<FILE*>(nullptr), 0));$/;"	t	namespace:detail
filename	./src/flecs.h	/^    const char *filename;     \/* Set to load script from file *\/$/;"	m	struct:ecs_script_desc_t	typeref:typename:const char *
filename	./vendor/STC/misc/examples/coroutines/coread.c	/^    const char* filename;$/;"	m	struct:file_read	typeref:typename:const char *	file:
fill	./vendor/fmt/include/base.h	/^  detail::fill_t fill;$/;"	m	struct:format_specs	typeref:typename:detail::fill_t
fill	./vendor/fmt/include/format.h	/^FMT_NOINLINE FMT_CONSTEXPR auto fill(OutputIt it, size_t n, const fill_t& fill)$/;"	f	namespace:detail	typeref:typename:OutputIt
fill_	./vendor/fmt/include/format.h	/^  detail::fill_t fill_;$/;"	m	struct:nested_formatter	typeref:typename:detail::fill_t
fill_n	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto fill_n(OutputIt out, Size count, const T& value)$/;"	f	namespace:detail	typeref:typename:OutputIt
fill_n	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR20 auto fill_n(T* out, Size count, char value) -> T* {$/;"	f	namespace:detail	typeref:typename:T *
fill_t	./vendor/fmt/include/base.h	/^struct fill_t {$/;"	s	namespace:detail
filter	./src/flecs.c	/^    ecs_filter_t *filter;$/;"	m	struct:__anon7d4a41770308	typeref:typename:ecs_filter_t *	file:
filter	./src/flecs.c	/^    ecs_filter_t filter;          \/* Filter *\/$/;"	m	struct:ecs_rule_t	typeref:typename:ecs_filter_t	file:
filter	./src/flecs.c	/^    ecs_filter_t filter;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_filter_t	file:
filter	./src/flecs.h	/^        ecs_filter_iter_t filter;$/;"	m	union:ecs_iter_private_t::__anon7d4a417c020a	typeref:typename:ecs_filter_iter_t
filter	./src/flecs.h	/^    Base& filter() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
filter	./src/flecs.h	/^    const ecs_filter_t *filter;$/;"	m	struct:ecs_filter_iter_t	typeref:typename:const ecs_filter_t *
filter	./src/flecs.h	/^    ecs_filter_desc_t filter;$/;"	m	struct:ecs_alert_desc_t	typeref:typename:ecs_filter_desc_t
filter	./src/flecs.h	/^    ecs_filter_desc_t filter;$/;"	m	struct:ecs_observer_desc_t	typeref:typename:ecs_filter_desc_t
filter	./src/flecs.h	/^    ecs_filter_desc_t filter;$/;"	m	struct:ecs_query_desc_t	typeref:typename:ecs_filter_desc_t
filter	./src/flecs.h	/^    ecs_filter_t filter;        \/**< Query for observer *\/$/;"	m	struct:ecs_observer_t	typeref:typename:ecs_filter_t
filter	./src/flecs.h	/^    ecs_filter_t filter;$/;"	m	struct:ecs_snapshot_iter_t	typeref:typename:ecs_filter_t
filter	./src/flecs.h	/^    filter() : filter_base() { } \/\/ necessary not to confuse msvc$/;"	f	struct:flecs::filter
filter	./src/flecs.h	/^    filter(const filter& obj) : filter_base(obj) { }$/;"	f	struct:flecs::filter
filter	./src/flecs.h	/^    filter(filter&& obj) noexcept : filter_base(FLECS_MOV(obj)) { }$/;"	f	struct:flecs::filter
filter	./src/flecs.h	/^    filter_base filter() const {$/;"	f	struct:flecs::query_base	typeref:typename:filter_base
filter	./src/flecs.h	/^    flecs::filter_base filter() const {$/;"	f	struct:flecs::rule_base	typeref:typename:flecs::filter_base
filter	./src/flecs.h	/^inline flecs::filter<Comps...> world::filter(Args &&... args) const {$/;"	f	class:flecs::world	typeref:typename:flecs::filter<Comps...>
filter	./src/flecs.h	/^struct filter : filter_base, iterable<Components...> {$/;"	s	namespace:flecs
filter_base	./src/flecs.h	/^    filter_base()$/;"	f	struct:flecs::filter_base
filter_base	./src/flecs.h	/^    filter_base(const filter_base& obj) {$/;"	f	struct:flecs::filter_base
filter_base	./src/flecs.h	/^    filter_base(filter_base&& obj) noexcept {$/;"	f	struct:flecs::filter_base
filter_base	./src/flecs.h	/^    filter_base(world_t *world, const ecs_filter_t *filter)$/;"	f	struct:flecs::filter_base
filter_base	./src/flecs.h	/^    filter_base(world_t *world, ecs_filter_desc_t *desc) $/;"	f	struct:flecs::filter_base
filter_base	./src/flecs.h	/^    filter_base(world_t *world, ecs_filter_t *filter)$/;"	f	struct:flecs::filter_base
filter_base	./src/flecs.h	/^struct filter_base {$/;"	s	namespace:flecs
filter_builder	./src/flecs.h	/^    filter_builder(flecs::world_t* world, const char *name = nullptr)$/;"	f	struct:flecs::filter_builder
filter_builder	./src/flecs.h	/^inline flecs::filter_builder<Comps...> world::filter_builder(Args &&... args) const {$/;"	f	class:flecs::world	typeref:typename:flecs::filter_builder<Comps...>
filter_builder	./src/flecs.h	/^struct filter_builder final : _::filter_builder_base<Components...> {$/;"	s	namespace:flecs
filter_builder_base	./src/flecs.h	/^    using filter_builder_base = builder<$/;"	t	namespace:flecs::_	typeref:typename:builder<filter,ecs_filter_desc_t,filter_builder<Components...>,filter_builder_i,Components...>
filter_builder_i	./src/flecs.h	/^    filter_builder_i(ecs_filter_desc_t *desc, int32_t term_index = 0) $/;"	f	struct:flecs::filter_builder_i
filter_builder_i	./src/flecs.h	/^struct filter_builder_i : term_builder_i<Base> {$/;"	s	namespace:flecs
filter_delegate	./src/flecs.h	/^    filter_delegate(const flecs::world& world, Func&& func) {$/;"	f	struct:flecs::_::filter_delegate
filter_delegate	./src/flecs.h	/^struct filter_delegate<Func, if_not_t<is_same<first_arg_t<Func>, flecs::entity>::value> > {$/;"	s	namespace:flecs::_
filter_delegate	./src/flecs.h	/^struct filter_delegate<Func, if_t<is_same<first_arg_t<Func>, flecs::entity>::value> > {$/;"	s	namespace:flecs::_
filter_delegate_no_ent	./src/flecs.h	/^    filter_delegate_no_ent(const flecs::world& world, Func&& func) {$/;"	f	struct:flecs::_::filter_delegate_no_ent
filter_delegate_no_ent	./src/flecs.h	/^struct filter_delegate_no_ent<Func, arg_list<Args ...> >$/;"	s	namespace:flecs::_
filter_delegate_w_ent	./src/flecs.h	/^    filter_delegate_w_ent(const flecs::world& world, Func&& func) {$/;"	f	struct:flecs::_::filter_delegate_w_ent
filter_delegate_w_ent	./src/flecs.h	/^struct filter_delegate_w_ent<Func, arg_list<E, Args ...> >$/;"	s	namespace:flecs::_
filter_flags	./src/flecs.h	/^    Base& filter_flags(ecs_flags32_t flags) {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
filter_t	./src/flecs.h	/^using filter_t = ecs_filter_t;$/;"	t	namespace:flecs	typeref:typename:ecs_filter_t
finalize	./src/flecs.h	/^    int finalize() {$/;"	f	struct:flecs::term	typeref:typename:int
find	./src/flecs.h	/^    flecs::entity find(Func&& func) const {$/;"	f	struct:flecs::iterable	typeref:typename:flecs::entity
find	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    const_iterator find(const OtherKey& key, is_transparent_tag \/*unused*\/) const {$/;"	f	class:robin_hood::detail::Table	typeref:typename:const_iterator
find	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    const_iterator find(const key_type& key) const { \/\/ NOLINT(modernize-use-nodiscard)$/;"	f	class:robin_hood::detail::Table	typeref:typename:const_iterator
find	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    find(const OtherKey& key) const {              \/\/ NOLINT(modernize-use-nodiscard)$/;"	f	class:robin_hood::detail::Table	typeref:typename:std::enable_if<Self_::is_transparent,const_iterator>::type
find	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    iterator find(const OtherKey& key, is_transparent_tag \/*unused*\/) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:iterator
find	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    iterator find(const key_type& key) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:iterator
find	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    typename std::enable_if<Self_::is_transparent, iterator>::type find(const OtherKey& key) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:std::enable_if<Self_::is_transparent,iterator>::type
find	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto find(K const& key) -> iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:iterator
find	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto find(K const& key) const -> const_iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:const_iterator
find	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto find(Key const& key) -> iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:iterator
find	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto find(Key const& key) const -> const_iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:const_iterator
find	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline const_iterator find(const Key& key) const noexcept$/;"	f	class:emhash7::HashMap	typeref:typename:const_iterator
find	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline const_iterator find(const Key& key, size_t key_hash) const noexcept$/;"	f	class:emhash7::HashMap	typeref:typename:const_iterator
find	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline iterator find(const Key& key) noexcept$/;"	f	class:emhash7::HashMap	typeref:typename:iterator
find	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline iterator find(const Key& key, size_t key_hash) noexcept$/;"	f	class:emhash7::HashMap	typeref:typename:iterator
find	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    const_iterator find(const FindKey & key) const$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:const_iterator
find	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    iterator find(const FindKey & key)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:iterator
find	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  const_iterator find(const K& key) const {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:const_iterator
find	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  const_iterator find(const K& key, std::size_t hash) const {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:const_iterator
find	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  iterator find(const K& key) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:iterator
find	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  iterator find(const K& key, std::size_t hash) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:iterator
find	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  const_iterator find(const K& key) const {$/;"	f	class:tsl::robin_map	typeref:typename:const_iterator
find	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  const_iterator find(const K& key, std::size_t precalculated_hash) const {$/;"	f	class:tsl::robin_map	typeref:typename:const_iterator
find	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  const_iterator find(const Key& key) const { return m_ht.find(key); }$/;"	f	class:tsl::robin_map	typeref:typename:const_iterator
find	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  const_iterator find(const Key& key, std::size_t precalculated_hash) const {$/;"	f	class:tsl::robin_map	typeref:typename:const_iterator
find	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  iterator find(const K& key) {$/;"	f	class:tsl::robin_map	typeref:typename:iterator
find	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  iterator find(const K& key, std::size_t precalculated_hash) {$/;"	f	class:tsl::robin_map	typeref:typename:iterator
find	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  iterator find(const Key& key) { return m_ht.find(key); }$/;"	f	class:tsl::robin_map	typeref:typename:iterator
find	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  iterator find(const Key& key, std::size_t precalculated_hash) {$/;"	f	class:tsl::robin_map	typeref:typename:iterator
find	./vendor/fmt/include/base.h	/^FMT_CONSTEXPR auto find(Ptr first, Ptr last, T value, Ptr& out) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
find	./vendor/fmt/include/base.h	/^inline auto find<false, char>(const char* first, const char* last, char value,$/;"	f	namespace:detail	typeref:typename:bool
find_baseline	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        const benchmark* find_baseline() const$/;"	f	struct:picobench::report::suite	typeref:typename:const benchmark *
find_benchmark	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        const benchmark* find_benchmark(const char* name) const$/;"	f	struct:picobench::report::suite	typeref:typename:const benchmark *
find_delegate	./src/flecs.h	/^    explicit find_delegate(Func&& func) noexcept $/;"	f	struct:flecs::_::find_delegate
find_delegate	./src/flecs.h	/^    explicit find_delegate(const Func& func) noexcept $/;"	f	struct:flecs::_::find_delegate
find_delegate	./src/flecs.h	/^struct find_delegate : public delegate {$/;"	s	namespace:flecs::_
find_empty_bucket	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    size_type find_empty_bucket(const size_type bucket_from, const size_type main_bucket)$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
find_escape	./vendor/fmt/include/format.h	/^auto find_escape(const Char* begin, const Char* end)$/;"	f	namespace:detail	typeref:typename:find_escape_result<Char>
find_escape	./vendor/fmt/include/format.h	/^inline auto find_escape(const char* begin, const char* end)$/;"	f	namespace:detail	typeref:typename:find_escape_result<char>
find_escape_result	./vendor/fmt/include/format.h	/^template <typename Char> struct find_escape_result {$/;"	s	namespace:detail
find_file	./vendor/STC/src/singleheader.py	/^def find_file(included_name, current_file):$/;"	f
find_filled_bucket	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    size_type find_filled_bucket(const K& key) const$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
find_filled_hash	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    size_type find_filled_hash(const K& key, const size_t key_hash) const$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
find_impl	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  const_iterator find_impl(const K& key, std::size_t hash) const {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:const_iterator
find_impl	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  iterator find_impl(const K& key, std::size_t hash) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:iterator
find_last_bucket	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    size_type find_last_bucket(size_type main_bucket) const$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
find_or_allocate	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    size_type find_or_allocate(const K& key, bool& isempty)$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
find_prev_bucket	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    size_type find_prev_bucket(size_type main_bucket, const size_type bucket) const$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
find_suite	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    const suite* find_suite(const char* name) const$/;"	f	class:picobench::report	typeref:typename:const suite *
find_unique_bucket	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    size_type find_unique_bucket(const KeyT& key)$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
find_unique_empty	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    size_type find_unique_empty(const size_type bucket_from)$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
find_var	./src/flecs.h	/^    int32_t find_var(const char *name) {$/;"	f	struct:flecs::rule	typeref:typename:int32_t
fingerprint_mask	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    static constexpr uint32_t fingerprint_mask = dist_inc - 1; \/\/ mask for 1 byte of fingerpri/;"	m	struct:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::bucket_type::standard	typeref:typename:uint32_t
fini	./src/flecs.h	/^    ecs_iter_fini_action_t fini;  \/* Function to cleanup iterator resources *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_iter_fini_action_t
fini_	./src/flecs.h	/^    ecs_os_api_fini_t fini_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_fini_t
fini_actions	./src/flecs.c	/^    ecs_vec_t fini_actions;          \/* Callbacks to execute when world exits *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_vec_t	file:
finish	./vendor/STC/misc/benchmarks/various/rust_hashmap.rs	/^    fn finish(&self) -> u64 {$/;"	P	implementation:MyHasher
fire_brick	./vendor/fmt/include/color.h	/^  fire_brick = 0xB22222,               \/\/ rgb(178,34,34)$/;"	e	enum:color
fired_count	./src/flecs.h	/^    int32_t fired_count;         \/**< Number of times ticked *\/$/;"	m	struct:EcsTimer	typeref:typename:int32_t
first	./src/flecs.c	/^    ecs_id_record_elem_t first;   \/* (R, *) *\/$/;"	m	struct:ecs_id_record_t	typeref:typename:ecs_id_record_elem_t	file:
first	./src/flecs.c	/^    ecs_query_table_match_t *first;  \/* List with matches for table *\/$/;"	m	struct:ecs_query_table_t	typeref:typename:ecs_query_table_match_t *	file:
first	./src/flecs.c	/^    ecs_query_table_match_t *first;$/;"	m	struct:ecs_query_table_list_t	typeref:typename:ecs_query_table_match_t *	file:
first	./src/flecs.c	/^    ecs_rule_ref_t first;$/;"	m	struct:ecs_rule_op_t	typeref:typename:ecs_rule_ref_t	file:
first	./src/flecs.c	/^    ecs_stack_page_t first;$/;"	m	struct:ecs_stack_t	typeref:typename:ecs_stack_page_t	file:
first	./src/flecs.c	/^    ecs_table_cache_hdr_t *first;$/;"	m	struct:ecs_table_cache_list_t	typeref:typename:ecs_table_cache_hdr_t *	file:
first	./src/flecs.c	/^    int32_t first;$/;"	m	struct:ecs_cmd_entry_t	typeref:typename:int32_t	file:
first	./src/flecs.h	/^    Base& first() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
first	./src/flecs.h	/^    Base& first(const char *name) {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
first	./src/flecs.h	/^    Base& first(flecs::entity_t id) {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
first	./src/flecs.h	/^    ecs_bucket_entry_t *first;$/;"	m	struct:ecs_bucket_t	typeref:typename:ecs_bucket_entry_t *
first	./src/flecs.h	/^    ecs_term_id_t first;        \/**< Component or first element of pair *\/$/;"	m	struct:ecs_term_t	typeref:typename:ecs_term_id_t
first	./src/flecs.h	/^    flecs::entity first() const {$/;"	f	struct:flecs::iterable	typeref:typename:flecs::entity
first	./src/flecs.h	/^    flecs::entity first() {$/;"	f	struct:flecs::iter_iterable	typeref:typename:flecs::entity
first	./src/flecs.h	/^    int first() const {$/;"	f	struct:flecs::enum_data	typeref:typename:int
first	./src/flecs.h	/^    using first = First;$/;"	t	struct:flecs::pair	typeref:typename:First
first	./src/flecs.h	/^inline flecs::entity id::first() const {$/;"	f	class:flecs::id	typeref:typename:flecs::entity
first	./vendor/STC/include/stc/priv/cregex_prv.c	/^    _Reinst*    first;$/;"	m	struct:_Node	typeref:typename:_Reinst *	file:
first	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    T1 first;  \/\/ NOLINT(misc-non-private-member-variables-in-classes)$/;"	m	struct:robin_hood::pair	typeref:typename:T1
first	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    First first;$/;"	m	struct:emhash7::entry	typeref:typename:First
first	./vendor/fmt/include/compile.h	/^auto first(const T& value, const Tail&...) -> const T& {$/;"	f	namespace:detail	typeref:typename:const T &
first_	./src/flecs.h	/^    int64_t first_;$/;"	m	struct:ecs_query_stats_t	typeref:typename:int64_t
first_	./src/flecs.h	/^    int64_t first_;$/;"	m	struct:ecs_sync_stats_t	typeref:typename:int64_t
first_	./src/flecs.h	/^    int64_t first_;$/;"	m	struct:ecs_system_stats_t	typeref:typename:int64_t
first_	./src/flecs.h	/^    int64_t first_;$/;"	m	struct:ecs_world_stats_t	typeref:typename:int64_t
first_arg	./src/flecs.h	/^struct first_arg {$/;"	s	namespace:flecs
first_arg_impl	./src/flecs.h	/^struct first_arg_impl<Func, _::arg_list<T, Args ...> > {$/;"	s	namespace:flecs
first_arg_t	./src/flecs.h	/^using first_arg_t = typename first_arg<Func>::type;$/;"	t	namespace:flecs	typeref:typename:first_arg<Func>::type
first_type	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    using first_type = T1;$/;"	t	struct:robin_hood::pair	typeref:typename:T1
first_type	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    using first_type =  First;$/;"	t	struct:emhash7::entry	typeref:typename:First
firstinst	./vendor/STC/include/stc/priv/cregex_prv.c	/^    _Reinst  firstinst[];    \/* .text : originally 5 elements? *\/$/;"	m	struct:_Reprog	typeref:typename:_Reinst[]	file:
fits_in_int	./vendor/fmt/include/printf.h	/^  static auto fits_in_int(bool) -> bool { return true; }$/;"	f	struct:detail::int_checker	typeref:typename:bool
fits_in_int	./vendor/fmt/include/printf.h	/^  static auto fits_in_int(int) -> bool { return true; }$/;"	f	struct:detail::int_checker	typeref:typename:bool
fits_in_int	./vendor/fmt/include/printf.h	/^  template <typename T> static auto fits_in_int(T value) -> bool {$/;"	f	struct:detail::int_checker	typeref:typename:bool
fixed	./vendor/fmt/include/base.h	/^  fixed,    \/\/ 'f' or 'F'$/;"	e	enum:presentation_type
fixed	./vendor/fmt/include/format.h	/^  fixed     \/\/ Fixed point with the default precision of 6, e.g. 0.0012.$/;"	e	enum:detail::float_format
fixed	./vendor/fmt/include/format.h	/^  fixed = 4,$/;"	e	enum:detail::dragon
fixed_buffer_traits	./vendor/fmt/include/base.h	/^  explicit fixed_buffer_traits(size_t limit) : limit_(limit) {}$/;"	f	class:detail::fixed_buffer_traits
fixed_buffer_traits	./vendor/fmt/include/base.h	/^class fixed_buffer_traits {$/;"	c	namespace:detail
fixed_string	./vendor/fmt/include/format.h	/^  constexpr fixed_string(const Char (&str)[N]) {$/;"	f	struct:detail_exported::fixed_string
fixed_string	./vendor/fmt/include/format.h	/^template <typename Char, size_t N> struct fixed_string {$/;"	s	namespace:detail_exported
fixup	./vendor/fmt/include/format.h	/^  fixup = 2,  \/\/ Run fixup to correct exp10 which can be off by one.$/;"	e	enum:detail::dragon
flags	./src/flecs.c	/^    ecs_flags32_t flags;             \/* Flags for testing table properties *\/$/;"	m	struct:ecs_table_t	typeref:typename:ecs_flags32_t	file:
flags	./src/flecs.c	/^    ecs_flags32_t flags;$/;"	m	struct:ecs_id_record_t	typeref:typename:ecs_flags32_t	file:
flags	./src/flecs.c	/^    ecs_flags32_t flags;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_flags32_t	file:
flags	./src/flecs.c	/^    ecs_flags32_t flags;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_flags32_t	file:
flags	./src/flecs.c	/^    ecs_flags8_t flags;        \/* Flags storing whether 1st\/2nd are variables *\/$/;"	m	struct:ecs_rule_op_t	typeref:typename:ecs_flags8_t	file:
flags	./src/flecs.h	/^    Base& flags(flecs::flags32_t flags) {$/;"	f	struct:flecs::term_id_builder_i	typeref:typename:Base &
flags	./src/flecs.h	/^    ecs_flags16_t flags;        \/**< Flags that help eval, set by ecs_filter_init *\/$/;"	m	struct:ecs_term_t	typeref:typename:ecs_flags16_t
flags	./src/flecs.h	/^    ecs_flags32_t flags;        \/**< Observer flags *\/$/;"	m	struct:ecs_observer_t	typeref:typename:ecs_flags32_t
flags	./src/flecs.h	/^    ecs_flags32_t flags;        \/**< Term flags *\/$/;"	m	struct:ecs_term_id_t	typeref:typename:ecs_flags32_t
flags	./src/flecs.h	/^    ecs_flags32_t flags;      \/**< Filter flags *\/$/;"	m	struct:ecs_filter_t	typeref:typename:ecs_flags32_t
flags	./src/flecs.h	/^    ecs_flags32_t flags;$/;"	m	struct:ecs_event_desc_t	typeref:typename:ecs_flags32_t
flags	./src/flecs.h	/^    ecs_flags32_t flags;$/;"	m	struct:ecs_filter_desc_t	typeref:typename:ecs_flags32_t
flags	./src/flecs.h	/^    ecs_flags32_t flags;$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_flags32_t
flags	./src/flecs.h	/^inline flecs::entity id::flags() const {$/;"	f	class:flecs::id	typeref:typename:flecs::entity
flags	./vendor/STC/include/stc/priv/cregex_prv.c	/^    _Reflags flags;$/;"	m	struct:_Parser	typeref:typename:_Reflags	file:
flags	./vendor/STC/include/stc/priv/cregex_prv.c	/^    _Reflags flags;$/;"	m	struct:_Reprog	typeref:typename:_Reflags	file:
flags32_t	./src/flecs.h	/^using flags32_t = ecs_flags32_t;$/;"	t	namespace:flecs	typeref:typename:ecs_flags32_t
flags_	./src/flecs.h	/^    ecs_flags32_t flags_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_flags32_t
flags_str	./src/flecs.h	/^    flecs::string flags_str() const {$/;"	f	struct:flecs::id	typeref:typename:flecs::string
flat_hash_map	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    flat_hash_map()$/;"	f	class:ska::flat_hash_map
flat_hash_map	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^class flat_hash_map$/;"	c	namespace:ska
flat_hash_set	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    flat_hash_set()$/;"	f	class:ska::flat_hash_set
flat_hash_set	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^class flat_hash_set$/;"	c	namespace:ska
flat_tree_column	./src/flecs.c	/^    int32_t flat_tree_column;$/;"	m	struct:ecs_entity_filter_t	typeref:typename:int32_t	file:
flat_tree_offset	./src/flecs.c	/^    int32_t flat_tree_offset;$/;"	m	struct:ecs_entity_filter_iter_t	typeref:typename:int32_t	file:
flatten	./src/flecs.h	/^    void flatten(flecs::entity_t r, const ecs_flatten_desc_t *desc = nullptr) {$/;"	f	struct:flecs::entity	typeref:typename:void
flecs	./src/flecs.h	/^namespace flecs $/;"	n
flecs	./src/flecs.h	/^namespace flecs {$/;"	n
flecs	./src/flecs.h	/^namespace flecs$/;"	n
flecs_STATIC	./src/flecs.h	/^#define flecs_STATIC$/;"	d
flecs_access_begin	./src/flecs.c	/^ecs_record_t* flecs_access_begin($/;"	f	typeref:typename:ecs_record_t *	file:
flecs_access_end	./src/flecs.c	/^void flecs_access_end($/;"	f	typeref:typename:void	file:
flecs_add_bitmask	./src/flecs.c	/^void flecs_add_bitmask(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_add_constant	./src/flecs.c	/^void flecs_add_constant(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_add_constant_to_bitmask	./src/flecs.c	/^int flecs_add_constant_to_bitmask($/;"	f	typeref:typename:int	file:
flecs_add_constant_to_enum	./src/flecs.c	/^int flecs_add_constant_to_enum($/;"	f	typeref:typename:int	file:
flecs_add_enum	./src/flecs.c	/^void flecs_add_enum(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_add_flag	./src/flecs.c	/^void flecs_add_flag($/;"	f	typeref:typename:void
flecs_add_id	./src/flecs.c	/^void flecs_add_id($/;"	f	typeref:typename:void	file:
flecs_add_id_w_record	./src/flecs.c	/^void flecs_add_id_w_record($/;"	f	typeref:typename:void	file:
flecs_add_member_to_struct	./src/flecs.c	/^int flecs_add_member_to_struct($/;"	f	typeref:typename:int	file:
flecs_add_overrides_for_base	./src/flecs.c	/^void flecs_add_overrides_for_base($/;"	f	typeref:typename:void	file:
flecs_add_path	./src/flecs.c	/^void flecs_add_path($/;"	f	typeref:typename:void	file:
flecs_add_with_property	./src/flecs.c	/^void flecs_add_with_property($/;"	f	typeref:typename:void	file:
flecs_addon_vec_count	./src/flecs.c	/^size_t flecs_addon_vec_count(const void *ptr) {$/;"	f	typeref:typename:size_t	file:
flecs_addon_vec_serialize	./src/flecs.c	/^int flecs_addon_vec_serialize(const ecs_serializer_t *ser, const void *ptr) {$/;"	f	typeref:typename:int	file:
flecs_addons_info	./src/flecs.c	/^static const char *flecs_addons_info[] = {$/;"	v	typeref:typename:const char * []	file:
flecs_alert_get_severity	./src/flecs.c	/^ecs_entity_t flecs_alert_get_severity($/;"	f	typeref:typename:ecs_entity_t	file:
flecs_alert_out_of_range_kind	./src/flecs.c	/^ecs_entity_t flecs_alert_out_of_range_kind($/;"	f	typeref:typename:ecs_entity_t	file:
flecs_alerts_add_alert_to_src	./src/flecs.c	/^void flecs_alerts_add_alert_to_src($/;"	f	file:
flecs_alerts_remove_alert_from_src	./src/flecs.c	/^void flecs_alerts_remove_alert_from_src($/;"	f	typeref:typename:void	file:
flecs_alloc	./src/flecs.h	/^#define flecs_alloc(a, size) flecs_balloc(flecs_alloca/;"	d
flecs_alloc_n	./src/flecs.h	/^#define flecs_alloc_n(/;"	d
flecs_alloc_t	./src/flecs.h	/^#define flecs_alloc_t(/;"	d
flecs_allocator	./src/flecs.h	/^#define flecs_allocator(/;"	d
flecs_allocator_fini	./src/flecs.c	/^void flecs_allocator_fini($/;"	f	typeref:typename:void
flecs_allocator_get	./src/flecs.c	/^ecs_block_allocator_t* flecs_allocator_get($/;"	f	typeref:typename:ecs_block_allocator_t *
flecs_allocator_init	./src/flecs.c	/^void flecs_allocator_init($/;"	f	typeref:typename:void
flecs_allocator_size	./src/flecs.c	/^ecs_size_t flecs_allocator_size($/;"	f	typeref:typename:ecs_size_t	file:
flecs_allocator_size_hash	./src/flecs.c	/^ecs_size_t flecs_allocator_size_hash($/;"	f	typeref:typename:ecs_size_t	file:
flecs_assembly_create	./src/flecs.c	/^int flecs_assembly_create($/;"	f	typeref:typename:int	file:
flecs_assembly_ctor	./src/flecs.c	/^void flecs_assembly_ctor($/;"	f	file:
flecs_assembly_init_defaults	./src/flecs.c	/^int flecs_assembly_init_defaults($/;"	f	typeref:typename:int	file:
flecs_assembly_on_remove	./src/flecs.c	/^void flecs_assembly_on_remove($/;"	f	typeref:typename:void	file:
flecs_assembly_on_set	./src/flecs.c	/^void flecs_assembly_on_set($/;"	f	typeref:typename:void	file:
flecs_assert_relation_unused	./src/flecs.c	/^void flecs_assert_relation_unused($/;"	f	file:
flecs_balloc	./src/flecs.c	/^void* flecs_balloc($/;"	f	typeref:typename:void *
flecs_balloc_block	./src/flecs.c	/^ecs_block_allocator_chunk_header_t* flecs_balloc_block($/;"	f	typeref:typename:ecs_block_allocator_chunk_header_t *	file:
flecs_ballocator_fini	./src/flecs.c	/^void flecs_ballocator_fini($/;"	f	typeref:typename:void
flecs_ballocator_free	./src/flecs.c	/^void flecs_ballocator_free($/;"	f	typeref:typename:void
flecs_ballocator_init	./src/flecs.c	/^void flecs_ballocator_init($/;"	f	typeref:typename:void
flecs_ballocator_init_n	./src/flecs.h	/^#define flecs_ballocator_init_n(/;"	d
flecs_ballocator_init_t	./src/flecs.h	/^#define flecs_ballocator_init_t(/;"	d
flecs_ballocator_new	./src/flecs.c	/^ecs_block_allocator_t* flecs_ballocator_new($/;"	f	typeref:typename:ecs_block_allocator_t *
flecs_ballocator_new_n	./src/flecs.h	/^#define flecs_ballocator_new_n(/;"	d
flecs_ballocator_new_t	./src/flecs.h	/^#define flecs_ballocator_new_t(/;"	d
flecs_bcalloc	./src/flecs.c	/^void* flecs_bcalloc($/;"	f	typeref:typename:void *
flecs_bdup	./src/flecs.c	/^void* flecs_bdup($/;"	f	typeref:typename:void *
flecs_bfree	./src/flecs.c	/^void flecs_bfree($/;"	f	typeref:typename:void
flecs_binary_expr_do	./src/flecs.c	/^int flecs_binary_expr_do($/;"	f	typeref:typename:int	file:
flecs_binary_expr_parse	./src/flecs.c	/^const char* flecs_binary_expr_parse($/;"	f	typeref:typename:const char *	file:
flecs_binary_expr_type	./src/flecs.c	/^ecs_entity_t flecs_binary_expr_type($/;"	f	typeref:typename:ecs_entity_t	file:
flecs_bitset_addn	./src/flecs.c	/^void flecs_bitset_addn($/;"	f	typeref:typename:void
flecs_bitset_count	./src/flecs.c	/^int32_t flecs_bitset_count($/;"	f	typeref:typename:int32_t
flecs_bitset_ensure	./src/flecs.c	/^void flecs_bitset_ensure($/;"	f	typeref:typename:void
flecs_bitset_fini	./src/flecs.c	/^void flecs_bitset_fini($/;"	f	typeref:typename:void
flecs_bitset_get	./src/flecs.c	/^bool flecs_bitset_get($/;"	f	typeref:typename:bool
flecs_bitset_init	./src/flecs.c	/^void flecs_bitset_init($/;"	f	typeref:typename:void
flecs_bitset_remove	./src/flecs.c	/^void flecs_bitset_remove($/;"	f	typeref:typename:void
flecs_bitset_set	./src/flecs.c	/^void flecs_bitset_set($/;"	f	typeref:typename:void
flecs_bitset_swap	./src/flecs.c	/^void flecs_bitset_swap($/;"	f	typeref:typename:void
flecs_bitset_term_t	./src/flecs.c	/^typedef struct flecs_bitset_term_t {$/;"	s	file:
flecs_bitset_term_t	./src/flecs.c	/^} flecs_bitset_term_t;$/;"	t	typeref:struct:flecs_bitset_term_t	file:
flecs_bootstrap	./src/flecs.c	/^void flecs_bootstrap($/;"	f	typeref:typename:void
flecs_bootstrap_builtin	./src/flecs.c	/^void flecs_bootstrap_builtin($/;"	f	typeref:typename:void	file:
flecs_bootstrap_builtin_t	./src/flecs.c	/^#define flecs_bootstrap_builtin_t(/;"	d	file:
flecs_bootstrap_component	./src/flecs.c	/^#define flecs_bootstrap_component(/;"	d	file:
flecs_bootstrap_component_table	./src/flecs.c	/^ecs_table_t* flecs_bootstrap_component_table($/;"	f	typeref:typename:ecs_table_t *	file:
flecs_bootstrap_entity	./src/flecs.c	/^void flecs_bootstrap_entity($/;"	f	typeref:typename:void	file:
flecs_bootstrap_hierarchy	./src/flecs.c	/^void flecs_bootstrap_hierarchy(ecs_world_t *world) {$/;"	f	typeref:typename:void
flecs_bootstrap_phase	./src/flecs.c	/^#define flecs_bootstrap_phase(/;"	d	file:
flecs_bootstrap_phase_	./src/flecs.c	/^void flecs_bootstrap_phase_($/;"	f	typeref:typename:void	file:
flecs_bootstrap_tag	./src/flecs.c	/^#define flecs_bootstrap_tag(/;"	d	file:
flecs_bootstrap_trait	./src/flecs.c	/^#define flecs_bootstrap_trait(/;"	d	file:
flecs_brealloc	./src/flecs.c	/^void* flecs_brealloc($/;"	f	typeref:typename:void *
flecs_build_info	./src/flecs.c	/^static const ecs_build_info_t flecs_build_info = {$/;"	v	typeref:typename:const ecs_build_info_t	file:
flecs_bulk_new	./src/flecs.c	/^const ecs_entity_t* flecs_bulk_new($/;"	f	typeref:typename:const ecs_entity_t *	file:
flecs_calloc	./src/flecs.h	/^#define flecs_calloc(/;"	d
flecs_calloc_n	./src/flecs.h	/^#define flecs_calloc_n(/;"	d
flecs_calloc_t	./src/flecs.h	/^#define flecs_calloc_t(/;"	d
flecs_check_component	./src/flecs.c	/^void flecs_check_component($/;"	f	typeref:typename:void	file:
flecs_child_type_insert	./src/flecs.c	/^int32_t flecs_child_type_insert($/;"	f	typeref:typename:int32_t	file:
flecs_children	./src/flecs.c	/^ecs_iter_t flecs_children($/;"	f	typeref:typename:ecs_iter_t
flecs_clean_tables	./src/flecs.c	/^void flecs_clean_tables($/;"	f	typeref:typename:void	file:
flecs_cmd_batch_add_diff	./src/flecs.c	/^ecs_table_t* flecs_cmd_batch_add_diff($/;"	f	typeref:typename:ecs_table_t *	file:
flecs_cmd_batch_for_entity	./src/flecs.c	/^void flecs_cmd_batch_for_entity($/;"	f	typeref:typename:void	file:
flecs_cmd_new	./src/flecs.c	/^ecs_cmd_t* flecs_cmd_new($/;"	f	typeref:typename:ecs_cmd_t *	file:
flecs_cmd_new_batched	./src/flecs.c	/^ecs_cmd_t* flecs_cmd_new_batched($/;"	f	typeref:typename:ecs_cmd_t *	file:
flecs_colorize_buf	./src/flecs.c	/^void flecs_colorize_buf($/;"	f	typeref:typename:void
flecs_commands_fini	./src/flecs.c	/^void flecs_commands_fini($/;"	f	typeref:typename:void	file:
flecs_commands_init	./src/flecs.c	/^void flecs_commands_init($/;"	f	typeref:typename:void	file:
flecs_commands_pop	./src/flecs.c	/^void flecs_commands_pop($/;"	f	typeref:typename:void
flecs_commands_push	./src/flecs.c	/^void flecs_commands_push($/;"	f	typeref:typename:void
flecs_commit	./src/flecs.c	/^void flecs_commit($/;"	f	typeref:typename:void	file:
flecs_compiler_info	./src/flecs.c	/^static const char flecs_compiler_info[]$/;"	v	typeref:typename:const char[]	file:
flecs_component_ptr_t	./src/flecs.c	/^} flecs_component_ptr_t;$/;"	t	typeref:struct:__anon7d4a41770208	file:
flecs_compute_table_diff	./src/flecs.c	/^void flecs_compute_table_diff($/;"	f	typeref:typename:void	file:
flecs_constants_copy	./src/flecs.c	/^static void flecs_constants_copy($/;"	f	typeref:typename:void	file:
flecs_constants_dtor	./src/flecs.c	/^static void flecs_constants_dtor($/;"	f	file:
flecs_copy_ptr_w_id	./src/flecs.c	/^void flecs_copy_ptr_w_id($/;"	f	typeref:typename:void	file:
flecs_count_id_targets_metric_init	./src/flecs.c	/^int flecs_count_id_targets_metric_init($/;"	f	typeref:typename:int	file:
flecs_count_ids_metric_init	./src/flecs.c	/^int flecs_count_ids_metric_init($/;"	f	typeref:typename:int	file:
flecs_counter_print	./src/flecs.c	/^void flecs_counter_print($/;"	f	typeref:typename:void	file:
flecs_counter_record	./src/flecs.c	/^double flecs_counter_record($/;"	f	typeref:typename:double	file:
flecs_cpp_func_max	./src/flecs.c	/^const char* flecs_cpp_func_max($/;"	f	typeref:typename:const char *	file:
flecs_cpp_func_rchr	./src/flecs.c	/^const char* flecs_cpp_func_rchr($/;"	f	typeref:typename:const char *	file:
flecs_create_edge_for_add	./src/flecs.c	/^ecs_table_t* flecs_create_edge_for_add($/;"	f	typeref:typename:ecs_table_t *	file:
flecs_create_edge_for_remove	./src/flecs.c	/^ecs_table_t* flecs_create_edge_for_remove($/;"	f	typeref:typename:ecs_table_t *	file:
flecs_create_table	./src/flecs.c	/^ecs_table_t *flecs_create_table($/;"	f	typeref:typename:ecs_table_t *	file:
flecs_create_worker_threads	./src/flecs.c	/^void flecs_create_worker_threads($/;"	f	typeref:typename:void
flecs_day_interval_count	./src/flecs.c	/^static int32_t flecs_day_interval_count = 24;$/;"	v	typeref:typename:int32_t	file:
flecs_default_copy_ctor	./src/flecs.c	/^void flecs_default_copy_ctor(void *dst_ptr, const void *src_ptr,$/;"	f	typeref:typename:void	file:
flecs_default_ctor_w_move_w_dtor	./src/flecs.c	/^void flecs_default_ctor_w_move_w_dtor(void *dst_ptr, void *src_ptr,$/;"	f	typeref:typename:void	file:
flecs_default_dtor	./src/flecs.c	/^void flecs_default_dtor(void *dst_ptr, void *src_ptr,$/;"	f	typeref:typename:void	file:
flecs_default_frame_action	./src/flecs.c	/^int flecs_default_frame_action($/;"	f	typeref:typename:int	file:
flecs_default_move	./src/flecs.c	/^void flecs_default_move(void *dst_ptr, void *src_ptr,$/;"	f	typeref:typename:void	file:
flecs_default_move_ctor	./src/flecs.c	/^void flecs_default_move_ctor(void *dst_ptr, void *src_ptr,$/;"	f	typeref:typename:void	file:
flecs_default_move_ctor_w_dtor	./src/flecs.c	/^void flecs_default_move_ctor_w_dtor(void *dst_ptr, void *src_ptr,$/;"	f	typeref:typename:void	file:
flecs_default_move_w_dtor	./src/flecs.c	/^void flecs_default_move_w_dtor(void *dst_ptr, void *src_ptr,$/;"	f	typeref:typename:void	file:
flecs_default_multi_observer_run_callback	./src/flecs.c	/^void flecs_default_multi_observer_run_callback($/;"	f	typeref:typename:void	file:
flecs_default_observer_next_callback	./src/flecs.c	/^bool flecs_default_observer_next_callback(ecs_iter_t *it) {$/;"	f	typeref:typename:bool
flecs_default_run_action	./src/flecs.c	/^int flecs_default_run_action($/;"	f	typeref:typename:int	file:
flecs_default_uni_observer_run_callback	./src/flecs.c	/^void flecs_default_uni_observer_run_callback(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_defer_add	./src/flecs.c	/^bool flecs_defer_add($/;"	f	typeref:typename:bool
flecs_defer_begin	./src/flecs.c	/^bool flecs_defer_begin($/;"	f	typeref:typename:bool
flecs_defer_bulk_new	./src/flecs.c	/^bool flecs_defer_bulk_new($/;"	f	typeref:typename:bool
flecs_defer_clear	./src/flecs.c	/^bool flecs_defer_clear($/;"	f	typeref:typename:bool
flecs_defer_clone	./src/flecs.c	/^bool flecs_defer_clone($/;"	f	typeref:typename:bool
flecs_defer_cmd	./src/flecs.c	/^bool flecs_defer_cmd($/;"	f	typeref:typename:bool
flecs_defer_delete	./src/flecs.c	/^bool flecs_defer_delete($/;"	f	typeref:typename:bool
flecs_defer_enable	./src/flecs.c	/^bool flecs_defer_enable($/;"	f	typeref:typename:bool
flecs_defer_end	./src/flecs.c	/^bool flecs_defer_end($/;"	f	typeref:typename:bool
flecs_defer_from_expr	./src/flecs.c	/^void flecs_defer_from_expr($/;"	f	typeref:typename:void	file:
flecs_defer_modified	./src/flecs.c	/^bool flecs_defer_modified($/;"	f	typeref:typename:bool
flecs_defer_on_delete_action	./src/flecs.c	/^bool flecs_defer_on_delete_action($/;"	f	typeref:typename:bool
flecs_defer_path	./src/flecs.c	/^bool flecs_defer_path($/;"	f	typeref:typename:bool
flecs_defer_purge	./src/flecs.c	/^bool flecs_defer_purge($/;"	f	typeref:typename:bool
flecs_defer_remove	./src/flecs.c	/^bool flecs_defer_remove($/;"	f	typeref:typename:bool
flecs_defer_set	./src/flecs.c	/^void* flecs_defer_set($/;"	f	typeref:typename:void *
flecs_deferred_add_remove	./src/flecs.c	/^void flecs_deferred_add_remove($/;"	f	typeref:typename:void	file:
flecs_delete_entity	./src/flecs.c	/^void flecs_delete_entity($/;"	f	typeref:typename:void	file:
flecs_delete_table	./src/flecs.c	/^void flecs_delete_table($/;"	f	typeref:typename:void
flecs_depth_for_flat_table	./src/flecs.c	/^int32_t flecs_depth_for_flat_table($/;"	f	typeref:typename:int32_t	file:
flecs_depth_for_id	./src/flecs.c	/^int32_t flecs_depth_for_id($/;"	f	typeref:typename:int32_t	file:
flecs_diff_insert_added	./src/flecs.c	/^void flecs_diff_insert_added($/;"	f	typeref:typename:void	file:
flecs_diff_insert_removed	./src/flecs.c	/^void flecs_diff_insert_removed($/;"	f	typeref:typename:void	file:
flecs_disable_module	./src/flecs.c	/^void flecs_disable_module(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_disable_module_observers	./src/flecs.c	/^void flecs_disable_module_observers($/;"	f	typeref:typename:void	file:
flecs_disable_observer	./src/flecs.c	/^void flecs_disable_observer($/;"	f	typeref:typename:void	file:
flecs_discard_cmd	./src/flecs.c	/^void flecs_discard_cmd($/;"	f	typeref:typename:void	file:
flecs_doc_import_core_definitions	./src/flecs.c	/^void flecs_doc_import_core_definitions($/;"	f	typeref:typename:void	file:
flecs_doc_import_doc_definitions	./src/flecs.c	/^void flecs_doc_import_doc_definitions($/;"	f	typeref:typename:void	file:
flecs_doc_set	./src/flecs.c	/^void flecs_doc_set($/;"	f	file:
flecs_dotresolve_var	./src/flecs.c	/^ecs_value_t flecs_dotresolve_var($/;"	f	typeref:typename:ecs_value_t	file:
flecs_dtor_script	./src/flecs.c	/^static void flecs_dtor_script(EcsScript *ptr) {$/;"	f	typeref:typename:void	file:
flecs_dtor_value	./src/flecs.c	/^void flecs_dtor_value($/;"	f	typeref:typename:void	file:
flecs_dump_backtrace	./src/flecs.c	/^void flecs_dump_backtrace($/;"	f	typeref:typename:void
flecs_dup	./src/flecs.c	/^void* flecs_dup($/;"	f	typeref:typename:void *
flecs_dup_n	./src/flecs.h	/^#define flecs_dup_n(/;"	d
flecs_duplicate_data	./src/flecs.c	/^ecs_data_t* flecs_duplicate_data($/;"	f	typeref:typename:ecs_data_t *	file:
flecs_emit	./src/flecs.c	/^void flecs_emit($/;"	f	typeref:typename:void
flecs_emit_dump_cache	./src/flecs.c	/^void flecs_emit_dump_cache($/;"	f	typeref:typename:void	file:
flecs_emit_forward	./src/flecs.c	/^void flecs_emit_forward($/;"	f	typeref:typename:void	file:
flecs_emit_forward_and_cache_id	./src/flecs.c	/^void flecs_emit_forward_and_cache_id($/;"	f	typeref:typename:void	file:
flecs_emit_forward_cached_ids	./src/flecs.c	/^void flecs_emit_forward_cached_ids($/;"	f	typeref:typename:void	file:
flecs_emit_forward_id	./src/flecs.c	/^void flecs_emit_forward_id($/;"	f	typeref:typename:void	file:
flecs_emit_forward_table_up	./src/flecs.c	/^void flecs_emit_forward_table_up($/;"	f	typeref:typename:void	file:
flecs_emit_forward_up	./src/flecs.c	/^void flecs_emit_forward_up($/;"	f	typeref:typename:void	file:
flecs_emit_propagate	./src/flecs.c	/^void flecs_emit_propagate($/;"	f	typeref:typename:void	file:
flecs_emit_propagate_id	./src/flecs.c	/^void flecs_emit_propagate_id($/;"	f	typeref:typename:void	file:
flecs_emit_propagate_invalidate	./src/flecs.c	/^void flecs_emit_propagate_invalidate($/;"	f	typeref:typename:void
flecs_emit_propagate_invalidate_tables	./src/flecs.c	/^void flecs_emit_propagate_invalidate_tables($/;"	f	typeref:typename:void	file:
flecs_emit_stack_at	./src/flecs.c	/^int32_t flecs_emit_stack_at($/;"	f	typeref:typename:int32_t	file:
flecs_emit_stack_has	./src/flecs.c	/^bool flecs_emit_stack_has($/;"	f	typeref:typename:bool	file:
flecs_enqueue	./src/flecs.c	/^void flecs_enqueue($/;"	f	typeref:typename:void
flecs_ensure	./src/flecs.c	/^flecs_component_ptr_t flecs_ensure($/;"	f	typeref:typename:flecs_component_ptr_t	file:
flecs_ensure_module_tag	./src/flecs.c	/^void flecs_ensure_module_tag(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_entities_clear	./src/flecs.c	/^#define flecs_entities_clear(/;"	d	file:
flecs_entities_copy	./src/flecs.c	/^#define flecs_entities_copy(/;"	d	file:
flecs_entities_count	./src/flecs.c	/^#define flecs_entities_count(/;"	d	file:
flecs_entities_ensure	./src/flecs.c	/^#define flecs_entities_ensure(/;"	d	file:
flecs_entities_exists	./src/flecs.c	/^#define flecs_entities_exists(/;"	d	file:
flecs_entities_fini	./src/flecs.c	/^#define flecs_entities_fini(/;"	d	file:
flecs_entities_get	./src/flecs.c	/^#define flecs_entities_get(/;"	d	file:
flecs_entities_get_alive	./src/flecs.c	/^#define flecs_entities_get_alive(/;"	d	file:
flecs_entities_get_any	./src/flecs.c	/^#define flecs_entities_get_any(/;"	d	file:
flecs_entities_ids	./src/flecs.c	/^#define flecs_entities_ids(/;"	d	file:
flecs_entities_init	./src/flecs.c	/^#define flecs_entities_init(/;"	d	file:
flecs_entities_is_alive	./src/flecs.c	/^#define flecs_entities_is_alive(/;"	d	file:
flecs_entities_is_valid	./src/flecs.c	/^#define flecs_entities_is_valid(/;"	d	file:
flecs_entities_make_alive	./src/flecs.c	/^#define flecs_entities_make_alive(/;"	d	file:
flecs_entities_max_id	./src/flecs.c	/^#define flecs_entities_max_id(/;"	d	file:
flecs_entities_new_id	./src/flecs.c	/^#define flecs_entities_new_id(/;"	d	file:
flecs_entities_new_ids	./src/flecs.c	/^#define flecs_entities_new_ids(/;"	d	file:
flecs_entities_not_alive_count	./src/flecs.c	/^#define flecs_entities_not_alive_count(/;"	d	file:
flecs_entities_remove	./src/flecs.c	/^#define flecs_entities_remove(/;"	d	file:
flecs_entities_restore	./src/flecs.c	/^#define flecs_entities_restore(/;"	d	file:
flecs_entities_set_size	./src/flecs.c	/^#define flecs_entities_set_size(/;"	d	file:
flecs_entities_size	./src/flecs.c	/^#define flecs_entities_size(/;"	d	file:
flecs_entities_try	./src/flecs.c	/^#define flecs_entities_try(/;"	d	file:
flecs_entity_compare	./src/flecs.c	/^int flecs_entity_compare($/;"	f	typeref:typename:int
flecs_entity_filter_bitset_next	./src/flecs.c	/^int flecs_entity_filter_bitset_next($/;"	f	typeref:typename:int	file:
flecs_entity_filter_find_smallest_term	./src/flecs.c	/^int flecs_entity_filter_find_smallest_term($/;"	f	typeref:typename:int	file:
flecs_entity_filter_fini	./src/flecs.c	/^void flecs_entity_filter_fini($/;"	f	typeref:typename:void
flecs_entity_filter_init	./src/flecs.c	/^void flecs_entity_filter_init($/;"	f	typeref:typename:void
flecs_entity_filter_next	./src/flecs.c	/^int flecs_entity_filter_next($/;"	f	typeref:typename:int
flecs_entity_filter_switch_next	./src/flecs.c	/^int flecs_entity_filter_switch_next($/;"	f	typeref:typename:int	file:
flecs_entity_index_clear	./src/flecs.c	/^void flecs_entity_index_clear($/;"	f	typeref:typename:void
flecs_entity_index_copy	./src/flecs.c	/^void flecs_entity_index_copy($/;"	f	typeref:typename:void
flecs_entity_index_copy_intern	./src/flecs.c	/^void flecs_entity_index_copy_intern($/;"	f	typeref:typename:void	file:
flecs_entity_index_count	./src/flecs.c	/^int32_t flecs_entity_index_count($/;"	f	typeref:typename:int32_t
flecs_entity_index_ensure	./src/flecs.c	/^ecs_record_t* flecs_entity_index_ensure($/;"	f	typeref:typename:ecs_record_t *
flecs_entity_index_ensure_page	./src/flecs.c	/^ecs_entity_index_page_t* flecs_entity_index_ensure_page($/;"	f	typeref:typename:ecs_entity_index_page_t *	file:
flecs_entity_index_exists	./src/flecs.c	/^bool flecs_entity_index_exists($/;"	f	typeref:typename:bool
flecs_entity_index_fini	./src/flecs.c	/^void flecs_entity_index_fini($/;"	f	typeref:typename:void
flecs_entity_index_get	./src/flecs.c	/^ecs_record_t* flecs_entity_index_get($/;"	f	typeref:typename:ecs_record_t *
flecs_entity_index_get_alive	./src/flecs.c	/^uint64_t flecs_entity_index_get_alive($/;"	f	typeref:typename:uint64_t
flecs_entity_index_get_any	./src/flecs.c	/^ecs_record_t* flecs_entity_index_get_any($/;"	f	typeref:typename:ecs_record_t *
flecs_entity_index_ids	./src/flecs.c	/^const uint64_t* flecs_entity_index_ids($/;"	f	typeref:typename:const uint64_t *
flecs_entity_index_init	./src/flecs.c	/^void flecs_entity_index_init($/;"	f	typeref:typename:void
flecs_entity_index_is_alive	./src/flecs.c	/^bool flecs_entity_index_is_alive($/;"	f	typeref:typename:bool
flecs_entity_index_is_valid	./src/flecs.c	/^bool flecs_entity_index_is_valid($/;"	f	typeref:typename:bool
flecs_entity_index_make_alive	./src/flecs.c	/^void flecs_entity_index_make_alive($/;"	f	typeref:typename:void
flecs_entity_index_new_id	./src/flecs.c	/^uint64_t flecs_entity_index_new_id($/;"	f	typeref:typename:uint64_t
flecs_entity_index_new_ids	./src/flecs.c	/^uint64_t* flecs_entity_index_new_ids($/;"	f	typeref:typename:uint64_t *
flecs_entity_index_not_alive_count	./src/flecs.c	/^int32_t flecs_entity_index_not_alive_count($/;"	f	typeref:typename:int32_t
flecs_entity_index_remove	./src/flecs.c	/^void flecs_entity_index_remove($/;"	f	typeref:typename:void
flecs_entity_index_restore	./src/flecs.c	/^void flecs_entity_index_restore($/;"	f	typeref:typename:void
flecs_entity_index_set_size	./src/flecs.c	/^void flecs_entity_index_set_size($/;"	f	typeref:typename:void
flecs_entity_index_size	./src/flecs.c	/^int32_t flecs_entity_index_size($/;"	f	typeref:typename:int32_t
flecs_entity_index_try_get	./src/flecs.c	/^ecs_record_t* flecs_entity_index_try_get($/;"	f	typeref:typename:ecs_record_t *
flecs_entity_index_try_get_any	./src/flecs.c	/^ecs_record_t* flecs_entity_index_try_get_any($/;"	f	typeref:typename:ecs_record_t *
flecs_entity_support	./src/flecs.h	/^inline flecs::opaque<EntityType> flecs_entity_support(flecs::world&) {$/;"	f	namespace:flecs::meta::_	typeref:typename:flecs::opaque<EntityType>
flecs_eval_component_monitor	./src/flecs.c	/^void flecs_eval_component_monitor($/;"	f	typeref:typename:void	file:
flecs_eval_component_monitors	./src/flecs.c	/^void flecs_eval_component_monitors($/;"	f	typeref:typename:void
flecs_event_id_record_ensure	./src/flecs.c	/^ecs_event_id_record_t* flecs_event_id_record_ensure($/;"	f	typeref:typename:ecs_event_id_record_t *
flecs_event_id_record_get	./src/flecs.c	/^ecs_event_id_record_t* flecs_event_id_record_get($/;"	f	typeref:typename:ecs_event_id_record_t *
flecs_event_id_record_get_if	./src/flecs.c	/^ecs_event_id_record_t* flecs_event_id_record_get_if($/;"	f	typeref:typename:ecs_event_id_record_t *	file:
flecs_event_id_record_remove	./src/flecs.c	/^void flecs_event_id_record_remove($/;"	f	typeref:typename:void
flecs_event_observers_get	./src/flecs.c	/^int32_t flecs_event_observers_get($/;"	f	typeref:typename:int32_t	file:
flecs_event_record_ensure	./src/flecs.c	/^ecs_event_record_t* flecs_event_record_ensure($/;"	f	typeref:typename:ecs_event_record_t *
flecs_event_record_get	./src/flecs.c	/^ecs_event_record_t* flecs_event_record_get($/;"	f	typeref:typename:ecs_event_record_t *
flecs_event_record_get_if	./src/flecs.c	/^const ecs_event_record_t* flecs_event_record_get_if($/;"	f	typeref:typename:const ecs_event_record_t *	file:
flecs_explorer_request	./src/flecs.c	/^char* flecs_explorer_request(const char *method, char *request) {$/;"	f	typeref:typename:EMSCRIPTEN_KEEPALIVE char *
flecs_expr_op_is_equality	./src/flecs.c	/^bool flecs_expr_op_is_equality($/;"	f	typeref:typename:bool	file:
flecs_expr_op_to_primitive_kind	./src/flecs.c	/^ecs_primitive_kind_t flecs_expr_op_to_primitive_kind(ecs_meta_type_op_kind_t kind) {$/;"	f	typeref:typename:ecs_primitive_kind_t	file:
flecs_expr_ser_bitmask	./src/flecs.c	/^int flecs_expr_ser_bitmask($/;"	f	typeref:typename:int	file:
flecs_expr_ser_enum	./src/flecs.c	/^int flecs_expr_ser_enum($/;"	f	typeref:typename:int	file:
flecs_expr_ser_primitive	./src/flecs.c	/^int flecs_expr_ser_primitive($/;"	f	typeref:typename:int	file:
flecs_expr_ser_type	./src/flecs.c	/^int flecs_expr_ser_type($/;"	f	typeref:typename:int	file:
flecs_expr_ser_type_op	./src/flecs.c	/^int flecs_expr_ser_type_op($/;"	f	typeref:typename:int	file:
flecs_expr_ser_type_ops	./src/flecs.c	/^int flecs_expr_ser_type_ops($/;"	f	typeref:typename:int	file:
flecs_expr_value_new	./src/flecs.c	/^void* flecs_expr_value_new($/;"	f	typeref:typename:void *	file:
flecs_expr_var_scope_fini	./src/flecs.c	/^void flecs_expr_var_scope_fini($/;"	f	typeref:typename:void	file:
flecs_expr_var_scope_init	./src/flecs.c	/^void flecs_expr_var_scope_init($/;"	f	typeref:typename:void	file:
flecs_filter_apply_iter_flags	./src/flecs.c	/^void flecs_filter_apply_iter_flags($/;"	f	typeref:typename:void
flecs_filter_error	./src/flecs.c	/^void flecs_filter_error($/;"	f	typeref:typename:void	file:
flecs_filter_fini	./src/flecs.c	/^void flecs_filter_fini($/;"	f	typeref:typename:void	file:
flecs_filter_fini_poly	./src/flecs.c	/^void flecs_filter_fini_poly(void *filter)$/;"	f	typeref:typename:void	file:
flecs_filter_iter_init	./src/flecs.c	/^void flecs_filter_iter_init($/;"	f	typeref:typename:void	file:
flecs_filter_iter_w_flags	./src/flecs.c	/^ecs_iter_t flecs_filter_iter_w_flags($/;"	f	typeref:typename:ecs_iter_t
flecs_filter_match_table	./src/flecs.c	/^bool flecs_filter_match_table($/;"	f	typeref:typename:bool
flecs_filter_or_other_type	./src/flecs.c	/^ecs_term_t* flecs_filter_or_other_type($/;"	f	typeref:typename:ecs_term_t *	file:
flecs_filter_str	./src/flecs.c	/^char* flecs_filter_str($/;"	f	typeref:typename:char *	file:
flecs_filter_str_add_id	./src/flecs.c	/^void flecs_filter_str_add_id($/;"	f	typeref:typename:void	file:
flecs_find_table_add	./src/flecs.c	/^ecs_table_t* flecs_find_table_add($/;"	f	typeref:typename:ecs_table_t *	file:
flecs_find_table_remove	./src/flecs.c	/^ecs_table_t* flecs_find_table_remove($/;"	f	typeref:typename:ecs_table_t *	file:
flecs_find_table_with	./src/flecs.c	/^ecs_table_t* flecs_find_table_with($/;"	f	typeref:typename:ecs_table_t *	file:
flecs_find_table_without	./src/flecs.c	/^ecs_table_t* flecs_find_table_without($/;"	f	typeref:typename:ecs_table_t *	file:
flecs_fini_actions	./src/flecs.c	/^void flecs_fini_actions($/;"	f	typeref:typename:void	file:
flecs_fini_id_records	./src/flecs.c	/^void flecs_fini_id_records($/;"	f	typeref:typename:void
flecs_fini_root_tables	./src/flecs.c	/^void flecs_fini_root_tables($/;"	f	typeref:typename:void	file:
flecs_fini_roots	./src/flecs.c	/^void flecs_fini_roots($/;"	f	typeref:typename:void	file:
flecs_fini_store	./src/flecs.c	/^void flecs_fini_store(ecs_world_t *world) {$/;"	f	typeref:typename:void	file:
flecs_fini_type_info	./src/flecs.c	/^void flecs_fini_type_info($/;"	f	typeref:typename:void	file:
flecs_fini_unset_tables	./src/flecs.c	/^void flecs_fini_unset_tables($/;"	f	typeref:typename:void	file:
flecs_flat_monitor_t	./src/flecs.c	/^typedef struct flecs_flat_monitor_t {$/;"	s	file:
flecs_flat_monitor_t	./src/flecs.c	/^} flecs_flat_monitor_t;$/;"	t	typeref:struct:flecs_flat_monitor_t	file:
flecs_flat_table_term_t	./src/flecs.c	/^typedef struct flecs_flat_table_term_t {$/;"	s	file:
flecs_flat_table_term_t	./src/flecs.c	/^} flecs_flat_table_term_t;$/;"	t	typeref:struct:flecs_flat_table_term_t	file:
flecs_flatten	./src/flecs.c	/^void flecs_flatten($/;"	f	typeref:typename:void	file:
flecs_flush_bulk_new	./src/flecs.c	/^void flecs_flush_bulk_new($/;"	f	typeref:typename:void	file:
flecs_free	./src/flecs.h	/^#define flecs_free(/;"	d
flecs_free_cmd_event	./src/flecs.c	/^void flecs_free_cmd_event($/;"	f	typeref:typename:void	file:
flecs_free_n	./src/flecs.h	/^#define flecs_free_n(/;"	d
flecs_free_t	./src/flecs.h	/^#define flecs_free_t(/;"	d
flecs_from_json_ctx_fini	./src/flecs.c	/^void flecs_from_json_ctx_fini($/;"	f	typeref:typename:void	file:
flecs_from_json_ctx_init	./src/flecs.c	/^void flecs_from_json_ctx_init($/;"	f	typeref:typename:void	file:
flecs_from_public_id	./src/flecs.c	/^ecs_id_t flecs_from_public_id($/;"	f	typeref:typename:ecs_id_t
flecs_funccall_parse	./src/flecs.c	/^const char* flecs_funccall_parse($/;"	f	typeref:typename:const char *	file:
flecs_gauge_print	./src/flecs.c	/^void flecs_gauge_print($/;"	f	typeref:typename:void	file:
flecs_gauge_record	./src/flecs.c	/^void flecs_gauge_record($/;"	f	typeref:typename:void	file:
flecs_get_base_component	./src/flecs.c	/^void* flecs_get_base_component($/;"	f	typeref:typename:void *
flecs_get_builtin	./src/flecs.c	/^ecs_entity_t flecs_get_builtin($/;"	f	typeref:typename:ecs_entity_t	file:
flecs_get_component	./src/flecs.c	/^void* flecs_get_component($/;"	f	typeref:typename:void *	file:
flecs_get_component_ptr	./src/flecs.c	/^flecs_component_ptr_t flecs_get_component_ptr($/;"	f	typeref:typename:flecs_component_ptr_t	file:
flecs_get_component_w_index	./src/flecs.c	/^flecs_component_ptr_t flecs_get_component_w_index($/;"	f	typeref:typename:flecs_component_ptr_t	file:
flecs_get_delete_action	./src/flecs.c	/^ecs_entity_t flecs_get_delete_action($/;"	f	typeref:typename:ecs_entity_t	file:
flecs_get_flattened_target	./src/flecs.c	/^int32_t flecs_get_flattened_target($/;"	f	typeref:typename:int32_t	file:
flecs_get_hashed_string	./src/flecs.c	/^ecs_hashed_string_t flecs_get_hashed_string($/;"	f	typeref:typename:ecs_hashed_string_t
flecs_get_identifier	./src/flecs.c	/^const char* flecs_get_identifier($/;"	f	typeref:typename:const char *	file:
flecs_get_observer_event	./src/flecs.c	/^ecs_entity_t flecs_get_observer_event($/;"	f	typeref:typename:ecs_entity_t	file:
flecs_get_oneof	./src/flecs.c	/^ecs_entity_t flecs_get_oneof($/;"	f	typeref:typename:ecs_entity_t
flecs_get_parent_from_path	./src/flecs.c	/^ecs_entity_t flecs_get_parent_from_path($/;"	f	typeref:typename:ecs_entity_t	file:
flecs_get_ref_entity	./src/flecs.c	/^ecs_entity_t flecs_get_ref_entity($/;"	f	typeref:typename:ecs_entity_t	file:
flecs_get_ref_range	./src/flecs.c	/^ecs_table_range_t flecs_get_ref_range($/;"	f	typeref:typename:ecs_table_range_t	file:
flecs_hash	./src/flecs.c	/^uint64_t flecs_hash($/;"	f	typeref:typename:uint64_t
flecs_hashmap_copy	./src/flecs.c	/^void flecs_hashmap_copy($/;"	f	typeref:typename:void
flecs_hashmap_ensure	./src/flecs.h	/^#define flecs_hashmap_ensure(/;"	d
flecs_hashmap_ensure_	./src/flecs.c	/^flecs_hashmap_result_t flecs_hashmap_ensure_($/;"	f	typeref:typename:flecs_hashmap_result_t
flecs_hashmap_find_key	./src/flecs.c	/^int32_t flecs_hashmap_find_key($/;"	f	typeref:typename:int32_t	file:
flecs_hashmap_fini	./src/flecs.c	/^void flecs_hashmap_fini($/;"	f	typeref:typename:void
flecs_hashmap_get	./src/flecs.h	/^#define flecs_hashmap_get(/;"	d
flecs_hashmap_get_	./src/flecs.c	/^void* flecs_hashmap_get_($/;"	f	typeref:typename:void *
flecs_hashmap_get_bucket	./src/flecs.c	/^ecs_hm_bucket_t* flecs_hashmap_get_bucket($/;"	f	typeref:typename:ecs_hm_bucket_t *
flecs_hashmap_init	./src/flecs.h	/^#define flecs_hashmap_init(/;"	d
flecs_hashmap_init_	./src/flecs.c	/^void flecs_hashmap_init_($/;"	f	typeref:typename:void
flecs_hashmap_iter	./src/flecs.c	/^flecs_hashmap_iter_t flecs_hashmap_iter($/;"	f	typeref:typename:flecs_hashmap_iter_t
flecs_hashmap_iter_t	./src/flecs.h	/^} flecs_hashmap_iter_t;$/;"	t	typeref:struct:__anon7d4a417c0508
flecs_hashmap_next	./src/flecs.h	/^#define flecs_hashmap_next(/;"	d
flecs_hashmap_next_	./src/flecs.c	/^void* flecs_hashmap_next_($/;"	f	typeref:typename:void *
flecs_hashmap_next_w_key	./src/flecs.h	/^#define flecs_hashmap_next_w_key(/;"	d
flecs_hashmap_remove	./src/flecs.h	/^#define flecs_hashmap_remove(/;"	d
flecs_hashmap_remove_	./src/flecs.c	/^void flecs_hashmap_remove_($/;"	f	typeref:typename:void
flecs_hashmap_remove_w_hash	./src/flecs.h	/^#define flecs_hashmap_remove_w_hash(/;"	d
flecs_hashmap_remove_w_hash_	./src/flecs.c	/^void flecs_hashmap_remove_w_hash_($/;"	f	typeref:typename:void
flecs_hashmap_result_t	./src/flecs.h	/^} flecs_hashmap_result_t;$/;"	t	typeref:struct:__anon7d4a417c0608
flecs_hashmap_set	./src/flecs.h	/^#define flecs_hashmap_set(/;"	d
flecs_hashmap_set_	./src/flecs.c	/^void flecs_hashmap_set_($/;"	f	typeref:typename:void
flecs_hm_bucket_remove	./src/flecs.c	/^void flecs_hm_bucket_remove($/;"	f	typeref:typename:void
flecs_id_flag_for_event	./src/flecs.c	/^ecs_flags32_t flecs_id_flag_for_event($/;"	f	typeref:typename:ecs_flags32_t	file:
flecs_id_for_depth	./src/flecs.c	/^ecs_entity_t flecs_id_for_depth($/;"	f	typeref:typename:ecs_entity_t	file:
flecs_id_is_delete_target	./src/flecs.c	/^bool flecs_id_is_delete_target($/;"	f	typeref:typename:bool	file:
flecs_id_mark_for_delete	./src/flecs.c	/^void flecs_id_mark_for_delete($/;"	f	typeref:typename:void	file:
flecs_id_metric_init	./src/flecs.c	/^int flecs_id_metric_init($/;"	f	typeref:typename:int	file:
flecs_id_name_index_ensure	./src/flecs.c	/^ecs_hashmap_t* flecs_id_name_index_ensure($/;"	f	typeref:typename:ecs_hashmap_t *
flecs_id_name_index_get	./src/flecs.c	/^ecs_hashmap_t* flecs_id_name_index_get($/;"	f	typeref:typename:ecs_hashmap_t *
flecs_id_qsort_cmp	./src/flecs.c	/^int flecs_id_qsort_cmp(const void *a, const void *b) {$/;"	f	typeref:typename:int
flecs_id_record_assert_empty	./src/flecs.c	/^void flecs_id_record_assert_empty($/;"	f	typeref:typename:void	file:
flecs_id_record_claim	./src/flecs.c	/^void flecs_id_record_claim($/;"	f	typeref:typename:void
flecs_id_record_elem	./src/flecs.c	/^ecs_id_record_elem_t* flecs_id_record_elem($/;"	f	typeref:typename:ecs_id_record_elem_t *	file:
flecs_id_record_elem_insert	./src/flecs.c	/^void flecs_id_record_elem_insert($/;"	f	typeref:typename:void	file:
flecs_id_record_elem_remove	./src/flecs.c	/^void flecs_id_record_elem_remove($/;"	f	typeref:typename:void	file:
flecs_id_record_ensure	./src/flecs.c	/^ecs_id_record_t* flecs_id_record_ensure($/;"	f	typeref:typename:ecs_id_record_t *
flecs_id_record_free	./src/flecs.c	/^void flecs_id_record_free($/;"	f	typeref:typename:void	file:
flecs_id_record_get	./src/flecs.c	/^ecs_id_record_t* flecs_id_record_get($/;"	f	typeref:typename:ecs_id_record_t *
flecs_id_record_get_table	./src/flecs.c	/^ecs_table_record_t* flecs_id_record_get_table($/;"	f	typeref:typename:ecs_table_record_t *
flecs_id_record_hash	./src/flecs.c	/^ecs_id_t flecs_id_record_hash($/;"	f	typeref:typename:ecs_id_t	file:
flecs_id_record_name_index_ensure	./src/flecs.c	/^ecs_hashmap_t* flecs_id_record_name_index_ensure($/;"	f	typeref:typename:ecs_hashmap_t *
flecs_id_record_new	./src/flecs.c	/^ecs_id_record_t* flecs_id_record_new($/;"	f	typeref:typename:ecs_id_record_t *	file:
flecs_id_record_release	./src/flecs.c	/^int32_t flecs_id_record_release($/;"	f	typeref:typename:int32_t
flecs_id_record_release_tables	./src/flecs.c	/^void flecs_id_record_release_tables($/;"	f	typeref:typename:void
flecs_id_record_set_type_info	./src/flecs.c	/^bool flecs_id_record_set_type_info($/;"	f	typeref:typename:bool
flecs_ignore_observer	./src/flecs.c	/^bool flecs_ignore_observer($/;"	f	typeref:typename:bool	file:
flecs_inc_observer_count	./src/flecs.c	/^void flecs_inc_observer_count($/;"	f	typeref:typename:void	file:
flecs_init_edge_for_add	./src/flecs.c	/^void flecs_init_edge_for_add($/;"	f	typeref:typename:void	file:
flecs_init_edge_for_remove	./src/flecs.c	/^void flecs_init_edge_for_remove($/;"	f	typeref:typename:void	file:
flecs_init_filter_iter	./src/flecs.c	/^void flecs_init_filter_iter($/;"	f	typeref:typename:void	file:
flecs_init_id_records	./src/flecs.c	/^void flecs_init_id_records($/;"	f	typeref:typename:void
flecs_init_root_table	./src/flecs.c	/^void flecs_init_root_table($/;"	f	typeref:typename:void
flecs_init_store	./src/flecs.c	/^void flecs_init_store($/;"	f	typeref:typename:void	file:
flecs_init_table	./src/flecs.c	/^void flecs_init_table($/;"	f	typeref:typename:void	file:
flecs_init_type	./src/flecs.c	/^int flecs_init_type($/;"	f	typeref:typename:int	file:
flecs_insert_id_elem	./src/flecs.c	/^void flecs_insert_id_elem($/;"	f	typeref:typename:void	file:
flecs_insert_sleep	./src/flecs.c	/^ecs_ftime_t flecs_insert_sleep($/;"	f	typeref:typename:ecs_ftime_t	file:
flecs_instantiate	./src/flecs.c	/^void flecs_instantiate($/;"	f	typeref:typename:void
flecs_instantiate_children	./src/flecs.c	/^void flecs_instantiate_children($/;"	f	typeref:typename:void	file:
flecs_instantiate_slot	./src/flecs.c	/^void flecs_instantiate_slot($/;"	f	typeref:typename:void	file:
flecs_invoke_hook	./src/flecs.c	/^void flecs_invoke_hook($/;"	f	typeref:typename:void
flecs_is_root_path	./src/flecs.c	/^bool flecs_is_root_path($/;"	f	typeref:typename:bool	file:
flecs_is_sep	./src/flecs.c	/^bool flecs_is_sep($/;"	f	typeref:typename:bool	file:
flecs_is_simple_result	./src/flecs.c	/^bool flecs_is_simple_result($/;"	f	typeref:typename:bool	file:
flecs_is_type_number	./src/flecs.c	/^bool flecs_is_type_number($/;"	f	typeref:typename:bool	file:
flecs_is_valid_end_of_term	./src/flecs.c	/^bool flecs_is_valid_end_of_term($/;"	f	typeref:typename:bool	file:
flecs_isident	./src/flecs.c	/^bool flecs_isident($/;"	f	typeref:typename:bool
flecs_iter_cache_all	./src/flecs.h	/^#define flecs_iter_cache_all /;"	d
flecs_iter_cache_columns	./src/flecs.h	/^#define flecs_iter_cache_columns /;"	d
flecs_iter_cache_ids	./src/flecs.h	/^#define flecs_iter_cache_ids /;"	d
flecs_iter_cache_match_indices	./src/flecs.h	/^#define flecs_iter_cache_match_indices /;"	d
flecs_iter_cache_ptrs	./src/flecs.h	/^#define flecs_iter_cache_ptrs /;"	d
flecs_iter_cache_sources	./src/flecs.h	/^#define flecs_iter_cache_sources /;"	d
flecs_iter_cache_variables	./src/flecs.h	/^#define flecs_iter_cache_variables /;"	d
flecs_iter_calloc	./src/flecs.c	/^void* flecs_iter_calloc($/;"	f	typeref:typename:void *
flecs_iter_calloc_n	./src/flecs.c	/^#define flecs_iter_calloc_n(/;"	d	file:
flecs_iter_calloc_t	./src/flecs.c	/^#define flecs_iter_calloc_t(/;"	d	file:
flecs_iter_free	./src/flecs.c	/^void flecs_iter_free($/;"	f	typeref:typename:void
flecs_iter_free_n	./src/flecs.c	/^#define flecs_iter_free_n(/;"	d	file:
flecs_iter_free_t	./src/flecs.c	/^#define flecs_iter_free_t(/;"	d	file:
flecs_iter_init	./src/flecs.c	/^void flecs_iter_init($/;"	f	typeref:typename:void
flecs_iter_next_instanced	./src/flecs.c	/^bool flecs_iter_next_instanced($/;"	f	typeref:typename:bool
flecs_iter_next_row	./src/flecs.c	/^bool flecs_iter_next_row($/;"	f	typeref:typename:bool
flecs_iter_populate_data	./src/flecs.c	/^void flecs_iter_populate_data($/;"	f	typeref:typename:void
flecs_iter_populate_term_data	./src/flecs.c	/^bool flecs_iter_populate_term_data($/;"	f	typeref:typename:bool	file:
flecs_iter_validate	./src/flecs.c	/^void flecs_iter_validate($/;"	f	typeref:typename:void
flecs_ito	./src/flecs.c	/^#define flecs_ito(/;"	d	file:
flecs_ito_	./src/flecs.c	/^uint64_t flecs_ito_($/;"	f	typeref:typename:uint64_t
flecs_itoi16	./src/flecs.c	/^#define flecs_itoi16(/;"	d	file:
flecs_itoi32	./src/flecs.c	/^#define flecs_itoi32(/;"	d	file:
flecs_itolbl	./src/flecs.c	/^ecs_rule_lbl_t flecs_itolbl(int64_t val) {$/;"	f	typeref:typename:ecs_rule_lbl_t
flecs_itosize	./src/flecs.c	/^#define flecs_itosize(/;"	d	file:
flecs_itovar	./src/flecs.c	/^ecs_var_id_t flecs_itovar(int64_t val) {$/;"	f	typeref:typename:ecs_var_id_t	file:
flecs_join_worker_threads	./src/flecs.c	/^void flecs_join_worker_threads($/;"	f	typeref:typename:void
flecs_journal	./src/flecs.h	/^#define flecs_journal(/;"	d
flecs_journal_begin	./src/flecs.c	/^void flecs_journal_begin($/;"	f	typeref:typename:void
flecs_journal_begin	./src/flecs.h	/^#define flecs_journal_begin(/;"	d
flecs_journal_end	./src/flecs.c	/^void flecs_journal_end(void) {$/;"	f	typeref:typename:void
flecs_journal_end	./src/flecs.h	/^#define flecs_journal_end(/;"	d
flecs_journal_entitystr	./src/flecs.c	/^char* flecs_journal_entitystr($/;"	f	typeref:typename:char *	file:
flecs_journal_idstr	./src/flecs.c	/^char* flecs_journal_idstr($/;"	f	typeref:typename:char *	file:
flecs_journal_sp	./src/flecs.c	/^static int flecs_journal_sp = 0;$/;"	v	typeref:typename:int	file:
flecs_json_append_base	./src/flecs.c	/^int flecs_json_append_base($/;"	f	typeref:typename:int	file:
flecs_json_append_type	./src/flecs.c	/^int flecs_json_append_type($/;"	f	typeref:typename:int	file:
flecs_json_append_type_hidden	./src/flecs.c	/^int flecs_json_append_type_hidden($/;"	f	typeref:typename:int	file:
flecs_json_append_type_info	./src/flecs.c	/^int flecs_json_append_type_info($/;"	f	typeref:typename:int	file:
flecs_json_append_type_labels	./src/flecs.c	/^int flecs_json_append_type_labels($/;"	f	typeref:typename:int	file:
flecs_json_append_type_values	./src/flecs.c	/^int flecs_json_append_type_values($/;"	f	typeref:typename:int	file:
flecs_json_array_pop	./src/flecs.c	/^void flecs_json_array_pop($/;"	f	typeref:typename:void
flecs_json_array_push	./src/flecs.c	/^void flecs_json_array_push($/;"	f	typeref:typename:void
flecs_json_bool	./src/flecs.c	/^void flecs_json_bool($/;"	f	typeref:typename:void
flecs_json_color	./src/flecs.c	/^void flecs_json_color($/;"	f	typeref:typename:void
flecs_json_ensure_entity	./src/flecs.c	/^ecs_entity_t flecs_json_ensure_entity($/;"	f	typeref:typename:ecs_entity_t	file:
flecs_json_entity_label	./src/flecs.c	/^const char* flecs_json_entity_label($/;"	f	typeref:typename:const char *	file:
flecs_json_expect	./src/flecs.c	/^const char* flecs_json_expect($/;"	f	typeref:typename:const char *
flecs_json_expect_member	./src/flecs.c	/^const char* flecs_json_expect_member($/;"	f	typeref:typename:const char *
flecs_json_expect_member_name	./src/flecs.c	/^const char* flecs_json_expect_member_name($/;"	f	typeref:typename:const char *
flecs_json_expect_string	./src/flecs.c	/^const char* flecs_json_expect_string($/;"	f	typeref:typename:const char *
flecs_json_false	./src/flecs.c	/^void flecs_json_false($/;"	f	typeref:typename:void
flecs_json_id	./src/flecs.c	/^void flecs_json_id($/;"	f	typeref:typename:void
flecs_json_id_member	./src/flecs.c	/^void flecs_json_id_member($/;"	f	typeref:typename:void
flecs_json_inout_str	./src/flecs.c	/^const char* flecs_json_inout_str($/;"	f	typeref:typename:const char *	file:
flecs_json_label	./src/flecs.c	/^void flecs_json_label($/;"	f	typeref:typename:void
flecs_json_lookup	./src/flecs.c	/^ecs_entity_t flecs_json_lookup($/;"	f	typeref:typename:ecs_entity_t	file:
flecs_json_mark_reserved	./src/flecs.c	/^void flecs_json_mark_reserved($/;"	f	typeref:typename:void	file:
flecs_json_member	./src/flecs.c	/^void flecs_json_member($/;"	f	typeref:typename:void
flecs_json_memberl	./src/flecs.c	/^#define flecs_json_memberl(/;"	d	file:
flecs_json_membern	./src/flecs.c	/^void flecs_json_membern($/;"	f	typeref:typename:void
flecs_json_missing_reflection	./src/flecs.c	/^const char* flecs_json_missing_reflection($/;"	f	typeref:typename:const char *	file:
flecs_json_name_is_anonymous	./src/flecs.c	/^bool flecs_json_name_is_anonymous($/;"	f	typeref:typename:bool	file:
flecs_json_new_id	./src/flecs.c	/^ecs_entity_t flecs_json_new_id($/;"	f	typeref:typename:ecs_entity_t	file:
flecs_json_next	./src/flecs.c	/^void flecs_json_next($/;"	f	typeref:typename:void
flecs_json_number	./src/flecs.c	/^void flecs_json_number($/;"	f	typeref:typename:void
flecs_json_object_pop	./src/flecs.c	/^void flecs_json_object_pop($/;"	f	typeref:typename:void
flecs_json_object_push	./src/flecs.c	/^void flecs_json_object_push($/;"	f	typeref:typename:void
flecs_json_op_to_primitive_kind	./src/flecs.c	/^ecs_primitive_kind_t flecs_json_op_to_primitive_kind($/;"	f	typeref:typename:ecs_primitive_kind_t
flecs_json_oper_str	./src/flecs.c	/^const char* flecs_json_oper_str($/;"	f	typeref:typename:const char *	file:
flecs_json_parse	./src/flecs.c	/^const char* flecs_json_parse($/;"	f	typeref:typename:const char *
flecs_json_parse_column	./src/flecs.c	/^const char* flecs_json_parse_column($/;"	f	typeref:typename:const char *	file:
flecs_json_parse_entities	./src/flecs.c	/^int flecs_json_parse_entities($/;"	f	typeref:typename:int	file:
flecs_json_parse_large_string	./src/flecs.c	/^const char* flecs_json_parse_large_string($/;"	f	typeref:typename:const char *
flecs_json_parse_path	./src/flecs.c	/^const char* flecs_json_parse_path($/;"	f	typeref:typename:const char *	file:
flecs_json_parse_result	./src/flecs.c	/^const char* flecs_json_parse_result($/;"	f	typeref:typename:const char *	file:
flecs_json_parse_table	./src/flecs.c	/^ecs_table_t* flecs_json_parse_table($/;"	f	typeref:typename:ecs_table_t *	file:
flecs_json_parse_values	./src/flecs.c	/^const char* flecs_json_parse_values($/;"	f	typeref:typename:const char *	file:
flecs_json_path	./src/flecs.c	/^void flecs_json_path($/;"	f	typeref:typename:void
flecs_json_ser_type	./src/flecs.c	/^int flecs_json_ser_type($/;"	f	typeref:typename:int
flecs_json_ser_type_elements	./src/flecs.c	/^int flecs_json_ser_type_elements($/;"	f	typeref:typename:int	file:
flecs_json_ser_type_op	./src/flecs.c	/^int flecs_json_ser_type_op($/;"	f	typeref:typename:int	file:
flecs_json_ser_type_ops	./src/flecs.c	/^int flecs_json_ser_type_ops($/;"	f	typeref:typename:int	file:
flecs_json_serialize_alerts	./src/flecs.c	/^int flecs_json_serialize_alerts($/;"	f	typeref:typename:int	file:
flecs_json_serialize_children_alerts	./src/flecs.c	/^int flecs_json_serialize_children_alerts($/;"	f	typeref:typename:int	file:
flecs_json_serialize_entity_alerts	./src/flecs.c	/^int flecs_json_serialize_entity_alerts($/;"	f	typeref:typename:int	file:
flecs_json_serialize_field	./src/flecs.c	/^void flecs_json_serialize_field($/;"	f	typeref:typename:void
flecs_json_serialize_field_info	./src/flecs.c	/^void flecs_json_serialize_field_info($/;"	f	typeref:typename:void	file:
flecs_json_serialize_get_field_ctx	./src/flecs.c	/^bool flecs_json_serialize_get_field_ctx($/;"	f	typeref:typename:bool
flecs_json_serialize_get_value_ctx	./src/flecs.c	/^bool flecs_json_serialize_get_value_ctx($/;"	f	typeref:typename:bool	file:
flecs_json_serialize_id	./src/flecs.c	/^void flecs_json_serialize_id($/;"	f	typeref:typename:void	file:
flecs_json_serialize_id_label	./src/flecs.c	/^void flecs_json_serialize_id_label($/;"	f	typeref:typename:void	file:
flecs_json_serialize_id_str	./src/flecs.c	/^void flecs_json_serialize_id_str($/;"	f	typeref:typename:void	file:
flecs_json_serialize_iter_id_labels	./src/flecs.c	/^void flecs_json_serialize_iter_id_labels($/;"	f	typeref:typename:void	file:
flecs_json_serialize_iter_ids	./src/flecs.c	/^void flecs_json_serialize_iter_ids($/;"	f	typeref:typename:void	file:
flecs_json_serialize_iter_result	./src/flecs.c	/^int flecs_json_serialize_iter_result($/;"	f	typeref:typename:int	file:
flecs_json_serialize_iter_result_colors	./src/flecs.c	/^void flecs_json_serialize_iter_result_colors($/;"	f	typeref:typename:void	file:
flecs_json_serialize_iter_result_columns	./src/flecs.c	/^int flecs_json_serialize_iter_result_columns($/;"	f	typeref:typename:int	file:
flecs_json_serialize_iter_result_entities	./src/flecs.c	/^void flecs_json_serialize_iter_result_entities($/;"	f	typeref:typename:void	file:
flecs_json_serialize_iter_result_entity_ids	./src/flecs.c	/^void flecs_json_serialize_iter_result_entity_ids($/;"	f	typeref:typename:void	file:
flecs_json_serialize_iter_result_entity_labels	./src/flecs.c	/^void flecs_json_serialize_iter_result_entity_labels($/;"	f	typeref:typename:void	file:
flecs_json_serialize_iter_result_entity_names	./src/flecs.c	/^bool flecs_json_serialize_iter_result_entity_names($/;"	f	typeref:typename:bool	file:
flecs_json_serialize_iter_result_id_labels	./src/flecs.c	/^void flecs_json_serialize_iter_result_id_labels($/;"	f	typeref:typename:void	file:
flecs_json_serialize_iter_result_ids	./src/flecs.c	/^void flecs_json_serialize_iter_result_ids($/;"	f	typeref:typename:void	file:
flecs_json_serialize_iter_result_is_set	./src/flecs.c	/^bool flecs_json_serialize_iter_result_is_set($/;"	f	typeref:typename:bool
flecs_json_serialize_iter_result_parent	./src/flecs.c	/^void flecs_json_serialize_iter_result_parent($/;"	f	typeref:typename:void	file:
flecs_json_serialize_iter_result_query_rows	./src/flecs.c	/^int flecs_json_serialize_iter_result_query_rows($/;"	f	typeref:typename:int	file:
flecs_json_serialize_iter_result_rows	./src/flecs.c	/^int flecs_json_serialize_iter_result_rows($/;"	f	typeref:typename:int
flecs_json_serialize_iter_result_sources	./src/flecs.c	/^void flecs_json_serialize_iter_result_sources($/;"	f	typeref:typename:void	file:
flecs_json_serialize_iter_result_table_rows	./src/flecs.c	/^int flecs_json_serialize_iter_result_table_rows($/;"	f	typeref:typename:int	file:
flecs_json_serialize_iter_result_table_type	./src/flecs.c	/^void flecs_json_serialize_iter_result_table_type($/;"	f	typeref:typename:void	file:
flecs_json_serialize_iter_result_values	./src/flecs.c	/^int flecs_json_serialize_iter_result_values($/;"	f	typeref:typename:int	file:
flecs_json_serialize_iter_result_variable_ids	./src/flecs.c	/^void flecs_json_serialize_iter_result_variable_ids($/;"	f	typeref:typename:void	file:
flecs_json_serialize_iter_result_variable_labels	./src/flecs.c	/^void flecs_json_serialize_iter_result_variable_labels($/;"	f	typeref:typename:void	file:
flecs_json_serialize_iter_result_variables	./src/flecs.c	/^void flecs_json_serialize_iter_result_variables($/;"	f	typeref:typename:void	file:
flecs_json_serialize_iter_this_row	./src/flecs.c	/^void flecs_json_serialize_iter_this_row($/;"	f	typeref:typename:void	file:
flecs_json_serialize_iter_variables	./src/flecs.c	/^void flecs_json_serialize_iter_variables(ecs_iter_t *it, ecs_strbuf_t *buf) {$/;"	f	typeref:typename:void	file:
flecs_json_serialize_matches	./src/flecs.c	/^int flecs_json_serialize_matches($/;"	f	typeref:typename:int	file:
flecs_json_serialize_query	./src/flecs.c	/^void flecs_json_serialize_query($/;"	f	typeref:typename:void
flecs_json_serialize_query_info	./src/flecs.c	/^void flecs_json_serialize_query_info($/;"	f	typeref:typename:void	file:
flecs_json_serialize_query_plan	./src/flecs.c	/^void flecs_json_serialize_query_plan($/;"	f	typeref:typename:void	file:
flecs_json_serialize_query_profile	./src/flecs.c	/^void flecs_json_serialize_query_profile($/;"	f	typeref:typename:void	file:
flecs_json_serialize_refs	./src/flecs.c	/^int flecs_json_serialize_refs($/;"	f	typeref:typename:int	file:
flecs_json_serialize_refs_idr	./src/flecs.c	/^int flecs_json_serialize_refs_idr($/;"	f	typeref:typename:int	file:
flecs_json_serialize_row_components	./src/flecs.c	/^int flecs_json_serialize_row_components($/;"	f	typeref:typename:int	file:
flecs_json_serialize_row_pairs	./src/flecs.c	/^bool flecs_json_serialize_row_pairs($/;"	f	typeref:typename:bool	file:
flecs_json_serialize_row_table_components	./src/flecs.c	/^int flecs_json_serialize_row_table_components($/;"	f	typeref:typename:int	file:
flecs_json_serialize_row_tags	./src/flecs.c	/^bool flecs_json_serialize_row_tags($/;"	f	typeref:typename:bool	file:
flecs_json_serialize_row_vars	./src/flecs.c	/^bool flecs_json_serialize_row_vars($/;"	f	typeref:typename:bool	file:
flecs_json_serialize_table_row_pairs	./src/flecs.c	/^bool flecs_json_serialize_table_row_pairs($/;"	f	typeref:typename:bool	file:
flecs_json_serialize_table_row_tags	./src/flecs.c	/^bool flecs_json_serialize_table_row_tags($/;"	f	typeref:typename:bool	file:
flecs_json_serialize_table_tags_pairs_vars	./src/flecs.c	/^bool flecs_json_serialize_table_tags_pairs_vars($/;"	f	typeref:typename:bool	file:
flecs_json_serialize_tags_pairs_vars	./src/flecs.c	/^bool flecs_json_serialize_tags_pairs_vars($/;"	f	typeref:typename:bool	file:
flecs_json_serialize_term	./src/flecs.c	/^void flecs_json_serialize_term($/;"	f	typeref:typename:void	file:
flecs_json_serialize_term_entity	./src/flecs.c	/^void flecs_json_serialize_term_entity($/;"	f	typeref:typename:void	file:
flecs_json_serialize_term_ref	./src/flecs.c	/^void flecs_json_serialize_term_ref($/;"	f	typeref:typename:void	file:
flecs_json_serialize_term_trav	./src/flecs.c	/^void flecs_json_serialize_term_trav($/;"	f	typeref:typename:void	file:
flecs_json_serialize_type_info	./src/flecs.c	/^void flecs_json_serialize_type_info($/;"	f	typeref:typename:void	file:
flecs_json_skip_array	./src/flecs.c	/^const char* flecs_json_skip_array($/;"	f	typeref:typename:const char *
flecs_json_skip_id	./src/flecs.c	/^bool flecs_json_skip_id($/;"	f	typeref:typename:bool	file:
flecs_json_skip_object	./src/flecs.c	/^const char* flecs_json_skip_object($/;"	f	typeref:typename:const char *
flecs_json_skip_string	./src/flecs.c	/^const char* flecs_json_skip_string($/;"	f	typeref:typename:const char *	file:
flecs_json_skip_variable	./src/flecs.c	/^bool flecs_json_skip_variable($/;"	f	typeref:typename:bool
flecs_json_string	./src/flecs.c	/^void flecs_json_string($/;"	f	typeref:typename:void
flecs_json_string_escape	./src/flecs.c	/^void flecs_json_string_escape($/;"	f	typeref:typename:void
flecs_json_token_str	./src/flecs.c	/^const char* flecs_json_token_str($/;"	f	typeref:typename:const char *	file:
flecs_json_true	./src/flecs.c	/^void flecs_json_true($/;"	f	typeref:typename:void
flecs_json_u32	./src/flecs.c	/^void flecs_json_u32($/;"	f	typeref:typename:void
flecs_json_zeromem_table	./src/flecs.c	/^void flecs_json_zeromem_table($/;"	f	typeref:typename:void	file:
flecs_largest_type	./src/flecs.c	/^ecs_entity_t flecs_largest_type($/;"	f	typeref:typename:ecs_entity_t	file:
flecs_load_from_file	./src/flecs.c	/^char* flecs_load_from_file($/;"	f	typeref:typename:char *
flecs_log2	./src/flecs.c	/^uint8_t flecs_log2(uint32_t v) {$/;"	f	typeref:typename:uint8_t	file:
flecs_log_build_info	./src/flecs.c	/^void flecs_log_build_info(void) {$/;"	f	typeref:typename:void	file:
flecs_log_msg	./src/flecs.c	/^void flecs_log_msg($/;"	f	typeref:typename:void	file:
flecs_map_bucket_add	./src/flecs.c	/^ecs_map_val_t* flecs_map_bucket_add($/;"	f	typeref:typename:ecs_map_val_t *	file:
flecs_map_bucket_clear	./src/flecs.c	/^void flecs_map_bucket_clear($/;"	f	typeref:typename:void	file:
flecs_map_bucket_get	./src/flecs.c	/^ecs_map_val_t* flecs_map_bucket_get($/;"	f	typeref:typename:ecs_map_val_t *	file:
flecs_map_bucket_remove	./src/flecs.c	/^ecs_map_val_t flecs_map_bucket_remove($/;"	f	typeref:typename:ecs_map_val_t	file:
flecs_map_get_bucket	./src/flecs.c	/^ecs_bucket_t* flecs_map_get_bucket($/;"	f	typeref:typename:ecs_bucket_t *	file:
flecs_map_get_bucket_count	./src/flecs.c	/^int32_t flecs_map_get_bucket_count($/;"	f	typeref:typename:int32_t	file:
flecs_map_get_bucket_index	./src/flecs.c	/^int32_t flecs_map_get_bucket_index($/;"	f	typeref:typename:int32_t	file:
flecs_map_get_bucket_shift	./src/flecs.c	/^uint8_t flecs_map_get_bucket_shift ($/;"	f	typeref:typename:uint8_t	file:
flecs_map_rehash	./src/flecs.c	/^void flecs_map_rehash($/;"	f	typeref:typename:void	file:
flecs_marked_id_push	./src/flecs.c	/^void flecs_marked_id_push($/;"	f	typeref:typename:void	file:
flecs_member_metric_init	./src/flecs.c	/^int flecs_member_metric_init($/;"	f	typeref:typename:int	file:
flecs_member_on_set	./src/flecs.c	/^void flecs_member_on_set(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_member_range_overlaps	./src/flecs.c	/^bool flecs_member_range_overlaps($/;"	f	typeref:typename:bool	file:
flecs_meta_add_bitmask_constant	./src/flecs.c	/^int flecs_meta_add_bitmask_constant($/;"	f	typeref:typename:int	file:
flecs_meta_call	./src/flecs.c	/^int flecs_meta_call($/;"	f	typeref:typename:int	file:
flecs_meta_conversion_error	./src/flecs.c	/^void flecs_meta_conversion_error($/;"	f	typeref:typename:void	file:
flecs_meta_cursor_get_op	./src/flecs.c	/^ecs_meta_type_op_t* flecs_meta_cursor_get_op($/;"	f	typeref:typename:ecs_meta_type_op_t *	file:
flecs_meta_cursor_get_ptr	./src/flecs.c	/^ecs_meta_type_op_t* flecs_meta_cursor_get_ptr($/;"	f	typeref:typename:ecs_meta_type_op_t *	file:
flecs_meta_cursor_get_scope	./src/flecs.c	/^ecs_meta_scope_t* flecs_meta_cursor_get_scope($/;"	f	typeref:typename:ecs_meta_scope_t *	file:
flecs_meta_cursor_lookup	./src/flecs.c	/^int flecs_meta_cursor_lookup($/;"	f	typeref:typename:int	file:
flecs_meta_cursor_push_type	./src/flecs.c	/^int flecs_meta_cursor_push_type($/;"	f	typeref:typename:int	file:
flecs_meta_cursor_restore_scope	./src/flecs.c	/^ecs_meta_scope_t* flecs_meta_cursor_restore_scope($/;"	f	typeref:typename:ecs_meta_scope_t *	file:
flecs_meta_import_core_definitions	./src/flecs.c	/^void flecs_meta_import_core_definitions($/;"	f	typeref:typename:void	file:
flecs_meta_import_definitions	./src/flecs.c	/^void flecs_meta_import_definitions($/;"	f	typeref:typename:void
flecs_meta_import_doc_definitions	./src/flecs.c	/^void flecs_meta_import_doc_definitions($/;"	f	typeref:typename:void	file:
flecs_meta_import_meta_definitions	./src/flecs.c	/^void flecs_meta_import_meta_definitions($/;"	f	typeref:typename:void	file:
flecs_meta_op_kind_str	./src/flecs.c	/^const char* flecs_meta_op_kind_str($/;"	f	typeref:typename:const char *	file:
flecs_meta_ops_add	./src/flecs.c	/^ecs_meta_type_op_t* flecs_meta_ops_add(ecs_vec_t *ops, ecs_meta_type_op_kind_t kind) {$/;"	f	typeref:typename:ecs_meta_type_op_t *	file:
flecs_meta_ops_get	./src/flecs.c	/^ecs_meta_type_op_t* flecs_meta_ops_get(ecs_vec_t *ops, int32_t index) {$/;"	f	typeref:typename:ecs_meta_type_op_t *	file:
flecs_meta_parse_bitmask	./src/flecs.c	/^int flecs_meta_parse_bitmask($/;"	f	typeref:typename:int	file:
flecs_meta_primitive_to_op_kind	./src/flecs.c	/^ecs_meta_type_op_kind_t flecs_meta_primitive_to_op_kind(ecs_primitive_kind_t kind) {$/;"	f	typeref:typename:ecs_meta_type_op_kind_t
flecs_meta_serialize_array	./src/flecs.c	/^int flecs_meta_serialize_array($/;"	f	typeref:typename:int	file:
flecs_meta_serialize_array_component	./src/flecs.c	/^int flecs_meta_serialize_array_component($/;"	f	typeref:typename:int	file:
flecs_meta_serialize_bitmask	./src/flecs.c	/^int flecs_meta_serialize_bitmask($/;"	f	typeref:typename:int	file:
flecs_meta_serialize_component	./src/flecs.c	/^int flecs_meta_serialize_component($/;"	f	typeref:typename:int	file:
flecs_meta_serialize_custom_type	./src/flecs.c	/^int flecs_meta_serialize_custom_type($/;"	f	typeref:typename:int	file:
flecs_meta_serialize_enum	./src/flecs.c	/^int flecs_meta_serialize_enum($/;"	f	typeref:typename:int	file:
flecs_meta_serialize_primitive	./src/flecs.c	/^int flecs_meta_serialize_primitive($/;"	f	typeref:typename:int	file:
flecs_meta_serialize_struct	./src/flecs.c	/^int flecs_meta_serialize_struct($/;"	f	typeref:typename:int	file:
flecs_meta_serialize_type	./src/flecs.c	/^int flecs_meta_serialize_type($/;"	f	typeref:typename:int	file:
flecs_meta_serialize_vector	./src/flecs.c	/^int flecs_meta_serialize_vector($/;"	f	typeref:typename:int	file:
flecs_meta_to_float	./src/flecs.c	/^double flecs_meta_to_float($/;"	f	typeref:typename:double	file:
flecs_meta_type_size	./src/flecs.c	/^ecs_size_t flecs_meta_type_size(ecs_world_t *world, ecs_entity_t type) {$/;"	f	typeref:typename:ecs_size_t	file:
flecs_metric_print	./src/flecs.c	/^void flecs_metric_print($/;"	f	typeref:typename:void	file:
flecs_metrics_on_id_metric	./src/flecs.c	/^static void flecs_metrics_on_id_metric(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_metrics_on_member_metric	./src/flecs.c	/^static void flecs_metrics_on_member_metric(ecs_iter_t *it) {$/;"	f	file:
flecs_metrics_on_oneof_metric	./src/flecs.c	/^static void flecs_metrics_on_oneof_metric(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_modified_id_if	./src/flecs.c	/^void flecs_modified_id_if($/;"	f	typeref:typename:void	file:
flecs_monitor_mark_dirty	./src/flecs.c	/^void flecs_monitor_mark_dirty($/;"	f	typeref:typename:void
flecs_monitor_register	./src/flecs.c	/^void flecs_monitor_register($/;"	f	typeref:typename:void
flecs_monitor_unregister	./src/flecs.c	/^void flecs_monitor_unregister($/;"	f	typeref:typename:void
flecs_move_entity	./src/flecs.c	/^void flecs_move_entity($/;"	f	typeref:typename:void	file:
flecs_move_ptr_w_id	./src/flecs.c	/^void flecs_move_ptr_w_id($/;"	f	typeref:typename:void	file:
flecs_multi_observer_builtin_run	./src/flecs.c	/^void flecs_multi_observer_builtin_run(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_multi_observer_init	./src/flecs.c	/^int flecs_multi_observer_init($/;"	f	typeref:typename:int	file:
flecs_multi_observer_invoke	./src/flecs.c	/^bool flecs_multi_observer_invoke($/;"	f	typeref:typename:bool	file:
flecs_multi_observer_yield_existing	./src/flecs.c	/^void flecs_multi_observer_yield_existing($/;"	f	typeref:typename:void	file:
flecs_n_term_match_table	./src/flecs.c	/^bool flecs_n_term_match_table($/;"	f	typeref:typename:bool	file:
flecs_name_index_compare	./src/flecs.c	/^int flecs_name_index_compare($/;"	f	typeref:typename:int	file:
flecs_name_index_copy	./src/flecs.c	/^ecs_hashmap_t* flecs_name_index_copy($/;"	f	typeref:typename:ecs_hashmap_t *
flecs_name_index_ensure	./src/flecs.c	/^void flecs_name_index_ensure($/;"	f	typeref:typename:void
flecs_name_index_find	./src/flecs.c	/^uint64_t flecs_name_index_find($/;"	f	typeref:typename:uint64_t
flecs_name_index_find_ptr	./src/flecs.c	/^const uint64_t* flecs_name_index_find_ptr($/;"	f	typeref:typename:const uint64_t *
flecs_name_index_fini	./src/flecs.c	/^void flecs_name_index_fini($/;"	f	typeref:typename:void
flecs_name_index_free	./src/flecs.c	/^void flecs_name_index_free($/;"	f	typeref:typename:void
flecs_name_index_hash	./src/flecs.c	/^uint64_t flecs_name_index_hash($/;"	f	typeref:typename:uint64_t	file:
flecs_name_index_init	./src/flecs.c	/^void flecs_name_index_init($/;"	f	typeref:typename:void
flecs_name_index_init_if	./src/flecs.c	/^void flecs_name_index_init_if($/;"	f	typeref:typename:void
flecs_name_index_is_init	./src/flecs.c	/^bool flecs_name_index_is_init($/;"	f	typeref:typename:bool
flecs_name_index_new	./src/flecs.c	/^ecs_hashmap_t* flecs_name_index_new($/;"	f	typeref:typename:ecs_hashmap_t *
flecs_name_index_remove	./src/flecs.c	/^void flecs_name_index_remove($/;"	f	typeref:typename:void
flecs_name_index_update_name	./src/flecs.c	/^void flecs_name_index_update_name($/;"	f	typeref:typename:void
flecs_name_is_id	./src/flecs.c	/^bool flecs_name_is_id($/;"	f	typeref:typename:bool
flecs_name_to_id	./src/flecs.c	/^ecs_entity_t flecs_name_to_id($/;"	f	typeref:typename:ecs_entity_t
flecs_new_entity	./src/flecs.c	/^ecs_record_t* flecs_new_entity($/;"	f	typeref:typename:ecs_record_t *	file:
flecs_next_pow_of_2	./src/flecs.c	/^int32_t flecs_next_pow_of_2($/;"	f	typeref:typename:int32_t
flecs_normalize_term_name	./src/flecs.c	/^void flecs_normalize_term_name($/;"	f	typeref:typename:void	file:
flecs_notify_on_add	./src/flecs.c	/^void flecs_notify_on_add($/;"	f	typeref:typename:void	file:
flecs_notify_on_remove	./src/flecs.c	/^void flecs_notify_on_remove($/;"	f	typeref:typename:void
flecs_notify_on_set	./src/flecs.c	/^void flecs_notify_on_set($/;"	f	typeref:typename:void
flecs_notify_tables	./src/flecs.c	/^void flecs_notify_tables($/;"	f	typeref:typename:void
flecs_observable_fini	./src/flecs.c	/^void flecs_observable_fini($/;"	f	typeref:typename:void
flecs_observable_init	./src/flecs.c	/^void flecs_observable_init($/;"	f	typeref:typename:void
flecs_observer_fini	./src/flecs.c	/^void flecs_observer_fini($/;"	f	typeref:typename:void
flecs_observer_fini_poly	./src/flecs.c	/^void flecs_observer_fini_poly(void *observer)$/;"	f	typeref:typename:void	file:
flecs_observer_id	./src/flecs.c	/^ecs_id_t flecs_observer_id($/;"	f	typeref:typename:ecs_id_t	file:
flecs_observer_invoke	./src/flecs.c	/^void flecs_observer_invoke($/;"	f	typeref:typename:void	file:
flecs_observer_set_disable_bit	./src/flecs.c	/^void flecs_observer_set_disable_bit($/;"	f	typeref:typename:void	file:
flecs_observers_exist	./src/flecs.c	/^bool flecs_observers_exist($/;"	f	typeref:typename:bool
flecs_observers_invoke	./src/flecs.c	/^void flecs_observers_invoke($/;"	f	typeref:typename:void
flecs_offset_iter	./src/flecs.c	/^void flecs_offset_iter($/;"	f	typeref:typename:void	file:
flecs_on_component	./src/flecs.c	/^void flecs_on_component(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_on_delete	./src/flecs.c	/^void flecs_on_delete($/;"	f	typeref:typename:void	file:
flecs_on_delete_clear_ids	./src/flecs.c	/^bool flecs_on_delete_clear_ids($/;"	f	typeref:typename:bool	file:
flecs_on_delete_clear_tables	./src/flecs.c	/^bool flecs_on_delete_clear_tables($/;"	f	typeref:typename:bool	file:
flecs_on_delete_mark	./src/flecs.c	/^bool flecs_on_delete_mark($/;"	f	typeref:typename:bool	file:
flecs_on_event_iterable_init	./src/flecs.c	/^void flecs_on_event_iterable_init($/;"	f	typeref:typename:void	file:
flecs_on_set_rest	./src/flecs.c	/^void flecs_on_set_rest(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_on_set_symbol	./src/flecs.c	/^void flecs_on_set_symbol(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_on_symmetric_add_remove	./src/flecs.c	/^void flecs_on_symmetric_add_remove(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_oneof_metric_init	./src/flecs.c	/^int flecs_oneof_metric_init($/;"	f	typeref:typename:int	file:
flecs_op_ctx	./src/flecs.c	/^#define flecs_op_ctx(ctx, op_kind) (&flecs_op_ctx_/;"	d	file:
flecs_op_ctx_	./src/flecs.c	/^ecs_rule_op_ctx_t* flecs_op_ctx_($/;"	f	typeref:typename:ecs_rule_op_ctx_t *	file:
flecs_oper_precedence	./src/flecs.c	/^int flecs_oper_precedence($/;"	f	typeref:typename:int	file:
flecs_oper_valid_for_type	./src/flecs.c	/^bool flecs_oper_valid_for_type($/;"	f	typeref:typename:bool	file:
flecs_override	./src/flecs.c	/^void* flecs_override($/;"	f	typeref:typename:void *	file:
flecs_override_copy	./src/flecs.c	/^void flecs_override_copy($/;"	f	typeref:typename:void	file:
flecs_parse_annotation	./src/flecs.c	/^const char* flecs_parse_annotation($/;"	f	typeref:typename:const char *	file:
flecs_parse_arguments	./src/flecs.c	/^const char* flecs_parse_arguments($/;"	f	typeref:typename:const char *	file:
flecs_parse_discover_type	./src/flecs.c	/^ecs_entity_t flecs_parse_discover_type($/;"	f	typeref:typename:ecs_entity_t	file:
flecs_parse_expr	./src/flecs.c	/^const char* flecs_parse_expr($/;"	f	typeref:typename:const char *	file:
flecs_parse_identifier	./src/flecs.c	/^int flecs_parse_identifier($/;"	f	typeref:typename:int	file:
flecs_parse_interpolated_str	./src/flecs.c	/^const char* flecs_parse_interpolated_str($/;"	f	typeref:typename:const char *	file:
flecs_parse_is_float	./src/flecs.c	/^bool flecs_parse_is_float($/;"	f	typeref:typename:bool	file:
flecs_parse_multiline_string	./src/flecs.c	/^const char* flecs_parse_multiline_string($/;"	f	typeref:typename:const char *	file:
flecs_parse_operator	./src/flecs.c	/^ecs_oper_kind_t flecs_parse_operator($/;"	f	typeref:typename:ecs_oper_kind_t	file:
flecs_parse_role	./src/flecs.c	/^ecs_entity_t flecs_parse_role($/;"	f	typeref:typename:ecs_entity_t	file:
flecs_parse_set_token	./src/flecs.c	/^uint8_t flecs_parse_set_token($/;"	f	typeref:typename:uint8_t	file:
flecs_parse_term	./src/flecs.c	/^const char* flecs_parse_term($/;"	f	typeref:typename:const char *	file:
flecs_parse_term_flags	./src/flecs.c	/^const char* flecs_parse_term_flags($/;"	f	typeref:typename:const char *	file:
flecs_parse_var_name	./src/flecs.c	/^const char* flecs_parse_var_name($/;"	f	typeref:typename:const char *	file:
flecs_parser_unexpected_char	./src/flecs.c	/^void flecs_parser_unexpected_char($/;"	f	typeref:typename:void	file:
flecs_path_append	./src/flecs.c	/^bool flecs_path_append($/;"	f	typeref:typename:bool	file:
flecs_path_elem	./src/flecs.c	/^const char* flecs_path_elem($/;"	f	typeref:typename:const char *	file:
flecs_pipeline_build	./src/flecs.c	/^bool flecs_pipeline_build($/;"	f	typeref:typename:bool	file:
flecs_pipeline_check_term	./src/flecs.c	/^bool flecs_pipeline_check_term($/;"	f	typeref:typename:bool	file:
flecs_pipeline_check_terms	./src/flecs.c	/^bool flecs_pipeline_check_terms($/;"	f	typeref:typename:bool	file:
flecs_pipeline_free	./src/flecs.c	/^static void flecs_pipeline_free($/;"	f	typeref:typename:void	file:
flecs_pipeline_get_write_state	./src/flecs.c	/^ecs_write_kind_t flecs_pipeline_get_write_state($/;"	f	typeref:typename:ecs_write_kind_t	file:
flecs_pipeline_monitor_import	./src/flecs.c	/^void flecs_pipeline_monitor_import($/;"	f	typeref:typename:void	file:
flecs_pipeline_next_system	./src/flecs.c	/^void flecs_pipeline_next_system($/;"	f	typeref:typename:void	file:
flecs_pipeline_reset_write_state	./src/flecs.c	/^void flecs_pipeline_reset_write_state($/;"	f	typeref:typename:void	file:
flecs_pipeline_set_write_state	./src/flecs.c	/^void flecs_pipeline_set_write_state($/;"	f	typeref:typename:void	file:
flecs_pipeline_stats_to_json	./src/flecs.c	/^void flecs_pipeline_stats_to_json($/;"	f	typeref:typename:void	file:
flecs_pipeline_term_system	./src/flecs.c	/^EcsPoly* flecs_pipeline_term_system($/;"	f	typeref:typename:EcsPoly *	file:
flecs_pipeline_update	./src/flecs.c	/^bool flecs_pipeline_update($/;"	f	typeref:typename:bool
flecs_plecs_parse	./src/flecs.c	/^int flecs_plecs_parse($/;"	f	typeref:typename:int	file:
flecs_process_empty_queries	./src/flecs.c	/^void flecs_process_empty_queries($/;"	f	typeref:typename:void	file:
flecs_process_pending_tables	./src/flecs.c	/^void flecs_process_pending_tables($/;"	f	typeref:typename:void
flecs_promote_type	./src/flecs.c	/^ecs_entity_t flecs_promote_type($/;"	f	typeref:typename:ecs_entity_t	file:
flecs_propagate_entities	./src/flecs.c	/^void flecs_propagate_entities($/;"	f	typeref:typename:void	file:
flecs_query_add_ref	./src/flecs.c	/^void flecs_query_add_ref($/;"	f	typeref:typename:void	file:
flecs_query_add_subquery	./src/flecs.c	/^void flecs_query_add_subquery($/;"	f	typeref:typename:void	file:
flecs_query_add_table_match	./src/flecs.c	/^ecs_query_table_match_t* flecs_query_add_table_match($/;"	f	typeref:typename:ecs_query_table_match_t *	file:
flecs_query_allocators_fini	./src/flecs.c	/^void flecs_query_allocators_fini($/;"	f	typeref:typename:void	file:
flecs_query_allocators_init	./src/flecs.c	/^void flecs_query_allocators_init($/;"	f	typeref:typename:void	file:
flecs_query_build_sorted_table_range	./src/flecs.c	/^void flecs_query_build_sorted_table_range($/;"	f	typeref:typename:void	file:
flecs_query_build_sorted_tables	./src/flecs.c	/^void flecs_query_build_sorted_tables($/;"	f	typeref:typename:void	file:
flecs_query_cache_add	./src/flecs.c	/^ecs_query_table_match_t* flecs_query_cache_add($/;"	f	typeref:typename:ecs_query_table_match_t *	file:
flecs_query_check_match_monitor	./src/flecs.c	/^bool flecs_query_check_match_monitor($/;"	f	typeref:typename:bool	file:
flecs_query_check_match_monitor_term	./src/flecs.c	/^bool flecs_query_check_match_monitor_term($/;"	f	typeref:typename:bool	file:
flecs_query_check_query_monitor	./src/flecs.c	/^bool flecs_query_check_query_monitor($/;"	f	typeref:typename:bool	file:
flecs_query_check_table_monitor	./src/flecs.c	/^bool flecs_query_check_table_monitor($/;"	f	typeref:typename:bool	file:
flecs_query_compute_group_id	./src/flecs.c	/^void flecs_query_compute_group_id($/;"	f	typeref:typename:void	file:
flecs_query_create_group	./src/flecs.c	/^void flecs_query_create_group($/;"	f	typeref:typename:void	file:
flecs_query_default_group_by	./src/flecs.c	/^uint64_t flecs_query_default_group_by($/;"	f	typeref:typename:uint64_t	file:
flecs_query_ensure_group	./src/flecs.c	/^ecs_query_table_list_t* flecs_query_ensure_group($/;"	f	typeref:typename:ecs_query_table_list_t *	file:
flecs_query_ensure_node_list	./src/flecs.c	/^ecs_query_table_list_t* flecs_query_ensure_node_list($/;"	f	typeref:typename:ecs_query_table_list_t *	file:
flecs_query_find_group_insertion_node	./src/flecs.c	/^ecs_query_table_match_t* flecs_query_find_group_insertion_node($/;"	f	typeref:typename:ecs_query_table_match_t *	file:
flecs_query_fini	./src/flecs.c	/^void flecs_query_fini($/;"	f	typeref:typename:void	file:
flecs_query_fini_poly	./src/flecs.c	/^void flecs_query_fini_poly(void *query)$/;"	f	typeref:typename:void	file:
flecs_query_for_each_component_monitor	./src/flecs.c	/^void flecs_query_for_each_component_monitor($/;"	f	typeref:typename:void	file:
flecs_query_get_column_for_term	./src/flecs.c	/^void flecs_query_get_column_for_term($/;"	f	typeref:typename:void	file:
flecs_query_get_group	./src/flecs.c	/^ecs_query_table_list_t* flecs_query_get_group($/;"	f	typeref:typename:ecs_query_table_list_t *	file:
flecs_query_get_group_id	./src/flecs.c	/^uint64_t flecs_query_get_group_id($/;"	f	typeref:typename:uint64_t	file:
flecs_query_get_match_monitor	./src/flecs.c	/^bool flecs_query_get_match_monitor($/;"	f	typeref:typename:bool	file:
flecs_query_get_node_list	./src/flecs.c	/^ecs_query_table_list_t* flecs_query_get_node_list($/;"	f	typeref:typename:ecs_query_table_list_t *	file:
flecs_query_group_by	./src/flecs.c	/^void flecs_query_group_by($/;"	f	typeref:typename:void	file:
flecs_query_group_by_cascade	./src/flecs.c	/^uint64_t flecs_query_group_by_cascade($/;"	f	typeref:typename:uint64_t	file:
flecs_query_has_refs	./src/flecs.c	/^bool flecs_query_has_refs($/;"	f	typeref:typename:bool	file:
flecs_query_id_record_get	./src/flecs.c	/^ecs_id_record_t* flecs_query_id_record_get($/;"	f	typeref:typename:ecs_id_record_t *
flecs_query_init_query_monitors	./src/flecs.c	/^void flecs_query_init_query_monitors($/;"	f	typeref:typename:void	file:
flecs_query_insert_table_node	./src/flecs.c	/^void flecs_query_insert_table_node($/;"	f	typeref:typename:void	file:
flecs_query_is_term_id_supported	./src/flecs.c	/^bool flecs_query_is_term_id_supported($/;"	f	typeref:typename:bool	file:
flecs_query_iter_init	./src/flecs.c	/^void flecs_query_iter_init($/;"	f	typeref:typename:void	file:
flecs_query_mark_columns_dirty	./src/flecs.c	/^void flecs_query_mark_columns_dirty($/;"	f	typeref:typename:void	file:
flecs_query_match_table	./src/flecs.c	/^bool flecs_query_match_table($/;"	f	typeref:typename:bool	file:
flecs_query_match_tables	./src/flecs.c	/^void flecs_query_match_tables($/;"	f	typeref:typename:void	file:
flecs_query_notify	./src/flecs.c	/^void flecs_query_notify($/;"	f	typeref:typename:void
flecs_query_notify_subqueries	./src/flecs.c	/^void flecs_query_notify_subqueries($/;"	f	typeref:typename:void	file:
flecs_query_on_event	./src/flecs.c	/^void flecs_query_on_event($/;"	f	typeref:typename:void	file:
flecs_query_order_by	./src/flecs.c	/^void flecs_query_order_by($/;"	f	typeref:typename:void	file:
flecs_query_populate_trivial	./src/flecs.c	/^void flecs_query_populate_trivial($/;"	f	typeref:typename:void	file:
flecs_query_process_signature	./src/flecs.c	/^int flecs_query_process_signature($/;"	f	typeref:typename:int	file:
flecs_query_rematch_tables	./src/flecs.c	/^void flecs_query_rematch_tables($/;"	f	typeref:typename:void	file:
flecs_query_remove_group	./src/flecs.c	/^void flecs_query_remove_group($/;"	f	typeref:typename:void	file:
flecs_query_remove_subquery	./src/flecs.c	/^void flecs_query_remove_subquery($/;"	f	typeref:typename:void	file:
flecs_query_remove_table_node	./src/flecs.c	/^void flecs_query_remove_table_node($/;"	f	typeref:typename:void	file:
flecs_query_set_table_match	./src/flecs.c	/^void flecs_query_set_table_match($/;"	f	typeref:typename:void	file:
flecs_query_set_var	./src/flecs.c	/^void flecs_query_set_var($/;"	f	typeref:typename:void	file:
flecs_query_sort_tables	./src/flecs.c	/^void flecs_query_sort_tables($/;"	f	typeref:typename:void	file:
flecs_query_sync_match_monitor	./src/flecs.c	/^void flecs_query_sync_match_monitor($/;"	f	typeref:typename:void	file:
flecs_query_table_cache_free	./src/flecs.c	/^void flecs_query_table_cache_free($/;"	f	typeref:typename:void	file:
flecs_query_table_free	./src/flecs.c	/^void flecs_query_table_free($/;"	f	typeref:typename:void	file:
flecs_query_table_insert	./src/flecs.c	/^ecs_query_table_t* flecs_query_table_insert($/;"	f	typeref:typename:ecs_query_table_t *	file:
flecs_query_table_match_free	./src/flecs.c	/^void flecs_query_table_match_free($/;"	f	typeref:typename:void	file:
flecs_query_unmatch_table	./src/flecs.c	/^void flecs_query_unmatch_table($/;"	f	typeref:typename:void	file:
flecs_query_update_table	./src/flecs.c	/^void flecs_query_update_table($/;"	f	typeref:typename:void	file:
flecs_range_from_entity	./src/flecs.c	/^ecs_table_range_t flecs_range_from_entity($/;"	f	typeref:typename:ecs_table_range_t	file:
flecs_realloc	./src/flecs.h	/^#define flecs_realloc(/;"	d
flecs_realloc_n	./src/flecs.h	/^#define flecs_realloc_n(/;"	d
flecs_record_add_flag	./src/flecs.c	/^void flecs_record_add_flag($/;"	f	typeref:typename:void
flecs_ref_is_written	./src/flecs.c	/^bool flecs_ref_is_written($/;"	f	typeref:typename:bool
flecs_ref_needs_sync	./src/flecs.c	/^bool flecs_ref_needs_sync($/;"	f	typeref:typename:bool	file:
flecs_register_always_override	./src/flecs.c	/^void flecs_register_always_override(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_register_dont_inherit	./src/flecs.c	/^void flecs_register_dont_inherit(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_register_exclusive	./src/flecs.c	/^void flecs_register_exclusive(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_register_final	./src/flecs.c	/^void flecs_register_final(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_register_id_flag_for_relation	./src/flecs.c	/^void flecs_register_id_flag_for_relation($/;"	f	typeref:typename:void	file:
flecs_register_observer_for_id	./src/flecs.c	/^void flecs_register_observer_for_id($/;"	f	typeref:typename:void	file:
flecs_register_on_delete	./src/flecs.c	/^void flecs_register_on_delete(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_register_on_delete_object	./src/flecs.c	/^void flecs_register_on_delete_object(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_register_slot_of	./src/flecs.c	/^void flecs_register_slot_of(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_register_symmetric	./src/flecs.c	/^void flecs_register_symmetric(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_register_tag	./src/flecs.c	/^void flecs_register_tag(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_register_traversable	./src/flecs.c	/^void flecs_register_traversable(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_register_union	./src/flecs.c	/^void flecs_register_union(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_register_with	./src/flecs.c	/^void flecs_register_with(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_relation_depth	./src/flecs.c	/^int32_t flecs_relation_depth($/;"	f	typeref:typename:int32_t
flecs_relation_depth_walk	./src/flecs.c	/^int32_t flecs_relation_depth_walk($/;"	f	typeref:typename:int32_t	file:
flecs_remove_from_table	./src/flecs.c	/^void flecs_remove_from_table($/;"	f	typeref:typename:void	file:
flecs_remove_id	./src/flecs.c	/^void flecs_remove_id($/;"	f	typeref:typename:void	file:
flecs_remove_id_elem	./src/flecs.c	/^void flecs_remove_id_elem($/;"	f	typeref:typename:void	file:
flecs_remove_invalid	./src/flecs.c	/^bool flecs_remove_invalid($/;"	f	typeref:typename:bool	file:
flecs_reply_error	./src/flecs.c	/^void flecs_reply_error($/;"	f	typeref:typename:void	file:
flecs_reply_verror	./src/flecs.c	/^void flecs_reply_verror($/;"	f	typeref:typename:void	file:
flecs_reset_count	./src/flecs.c	/^static int32_t flecs_reset_count = 0;$/;"	v	typeref:typename:int32_t	file:
flecs_reset_source_set_flag	./src/flecs.c	/^void flecs_reset_source_set_flag($/;"	f	typeref:typename:void	file:
flecs_rest_array_append	./src/flecs.c	/^#define flecs_rest_array_append(/;"	d	file:
flecs_rest_array_append_	./src/flecs.c	/^void flecs_rest_array_append_($/;"	f	typeref:typename:void	file:
flecs_rest_bool_param	./src/flecs.c	/^void flecs_rest_bool_param($/;"	f	typeref:typename:void	file:
flecs_rest_capture_log	./src/flecs.c	/^void flecs_rest_capture_log($/;"	f	typeref:typename:void	file:
flecs_rest_cmd_has_id	./src/flecs.c	/^bool flecs_rest_cmd_has_id($/;"	f	typeref:typename:bool	file:
flecs_rest_cmd_kind_to_str	./src/flecs.c	/^const char* flecs_rest_cmd_kind_to_str($/;"	f	typeref:typename:const char *	file:
flecs_rest_cmd_to_json	./src/flecs.c	/^void flecs_rest_cmd_to_json($/;"	f	typeref:typename:void	file:
flecs_rest_counter_append	./src/flecs.c	/^void flecs_rest_counter_append($/;"	f	typeref:typename:void	file:
flecs_rest_delete	./src/flecs.c	/^bool flecs_rest_delete($/;"	f	typeref:typename:bool	file:
flecs_rest_enable	./src/flecs.c	/^bool flecs_rest_enable($/;"	f	typeref:typename:bool	file:
flecs_rest_entity_from_path	./src/flecs.c	/^ecs_entity_t flecs_rest_entity_from_path($/;"	f	typeref:typename:ecs_entity_t	file:
flecs_rest_gauge_append	./src/flecs.c	/^void flecs_rest_gauge_append($/;"	f	typeref:typename:void	file:
flecs_rest_get_captured_log	./src/flecs.c	/^char* flecs_rest_get_captured_log(void) {$/;"	f	typeref:typename:char *	file:
flecs_rest_int_param	./src/flecs.c	/^void flecs_rest_int_param($/;"	f	typeref:typename:void	file:
flecs_rest_iter_to_reply	./src/flecs.c	/^void flecs_rest_iter_to_reply($/;"	f	typeref:typename:void	file:
flecs_rest_on_commands	./src/flecs.c	/^void flecs_rest_on_commands($/;"	f	typeref:typename:void	file:
flecs_rest_parse_json_ser_entity_params	./src/flecs.c	/^void flecs_rest_parse_json_ser_entity_params($/;"	f	typeref:typename:void	file:
flecs_rest_parse_json_ser_iter_params	./src/flecs.c	/^void flecs_rest_parse_json_ser_iter_params($/;"	f	typeref:typename:void	file:
flecs_rest_reply	./src/flecs.c	/^bool flecs_rest_reply($/;"	f	typeref:typename:bool	file:
flecs_rest_reply_commands_capture	./src/flecs.c	/^bool flecs_rest_reply_commands_capture($/;"	f	typeref:typename:bool	file:
flecs_rest_reply_commands_request	./src/flecs.c	/^bool flecs_rest_reply_commands_request($/;"	f	typeref:typename:bool	file:
flecs_rest_reply_entity	./src/flecs.c	/^bool flecs_rest_reply_entity($/;"	f	typeref:typename:bool	file:
flecs_rest_reply_existing_query	./src/flecs.c	/^bool flecs_rest_reply_existing_query($/;"	f	typeref:typename:bool	file:
flecs_rest_reply_query	./src/flecs.c	/^bool flecs_rest_reply_query($/;"	f	typeref:typename:bool	file:
flecs_rest_reply_set_captured_log	./src/flecs.c	/^void flecs_rest_reply_set_captured_log($/;"	f	typeref:typename:void	file:
flecs_rest_reply_stats	./src/flecs.c	/^bool flecs_rest_reply_stats($/;"	f	typeref:typename:bool	file:
flecs_rest_reply_table_append	./src/flecs.c	/^void flecs_rest_reply_table_append($/;"	f	typeref:typename:void	file:
flecs_rest_reply_table_append_memory	./src/flecs.c	/^void flecs_rest_reply_table_append_memory($/;"	f	typeref:typename:void	file:
flecs_rest_reply_table_append_type	./src/flecs.c	/^void flecs_rest_reply_table_append_type($/;"	f	typeref:typename:void	file:
flecs_rest_reply_tables	./src/flecs.c	/^bool flecs_rest_reply_tables($/;"	f	typeref:typename:bool	file:
flecs_rest_reply_world	./src/flecs.c	/^bool flecs_rest_reply_world($/;"	f	typeref:typename:bool	file:
flecs_rest_script	./src/flecs.c	/^bool flecs_rest_script($/;"	f	typeref:typename:bool	file:
flecs_rest_server_garbage_collect	./src/flecs.c	/^void flecs_rest_server_garbage_collect($/;"	f	typeref:typename:void	file:
flecs_rest_server_garbage_collect_all	./src/flecs.c	/^void flecs_rest_server_garbage_collect_all($/;"	f	typeref:typename:void	file:
flecs_rest_set	./src/flecs.c	/^bool flecs_rest_set($/;"	f	typeref:typename:bool	file:
flecs_rest_string_param	./src/flecs.c	/^void flecs_rest_string_param($/;"	f	typeref:typename:void	file:
flecs_resume_readonly	./src/flecs.c	/^void flecs_resume_readonly($/;"	f	typeref:typename:void
flecs_rule_add_var	./src/flecs.c	/^ecs_var_id_t flecs_rule_add_var($/;"	f	typeref:typename:ecs_var_id_t	file:
flecs_rule_add_var_for_term_id	./src/flecs.c	/^ecs_var_id_t flecs_rule_add_var_for_term_id($/;"	f	typeref:typename:ecs_var_id_t	file:
flecs_rule_and	./src/flecs.c	/^bool flecs_rule_and($/;"	f	typeref:typename:bool	file:
flecs_rule_and_any	./src/flecs.c	/^bool flecs_rule_and_any($/;"	f	typeref:typename:bool	file:
flecs_rule_and_id	./src/flecs.c	/^bool flecs_rule_and_id($/;"	f	typeref:typename:bool	file:
flecs_rule_begin_block	./src/flecs.c	/^ecs_rule_op_t* flecs_rule_begin_block($/;"	f	typeref:typename:ecs_rule_op_t *	file:
flecs_rule_begin_block_cond_eval	./src/flecs.c	/^void flecs_rule_begin_block_cond_eval($/;"	f	typeref:typename:void	file:
flecs_rule_begin_block_or	./src/flecs.c	/^void flecs_rule_begin_block_or($/;"	f	typeref:typename:void	file:
flecs_rule_build_down_cache	./src/flecs.c	/^void flecs_rule_build_down_cache($/;"	f	typeref:typename:void	file:
flecs_rule_build_up_cache	./src/flecs.c	/^void flecs_rule_build_up_cache($/;"	f	typeref:typename:void	file:
flecs_rule_compare_range	./src/flecs.c	/^bool flecs_rule_compare_range($/;"	f	typeref:typename:bool	file:
flecs_rule_compile	./src/flecs.c	/^int flecs_rule_compile($/;"	f	typeref:typename:int
flecs_rule_compile_builtin_pred	./src/flecs.c	/^int flecs_rule_compile_builtin_pred($/;"	f	typeref:typename:int	file:
flecs_rule_compile_ensure_vars	./src/flecs.c	/^int flecs_rule_compile_ensure_vars($/;"	f	typeref:typename:int	file:
flecs_rule_compile_lookup	./src/flecs.c	/^bool flecs_rule_compile_lookup($/;"	f	typeref:typename:bool	file:
flecs_rule_compile_pop	./src/flecs.c	/^void flecs_rule_compile_pop($/;"	f	typeref:typename:void	file:
flecs_rule_compile_push	./src/flecs.c	/^void flecs_rule_compile_push($/;"	f	typeref:typename:void	file:
flecs_rule_compile_term	./src/flecs.c	/^int flecs_rule_compile_term($/;"	f	typeref:typename:int	file:
flecs_rule_compile_term_id	./src/flecs.c	/^void flecs_rule_compile_term_id($/;"	f	typeref:typename:void	file:
flecs_rule_contain	./src/flecs.c	/^bool flecs_rule_contain($/;"	f	typeref:typename:bool	file:
flecs_rule_discover_vars	./src/flecs.c	/^int flecs_rule_discover_vars($/;"	f	typeref:typename:int	file:
flecs_rule_dispatch	./src/flecs.c	/^bool flecs_rule_dispatch($/;"	f	typeref:typename:bool	file:
flecs_rule_down_cache_fini	./src/flecs.c	/^void flecs_rule_down_cache_fini($/;"	f	typeref:typename:void
flecs_rule_each	./src/flecs.c	/^bool flecs_rule_each($/;"	f	typeref:typename:bool	file:
flecs_rule_end	./src/flecs.c	/^bool flecs_rule_end($/;"	f	typeref:typename:bool	file:
flecs_rule_end_block	./src/flecs.c	/^void flecs_rule_end_block($/;"	f	typeref:typename:void	file:
flecs_rule_end_block_cond_eval	./src/flecs.c	/^void flecs_rule_end_block_cond_eval($/;"	f	typeref:typename:void	file:
flecs_rule_end_block_or	./src/flecs.c	/^void flecs_rule_end_block_or($/;"	f	typeref:typename:void	file:
flecs_rule_ensure_scope_var	./src/flecs.c	/^int flecs_rule_ensure_scope_var($/;"	f	typeref:typename:int	file:
flecs_rule_ensure_scope_vars	./src/flecs.c	/^int flecs_rule_ensure_scope_vars($/;"	f	typeref:typename:int	file:
flecs_rule_eval_if	./src/flecs.c	/^bool flecs_rule_eval_if($/;"	f	typeref:typename:bool	file:
flecs_rule_find_var_id	./src/flecs.c	/^ecs_var_id_t flecs_rule_find_var_id($/;"	f	typeref:typename:ecs_var_id_t	file:
flecs_rule_fini	./src/flecs.c	/^void flecs_rule_fini($/;"	f	typeref:typename:void	file:
flecs_rule_fini_poly	./src/flecs.c	/^void flecs_rule_fini_poly(void *rule)$/;"	f	typeref:typename:void	file:
flecs_rule_get_allocator	./src/flecs.c	/^ecs_allocator_t* flecs_rule_get_allocator($/;"	f	typeref:typename:ecs_allocator_t *
flecs_rule_get_down_cache	./src/flecs.c	/^ecs_trav_down_t* flecs_rule_get_down_cache($/;"	f	typeref:typename:ecs_trav_down_t *
flecs_rule_get_range	./src/flecs.c	/^ecs_table_range_t flecs_rule_get_range($/;"	f	typeref:typename:ecs_table_range_t	file:
flecs_rule_get_table	./src/flecs.c	/^ecs_table_t* flecs_rule_get_table($/;"	f	typeref:typename:ecs_table_t *	file:
flecs_rule_get_trav_down_cache	./src/flecs.c	/^void flecs_rule_get_trav_down_cache($/;"	f	typeref:typename:void
flecs_rule_get_trav_up_cache	./src/flecs.c	/^void flecs_rule_get_trav_up_cache($/;"	f	typeref:typename:void
flecs_rule_get_up_cache	./src/flecs.c	/^ecs_trav_up_t* flecs_rule_get_up_cache($/;"	f	typeref:typename:ecs_trav_up_t *
flecs_rule_ids	./src/flecs.c	/^bool flecs_rule_ids($/;"	f	typeref:typename:bool	file:
flecs_rule_idsleft	./src/flecs.c	/^bool flecs_rule_idsleft($/;"	f	typeref:typename:bool	file:
flecs_rule_idsright	./src/flecs.c	/^bool flecs_rule_idsright($/;"	f	typeref:typename:bool	file:
flecs_rule_if	./src/flecs.c	/^bool flecs_rule_if($/;"	f	typeref:typename:bool	file:
flecs_rule_insert_contains	./src/flecs.c	/^void flecs_rule_insert_contains($/;"	f	typeref:typename:void	file:
flecs_rule_insert_each	./src/flecs.c	/^void flecs_rule_insert_each($/;"	f	typeref:typename:void	file:
flecs_rule_insert_inheritance	./src/flecs.c	/^void flecs_rule_insert_inheritance($/;"	f	typeref:typename:void	file:
flecs_rule_insert_lookup	./src/flecs.c	/^void flecs_rule_insert_lookup($/;"	f	typeref:typename:void	file:
flecs_rule_insert_pair_eq	./src/flecs.c	/^void flecs_rule_insert_pair_eq($/;"	f	typeref:typename:void	file:
flecs_rule_insert_populate	./src/flecs.c	/^void flecs_rule_insert_populate($/;"	f	typeref:typename:void	file:
flecs_rule_insert_trivial_search	./src/flecs.c	/^int32_t flecs_rule_insert_trivial_search($/;"	f	typeref:typename:int32_t	file:
flecs_rule_insert_unconstrained_transitive	./src/flecs.c	/^void flecs_rule_insert_unconstrained_transitive($/;"	f	typeref:typename:void	file:
flecs_rule_is_builtin_pred	./src/flecs.c	/^bool flecs_rule_is_builtin_pred($/;"	f	typeref:typename:bool	file:
flecs_rule_is_written	./src/flecs.c	/^bool flecs_rule_is_written($/;"	f	typeref:typename:bool
flecs_rule_it_set_column	./src/flecs.c	/^void flecs_rule_it_set_column($/;"	f	typeref:typename:void	file:
flecs_rule_it_set_id	./src/flecs.c	/^ecs_id_t flecs_rule_it_set_id($/;"	f	typeref:typename:ecs_id_t	file:
flecs_rule_iter_fini	./src/flecs.c	/^void flecs_rule_iter_fini($/;"	f	typeref:typename:void	file:
flecs_rule_iter_fini_ctx	./src/flecs.c	/^void flecs_rule_iter_fini_ctx($/;"	f	typeref:typename:void	file:
flecs_rule_iter_init	./src/flecs.c	/^void flecs_rule_iter_init($/;"	f	typeref:typename:void	file:
flecs_rule_iter_mixin_init	./src/flecs.c	/^void flecs_rule_iter_mixin_init($/;"	f	typeref:typename:void	file:
flecs_rule_lookup	./src/flecs.c	/^bool flecs_rule_lookup($/;"	f	typeref:typename:bool	file:
flecs_rule_most_specific_var	./src/flecs.c	/^ecs_var_id_t flecs_rule_most_specific_var($/;"	f	typeref:typename:ecs_var_id_t	file:
flecs_rule_name_arg	./src/flecs.c	/^const char* flecs_rule_name_arg($/;"	f	typeref:typename:const char *	file:
flecs_rule_next_column	./src/flecs.c	/^int16_t flecs_rule_next_column($/;"	f	typeref:typename:int16_t	file:
flecs_rule_not	./src/flecs.c	/^bool flecs_rule_not($/;"	f	typeref:typename:bool	file:
flecs_rule_op_get_id	./src/flecs.c	/^ecs_id_t flecs_rule_op_get_id($/;"	f	typeref:typename:ecs_id_t	file:
flecs_rule_op_get_id_w_written	./src/flecs.c	/^ecs_id_t flecs_rule_op_get_id_w_written($/;"	f	typeref:typename:ecs_id_t	file:
flecs_rule_op_insert	./src/flecs.c	/^ecs_rule_lbl_t flecs_rule_op_insert($/;"	f	typeref:typename:ecs_rule_lbl_t	file:
flecs_rule_op_ref_str	./src/flecs.c	/^int32_t flecs_rule_op_ref_str($/;"	f	typeref:typename:int32_t	file:
flecs_rule_op_str	./src/flecs.c	/^const char* flecs_rule_op_str($/;"	f	typeref:typename:const char *
flecs_rule_optional	./src/flecs.c	/^bool flecs_rule_optional($/;"	f	typeref:typename:bool	file:
flecs_rule_or	./src/flecs.c	/^bool flecs_rule_or($/;"	f	typeref:typename:bool	file:
flecs_rule_pair_eq	./src/flecs.c	/^bool flecs_rule_pair_eq($/;"	f	typeref:typename:bool	file:
flecs_rule_populate	./src/flecs.c	/^bool flecs_rule_populate($/;"	f	typeref:typename:bool	file:
flecs_rule_populate_self	./src/flecs.c	/^bool flecs_rule_populate_self($/;"	f	typeref:typename:bool	file:
flecs_rule_pred_eq	./src/flecs.c	/^bool flecs_rule_pred_eq($/;"	f	typeref:typename:bool	file:
flecs_rule_pred_eq_match	./src/flecs.c	/^bool flecs_rule_pred_eq_match($/;"	f	typeref:typename:bool	file:
flecs_rule_pred_eq_name	./src/flecs.c	/^bool flecs_rule_pred_eq_name($/;"	f	typeref:typename:bool	file:
flecs_rule_pred_eq_w_range	./src/flecs.c	/^bool flecs_rule_pred_eq_w_range($/;"	f	typeref:typename:bool	file:
flecs_rule_pred_match	./src/flecs.c	/^bool flecs_rule_pred_match($/;"	f	typeref:typename:bool	file:
flecs_rule_pred_neq	./src/flecs.c	/^bool flecs_rule_pred_neq($/;"	f	typeref:typename:bool	file:
flecs_rule_pred_neq_match	./src/flecs.c	/^bool flecs_rule_pred_neq_match($/;"	f	typeref:typename:bool	file:
flecs_rule_pred_neq_name	./src/flecs.c	/^bool flecs_rule_pred_neq_name($/;"	f	typeref:typename:bool	file:
flecs_rule_pred_neq_w_range	./src/flecs.c	/^bool flecs_rule_pred_neq_w_range($/;"	f	typeref:typename:bool	file:
flecs_rule_ref_flags	./src/flecs.c	/^ecs_flags16_t flecs_rule_ref_flags($/;"	f	typeref:typename:ecs_flags16_t
flecs_rule_reset	./src/flecs.c	/^bool flecs_rule_reset($/;"	f	typeref:typename:bool	file:
flecs_rule_reset_after_block	./src/flecs.c	/^void flecs_rule_reset_after_block($/;"	f	typeref:typename:void	file:
flecs_rule_run_block	./src/flecs.c	/^bool flecs_rule_run_block($/;"	f	typeref:typename:bool	file:
flecs_rule_run_block_w_reset	./src/flecs.c	/^bool flecs_rule_run_block_w_reset($/;"	f	typeref:typename:bool	file:
flecs_rule_run_until	./src/flecs.c	/^bool flecs_rule_run_until($/;"	f	typeref:typename:bool	file:
flecs_rule_select	./src/flecs.c	/^bool flecs_rule_select($/;"	f	typeref:typename:bool	file:
flecs_rule_select_any	./src/flecs.c	/^bool flecs_rule_select_any($/;"	f	typeref:typename:bool	file:
flecs_rule_select_id	./src/flecs.c	/^bool flecs_rule_select_id($/;"	f	typeref:typename:bool	file:
flecs_rule_select_or	./src/flecs.c	/^bool flecs_rule_select_or($/;"	f	typeref:typename:bool	file:
flecs_rule_select_w_id	./src/flecs.c	/^bool flecs_rule_select_w_id($/;"	f	typeref:typename:bool	file:
flecs_rule_self_up	./src/flecs.c	/^bool flecs_rule_self_up($/;"	f	typeref:typename:bool	file:
flecs_rule_self_up_id	./src/flecs.c	/^bool flecs_rule_self_up_id($/;"	f	typeref:typename:bool	file:
flecs_rule_self_up_with	./src/flecs.c	/^bool flecs_rule_self_up_with($/;"	f	typeref:typename:bool	file:
flecs_rule_set_match	./src/flecs.c	/^void flecs_rule_set_match($/;"	f	typeref:typename:void	file:
flecs_rule_set_trav_match	./src/flecs.c	/^void flecs_rule_set_trav_match($/;"	f	typeref:typename:void	file:
flecs_rule_set_vars	./src/flecs.c	/^void flecs_rule_set_vars($/;"	f	typeref:typename:void	file:
flecs_rule_setfixed	./src/flecs.c	/^bool flecs_rule_setfixed($/;"	f	typeref:typename:bool	file:
flecs_rule_setid	./src/flecs.c	/^bool flecs_rule_setid($/;"	f	typeref:typename:bool	file:
flecs_rule_setids	./src/flecs.c	/^bool flecs_rule_setids($/;"	f	typeref:typename:bool	file:
flecs_rule_setthis	./src/flecs.c	/^bool flecs_rule_setthis($/;"	f	typeref:typename:bool	file:
flecs_rule_setvars	./src/flecs.c	/^bool flecs_rule_setvars($/;"	f	typeref:typename:bool	file:
flecs_rule_store	./src/flecs.c	/^bool flecs_rule_store($/;"	f	typeref:typename:bool	file:
flecs_rule_table_filter	./src/flecs.c	/^bool flecs_rule_table_filter($/;"	f	typeref:typename:bool	file:
flecs_rule_term_fixed_id	./src/flecs.c	/^bool flecs_rule_term_fixed_id($/;"	f	typeref:typename:bool	file:
flecs_rule_term_is_or	./src/flecs.c	/^bool flecs_rule_term_is_or($/;"	f	typeref:typename:bool	file:
flecs_rule_term_is_unknown	./src/flecs.c	/^bool flecs_rule_term_is_unknown($/;"	f	typeref:typename:bool	file:
flecs_rule_term_next_known	./src/flecs.c	/^int32_t flecs_rule_term_next_known($/;"	f	typeref:typename:int32_t	file:
flecs_rule_trav	./src/flecs.c	/^bool flecs_rule_trav($/;"	f	typeref:typename:bool	file:
flecs_rule_trav_cache_fini	./src/flecs.c	/^void flecs_rule_trav_cache_fini($/;"	f	typeref:typename:void
flecs_rule_trav_fixed_src_reflexive	./src/flecs.c	/^bool flecs_rule_trav_fixed_src_reflexive($/;"	f	typeref:typename:bool	file:
flecs_rule_trav_fixed_src_up_fixed_second	./src/flecs.c	/^bool flecs_rule_trav_fixed_src_up_fixed_second($/;"	f	typeref:typename:bool	file:
flecs_rule_trav_fixed_src_up_unknown_second	./src/flecs.c	/^bool flecs_rule_trav_fixed_src_up_unknown_second($/;"	f	typeref:typename:bool	file:
flecs_rule_trav_unknown_src_reflexive	./src/flecs.c	/^bool flecs_rule_trav_unknown_src_reflexive($/;"	f	typeref:typename:bool	file:
flecs_rule_trav_unknown_src_up_fixed_second	./src/flecs.c	/^bool flecs_rule_trav_unknown_src_up_fixed_second($/;"	f	typeref:typename:bool	file:
flecs_rule_trav_yield_reflexive_src	./src/flecs.c	/^bool flecs_rule_trav_yield_reflexive_src($/;"	f	typeref:typename:bool	file:
flecs_rule_triv	./src/flecs.c	/^bool flecs_rule_triv($/;"	f	typeref:typename:bool	file:
flecs_rule_triv_data	./src/flecs.c	/^bool flecs_rule_triv_data($/;"	f	typeref:typename:bool	file:
flecs_rule_triv_wildcard	./src/flecs.c	/^bool flecs_rule_triv_wildcard($/;"	f	typeref:typename:bool	file:
flecs_rule_trivial_init	./src/flecs.c	/^bool flecs_rule_trivial_init($/;"	f	typeref:typename:bool	file:
flecs_rule_trivial_search	./src/flecs.c	/^bool flecs_rule_trivial_search($/;"	f	typeref:typename:bool
flecs_rule_trivial_search_init	./src/flecs.c	/^bool flecs_rule_trivial_search_init($/;"	f	typeref:typename:bool	file:
flecs_rule_trivial_search_nodata	./src/flecs.c	/^bool flecs_rule_trivial_search_nodata($/;"	f	typeref:typename:bool
flecs_rule_trivial_search_w_wildcards	./src/flecs.c	/^bool flecs_rule_trivial_search_w_wildcards($/;"	f	typeref:typename:bool
flecs_rule_trivial_test	./src/flecs.c	/^bool flecs_rule_trivial_test($/;"	f	typeref:typename:bool
flecs_rule_trivial_test_w_wildcards	./src/flecs.c	/^bool flecs_rule_trivial_test_w_wildcards($/;"	f	typeref:typename:bool
flecs_rule_up	./src/flecs.c	/^bool flecs_rule_up($/;"	f	typeref:typename:bool	file:
flecs_rule_up_cache_fini	./src/flecs.c	/^void flecs_rule_up_cache_fini($/;"	f	typeref:typename:void
flecs_rule_up_id	./src/flecs.c	/^bool flecs_rule_up_id($/;"	f	typeref:typename:bool	file:
flecs_rule_up_select	./src/flecs.c	/^bool flecs_rule_up_select($/;"	f	typeref:typename:bool	file:
flecs_rule_up_with	./src/flecs.c	/^bool flecs_rule_up_with($/;"	f	typeref:typename:bool	file:
flecs_rule_var_get_entity	./src/flecs.c	/^ecs_entity_t flecs_rule_var_get_entity($/;"	f	typeref:typename:ecs_entity_t	file:
flecs_rule_var_get_range	./src/flecs.c	/^ecs_table_range_t flecs_rule_var_get_range($/;"	f	typeref:typename:ecs_table_range_t	file:
flecs_rule_var_get_table	./src/flecs.c	/^ecs_table_t* flecs_rule_var_get_table($/;"	f	typeref:typename:ecs_table_t *	file:
flecs_rule_var_is_anonymous	./src/flecs.c	/^bool flecs_rule_var_is_anonymous($/;"	f	typeref:typename:bool	file:
flecs_rule_var_is_unknown	./src/flecs.c	/^bool flecs_rule_var_is_unknown($/;"	f	typeref:typename:bool	file:
flecs_rule_var_reset	./src/flecs.c	/^void flecs_rule_var_reset($/;"	f	typeref:typename:void	file:
flecs_rule_var_set_entity	./src/flecs.c	/^void flecs_rule_var_set_entity($/;"	f	typeref:typename:void	file:
flecs_rule_var_set_table	./src/flecs.c	/^void flecs_rule_var_set_table($/;"	f	typeref:typename:void	file:
flecs_rule_with	./src/flecs.c	/^bool flecs_rule_with($/;"	f	typeref:typename:bool	file:
flecs_rule_with_id	./src/flecs.c	/^bool flecs_rule_with_id($/;"	f	typeref:typename:bool	file:
flecs_rule_with_or	./src/flecs.c	/^bool flecs_rule_with_or($/;"	f	typeref:typename:bool	file:
flecs_rule_write	./src/flecs.c	/^void flecs_rule_write($/;"	f	typeref:typename:void	file:
flecs_rule_write_ctx	./src/flecs.c	/^void flecs_rule_write_ctx($/;"	f	typeref:typename:void	file:
flecs_run_pipeline	./src/flecs.c	/^void flecs_run_pipeline($/;"	f	typeref:typename:void
flecs_run_pipeline_ops	./src/flecs.c	/^int32_t flecs_run_pipeline_ops($/;"	f	typeref:typename:int32_t
flecs_run_startup_systems	./src/flecs.c	/^void flecs_run_startup_systems($/;"	f	typeref:typename:void	file:
flecs_s_max	./src/flecs.c	/^static int64_t flecs_s_max[] = { $/;"	v	typeref:typename:int64_t[]	file:
flecs_s_min	./src/flecs.c	/^static int64_t flecs_s_min[] = { $/;"	v	typeref:typename:int64_t[]	file:
flecs_script_tag	./src/flecs.c	/^ecs_id_t flecs_script_tag($/;"	f	typeref:typename:ecs_id_t	file:
flecs_search_relation_w_idr	./src/flecs.c	/^int32_t flecs_search_relation_w_idr($/;"	f	typeref:typename:int32_t
flecs_search_w_idr	./src/flecs.c	/^int32_t flecs_search_w_idr($/;"	f	typeref:typename:int32_t
flecs_set_array	./src/flecs.c	/^void flecs_set_array(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_set_custom_type	./src/flecs.c	/^void flecs_set_custom_type(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_set_id_flag	./src/flecs.c	/^bool flecs_set_id_flag($/;"	f	typeref:typename:bool	file:
flecs_set_identifier	./src/flecs.c	/^ecs_entity_t flecs_set_identifier($/;"	f	typeref:typename:ecs_entity_t	file:
flecs_set_member	./src/flecs.c	/^void flecs_set_member(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_set_member_ranges	./src/flecs.c	/^void flecs_set_member_ranges(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_set_primitive	./src/flecs.c	/^void flecs_set_primitive(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_set_source_set_flag	./src/flecs.c	/^void flecs_set_source_set_flag($/;"	f	typeref:typename:void	file:
flecs_set_struct_member	./src/flecs.c	/^void flecs_set_struct_member($/;"	f	typeref:typename:void	file:
flecs_set_threads_internal	./src/flecs.c	/^void flecs_set_threads_internal($/;"	f	typeref:typename:void	file:
flecs_set_union	./src/flecs.c	/^void flecs_set_union($/;"	f	typeref:typename:void	file:
flecs_set_unit	./src/flecs.c	/^void flecs_set_unit(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_set_var_label	./src/flecs.c	/^#define flecs_set_var_label(/;"	d	file:
flecs_set_vector	./src/flecs.c	/^void flecs_set_vector(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_signal_workers	./src/flecs.c	/^void flecs_signal_workers($/;"	f	typeref:typename:void
flecs_signed_char__	./src/flecs.c	/^#define flecs_signed_char__ /;"	d	file:
flecs_signed_ecs_entity_t__	./src/flecs.c	/^#define flecs_signed_ecs_entity_t__ /;"	d	file:
flecs_signed_ecs_size_t__	./src/flecs.c	/^#define flecs_signed_ecs_size_t__ /;"	d	file:
flecs_signed_int16_t__	./src/flecs.c	/^#define flecs_signed_int16_t__ /;"	d	file:
flecs_signed_int32_t__	./src/flecs.c	/^#define flecs_signed_int32_t__ /;"	d	file:
flecs_signed_int64_t__	./src/flecs.c	/^#define flecs_signed_int64_t__ /;"	d	file:
flecs_signed_int8_t__	./src/flecs.c	/^#define flecs_signed_int8_t__ /;"	d	file:
flecs_signed_int__	./src/flecs.c	/^#define flecs_signed_int__ /;"	d	file:
flecs_signed_intptr_t__	./src/flecs.c	/^#define flecs_signed_intptr_t__ /;"	d	file:
flecs_signed_long__	./src/flecs.c	/^#define flecs_signed_long__ /;"	d	file:
flecs_signed_short__	./src/flecs.c	/^#define flecs_signed_short__ /;"	d	file:
flecs_signed_size_t__	./src/flecs.c	/^#define flecs_signed_size_t__ /;"	d	file:
flecs_signed_uint16_t__	./src/flecs.c	/^#define flecs_signed_uint16_t__ /;"	d	file:
flecs_signed_uint32_t__	./src/flecs.c	/^#define flecs_signed_uint32_t__ /;"	d	file:
flecs_signed_uint64_t__	./src/flecs.c	/^#define flecs_signed_uint64_t__ /;"	d	file:
flecs_signed_uint8_t__	./src/flecs.c	/^#define flecs_signed_uint8_t__ /;"	d	file:
flecs_signed_uintptr_t__	./src/flecs.c	/^#define flecs_signed_uintptr_t__ /;"	d	file:
flecs_sparse_add	./src/flecs.c	/^void* flecs_sparse_add($/;"	f	typeref:typename:void *
flecs_sparse_add_t	./src/flecs.h	/^#define flecs_sparse_add_t(/;"	d
flecs_sparse_assign_index	./src/flecs.c	/^void flecs_sparse_assign_index($/;"	f	typeref:typename:void	file:
flecs_sparse_clear	./src/flecs.c	/^void flecs_sparse_clear($/;"	f	typeref:typename:void
flecs_sparse_count	./src/flecs.c	/^int32_t flecs_sparse_count($/;"	f	typeref:typename:int32_t
flecs_sparse_create_id	./src/flecs.c	/^uint64_t flecs_sparse_create_id($/;"	f	typeref:typename:uint64_t	file:
flecs_sparse_ensure	./src/flecs.c	/^void* flecs_sparse_ensure($/;"	f	typeref:typename:void *
flecs_sparse_ensure_fast	./src/flecs.c	/^void* flecs_sparse_ensure_fast($/;"	f	typeref:typename:void *
flecs_sparse_ensure_fast_t	./src/flecs.h	/^#define flecs_sparse_ensure_fast_t(/;"	d
flecs_sparse_ensure_t	./src/flecs.h	/^#define flecs_sparse_ensure_t(/;"	d
flecs_sparse_fini	./src/flecs.c	/^void flecs_sparse_fini($/;"	f	typeref:typename:void
flecs_sparse_get	./src/flecs.c	/^void* flecs_sparse_get($/;"	f	typeref:typename:void *
flecs_sparse_get_any	./src/flecs.c	/^void* flecs_sparse_get_any($/;"	f	typeref:typename:void *
flecs_sparse_get_any_t	./src/flecs.h	/^#define flecs_sparse_get_any_t(/;"	d
flecs_sparse_get_dense	./src/flecs.c	/^void* flecs_sparse_get_dense($/;"	f	typeref:typename:void *
flecs_sparse_get_dense_t	./src/flecs.h	/^#define flecs_sparse_get_dense_t(/;"	d
flecs_sparse_get_id	./src/flecs.c	/^uint64_t flecs_sparse_get_id($/;"	f	typeref:typename:uint64_t	file:
flecs_sparse_get_or_create_page	./src/flecs.c	/^ecs_page_t* flecs_sparse_get_or_create_page($/;"	f	typeref:typename:ecs_page_t *	file:
flecs_sparse_get_page	./src/flecs.c	/^ecs_page_t* flecs_sparse_get_page($/;"	f	typeref:typename:ecs_page_t *	file:
flecs_sparse_get_sparse	./src/flecs.c	/^void* flecs_sparse_get_sparse($/;"	f	typeref:typename:void *	file:
flecs_sparse_get_t	./src/flecs.h	/^#define flecs_sparse_get_t(/;"	d
flecs_sparse_grow_dense	./src/flecs.c	/^void flecs_sparse_grow_dense($/;"	f	typeref:typename:void	file:
flecs_sparse_ids	./src/flecs.c	/^const uint64_t* flecs_sparse_ids($/;"	f	typeref:typename:const uint64_t *
flecs_sparse_inc_gen	./src/flecs.c	/^uint64_t flecs_sparse_inc_gen($/;"	f	typeref:typename:uint64_t	file:
flecs_sparse_inc_id	./src/flecs.c	/^uint64_t flecs_sparse_inc_id($/;"	f	typeref:typename:uint64_t	file:
flecs_sparse_init	./src/flecs.c	/^void flecs_sparse_init($/;"	f	typeref:typename:void
flecs_sparse_init_t	./src/flecs.h	/^#define flecs_sparse_init_t(/;"	d
flecs_sparse_is_alive	./src/flecs.c	/^bool flecs_sparse_is_alive($/;"	f	typeref:typename:bool
flecs_sparse_last_id	./src/flecs.c	/^uint64_t flecs_sparse_last_id($/;"	f	typeref:typename:uint64_t
flecs_sparse_new_id	./src/flecs.c	/^uint64_t flecs_sparse_new_id($/;"	f	typeref:typename:uint64_t
flecs_sparse_new_index	./src/flecs.c	/^uint64_t flecs_sparse_new_index($/;"	f	typeref:typename:uint64_t	file:
flecs_sparse_page_free	./src/flecs.c	/^void flecs_sparse_page_free($/;"	f	typeref:typename:void	file:
flecs_sparse_page_new	./src/flecs.c	/^ecs_page_t* flecs_sparse_page_new($/;"	f	typeref:typename:ecs_page_t *	file:
flecs_sparse_remove	./src/flecs.c	/^void flecs_sparse_remove($/;"	f	typeref:typename:void
flecs_sparse_remove_t	./src/flecs.h	/^#define flecs_sparse_remove_t(/;"	d
flecs_sparse_set_id	./src/flecs.c	/^void flecs_sparse_set_id($/;"	f	typeref:typename:void	file:
flecs_sparse_strip_generation	./src/flecs.c	/^uint64_t flecs_sparse_strip_generation($/;"	f	typeref:typename:uint64_t	file:
flecs_sparse_swap_dense	./src/flecs.c	/^void flecs_sparse_swap_dense($/;"	f	typeref:typename:void	file:
flecs_sparse_try	./src/flecs.c	/^void* flecs_sparse_try($/;"	f	typeref:typename:void *
flecs_sparse_try_t	./src/flecs.h	/^#define flecs_sparse_try_t(/;"	d
flecs_stack_alloc	./src/flecs.c	/^void* flecs_stack_alloc($/;"	f	typeref:typename:void *
flecs_stack_alloc_n	./src/flecs.c	/^#define flecs_stack_alloc_n(/;"	d	file:
flecs_stack_alloc_t	./src/flecs.c	/^#define flecs_stack_alloc_t(/;"	d	file:
flecs_stack_calloc	./src/flecs.c	/^void* flecs_stack_calloc($/;"	f	typeref:typename:void *
flecs_stack_calloc_n	./src/flecs.c	/^#define flecs_stack_calloc_n(/;"	d	file:
flecs_stack_calloc_t	./src/flecs.c	/^#define flecs_stack_calloc_t(/;"	d	file:
flecs_stack_fini	./src/flecs.c	/^void flecs_stack_fini($/;"	f	typeref:typename:void
flecs_stack_free	./src/flecs.c	/^void flecs_stack_free($/;"	f	typeref:typename:void
flecs_stack_free_n	./src/flecs.c	/^#define flecs_stack_free_n(/;"	d	file:
flecs_stack_free_t	./src/flecs.c	/^#define flecs_stack_free_t(/;"	d	file:
flecs_stack_get_cursor	./src/flecs.c	/^ecs_stack_cursor_t* flecs_stack_get_cursor($/;"	f	typeref:typename:ecs_stack_cursor_t *
flecs_stack_init	./src/flecs.c	/^void flecs_stack_init($/;"	f	typeref:typename:void
flecs_stack_page_new	./src/flecs.c	/^ecs_stack_page_t* flecs_stack_page_new(uint32_t page_id) {$/;"	f	typeref:typename:ecs_stack_page_t *	file:
flecs_stack_reset	./src/flecs.c	/^void flecs_stack_reset($/;"	f	typeref:typename:void
flecs_stack_restore_cursor	./src/flecs.c	/^void flecs_stack_restore_cursor($/;"	f	typeref:typename:void
flecs_stage_auto_merge	./src/flecs.c	/^void flecs_stage_auto_merge($/;"	f	typeref:typename:void	file:
flecs_stage_fini	./src/flecs.c	/^void flecs_stage_fini($/;"	f	typeref:typename:void
flecs_stage_from_readonly_world	./src/flecs.c	/^const ecs_stage_t* flecs_stage_from_readonly_world($/;"	f	typeref:typename:const ecs_stage_t *
flecs_stage_from_world	./src/flecs.c	/^ecs_stage_t* flecs_stage_from_world($/;"	f	typeref:typename:ecs_stage_t *
flecs_stage_init	./src/flecs.c	/^void flecs_stage_init($/;"	f	typeref:typename:void
flecs_stage_manual_merge	./src/flecs.c	/^void flecs_stage_manual_merge($/;"	f	typeref:typename:void	file:
flecs_stage_merge_post_frame	./src/flecs.c	/^void flecs_stage_merge_post_frame($/;"	f	typeref:typename:void
flecs_stage_set_system	./src/flecs.c	/^ecs_entity_t flecs_stage_set_system($/;"	f	typeref:typename:ecs_entity_t
flecs_stages_merge	./src/flecs.c	/^void flecs_stages_merge($/;"	f	typeref:typename:void	file:
flecs_start_measure_frame	./src/flecs.c	/^ecs_ftime_t flecs_start_measure_frame($/;"	f	typeref:typename:ecs_ftime_t	file:
flecs_start_workers	./src/flecs.c	/^void flecs_start_workers($/;"	f	typeref:typename:void	file:
flecs_static_assert	./src/flecs.h	/^#define flecs_static_assert(/;"	d
flecs_stats_copy_last	./src/flecs.c	/^void flecs_stats_copy_last($/;"	f	typeref:typename:void	file:
flecs_stats_monitor_import	./src/flecs.c	/^void flecs_stats_monitor_import($/;"	f	typeref:typename:void	file:
flecs_stats_reduce	./src/flecs.c	/^void flecs_stats_reduce($/;"	f	typeref:typename:void	file:
flecs_stats_reduce_last	./src/flecs.c	/^void flecs_stats_reduce_last($/;"	f	typeref:typename:void	file:
flecs_stats_repeat_last	./src/flecs.c	/^void flecs_stats_repeat_last($/;"	f	typeref:typename:void	file:
flecs_stop_measure_frame	./src/flecs.c	/^void flecs_stop_measure_frame($/;"	f	typeref:typename:void	file:
flecs_str_to_expr_oper	./src/flecs.c	/^const char* flecs_str_to_expr_oper($/;"	f	typeref:typename:const char *	file:
flecs_strbuf_appendch	./src/flecs.c	/^void flecs_strbuf_appendch($/;"	f	typeref:typename:void	file:
flecs_strbuf_appendstr	./src/flecs.c	/^void flecs_strbuf_appendstr($/;"	f	typeref:typename:void	file:
flecs_strbuf_ftoa	./src/flecs.c	/^void flecs_strbuf_ftoa($/;"	f	typeref:typename:void	file:
flecs_strbuf_grow	./src/flecs.c	/^void flecs_strbuf_grow($/;"	f	typeref:typename:void	file:
flecs_strbuf_itoa	./src/flecs.c	/^char* flecs_strbuf_itoa($/;"	f	typeref:typename:char *	file:
flecs_strbuf_ptr	./src/flecs.c	/^char* flecs_strbuf_ptr($/;"	f	typeref:typename:char *	file:
flecs_strbuf_vappend	./src/flecs.c	/^void flecs_strbuf_vappend($/;"	f	typeref:typename:void	file:
flecs_strdup	./src/flecs.c	/^char* flecs_strdup($/;"	f	typeref:typename:char *
flecs_strfree	./src/flecs.c	/^void flecs_strfree($/;"	f	typeref:typename:void
flecs_string_hash	./src/flecs.c	/^uint64_t flecs_string_hash($/;"	f	typeref:typename:uint64_t
flecs_struct_dtor	./src/flecs.c	/^static void flecs_struct_dtor($/;"	f	file:
flecs_suspend_readonly	./src/flecs.c	/^ecs_world_t* flecs_suspend_readonly($/;"	f	typeref:typename:ecs_world_t *
flecs_switch_add	./src/flecs.c	/^void flecs_switch_add($/;"	f	typeref:typename:void
flecs_switch_addn	./src/flecs.c	/^void flecs_switch_addn($/;"	f	typeref:typename:void
flecs_switch_case_count	./src/flecs.c	/^int32_t flecs_switch_case_count($/;"	f	typeref:typename:int32_t
flecs_switch_clear	./src/flecs.c	/^void flecs_switch_clear($/;"	f	typeref:typename:void
flecs_switch_count	./src/flecs.c	/^int32_t flecs_switch_count($/;"	f	typeref:typename:int32_t
flecs_switch_ensure	./src/flecs.c	/^void flecs_switch_ensure($/;"	f	typeref:typename:void
flecs_switch_ensure_header	./src/flecs.c	/^ecs_switch_header_t *flecs_switch_ensure_header($/;"	f	typeref:typename:ecs_switch_header_t *	file:
flecs_switch_fini	./src/flecs.c	/^void flecs_switch_fini($/;"	f	typeref:typename:void
flecs_switch_first	./src/flecs.c	/^int32_t flecs_switch_first($/;"	f	typeref:typename:int32_t
flecs_switch_get	./src/flecs.c	/^uint64_t flecs_switch_get($/;"	f	typeref:typename:uint64_t
flecs_switch_get_header	./src/flecs.c	/^ecs_switch_header_t* flecs_switch_get_header($/;"	f	typeref:typename:ecs_switch_header_t *	file:
flecs_switch_init	./src/flecs.c	/^void flecs_switch_init($/;"	f	typeref:typename:void
flecs_switch_next	./src/flecs.c	/^int32_t flecs_switch_next($/;"	f	typeref:typename:int32_t
flecs_switch_remove	./src/flecs.c	/^void flecs_switch_remove($/;"	f	typeref:typename:void
flecs_switch_remove_node	./src/flecs.c	/^void flecs_switch_remove_node($/;"	f	typeref:typename:void	file:
flecs_switch_set	./src/flecs.c	/^void flecs_switch_set($/;"	f	typeref:typename:void
flecs_switch_set_count	./src/flecs.c	/^void flecs_switch_set_count($/;"	f	typeref:typename:void
flecs_switch_swap	./src/flecs.c	/^void flecs_switch_swap($/;"	f	typeref:typename:void
flecs_switch_term_t	./src/flecs.c	/^typedef struct flecs_switch_term_t {$/;"	s	file:
flecs_switch_term_t	./src/flecs.c	/^} flecs_switch_term_t;$/;"	t	typeref:struct:flecs_switch_term_t	file:
flecs_switch_values	./src/flecs.c	/^ecs_vec_t* flecs_switch_values($/;"	f	typeref:typename:ecs_vec_t *
flecs_switch_verify_nodes	./src/flecs.c	/^#define flecs_switch_verify_nodes(/;"	d	file:
flecs_switch_verify_nodes	./src/flecs.c	/^void flecs_switch_verify_nodes($/;"	f	typeref:typename:void	file:
flecs_sync_worker	./src/flecs.c	/^void flecs_sync_worker($/;"	f	typeref:typename:void	file:
flecs_system_fini	./src/flecs.c	/^void flecs_system_fini(ecs_system_t *sys) {$/;"	f	typeref:typename:void	file:
flecs_system_fini_poly	./src/flecs.c	/^void flecs_system_fini_poly(void *sys)$/;"	f	typeref:typename:void	file:
flecs_system_init_timer	./src/flecs.c	/^void flecs_system_init_timer($/;"	f	typeref:typename:void	file:
flecs_system_stats_to_json	./src/flecs.c	/^void flecs_system_stats_to_json($/;"	f	typeref:typename:void	file:
flecs_table_add_trigger_flags	./src/flecs.c	/^void flecs_table_add_trigger_flags($/;"	f	typeref:typename:void	file:
flecs_table_append	./src/flecs.c	/^int32_t flecs_table_append($/;"	f	typeref:typename:int32_t
flecs_table_append_to_records	./src/flecs.c	/^void flecs_table_append_to_records($/;"	f	typeref:typename:void	file:
flecs_table_appendn	./src/flecs.c	/^int32_t flecs_table_appendn($/;"	f	typeref:typename:int32_t
flecs_table_cache_all_iter	./src/flecs.c	/^bool flecs_table_cache_all_iter($/;"	f	typeref:typename:bool
flecs_table_cache_count	./src/flecs.c	/^#define flecs_table_cache_count(/;"	d	file:
flecs_table_cache_empty_count	./src/flecs.c	/^#define flecs_table_cache_empty_count(/;"	d	file:
flecs_table_cache_empty_iter	./src/flecs.c	/^bool flecs_table_cache_empty_iter($/;"	f	typeref:typename:bool
flecs_table_cache_iter	./src/flecs.c	/^bool flecs_table_cache_iter($/;"	f	typeref:typename:bool
flecs_table_cache_list_insert	./src/flecs.c	/^void flecs_table_cache_list_insert($/;"	f	typeref:typename:void	file:
flecs_table_cache_list_remove	./src/flecs.c	/^void flecs_table_cache_list_remove($/;"	f	typeref:typename:void	file:
flecs_table_cache_next	./src/flecs.c	/^#define flecs_table_cache_next(/;"	d	file:
flecs_table_cache_next_	./src/flecs.c	/^ecs_table_cache_hdr_t* flecs_table_cache_next_($/;"	f	typeref:typename:ecs_table_cache_hdr_t *
flecs_table_check_sanity	./src/flecs.c	/^#define flecs_table_check_sanity(/;"	d	file:
flecs_table_check_sanity	./src/flecs.c	/^void flecs_table_check_sanity(ecs_table_t *table) {$/;"	f	typeref:typename:void	file:
flecs_table_clear_data	./src/flecs.c	/^void flecs_table_clear_data($/;"	f	typeref:typename:void
flecs_table_clear_edges	./src/flecs.c	/^void flecs_table_clear_edges($/;"	f	typeref:typename:void
flecs_table_clear_entities	./src/flecs.c	/^void flecs_table_clear_entities($/;"	f	typeref:typename:void
flecs_table_clear_entities_silent	./src/flecs.c	/^void flecs_table_clear_entities_silent($/;"	f	typeref:typename:void
flecs_table_column_t	./src/flecs.c	/^} flecs_table_column_t;$/;"	t	typeref:struct:__anon7d4a41770508	file:
flecs_table_column_to_union_index	./src/flecs.c	/^int32_t flecs_table_column_to_union_index($/;"	f	typeref:typename:int32_t
flecs_table_data_count	./src/flecs.c	/^int32_t flecs_table_data_count($/;"	f	typeref:typename:int32_t
flecs_table_delete	./src/flecs.c	/^void flecs_table_delete($/;"	f	typeref:typename:void
flecs_table_delete_entities	./src/flecs.c	/^void flecs_table_delete_entities($/;"	f	typeref:typename:void
flecs_table_diff_build	./src/flecs.c	/^void flecs_table_diff_build($/;"	f	typeref:typename:void
flecs_table_diff_build_add_type_to_vec	./src/flecs.c	/^void flecs_table_diff_build_add_type_to_vec($/;"	f	typeref:typename:void	file:
flecs_table_diff_build_append_table	./src/flecs.c	/^void flecs_table_diff_build_append_table($/;"	f	typeref:typename:void
flecs_table_diff_build_noalloc	./src/flecs.c	/^void flecs_table_diff_build_noalloc($/;"	f	typeref:typename:void
flecs_table_diff_build_type	./src/flecs.c	/^void flecs_table_diff_build_type($/;"	f	typeref:typename:void	file:
flecs_table_diff_builder_clear	./src/flecs.c	/^void flecs_table_diff_builder_clear($/;"	f	typeref:typename:void
flecs_table_diff_builder_fini	./src/flecs.c	/^void flecs_table_diff_builder_fini($/;"	f	typeref:typename:void
flecs_table_diff_builder_init	./src/flecs.c	/^void flecs_table_diff_builder_init($/;"	f	typeref:typename:void
flecs_table_diff_free	./src/flecs.c	/^void flecs_table_diff_free($/;"	f	typeref:typename:void	file:
flecs_table_disconnect_edge	./src/flecs.c	/^void flecs_table_disconnect_edge($/;"	f	typeref:typename:void	file:
flecs_table_dtor_all	./src/flecs.c	/^void flecs_table_dtor_all($/;"	f	typeref:typename:void	file:
flecs_table_ensure	./src/flecs.c	/^ecs_table_t* flecs_table_ensure($/;"	f	typeref:typename:ecs_table_t *	file:
flecs_table_ensure_edge	./src/flecs.c	/^ecs_graph_edge_t* flecs_table_ensure_edge($/;"	f	typeref:typename:ecs_graph_edge_t *	file:
flecs_table_ensure_hi_edge	./src/flecs.c	/^ecs_graph_edge_t* flecs_table_ensure_hi_edge($/;"	f	typeref:typename:ecs_graph_edge_t *	file:
flecs_table_entities	./src/flecs.c	/^ecs_vec_t* flecs_table_entities($/;"	f	typeref:typename:ecs_vec_t *
flecs_table_entities_array	./src/flecs.c	/^ecs_entity_t* flecs_table_entities_array($/;"	f	typeref:typename:ecs_entity_t *
flecs_table_fast_append	./src/flecs.c	/^void flecs_table_fast_append($/;"	f	typeref:typename:void	file:
flecs_table_fast_delete	./src/flecs.c	/^void flecs_table_fast_delete($/;"	f	typeref:typename:void	file:
flecs_table_fast_delete_last	./src/flecs.c	/^void flecs_table_fast_delete_last($/;"	f	typeref:typename:void	file:
flecs_table_fast_move	./src/flecs.c	/^void flecs_table_fast_move($/;"	f	typeref:typename:void	file:
flecs_table_find_or_create	./src/flecs.c	/^ecs_table_t* flecs_table_find_or_create($/;"	f	typeref:typename:ecs_table_t *
flecs_table_fini_data	./src/flecs.c	/^void flecs_table_fini_data($/;"	f	typeref:typename:void	file:
flecs_table_free	./src/flecs.c	/^void flecs_table_free($/;"	f	typeref:typename:void
flecs_table_free_type	./src/flecs.c	/^void flecs_table_free_type($/;"	f	typeref:typename:void
flecs_table_get_dirty_state	./src/flecs.c	/^int32_t* flecs_table_get_dirty_state($/;"	f	typeref:typename:int32_t *
flecs_table_grow_column	./src/flecs.c	/^void flecs_table_grow_column($/;"	f	typeref:typename:void	file:
flecs_table_grow_data	./src/flecs.c	/^int32_t flecs_table_grow_data($/;"	f	typeref:typename:int32_t	file:
flecs_table_hashmap_init	./src/flecs.c	/^void flecs_table_hashmap_init($/;"	f	typeref:typename:void
flecs_table_init	./src/flecs.c	/^void flecs_table_init($/;"	f	typeref:typename:void
flecs_table_init_columns	./src/flecs.c	/^void flecs_table_init_columns($/;"	f	typeref:typename:void	file:
flecs_table_init_data	./src/flecs.c	/^void flecs_table_init_data($/;"	f	typeref:typename:void
flecs_table_init_edge	./src/flecs.c	/^void flecs_table_init_edge($/;"	f	typeref:typename:void	file:
flecs_table_init_edges	./src/flecs.c	/^void flecs_table_init_edges($/;"	f	typeref:typename:void	file:
flecs_table_init_flags	./src/flecs.c	/^void flecs_table_init_flags($/;"	f	typeref:typename:void	file:
flecs_table_init_node	./src/flecs.c	/^void flecs_table_init_node($/;"	f	typeref:typename:void	file:
flecs_table_invoke_add_hooks	./src/flecs.c	/^void flecs_table_invoke_add_hooks($/;"	f	typeref:typename:void	file:
flecs_table_invoke_ctor	./src/flecs.c	/^void flecs_table_invoke_ctor($/;"	f	typeref:typename:void	file:
flecs_table_invoke_dtor	./src/flecs.c	/^void flecs_table_invoke_dtor($/;"	f	typeref:typename:void	file:
flecs_table_invoke_hook	./src/flecs.c	/^void flecs_table_invoke_hook($/;"	f	typeref:typename:void	file:
flecs_table_invoke_remove_hooks	./src/flecs.c	/^void flecs_table_invoke_remove_hooks($/;"	f	typeref:typename:void	file:
flecs_table_mark_dirty	./src/flecs.c	/^void flecs_table_mark_dirty($/;"	f	typeref:typename:void
flecs_table_mark_table_dirty	./src/flecs.c	/^void flecs_table_mark_table_dirty($/;"	f	typeref:typename:void	file:
flecs_table_merge	./src/flecs.c	/^void flecs_table_merge($/;"	f	typeref:typename:void
flecs_table_merge_column	./src/flecs.c	/^void flecs_table_merge_column($/;"	f	typeref:typename:void	file:
flecs_table_merge_data	./src/flecs.c	/^void flecs_table_merge_data($/;"	f	typeref:typename:void	file:
flecs_table_merge_vec	./src/flecs.c	/^void flecs_table_merge_vec($/;"	f	typeref:typename:void	file:
flecs_table_move	./src/flecs.c	/^void flecs_table_move($/;"	f	typeref:typename:void
flecs_table_move_bitset_columns	./src/flecs.c	/^void flecs_table_move_bitset_columns($/;"	f	typeref:typename:void	file:
flecs_table_move_switch_columns	./src/flecs.c	/^void flecs_table_move_switch_columns($/;"	f	typeref:typename:void	file:
flecs_table_notify	./src/flecs.c	/^void flecs_table_notify($/;"	f	typeref:typename:void
flecs_table_notify_on_remove	./src/flecs.c	/^void flecs_table_notify_on_remove($/;"	f	typeref:typename:void	file:
flecs_table_observed_count	./src/flecs.c	/^int32_t flecs_table_observed_count($/;"	f	typeref:typename:int32_t
flecs_table_record_get	./src/flecs.c	/^ecs_table_record_t* flecs_table_record_get($/;"	f	typeref:typename:ecs_table_record_t *
flecs_table_records_unregister	./src/flecs.c	/^void flecs_table_records_unregister($/;"	f	typeref:typename:void	file:
flecs_table_records_update_empty	./src/flecs.c	/^bool flecs_table_records_update_empty($/;"	f	typeref:typename:bool
flecs_table_remove_actions	./src/flecs.c	/^void flecs_table_remove_actions($/;"	f	typeref:typename:void
flecs_table_remove_edge	./src/flecs.c	/^void flecs_table_remove_edge($/;"	f	typeref:typename:void	file:
flecs_table_replace_data	./src/flecs.c	/^void flecs_table_replace_data($/;"	f	typeref:typename:void
flecs_table_reset	./src/flecs.c	/^void flecs_table_reset($/;"	f	typeref:typename:void
flecs_table_set_empty	./src/flecs.c	/^void flecs_table_set_empty($/;"	f	typeref:typename:void
flecs_table_set_size	./src/flecs.c	/^void flecs_table_set_size($/;"	f	typeref:typename:void
flecs_table_shrink	./src/flecs.c	/^bool flecs_table_shrink($/;"	f	typeref:typename:bool
flecs_table_swap	./src/flecs.c	/^void flecs_table_swap($/;"	f	typeref:typename:void
flecs_table_swap_bitset_columns	./src/flecs.c	/^void flecs_table_swap_bitset_columns($/;"	f	typeref:typename:void	file:
flecs_table_swap_switch_columns	./src/flecs.c	/^void flecs_table_swap_switch_columns($/;"	f	typeref:typename:void	file:
flecs_table_traversable_add	./src/flecs.c	/^void flecs_table_traversable_add($/;"	f	typeref:typename:void
flecs_table_traverse_add	./src/flecs.c	/^ecs_table_t* flecs_table_traverse_add($/;"	f	typeref:typename:ecs_table_t *
flecs_table_traverse_remove	./src/flecs.c	/^ecs_table_t* flecs_table_traverse_remove($/;"	f	typeref:typename:ecs_table_t *
flecs_targets_mark_for_delete	./src/flecs.c	/^void flecs_targets_mark_for_delete($/;"	f	typeref:typename:void	file:
flecs_term_finalize	./src/flecs.c	/^int flecs_term_finalize($/;"	f	typeref:typename:int	file:
flecs_term_id_finalize_flags	./src/flecs.c	/^int flecs_term_id_finalize_flags($/;"	f	typeref:typename:int	file:
flecs_term_id_get_entity	./src/flecs.c	/^ecs_entity_t flecs_term_id_get_entity($/;"	f	typeref:typename:ecs_entity_t	file:
flecs_term_id_is_wildcard	./src/flecs.c	/^bool flecs_term_id_is_wildcard($/;"	f	typeref:typename:bool	file:
flecs_term_id_lookup	./src/flecs.c	/^int flecs_term_id_lookup($/;"	f	typeref:typename:int	file:
flecs_term_id_var_name	./src/flecs.c	/^const char* flecs_term_id_var_name($/;"	f	typeref:typename:const char *	file:
flecs_term_ids_finalize	./src/flecs.c	/^int flecs_term_ids_finalize($/;"	f	typeref:typename:int	file:
flecs_term_iter_find_superset	./src/flecs.c	/^bool flecs_term_iter_find_superset($/;"	f	typeref:typename:bool	file:
flecs_term_iter_next	./src/flecs.c	/^bool flecs_term_iter_next($/;"	f	typeref:typename:bool	file:
flecs_term_iter_next_table	./src/flecs.c	/^const ecs_table_record_t *flecs_term_iter_next_table($/;"	f	typeref:typename:const ecs_table_record_t *	file:
flecs_term_iter_set_table	./src/flecs.c	/^bool flecs_term_iter_set_table($/;"	f	typeref:typename:bool	file:
flecs_term_match_table	./src/flecs.c	/^bool flecs_term_match_table($/;"	f	typeref:typename:bool
flecs_term_populate_from_id	./src/flecs.c	/^int flecs_term_populate_from_id($/;"	f	typeref:typename:int	file:
flecs_term_populate_id	./src/flecs.c	/^int flecs_term_populate_id($/;"	f	typeref:typename:int	file:
flecs_term_str_w_strbuf	./src/flecs.c	/^void flecs_term_str_w_strbuf($/;"	f	typeref:typename:void	file:
flecs_term_verify	./src/flecs.c	/^int flecs_term_verify($/;"	f	typeref:typename:int	file:
flecs_term_verify_eq_pred	./src/flecs.c	/^int flecs_term_verify_eq_pred($/;"	f	typeref:typename:int	file:
flecs_throw_invalid_delete	./src/flecs.c	/^void flecs_throw_invalid_delete($/;"	f	typeref:typename:void	file:
flecs_to_public_id	./src/flecs.c	/^ecs_id_t flecs_to_public_id($/;"	f	typeref:typename:ecs_id_t
flecs_to_snake_case	./src/flecs.c	/^char* flecs_to_snake_case(const char *str) {$/;"	f	typeref:typename:char *
flecs_trav_down_ensure	./src/flecs.c	/^ecs_trav_down_t* flecs_trav_down_ensure($/;"	f	typeref:typename:ecs_trav_down_t *	file:
flecs_trav_entity_down	./src/flecs.c	/^ecs_trav_down_t* flecs_trav_entity_down($/;"	f	typeref:typename:ecs_trav_down_t *	file:
flecs_trav_entity_down_isa	./src/flecs.c	/^void flecs_trav_entity_down_isa($/;"	f	typeref:typename:void	file:
flecs_trav_table_down	./src/flecs.c	/^ecs_trav_down_t* flecs_trav_table_down($/;"	f	typeref:typename:ecs_trav_down_t *	file:
flecs_trav_table_up	./src/flecs.c	/^ecs_trav_up_t* flecs_trav_table_up($/;"	f	typeref:typename:ecs_trav_up_t *	file:
flecs_trav_type_offset_search	./src/flecs.c	/^int32_t flecs_trav_type_offset_search($/;"	f	typeref:typename:int32_t	file:
flecs_trav_type_search	./src/flecs.c	/^int32_t flecs_trav_type_search($/;"	f	typeref:typename:int32_t	file:
flecs_trav_up_ensure	./src/flecs.c	/^ecs_trav_up_t* flecs_trav_up_ensure($/;"	f	typeref:typename:ecs_trav_up_t *	file:
flecs_traverse_add	./src/flecs.c	/^int flecs_traverse_add($/;"	f	typeref:typename:int	file:
flecs_traverse_from_expr	./src/flecs.c	/^ecs_table_t *flecs_traverse_from_expr($/;"	f	typeref:typename:ecs_table_t *	file:
flecs_type_add	./src/flecs.c	/^void flecs_type_add($/;"	f	typeref:typename:void	file:
flecs_type_can_inherit_id	./src/flecs.c	/^bool flecs_type_can_inherit_id($/;"	f	typeref:typename:bool
flecs_type_compare	./src/flecs.c	/^int flecs_type_compare(const void *ptr_1, const void *ptr_2) {$/;"	f	typeref:typename:int	file:
flecs_type_copy	./src/flecs.c	/^ecs_type_t flecs_type_copy($/;"	f	typeref:typename:ecs_type_t
flecs_type_count_matches	./src/flecs.c	/^int flecs_type_count_matches($/;"	f	typeref:typename:int	file:
flecs_type_find	./src/flecs.c	/^int flecs_type_find($/;"	f	typeref:typename:int	file:
flecs_type_find_insert	./src/flecs.c	/^int flecs_type_find_insert($/;"	f	typeref:typename:int	file:
flecs_type_free	./src/flecs.c	/^void flecs_type_free($/;"	f	typeref:typename:void
flecs_type_hash	./src/flecs.c	/^uint64_t flecs_type_hash(const void *ptr) {$/;"	f	typeref:typename:uint64_t	file:
flecs_type_info_ensure	./src/flecs.c	/^ecs_type_info_t* flecs_type_info_ensure($/;"	f	typeref:typename:ecs_type_info_t *
flecs_type_info_fini	./src/flecs.c	/^void flecs_type_info_fini($/;"	f	typeref:typename:void
flecs_type_info_flags	./src/flecs.c	/^ecs_flags32_t flecs_type_info_flags($/;"	f	typeref:typename:ecs_flags32_t	file:
flecs_type_info_free	./src/flecs.c	/^void flecs_type_info_free($/;"	f	typeref:typename:void
flecs_type_info_get	./src/flecs.c	/^const ecs_type_info_t* flecs_type_info_get($/;"	f	typeref:typename:const ecs_type_info_t *
flecs_type_info_init	./src/flecs.c	/^#define flecs_type_info_init(/;"	d	file:
flecs_type_info_init_id	./src/flecs.c	/^bool flecs_type_info_init_id($/;"	f	typeref:typename:bool
flecs_type_is_number	./src/flecs.c	/^bool flecs_type_is_number($/;"	f	typeref:typename:bool	file:
flecs_type_kind_str	./src/flecs.c	/^const char* flecs_type_kind_str($/;"	f	file:
flecs_type_new_filtered	./src/flecs.c	/^int flecs_type_new_filtered($/;"	f	typeref:typename:int	file:
flecs_type_new_with	./src/flecs.c	/^int flecs_type_new_with($/;"	f	typeref:typename:int	file:
flecs_type_new_without	./src/flecs.c	/^int flecs_type_new_without($/;"	f	typeref:typename:int	file:
flecs_type_offset_search	./src/flecs.c	/^int32_t flecs_type_offset_search($/;"	f	typeref:typename:int32_t	file:
flecs_type_search	./src/flecs.c	/^int32_t flecs_type_search($/;"	f	typeref:typename:int32_t	file:
flecs_type_search_relation	./src/flecs.c	/^int32_t flecs_type_search_relation($/;"	f	typeref:typename:int32_t	file:
flecs_u_max	./src/flecs.c	/^static uint64_t flecs_u_max[] = { $/;"	v	typeref:typename:uint64_t[]	file:
flecs_uni_observer_init	./src/flecs.c	/^int flecs_uni_observer_init($/;"	f	typeref:typename:int	file:
flecs_uni_observer_invoke	./src/flecs.c	/^void flecs_uni_observer_invoke($/;"	f	typeref:typename:void	file:
flecs_uni_observer_register	./src/flecs.c	/^void flecs_uni_observer_register($/;"	f	typeref:typename:void	file:
flecs_uni_observer_yield_existing	./src/flecs.c	/^void flecs_uni_observer_yield_existing($/;"	f	typeref:typename:void	file:
flecs_unit_quantity_monitor	./src/flecs.c	/^void flecs_unit_quantity_monitor(ecs_iter_t *it) {$/;"	f	typeref:typename:void	file:
flecs_unit_validate	./src/flecs.c	/^bool flecs_unit_validate($/;"	f	typeref:typename:bool
flecs_unregister_observer	./src/flecs.c	/^void flecs_unregister_observer($/;"	f	typeref:typename:void	file:
flecs_unregister_observer_for_id	./src/flecs.c	/^void flecs_unregister_observer_for_id($/;"	f	typeref:typename:void	file:
flecs_unset_id_flag	./src/flecs.c	/^bool flecs_unset_id_flag($/;"	f	typeref:typename:bool	file:
flecs_update_component_monitor_w_array	./src/flecs.c	/^void flecs_update_component_monitor_w_array($/;"	f	typeref:typename:void	file:
flecs_update_component_monitors	./src/flecs.c	/^void flecs_update_component_monitors($/;"	f	typeref:typename:void	file:
flecs_update_monitors_for_delete	./src/flecs.c	/^void flecs_update_monitors_for_delete($/;"	f	typeref:typename:void	file:
flecs_update_name_index	./src/flecs.c	/^void flecs_update_name_index($/;"	f	typeref:typename:void	file:
flecs_uto	./src/flecs.c	/^#define flecs_uto(/;"	d	file:
flecs_utosize	./src/flecs.c	/^#define flecs_utosize(/;"	d	file:
flecs_utovar	./src/flecs.c	/^ecs_var_id_t flecs_utovar(uint64_t val) {$/;"	f	typeref:typename:ecs_var_id_t	file:
flecs_valid_identifier_start_char	./src/flecs.c	/^bool flecs_valid_identifier_start_char($/;"	f	typeref:typename:bool	file:
flecs_valid_operator_char	./src/flecs.c	/^bool flecs_valid_operator_char($/;"	f	typeref:typename:bool	file:
flecs_valid_token_char	./src/flecs.c	/^bool flecs_valid_token_char($/;"	f	typeref:typename:bool	file:
flecs_valid_token_start_char	./src/flecs.c	/^bool flecs_valid_token_start_char($/;"	f	typeref:typename:bool	file:
flecs_value_cast	./src/flecs.c	/^void flecs_value_cast($/;"	f	typeref:typename:void	file:
flecs_vars_scope_lookup	./src/flecs.c	/^ecs_expr_var_t* flecs_vars_scope_lookup($/;"	f	typeref:typename:ecs_expr_var_t *	file:
flecs_wait_for_sync	./src/flecs.c	/^void flecs_wait_for_sync($/;"	f	typeref:typename:void
flecs_wait_for_workers	./src/flecs.c	/^void flecs_wait_for_workers($/;"	f	typeref:typename:void	file:
flecs_walloc	./src/flecs.c	/^#define flecs_walloc(/;"	d	file:
flecs_walloc_n	./src/flecs.c	/^#define flecs_walloc_n(/;"	d	file:
flecs_wasm_rest_server	./src/flecs.c	/^ecs_http_server_t *flecs_wasm_rest_server;$/;"	v	typeref:typename:ecs_http_server_t *
flecs_wcalloc	./src/flecs.c	/^#define flecs_wcalloc(/;"	d	file:
flecs_wcalloc_n	./src/flecs.c	/^#define flecs_wcalloc_n(/;"	d	file:
flecs_wdup	./src/flecs.c	/^#define flecs_wdup(/;"	d	file:
flecs_wdup_n	./src/flecs.c	/^#define flecs_wdup_n(/;"	d	file:
flecs_week_interval_count	./src/flecs.c	/^static int32_t flecs_week_interval_count = 168;$/;"	v	typeref:typename:int32_t	file:
flecs_wfree	./src/flecs.c	/^#define flecs_wfree(/;"	d	file:
flecs_wfree_n	./src/flecs.c	/^#define flecs_wfree_n(/;"	d	file:
flecs_win_thread	./src/flecs.c	/^DWORD flecs_win_thread(void *ptr) {$/;"	f	typeref:typename:DWORD	file:
flecs_worker	./src/flecs.c	/^void* flecs_worker(void *arg) {$/;"	f	typeref:typename:void *	file:
flecs_workers_progress	./src/flecs.c	/^void flecs_workers_progress($/;"	f	typeref:typename:void
flecs_world_allocators_fini	./src/flecs.c	/^void flecs_world_allocators_fini($/;"	f	typeref:typename:void	file:
flecs_world_allocators_init	./src/flecs.c	/^void flecs_world_allocators_init($/;"	f	typeref:typename:void	file:
flecs_world_iter_init	./src/flecs.c	/^void flecs_world_iter_init($/;"	f	typeref:typename:void	file:
flecs_world_iter_next	./src/flecs.c	/^bool flecs_world_iter_next($/;"	f	typeref:typename:bool	file:
flecs_world_monitor_import	./src/flecs.c	/^void flecs_world_monitor_import($/;"	f	typeref:typename:void	file:
flecs_world_stats_to_json	./src/flecs.c	/^void flecs_world_stats_to_json($/;"	f	typeref:typename:void	file:
flecs_wrealloc	./src/flecs.c	/^#define flecs_wrealloc(/;"	d	file:
flecs_wrealloc_n	./src/flecs.c	/^#define flecs_wrealloc_n(/;"	d	file:
float128	./vendor/fmt/include/format.h	/^using float128 = __float128;$/;"	t	namespace:detail	typeref:typename:__float128
float128	./vendor/fmt/include/format.h	/^using float128 = void;$/;"	t	namespace:detail	typeref:typename:void
float16	./vendor/raylib5/include/raymath.h	/^typedef struct float16 {$/;"	s
float16	./vendor/raylib5/include/raymath.h	/^} float16;$/;"	t	typeref:struct:float16
float3	./vendor/raylib5/include/raymath.h	/^typedef struct float3 {$/;"	s
float3	./vendor/raylib5/include/raymath.h	/^} float3;$/;"	t	typeref:struct:float3
float_format	./vendor/fmt/include/format.h	/^enum class float_format : unsigned char {$/;"	g	namespace:detail	typeref:typename:unsigned char
float_info	./vendor/fmt/include/format.h	/^struct float_info<T, enable_if_t<is_double_double<T>::value>> {$/;"	s	namespace:detail::dragonbox
float_info	./vendor/fmt/include/format.h	/^struct float_info<T, enable_if_t<std::numeric_limits<T>::digits == 64 ||$/;"	s	namespace:detail::dragonbox
float_info	./vendor/fmt/include/format.h	/^template <> struct float_info<double> {$/;"	s	namespace:detail::dragonbox
float_info	./vendor/fmt/include/format.h	/^template <> struct float_info<float> {$/;"	s	namespace:detail::dragonbox
float_set	./vendor/fmt/include/base.h	/^  float_set = set(type::float_type) | set(type::double_type) |$/;"	e	enum:detail::__anonea363bd90103
float_specs	./vendor/fmt/include/format.h	/^struct float_specs {$/;"	s	namespace:detail
float_type	./vendor/fmt/include/base.h	/^  float_type,$/;"	e	enum:detail::type
float_uint	./vendor/fmt/include/format.h	/^  using float_uint = typename dragonbox::float_info<Float>::carrier_uint;$/;"	t	function:detail::exponent_mask	typeref:typename:dragonbox::float_info<Float>::carrier_uint
float_value	./vendor/fmt/include/base.h	/^    float float_value;$/;"	m	union:detail::value::__anonea363bd9060a	typeref:typename:float
floaty	./vendor/fmt/include/format.h	/^  using floaty = conditional_t<std::is_same<T, long double>::value, double, T>;$/;"	t	function:detail::write	typeref:typename:conditional_t<std::is_same<T,long double>::value,double,T>
floaty_uint	./vendor/fmt/include/format.h	/^  using floaty_uint = typename dragonbox::float_info<floaty>::carrier_uint;$/;"	t	function:detail::write	typeref:typename:dragonbox::float_info<floaty>::carrier_uint
flockfile	./vendor/fmt/include/format-inl.h	/^template <typename F> auto flockfile(F* f) -> decltype(_lock_file(f)) {$/;"	f	namespace:detail	typeref:typename:decltype(_lock_file (f))
floor_log10_pow2	./vendor/fmt/include/format.h	/^inline auto floor_log10_pow2(int e) noexcept -> int {$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
floor_log10_pow2_minus_log10_4_over_3	./vendor/fmt/include/format-inl.h	/^inline auto floor_log10_pow2_minus_log10_4_over_3(int e) noexcept -> int {$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
floor_log2_pow10	./vendor/fmt/include/format.h	/^inline auto floor_log2_pow10(int e) noexcept -> int {$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
floral_white	./vendor/fmt/include/color.h	/^  floral_white = 0xFFFAF0,             \/\/ rgb(255,250,240)$/;"	e	enum:color
flush	./vendor/fmt/include/base.h	/^  void flush() {$/;"	f	class:detail::iterator_buffer	typeref:typename:void
flush	./vendor/fmt/include/format-inl.h	/^  void flush() { fflush(this->file_); }$/;"	f	class:detail::file_base	typeref:typename:void
flush	./vendor/fmt/include/format-inl.h	/^  void flush() { fflush_unlocked(this->file_); }$/;"	f	class:detail::glibc_file	typeref:typename:void
flush	./vendor/fmt/include/os.h	/^  void flush() { buffer_.flush(); }$/;"	f	class:ostream	typeref:typename:void
flush	./vendor/fmt/include/os.h	/^  void flush() {$/;"	f	class:detail::file_buffer	typeref:typename:void
fmap	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^template <class K, class V> using fmap = ska::flat_hash_map<K, V>;$/;"	t	typeref:typename:ska::flat_hash_map<K,V>	file:
fmt	./src/log.h	/^  const char *fmt;$/;"	m	struct:__anon638373710108	typeref:typename:const char *
fmt	./vendor/fmt/include/compile.h	/^  formatter<T, Char> fmt;$/;"	m	struct:detail::parse_specs_result	typeref:typename:formatter<T,Char>
fmt	./vendor/fmt/include/compile.h	/^  formatter<T, Char> fmt;$/;"	m	struct:detail::spec_field	typeref:typename:formatter<T,Char>
fmt	./vendor/fmt/include/format.h	/^  const formatter<T, Char>* fmt;$/;"	m	struct:nested_view	typeref:typename:const formatter<T,Char> *
fmt_CONCAT	./vendor/STC/include/c11/fmt.h	/^#define fmt_CONCAT(/;"	d
fmt_EXPAND	./vendor/STC/include/c11/fmt.h	/^#define fmt_EXPAND(/;"	d
fmt_JOIN	./vendor/STC/include/c11/fmt.h	/^#define fmt_JOIN(/;"	d
fmt_NUMARGS	./vendor/STC/include/c11/fmt.h	/^#define fmt_NUMARGS(/;"	d
fmt_OK	./vendor/STC/include/c11/fmt.h	/^#  define fmt_OK(/;"	d
fmt_OVERLOAD	./vendor/STC/include/c11/fmt.h	/^#define fmt_OVERLOAD(/;"	d
fmt_close	./vendor/STC/include/c11/fmt.h	/^FMT_DEF FMT_UNUSED void fmt_close(fmt_stream* ss) {$/;"	f	typeref:typename:FMT_DEF FMT_UNUSED void
fmt_duration_cast	./vendor/fmt/include/chrono.h	/^auto fmt_duration_cast(std::chrono::duration<FromRep, FromPeriod> from) -> To {$/;"	f	namespace:detail	typeref:typename:To
fmt_print	./vendor/STC/include/c11/fmt.h	/^#define fmt_print(...) fmt_printd/;"	d
fmt_printd	./vendor/STC/include/c11/fmt.h	/^#define fmt_printd(...) fmt_OVERLOAD(fmt_printd,/;"	d
fmt_printd10	./vendor/STC/include/c11/fmt.h	/^#define fmt_printd10(/;"	d
fmt_printd11	./vendor/STC/include/c11/fmt.h	/^#define fmt_printd11(/;"	d
fmt_printd12	./vendor/STC/include/c11/fmt.h	/^#define fmt_printd12(/;"	d
fmt_printd13	./vendor/STC/include/c11/fmt.h	/^#define fmt_printd13(/;"	d
fmt_printd14	./vendor/STC/include/c11/fmt.h	/^#define fmt_printd14(/;"	d
fmt_printd2	./vendor/STC/include/c11/fmt.h	/^#define fmt_printd2(/;"	d
fmt_printd3	./vendor/STC/include/c11/fmt.h	/^#define fmt_printd3(/;"	d
fmt_printd4	./vendor/STC/include/c11/fmt.h	/^#define fmt_printd4(/;"	d
fmt_printd5	./vendor/STC/include/c11/fmt.h	/^#define fmt_printd5(/;"	d
fmt_printd6	./vendor/STC/include/c11/fmt.h	/^#define fmt_printd6(/;"	d
fmt_printd7	./vendor/STC/include/c11/fmt.h	/^#define fmt_printd7(/;"	d
fmt_printd8	./vendor/STC/include/c11/fmt.h	/^#define fmt_printd8(/;"	d
fmt_printd9	./vendor/STC/include/c11/fmt.h	/^#define fmt_printd9(/;"	d
fmt_println	./vendor/STC/include/c11/fmt.h	/^#define fmt_println(/;"	d
fmt_stream	./vendor/STC/include/c11/fmt.h	/^} fmt_stream;$/;"	t	typeref:struct:__anon6f5400bc0108
fmt_tm	./vendor/STC/include/c11/fmt.h	/^FMT_DEF FMT_UNUSED const char* fmt_tm(const char *fmt, const struct tm *tp) {$/;"	f	typeref:typename:FMT_DEF FMT_UNUSED const char *
fn	./src/log.c	/^  log_LogFn fn;$/;"	m	struct:__anon6383736c0108	typeref:typename:log_LogFn	file:
fn_tocase	./vendor/STC/include/stc/priv/cstr_prv.c	/^fn_tocase[] = {{tolower, utf8_casefold},$/;"	v	typeref:struct:__anonf6322e580108[]	file:
for_each	./vendor/fmt/include/ranges.h	/^FMT_CONSTEXPR void for_each(Tuple&& t, F&& f) {$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR void
for_each	./vendor/fmt/include/ranges.h	/^FMT_CONSTEXPR void for_each(index_sequence<Is...>, Tuple&& t, F&& f) {$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR void
for_each2	./vendor/fmt/include/ranges.h	/^void for_each2(Tuple1&& t1, Tuple2&& t2, F&& f) {$/;"	f	namespace:detail	typeref:typename:void
for_each2	./vendor/fmt/include/ranges.h	/^void for_each2(index_sequence<Is...>, Tuple1&& t1, Tuple2&& t2, F&& f) {$/;"	f	namespace:detail	typeref:typename:void
for_each_codepoint	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR void for_each_codepoint(string_view s, F f) {$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR void
force	./src/flecs.h	/^struct force {$/;"	s	struct:flecs::units
foreground_color	./vendor/fmt/include/color.h	/^  detail::color_type foreground_color;$/;"	m	class:text_style	typeref:typename:detail::color_type
forest_green	./vendor/fmt/include/color.h	/^  forest_green = 0x228B22,             \/\/ rgb(34,139,34)$/;"	e	enum:color
forks	./vendor/STC/misc/examples/coroutines/dining_philosophers.c	/^    cco_sem forks[num_forks];$/;"	m	struct:Dining	typeref:typename:cco_sem[]	file:
format	./vendor/fmt/include/base.h	/^    void format(typename Context::parse_context_type& parse_ctx,$/;"	f	class:basic_format_arg::handle	typeref:typename:void
format	./vendor/fmt/include/base.h	/^  void (*format)(void* arg, parse_context& parse_ctx, Context& ctx);$/;"	m	struct:detail::custom_value	typeref:typename:void (*)(void * arg,parse_context & parse_ctx,Context & ctx)
format	./vendor/fmt/include/chrono.h	/^  auto format(const std::tm& tm, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/chrono.h	/^  auto format(day d, FormatContext& ctx) const -> decltype(ctx.out()) {$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/chrono.h	/^  auto format(month m, FormatContext& ctx) const -> decltype(ctx.out()) {$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/chrono.h	/^  auto format(std::chrono::duration<Rep, Period> d, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/chrono.h	/^  auto format(std::chrono::local_time<Duration> val, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/chrono.h	/^  auto format(std::chrono::time_point<std::chrono::system_clock, Duration> val,$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/chrono.h	/^  auto format(std::chrono::time_point<std::chrono::utc_clock, Duration> val,$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/chrono.h	/^  auto format(weekday wd, FormatContext& ctx) const -> decltype(ctx.out()) {$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/chrono.h	/^  auto format(year y, FormatContext& ctx) const -> decltype(ctx.out()) {$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/chrono.h	/^  auto format(year_month_day val, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/color.h	/^  auto format(const detail::styled_arg<T>& arg, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/color.h	/^inline auto format(const text_style& ts, format_string<T...> fmt, T&&... args)$/;"	f	typeref:typename:std::string
format	./vendor/fmt/include/compile.h	/^  constexpr FMT_INLINE OutputIt format(OutputIt out,$/;"	f	struct:detail::spec_field	typeref:typename:FMT_INLINE OutputIt
format	./vendor/fmt/include/compile.h	/^  constexpr OutputIt format(OutputIt out, const Args&... args) const {$/;"	f	struct:detail::concat	typeref:typename:OutputIt
format	./vendor/fmt/include/compile.h	/^  constexpr OutputIt format(OutputIt out, const Args&... args) const {$/;"	f	struct:detail::field	typeref:typename:OutputIt
format	./vendor/fmt/include/compile.h	/^  constexpr OutputIt format(OutputIt out, const Args&... args) const {$/;"	f	struct:detail::runtime_named_field	typeref:typename:OutputIt
format	./vendor/fmt/include/compile.h	/^  constexpr OutputIt format(OutputIt out, const Args&...) const {$/;"	f	struct:detail::code_unit	typeref:typename:OutputIt
format	./vendor/fmt/include/compile.h	/^  constexpr OutputIt format(OutputIt out, const Args&...) const {$/;"	f	struct:detail::text	typeref:typename:OutputIt
format	./vendor/fmt/include/compile.h	/^FMT_INLINE std::basic_string<Char> format(const CompiledFormat& cf,$/;"	f	typeref:typename:FMT_BEGIN_EXPORT FMT_INLINE std::basic_string<Char>
format	./vendor/fmt/include/compile.h	/^FMT_INLINE std::basic_string<typename S::char_type> format(const S&,$/;"	f	typeref:typename:FMT_INLINE std::basic_string<typename S::char_type>
format	./vendor/fmt/include/format-inl.h	/^  auto format(const detail::bigint& n, format_context& ctx) const$/;"	f	struct:formatter	typeref:typename:format_context::iterator
format	./vendor/fmt/include/format.h	/^  auto format(bytes b, FormatContext& ctx) const -> decltype(ctx.out()) {$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/format.h	/^  auto format(const T& value, FormatContext& ctx) const -> decltype(ctx.out()) {$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/format.h	/^  auto format(group_digits_view<T> t, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/format.h	/^  auto format(nested_view<T, Char> view, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/format.h	/^  float_format format : 8;$/;"	m	struct:detail::float_specs	typeref:typename:float_format:8
format	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR FMT_INLINE auto native_formatter<T, Char, TYPE>::format($/;"	f	class:detail::native_formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/format.h	/^FMT_NODISCARD FMT_INLINE auto format(format_string<T...> fmt, T&&... args)$/;"	f	typeref:typename:std::string
format	./vendor/fmt/include/format.h	/^inline auto format(const Locale& loc, format_string<T...> fmt, T&&... args)$/;"	f	typeref:typename:std::string
format	./vendor/fmt/include/ostream.h	/^  auto format(const T& value, Context& ctx) const -> decltype(ctx.out()) {$/;"	f	struct:basic_ostream_formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/ostream.h	/^  auto format(detail::streamed_view<T> view, Context& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/ranges.h	/^  auto format(R&& range, FormatContext& ctx) const -> decltype(ctx.out()) {$/;"	f	struct:range_formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/ranges.h	/^  auto format(const T& t, FormatContext& ctx) const -> decltype(ctx.out()) {$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/ranges.h	/^  auto format(const Tuple& value, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/ranges.h	/^  auto format(const tuple_join_view<Char, T...>& value,$/;"	f	struct:formatter	typeref:typename:FormatContext::iterator
format	./vendor/fmt/include/ranges.h	/^  auto format(map_type& map, FormatContext& ctx) const -> decltype(ctx.out()) {$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/ranges.h	/^  auto format(range_type& range, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/ranges.h	/^  auto format(view_ref& value, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/std.h	/^  FMT_CONSTEXPR auto format(const BitRef& v, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/std.h	/^  FMT_CONSTEXPR auto format(const std::error_code& ec, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/std.h	/^  auto format(const Variant& value, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/std.h	/^  auto format(const std::atomic<T>& v, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/std.h	/^  auto format(const std::atomic_flag& v, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/std.h	/^  auto format(const std::bitset<N>& bs, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/std.h	/^  auto format(const std::complex<T>& c, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/std.h	/^  auto format(const std::exception& ex, Context& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/std.h	/^  auto format(const std::expected<T, E>& value, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/std.h	/^  auto format(const std::filesystem::path& p, FormatContext& ctx) const {$/;"	f	struct:formatter	typeref:typename:auto
format	./vendor/fmt/include/std.h	/^  auto format(const std::monostate&, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/std.h	/^  auto format(const std::optional<T>& opt, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/std.h	/^  auto format(const std::source_location& loc, FormatContext& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/std.h	/^  auto format(const std::type_info& ti, Context& ctx) const$/;"	f	struct:formatter	typeref:typename:decltype(ctx.out ())
format	./vendor/fmt/include/xchar.h	/^auto format(const S& format_str, T&&... args) -> std::basic_string<Char> {$/;"	f	typeref:typename:std::basic_string<Char>
format	./vendor/fmt/include/xchar.h	/^auto format(wformat_string<T...> fmt, T&&... args) -> std::wstring {$/;"	f	typeref:typename:std::wstring
format	./vendor/fmt/include/xchar.h	/^inline auto format(const Locale& loc, const S& format_str, T&&... args)$/;"	f	typeref:typename:std::basic_string<Char>
format	./vendor/fmt/include/xchar.h	/^inline auto format(const text_style& ts, wformat_string<T...> fmt, T&&... args)$/;"	f	typeref:typename:std::wstring
format	./vendor/raylib5/include/raygui.h	/^        int format;             \/\/ Data format (PixelFormat type)$/;"	m	struct:Image	typeref:typename:int
format	./vendor/raylib5/include/raygui.h	/^        int format;             \/\/ Data format (PixelFormat type)$/;"	m	struct:Texture2D	typeref:typename:int
format	./vendor/raylib5/include/raylib.h	/^    int format;             \/\/ Data format (PixelFormat type)$/;"	m	struct:Image	typeref:typename:int
format	./vendor/raylib5/include/raylib.h	/^    int format;             \/\/ Data format (PixelFormat type)$/;"	m	struct:Texture	typeref:typename:int
format_arg	./vendor/fmt/include/base.h	/^  using format_arg = basic_format_arg<Context>;$/;"	t	class:basic_format_args	typeref:typename:basic_format_arg<Context>
format_arg	./vendor/fmt/include/base.h	/^  using format_arg = basic_format_arg<context>;$/;"	t	class:context	typeref:typename:basic_format_arg<context>
format_arg_store	./vendor/fmt/include/base.h	/^  FMT_MAP_API format_arg_store(T&... values)$/;"	f	struct:detail::format_arg_store	typeref:typename:FMT_MAP_API
format_arg_store	./vendor/fmt/include/base.h	/^  format_arg_store(format_arg_store&& rhs) {$/;"	f	struct:detail::format_arg_store
format_arg_store	./vendor/fmt/include/base.h	/^struct format_arg_store {$/;"	s	namespace:detail
format_arg_store	./vendor/fmt/include/base.h	/^struct format_arg_store<Context, NUM_ARGS, 0, DESC> {$/;"	s	namespace:detail
format_args	./vendor/fmt/include/base.h	/^FMT_EXPORT using format_args = basic_format_args<format_context>;$/;"	t	typeref:typename:basic_format_args<format_context>
format_as	./vendor/fmt/include/base.h	/^inline auto format_as(T b) -> unsigned char {$/;"	f	typeref:typename:unsigned char
format_as	./vendor/fmt/include/format.h	/^constexpr auto format_as(Enum e) noexcept -> underlying_t<Enum> {$/;"	f	namespace:enums	typeref:typename:auto
format_as_result	./vendor/fmt/include/base.h	/^template <typename T> struct format_as_result {$/;"	s	namespace:detail
format_as_t	./vendor/fmt/include/base.h	/^template <typename T> using format_as_t = typename format_as_result<T>::type;$/;"	t	namespace:detail	typeref:typename:format_as_result<T>::type
format_context	./vendor/fmt/include/base.h	/^using format_context = context;$/;"	t	typeref:typename:context
format_custom	./vendor/fmt/include/base.h	/^  auto format_custom(const char_type* parse_begin,$/;"	f	class:basic_format_arg	typeref:typename:bool
format_custom_arg	./vendor/fmt/include/base.h	/^  static void format_custom_arg(void* arg,$/;"	f	class:detail::value	typeref:typename:void
format_decimal	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR FMT_INLINE auto format_decimal(Char* out, UInt value,$/;"	f	namespace:detail	typeref:typename:Char *
format_decimal	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto format_decimal(OutputIt out, UInt value, int num_digits)$/;"	f	namespace:detail	typeref:typename:OutputIt
format_dragon	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR20 inline void format_dragon(basic_fp<uint128_t> value,$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR20 void
format_duration_unit	./vendor/fmt/include/chrono.h	/^auto format_duration_unit(OutputIt out) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
format_duration_value	./vendor/fmt/include/chrono.h	/^auto format_duration_value(OutputIt out, Rep val, int precision) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
format_duration_value	./vendor/fmt/include/chrono.h	/^auto format_duration_value(OutputIt out, Rep val, int) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
format_error	./vendor/fmt/include/format.h	/^class FMT_SO_VISIBILITY("default") format_error : public std::runtime_error {$/;"	c
format_error_code	./vendor/fmt/include/format-inl.h	/^FMT_FUNC void format_error_code(detail::buffer<char>& out, int error_code,$/;"	f	namespace:detail	typeref:typename:FMT_FUNC void
format_facet	./vendor/fmt/include/format-inl.h	/^template <typename Locale> format_facet<Locale>::format_facet(Locale& loc) {$/;"	f	class:format_facet
format_facet	./vendor/fmt/include/format.h	/^  explicit format_facet(string_view sep = "",$/;"	f	class:format_facet
format_facet	./vendor/fmt/include/format.h	/^template <typename Locale> class format_facet : public Locale::facet {$/;"	c
format_float	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR20 auto format_float(Float value, int precision, float_specs specs,$/;"	f	namespace:detail	typeref:typename:int
format_func	./vendor/fmt/include/format.h	/^using format_func = void (*)(detail::buffer<char>&, int, const char*);$/;"	t	namespace:detail
format_handler	./vendor/fmt/include/format.h	/^    format_handler(basic_appender<Char> p_out, basic_string_view<Char> str,$/;"	f	struct:detail::vformat_to::format_handler
format_handler	./vendor/fmt/include/format.h	/^  struct format_handler {$/;"	s	function:detail::vformat_to
format_hexfloat	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR20 void format_hexfloat(Float value, format_specs specs,$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR20 void
format_int	./vendor/fmt/include/format.h	/^  explicit FMT_CONSTEXPR20 format_int(int value) : str_(format_signed(value)) {}$/;"	f	class:format_int	typeref:typename:FMT_CONSTEXPR20
format_int	./vendor/fmt/include/format.h	/^  explicit FMT_CONSTEXPR20 format_int(long long value)$/;"	f	class:format_int	typeref:typename:FMT_CONSTEXPR20
format_int	./vendor/fmt/include/format.h	/^  explicit FMT_CONSTEXPR20 format_int(long value)$/;"	f	class:format_int	typeref:typename:FMT_CONSTEXPR20
format_int	./vendor/fmt/include/format.h	/^  explicit FMT_CONSTEXPR20 format_int(unsigned long long value)$/;"	f	class:format_int	typeref:typename:FMT_CONSTEXPR20
format_int	./vendor/fmt/include/format.h	/^  explicit FMT_CONSTEXPR20 format_int(unsigned long value)$/;"	f	class:format_int	typeref:typename:FMT_CONSTEXPR20
format_int	./vendor/fmt/include/format.h	/^  explicit FMT_CONSTEXPR20 format_int(unsigned value)$/;"	f	class:format_int	typeref:typename:FMT_CONSTEXPR20
format_int	./vendor/fmt/include/format.h	/^class format_int {$/;"	c
format_localized	./vendor/fmt/include/chrono.h	/^  void format_localized(char format, char modifier = 0) {$/;"	f	class:detail::tm_writer	typeref:typename:void
format_parse_context	./vendor/fmt/include/base.h	/^using format_parse_context = basic_format_parse_context<char>;$/;"	t	typeref:typename:basic_format_parse_context<char>
format_signed	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 auto format_signed(Int value) -> char* {$/;"	f	class:format_int	typeref:typename:char *
format_specs	./vendor/fmt/include/base.h	/^  constexpr format_specs()$/;"	f	struct:format_specs
format_specs	./vendor/fmt/include/base.h	/^struct format_specs {$/;"	s
format_str_	./vendor/fmt/include/base.h	/^  basic_string_view<Char> format_str_;$/;"	m	class:basic_format_parse_context	typeref:typename:basic_string_view<Char>
format_str_	./vendor/fmt/include/chrono.h	/^  basic_string_view<Char> format_str_;$/;"	m	struct:formatter	typeref:typename:basic_string_view<Char>
format_string	./vendor/fmt/include/base.h	/^template <typename...> using format_string = string_view;$/;"	t	typeref:typename:string_view
format_string	./vendor/fmt/include/base.h	/^using format_string = basic_format_string<char, type_identity_t<Args>...>;$/;"	t	typeref:typename:basic_format_string<char,type_identity_t<Args>...>
format_string_char	./vendor/fmt/include/xchar.h	/^struct format_string_char<$/;"	s	namespace:detail
format_string_char	./vendor/fmt/include/xchar.h	/^struct format_string_char<S, enable_if_t<is_compile_string<S>::value>> {$/;"	s	namespace:detail
format_string_char	./vendor/fmt/include/xchar.h	/^template <typename S, typename = void> struct format_string_char {};$/;"	s	namespace:detail
format_string_char_t	./vendor/fmt/include/xchar.h	/^using format_string_char_t = typename format_string_char<S>::type;$/;"	t	namespace:detail	typeref:typename:format_string_char<S>::type
format_string_checker	./vendor/fmt/include/base.h	/^  explicit FMT_CONSTEXPR format_string_checker(basic_string_view<Char> fmt)$/;"	f	class:detail::format_string_checker	typeref:typename:FMT_CONSTEXPR
format_string_checker	./vendor/fmt/include/base.h	/^template <typename Char, typename... Args> class format_string_checker {$/;"	c	namespace:detail
format_system_error	./vendor/fmt/include/format-inl.h	/^FMT_FUNC void format_system_error(detail::buffer<char>& out, int error_code,$/;"	f	typeref:typename:FMT_FUNC void
format_tm	./vendor/fmt/include/chrono.h	/^  void format_tm(const tm& time, Callback cb, Args... args) {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
format_to	./vendor/fmt/include/base.h	/^FMT_INLINE auto format_to(OutputIt&& out, format_string<T...> fmt, T&&... args)$/;"	f	typeref:typename:remove_cvref_t<OutputIt>
format_to	./vendor/fmt/include/base.h	/^FMT_INLINE auto format_to(char (&out)[N], format_string<T...> fmt, T&&... args)$/;"	f	typeref:typename:format_to_result<char * >
format_to	./vendor/fmt/include/color.h	/^inline auto format_to(OutputIt out, const text_style& ts,$/;"	f	typeref:typename:OutputIt
format_to	./vendor/fmt/include/compile.h	/^FMT_CONSTEXPR OutputIt format_to(OutputIt out, const S&, Args&&... args) {$/;"	f	typeref:typename:FMT_CONSTEXPR OutputIt
format_to	./vendor/fmt/include/compile.h	/^constexpr FMT_INLINE OutputIt format_to(OutputIt out, const CompiledFormat& cf,$/;"	f	typeref:typename:FMT_INLINE OutputIt
format_to	./vendor/fmt/include/format.h	/^FMT_INLINE auto format_to(OutputIt out, const Locale& loc,$/;"	f	typeref:typename:OutputIt
format_to	./vendor/fmt/include/xchar.h	/^auto format_to(OutputIt out, wformat_string<T...> fmt, T&&... args)$/;"	f	typeref:typename:OutputIt
format_to	./vendor/fmt/include/xchar.h	/^inline auto format_to(OutputIt out, const Locale& loc, const S& format_str,$/;"	f	typeref:typename:std::enable_if<enable,OutputIt>::type
format_to	./vendor/fmt/include/xchar.h	/^inline auto format_to(OutputIt out, const S& fmt, T&&... args) -> OutputIt {$/;"	f	typeref:typename:OutputIt
format_to_n	./vendor/fmt/include/base.h	/^FMT_INLINE auto format_to_n(OutputIt out, size_t n, format_string<T...> fmt,$/;"	f	typeref:typename:format_to_n_result<OutputIt>
format_to_n	./vendor/fmt/include/compile.h	/^auto format_to_n(OutputIt out, size_t n, const S& fmt, Args&&... args)$/;"	f	typeref:typename:format_to_n_result<OutputIt>
format_to_n	./vendor/fmt/include/xchar.h	/^inline auto format_to_n(OutputIt out, size_t n, const S& fmt, T&&... args)$/;"	f	typeref:typename:format_to_n_result<OutputIt>
format_to_n_result	./vendor/fmt/include/base.h	/^template <typename OutputIt> struct format_to_n_result {$/;"	s
format_to_result	./vendor/fmt/include/base.h	/^struct format_to_result {$/;"	s
format_tuple_element	./vendor/fmt/include/ranges.h	/^template <typename FormatContext> struct format_tuple_element {$/;"	s	namespace:detail
format_tz_name_impl	./vendor/fmt/include/chrono.h	/^  void format_tz_name_impl(const T& tm) {$/;"	f	class:detail::tm_writer	typeref:typename:void
format_tz_name_impl	./vendor/fmt/include/chrono.h	/^  void format_tz_name_impl(const T&) {$/;"	f	class:detail::tm_writer	typeref:typename:void
format_uint	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto format_uint(Char* buffer, UInt value, int num_digits,$/;"	f	namespace:detail	typeref:typename:Char *
format_uint	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR inline auto format_uint(OutputIt out, UInt value, int num_digits,$/;"	f	namespace:detail	typeref:typename:OutputIt
format_unsigned	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 auto format_unsigned(UInt value) -> char* {$/;"	f	class:format_int	typeref:typename:char *
format_utc_offset_impl	./vendor/fmt/include/chrono.h	/^  void format_utc_offset_impl(const T& tm, numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
format_value	./vendor/fmt/include/ostream.h	/^void format_value(buffer<Char>& buf, const T& value) {$/;"	f	namespace:detail	typeref:typename:void
formatbuf	./vendor/fmt/include/chrono.h	/^  explicit formatbuf(buffer<char_type>& buf) : buffer_(buf) {}$/;"	f	class:detail::formatbuf
formatbuf	./vendor/fmt/include/chrono.h	/^template <typename Streambuf> class formatbuf : public Streambuf {$/;"	c	namespace:detail
formattable	./vendor/fmt/include/base.h	/^  enum { formattable = !std::is_same<arg_type, unformattable>::value };$/;"	e	enum:detail::make_arg::__anonea363bd90f03
formattable	./vendor/fmt/include/base.h	/^  struct formattable : bool_constant<has_const_formatter<U, Context>() ||$/;"	s	struct:detail::arg_mapper
formattable_char	./vendor/fmt/include/base.h	/^    formattable_char = !std::is_same<arg_type, unformattable_char>::value$/;"	e	enum:detail::make_arg::__anonea363bd90d03
formattable_pointer	./vendor/fmt/include/base.h	/^    formattable_pointer = !std::is_same<arg_type, unformattable_pointer>::value$/;"	e	enum:detail::make_arg::__anonea363bd90e03
formatted_size	./vendor/fmt/include/base.h	/^FMT_NODISCARD FMT_INLINE auto formatted_size(format_string<T...> fmt,$/;"	f	typeref:typename:size_t
formatted_size	./vendor/fmt/include/compile.h	/^auto formatted_size(const S& fmt, const Args&... args) -> size_t {$/;"	f	typeref:typename:size_t
formatted_size	./vendor/fmt/include/format.h	/^FMT_NODISCARD FMT_INLINE auto formatted_size(const Locale& loc,$/;"	f	typeref:typename:size_t
formatted_size	./vendor/fmt/include/xchar.h	/^inline auto formatted_size(const S& fmt, T&&... args) -> size_t {$/;"	f	typeref:typename:size_t
formatter	./vendor/fmt/include/base.h	/^struct formatter {$/;"	s
formatter	./vendor/fmt/include/base.h	/^struct formatter<T, Char,$/;"	s
formatter	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR formatter() {$/;"	f	struct:formatter	typeref:typename:FMT_CONSTEXPR
formatter	./vendor/fmt/include/chrono.h	/^struct formatter<day, Char> : private formatter<std::tm, Char> {$/;"	s
formatter	./vendor/fmt/include/chrono.h	/^struct formatter<month, Char> : private formatter<std::tm, Char> {$/;"	s
formatter	./vendor/fmt/include/chrono.h	/^struct formatter<std::chrono::duration<Rep, Period>, Char> {$/;"	s
formatter	./vendor/fmt/include/chrono.h	/^struct formatter<std::chrono::local_time<Duration>, Char>$/;"	s
formatter	./vendor/fmt/include/chrono.h	/^struct formatter<std::chrono::time_point<std::chrono::system_clock, Duration>,$/;"	s
formatter	./vendor/fmt/include/chrono.h	/^struct formatter<std::chrono::time_point<std::chrono::utc_clock, Duration>,$/;"	s
formatter	./vendor/fmt/include/chrono.h	/^struct formatter<weekday, Char> : private formatter<std::tm, Char> {$/;"	s
formatter	./vendor/fmt/include/chrono.h	/^struct formatter<year, Char> : private formatter<std::tm, Char> {$/;"	s
formatter	./vendor/fmt/include/chrono.h	/^struct formatter<year_month_day, Char> : private formatter<std::tm, Char> {$/;"	s
formatter	./vendor/fmt/include/chrono.h	/^template <typename Char> struct formatter<std::tm, Char> {$/;"	s
formatter	./vendor/fmt/include/color.h	/^struct formatter<detail::styled_arg<T>, Char> : formatter<T, Char> {$/;"	s
formatter	./vendor/fmt/include/format-inl.h	/^template <> struct formatter<detail::bigint> {$/;"	s
formatter	./vendor/fmt/include/format.h	/^class formatter<std::basic_string<Char, Traits, Allocator>, Char>$/;"	c
formatter	./vendor/fmt/include/format.h	/^struct formatter<Char[N], Char> : formatter<basic_string_view<Char>, Char> {};$/;"	s
formatter	./vendor/fmt/include/format.h	/^struct formatter<T, Char, enable_if_t<detail::has_format_as<T>::value>>$/;"	s
formatter	./vendor/fmt/include/format.h	/^struct formatter<detail::float128, Char>$/;"	s
formatter	./vendor/fmt/include/format.h	/^struct formatter<nested_view<T, Char>, Char> {$/;"	s
formatter	./vendor/fmt/include/format.h	/^template <> struct formatter<bytes> {$/;"	s
formatter	./vendor/fmt/include/format.h	/^template <typename T> struct formatter<group_digits_view<T>> : formatter<T> {$/;"	s
formatter	./vendor/fmt/include/ostream.h	/^struct formatter<detail::streamed_view<T>, Char>$/;"	s
formatter	./vendor/fmt/include/ranges.h	/^  FMT_CONSTEXPR formatter() {$/;"	f	struct:formatter	typeref:typename:FMT_CONSTEXPR
formatter	./vendor/fmt/include/ranges.h	/^  FMT_CONSTEXPR formatter() {}$/;"	f	struct:formatter	typeref:typename:FMT_CONSTEXPR
formatter	./vendor/fmt/include/ranges.h	/^struct formatter<$/;"	s
formatter	./vendor/fmt/include/ranges.h	/^struct formatter<Tuple, Char,$/;"	s
formatter	./vendor/fmt/include/ranges.h	/^struct formatter<join_view<It, Sentinel, Char>, Char> {$/;"	s
formatter	./vendor/fmt/include/ranges.h	/^struct formatter<tuple_join_view<Char, T...>, Char> {$/;"	s
formatter	./vendor/fmt/include/std.h	/^struct formatter<$/;"	s
formatter	./vendor/fmt/include/std.h	/^struct formatter<BitRef, Char,$/;"	s
formatter	./vendor/fmt/include/std.h	/^struct formatter<std::atomic<T>, Char,$/;"	s
formatter	./vendor/fmt/include/std.h	/^struct formatter<std::atomic_flag, Char> : formatter<bool, Char> {$/;"	s
formatter	./vendor/fmt/include/std.h	/^struct formatter<std::bitset<N>, Char> : nested_formatter<string_view> {$/;"	s
formatter	./vendor/fmt/include/std.h	/^struct formatter<std::expected<T, E>, Char,$/;"	s
formatter	./vendor/fmt/include/std.h	/^struct formatter<std::optional<T>, Char,$/;"	s
formatter	./vendor/fmt/include/std.h	/^struct formatter<std::thread::id, Char> : basic_ostream_formatter<Char> {};$/;"	s
formatter	./vendor/fmt/include/std.h	/^struct formatter<std::type_info, Char  \/\/ DEPRECATED! Mixing code unit types.$/;"	s
formatter	./vendor/fmt/include/std.h	/^template <> struct formatter<std::source_location> {$/;"	s
formatter	./vendor/fmt/include/std.h	/^template <typename Char> struct formatter<std::error_code, Char> {$/;"	s
formatter	./vendor/fmt/include/std.h	/^template <typename Char> struct formatter<std::filesystem::path, Char> {$/;"	s
formatter	./vendor/fmt/include/std.h	/^template <typename Char> struct formatter<std::monostate, Char> {$/;"	s
formatter	./vendor/fmt/include/std.h	/^template <typename T, typename Char> struct formatter<std::complex<T>, Char> {$/;"	s
formatter_	./vendor/fmt/include/format.h	/^  formatter<T, Char> formatter_;$/;"	m	struct:nested_formatter	typeref:typename:formatter<T,Char>
formatter_type	./vendor/fmt/include/base.h	/^  template <typename T> using formatter_type = formatter<T, char>;$/;"	t	class:context	typeref:typename:formatter<T,char>
formatter_type	./vendor/fmt/include/format.h	/^  template <typename T> using formatter_type = formatter<T, Char>;$/;"	t	class:generic_context	typeref:typename:formatter<T,Char>
formatter_type	./vendor/fmt/include/printf.h	/^  template <typename T> using formatter_type = printf_formatter<T>;$/;"	t	class:basic_printf_context	typeref:typename:printf_formatter<T>
formatters_	./vendor/fmt/include/ranges.h	/^      detail::tuple_index_sequence<Tuple>())) formatters_;$/;"	m	struct:formatter	typeref:typename:decltype(detail::tuple::get_formatters<Tuple,Char> (detail::tuple_index_sequence<Tuple> ()))
formatters_	./vendor/fmt/include/ranges.h	/^      detail::tuple_index_sequence<element_type>())) formatters_;$/;"	m	struct:formatter	typeref:typename:decltype(detail::tuple::get_formatters<element_type,Char> (detail::tuple_index_sequence<element_type> ()))
formatters_	./vendor/fmt/include/ranges.h	/^  std::tuple<formatter<typename std::decay<T>::type, Char>...> formatters_;$/;"	m	struct:formatter	typeref:typename:std::tuple<formatter<typename std::decay<T>::type,Char>...>
forward_arc	./vendor/STC/include/stc/types.h	/^#define forward_arc(/;"	d
forward_box	./vendor/STC/include/stc/types.h	/^#define forward_box(/;"	d
forward_carc	./vendor/STC/include/stc/types.h	/^#define forward_carc /;"	d
forward_cbox	./vendor/STC/include/stc/types.h	/^#define forward_cbox /;"	d
forward_cdeq	./vendor/STC/include/stc/types.h	/^#define forward_cdeq /;"	d
forward_clist	./vendor/STC/include/stc/types.h	/^#define forward_clist /;"	d
forward_cmap	./vendor/STC/include/stc/types.h	/^#define forward_cmap /;"	d
forward_cpque	./vendor/STC/include/stc/types.h	/^#define forward_cpque /;"	d
forward_cqueue	./vendor/STC/include/stc/types.h	/^#define forward_cqueue /;"	d
forward_cset	./vendor/STC/include/stc/types.h	/^#define forward_cset /;"	d
forward_csmap	./vendor/STC/include/stc/types.h	/^#define forward_csmap /;"	d
forward_csset	./vendor/STC/include/stc/types.h	/^#define forward_csset /;"	d
forward_cstack	./vendor/STC/include/stc/types.h	/^#define forward_cstack /;"	d
forward_cvec	./vendor/STC/include/stc/types.h	/^#define forward_cvec /;"	d
forward_deq	./vendor/STC/include/stc/types.h	/^#define forward_deq(/;"	d
forward_hmap	./vendor/STC/include/stc/types.h	/^#define forward_hmap(/;"	d
forward_hset	./vendor/STC/include/stc/types.h	/^#define forward_hset(/;"	d
forward_list	./vendor/STC/include/stc/types.h	/^#define forward_list(/;"	d
forward_pque	./vendor/STC/include/stc/types.h	/^#define forward_pque(/;"	d
forward_queue	./vendor/STC/include/stc/types.h	/^#define forward_queue(/;"	d
forward_smap	./vendor/STC/include/stc/types.h	/^#define forward_smap(/;"	d
forward_sset	./vendor/STC/include/stc/types.h	/^#define forward_sset(/;"	d
forward_stack	./vendor/STC/include/stc/types.h	/^#define forward_stack(/;"	d
forward_vec	./vendor/STC/include/stc/types.h	/^#define forward_vec(/;"	d
fovy	./vendor/raylib5/include/raylib.h	/^    float fovy;             \/\/ Camera field-of-view aperture in Y (degrees) in perspective, us/;"	m	struct:Camera3D	typeref:typename:float
fp	./vendor/STC/misc/examples/coroutines/coread.c	/^    FILE* fp;$/;"	m	struct:file_read	typeref:typename:FILE *	file:
fp	./vendor/fmt/include/format.h	/^using fp = basic_fp<unsigned long long>;$/;"	t	namespace:detail	typeref:typename:basic_fp<unsigned long long>
fprintf	./vendor/fmt/include/printf.h	/^inline auto fprintf(std::FILE* f, const S& fmt, const T&... args) -> int {$/;"	f	typeref:typename:int
fps	./src/flecs.h	/^        ecs_metric_t fps;                  \/**< Frames per second. *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1508	typeref:typename:ecs_metric_t
fps_sleep	./src/flecs.c	/^    ecs_ftime_t fps_sleep;           \/* Sleep time to prevent fps overshoot *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_ftime_t	file:
fractional_part_rounding_thresholds	./vendor/fmt/include/format.h	/^constexpr auto fractional_part_rounding_thresholds(int index) -> uint32_t {$/;"	f	namespace:detail	typeref:typename:uint32_t
frame	./src/flecs.h	/^    } frame;$/;"	m	struct:ecs_world_stats_t	typeref:struct:ecs_world_stats_t::__anon7d4a417c1408
frame	./vendor/raylib5/include/raylib.h	/^    unsigned int frame;             \/\/ Event frame$/;"	m	struct:AutomationEvent	typeref:typename:unsigned int
frameCount	./vendor/raylib5/include/raylib.h	/^    int frameCount;         \/\/ Number of animation frames$/;"	m	struct:ModelAnimation	typeref:typename:int
frameCount	./vendor/raylib5/include/raylib.h	/^    unsigned int frameCount;    \/\/ Total number of frames (considering channels)$/;"	m	struct:Music	typeref:typename:unsigned int
frameCount	./vendor/raylib5/include/raylib.h	/^    unsigned int frameCount;    \/\/ Total number of frames (considering channels)$/;"	m	struct:Sound	typeref:typename:unsigned int
frameCount	./vendor/raylib5/include/raylib.h	/^    unsigned int frameCount;    \/\/ Total number of frames (considering channels)$/;"	m	struct:Wave	typeref:typename:unsigned int
framePoses	./vendor/raylib5/include/raylib.h	/^    Transform **framePoses; \/\/ Poses array by frame$/;"	m	struct:ModelAnimation	typeref:typename:Transform **
frame_action	./src/flecs.c	/^static ecs_app_frame_action_t frame_action = flecs_default_frame_action;$/;"	v	typeref:typename:ecs_app_frame_action_t	file:
frame_begin	./src/flecs.h	/^    ecs_ftime_t frame_begin(float delta_time = 0) const {$/;"	f	struct:flecs::world	typeref:typename:ecs_ftime_t
frame_count	./src/flecs.h	/^        ecs_metric_t frame_count;          \/**< Number of frames processed. *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1408	typeref:typename:ecs_metric_t
frame_count	./src/flecs.h	/^    int64_t frame_count;        \/**< Number of frames processed *\/$/;"	m	struct:__anon7d4a417c1b08	typeref:typename:int64_t
frame_count_total	./src/flecs.h	/^    int64_t frame_count_total;        \/**< Total number of frames *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int64_t
frame_end	./src/flecs.h	/^    void frame_end() const {$/;"	f	struct:flecs::world	typeref:typename:void
frame_offset	./src/flecs.h	/^    int32_t frame_offset;         \/* Offset relative to start of iteration *\/$/;"	m	struct:ecs_iter_t	typeref:typename:int32_t
frame_start_time	./src/flecs.c	/^    ecs_time_t frame_start_time;     \/* Timestamp of frame start *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_time_t	file:
frame_time	./src/flecs.h	/^        ecs_metric_t frame_time;           \/**< Time spent processing a frame. Smaller than wor/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1508	typeref:typename:ecs_metric_t
frame_time_last	./src/flecs.h	/^    double frame_time_last;     \/**< Time spent processing a frame *\/$/;"	m	struct:__anon7d4a417c1b08	typeref:typename:double
frame_time_total	./src/flecs.h	/^    double frame_time_total;    \/**< Total time spent processing a frame *\/$/;"	m	struct:__anon7d4a417c1b08	typeref:typename:double
frame_time_total	./src/flecs.h	/^    ecs_ftime_t frame_time_total;     \/**< Total time spent processing a frame *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:ecs_ftime_t
frames	./src/flecs.h	/^    app_builder& frames(int32_t value) {$/;"	f	struct:flecs::app_builder	typeref:typename:app_builder &
frames	./src/flecs.h	/^    int32_t frames;           \/**< Number of frames to run (0 for infinite) *\/$/;"	m	struct:ecs_app_desc_t	typeref:typename:int32_t
free_	./src/flecs.h	/^    ecs_os_api_free_t free_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_free_t
free_count	./src/flecs.h	/^        ecs_metric_t free_count;           \/**< Frees per frame *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1608	typeref:typename:ecs_metric_t
free_obj	./src/flecs.h	/^template<class Ty> inline void free_obj(Ty* _ptr) { $/;"	f	namespace:flecs::_	typeref:typename:void
free_on_add	./src/flecs.h	/^    ecs_ctx_free_t free_on_add = nullptr;$/;"	m	struct:flecs::_::component_binding_ctx	typeref:typename:ecs_ctx_free_t
free_on_remove	./src/flecs.h	/^    ecs_ctx_free_t free_on_remove = nullptr;$/;"	m	struct:flecs::_::component_binding_ctx	typeref:typename:ecs_ctx_free_t
free_on_set	./src/flecs.h	/^    ecs_ctx_free_t free_on_set = nullptr;$/;"	m	struct:flecs::_::component_binding_ctx	typeref:typename:ecs_ctx_free_t
freep	./vendor/STC/include/stc/priv/cregex_prv.c	/^    _Reinst* freep;$/;"	m	struct:_Parser	typeref:typename:_Reinst *	file:
frequency	./src/flecs.h	/^struct frequency {$/;"	s	struct:flecs::units
from	./src/flecs.c	/^    ecs_table_t *from;               \/* Edge source table *\/$/;"	m	struct:ecs_graph_edge_t	typeref:typename:ecs_table_t *	file:
from_int	./src/flecs.h	/^    static constexpr E from_int() {$/;"	f	struct:flecs::_::enum_reflection	typeref:typename:E
from_json	./src/flecs.h	/^const char* from_json(T* value, const char *json, flecs::from_json_desc_t *desc = nullptr) {$/;"	f	struct:flecs::world	typeref:typename:const char *
from_json	./src/flecs.h	/^const char* from_json(const char *json) {$/;"	f	struct:flecs::entity	typeref:typename:const char *
from_json	./src/flecs.h	/^const char* from_json(const char *json, flecs::from_json_desc_t *desc = nullptr) {$/;"	f	struct:flecs::world	typeref:typename:const char *
from_json	./src/flecs.h	/^const char* from_json(flecs::entity_t tid, void* value, const char *json, flecs::from_json_desc_/;"	f	struct:flecs::world	typeref:typename:const char *
from_json_desc_t	./src/flecs.h	/^using from_json_desc_t = ecs_from_json_desc_t;$/;"	t	namespace:flecs	typeref:typename:ecs_from_json_desc_t
from_json_file	./src/flecs.h	/^const char* from_json_file(const char *json, flecs::from_json_desc_t *desc = nullptr) {$/;"	f	struct:flecs::world	typeref:typename:const char *
ft_offset	./src/flecs.c	/^    int16_t ft_offset;$/;"	m	struct:ecs_table__t	typeref:typename:int16_t	file:
ft_terms	./src/flecs.c	/^    ecs_vec_t ft_terms;              \/* Terms with components from flattened tree *\/$/;"	m	struct:ecs_entity_filter_t	typeref:typename:ecs_vec_t	file:
fuchsia	./vendor/fmt/include/color.h	/^  fuchsia = 0xFF00FF,                  \/\/ rgb(255,0,255)$/;"	e	enum:color
function	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    function_ptr function;$/;"	m	struct:ska::detailv3::functor_storage	typeref:typename:function_ptr
function_ptr	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    typedef Result (*function_ptr)(Args...);$/;"	t	struct:ska::detailv3::functor_storage	typeref:typename:Result (*)(Args...)
function_traits	./src/flecs.h	/^struct function_traits$/;"	s	namespace:flecs::_
function_traits_defs	./src/flecs.h	/^struct function_traits_defs$/;"	s	namespace:flecs::_
function_traits_impl	./src/flecs.h	/^struct function_traits_impl {$/;"	s	namespace:flecs::_
function_traits_impl	./src/flecs.h	/^struct function_traits_impl<ReturnType(*)(Args...)>$/;"	s	namespace:flecs::_
function_traits_impl	./src/flecs.h	/^struct function_traits_impl<ReturnType(Args...)>$/;"	s	namespace:flecs::_
function_traits_impl	./src/flecs.h	/^struct function_traits_impl<ReturnType(ClassType::*)(Args...) const volatile&&>$/;"	s	namespace:flecs::_
function_traits_impl	./src/flecs.h	/^struct function_traits_impl<ReturnType(ClassType::*)(Args...) const volatile&>$/;"	s	namespace:flecs::_
function_traits_impl	./src/flecs.h	/^struct function_traits_impl<ReturnType(ClassType::*)(Args...) const volatile>$/;"	s	namespace:flecs::_
function_traits_impl	./src/flecs.h	/^struct function_traits_impl<ReturnType(ClassType::*)(Args...) const&&>$/;"	s	namespace:flecs::_
function_traits_impl	./src/flecs.h	/^struct function_traits_impl<ReturnType(ClassType::*)(Args...) const&>$/;"	s	namespace:flecs::_
function_traits_impl	./src/flecs.h	/^struct function_traits_impl<ReturnType(ClassType::*)(Args...) const>$/;"	s	namespace:flecs::_
function_traits_impl	./src/flecs.h	/^struct function_traits_impl<ReturnType(ClassType::*)(Args...) volatile&&>$/;"	s	namespace:flecs::_
function_traits_impl	./src/flecs.h	/^struct function_traits_impl<ReturnType(ClassType::*)(Args...) volatile&>$/;"	s	namespace:flecs::_
function_traits_impl	./src/flecs.h	/^struct function_traits_impl<ReturnType(ClassType::*)(Args...) volatile>$/;"	s	namespace:flecs::_
function_traits_impl	./src/flecs.h	/^struct function_traits_impl<ReturnType(ClassType::*)(Args...)>$/;"	s	namespace:flecs::_
function_traits_no_cv	./src/flecs.h	/^struct function_traits_no_cv$/;"	s	namespace:flecs::_
function_traits_no_cv	./src/flecs.h	/^struct function_traits_no_cv<T, decltype((void)&T::operator())>$/;"	s	namespace:flecs::_
functor_storage	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    functor_storage(const Functor & functor)$/;"	f	struct:ska::detailv3::functor_storage
functor_storage	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    functor_storage(function_ptr function)$/;"	f	struct:ska::detailv3::functor_storage
functor_storage	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^struct functor_storage : Functor$/;"	s	namespace:ska::detailv3
functor_storage	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^struct functor_storage<Result, Result (*)(Args...)>$/;"	s	namespace:ska::detailv3
funlockfile	./vendor/fmt/include/format-inl.h	/^template <typename F> auto funlockfile(F* f) -> decltype(_unlock_file(f)) {$/;"	f	namespace:detail	typeref:typename:decltype(_unlock_file (f))
fwrite_fully	./vendor/fmt/include/format-inl.h	/^inline void fwrite_fully(const void* ptr, size_t count, FILE* stream) {$/;"	f	namespace:detail	typeref:typename:void
g	./vendor/STC/misc/benchmarks/plotbench/plot.py	/^g = sns.catplot(data=df, x='Method', y='Seconds', hue='Library', col='C', kind='bar', orient='v'/;"	v
g	./vendor/fmt/include/color.h	/^  uint8_t g;$/;"	m	struct:rgb	typeref:typename:uint8_t
g	./vendor/raylib5/include/raygui.h	/^        unsigned char g;$/;"	m	struct:Color	typeref:typename:unsigned char
g	./vendor/raylib5/include/raylib.h	/^    unsigned char g;        \/\/ Color green value$/;"	m	struct:Color	typeref:typename:unsigned char
g_BG_COLOR	./src/main.c	/^const Color g_BG_COLOR = BLACK;$/;"	v	typeref:typename:const Color
g_SCREEN_HEIGHT	./src/main.c	/^const int g_SCREEN_HEIGHT = 720;$/;"	v	typeref:typename:const int
g_SCREEN_WIDTH	./src/main.c	/^const int g_SCREEN_WIDTH = 1280;$/;"	v	typeref:typename:const int
g_ent_camera	./src/entities.c	/^ecs_entity_t g_ent_camera;$/;"	v	typeref:typename:ecs_entity_t
g_ent_dog	./src/entities.c	/^ecs_entity_t g_ent_dog;$/;"	v	typeref:typename:ecs_entity_t
g_ent_player	./src/entities.c	/^ecs_entity_t g_ent_player;$/;"	v	typeref:typename:ecs_entity_t
g_registry	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^registry& g_registry()$/;"	f	namespace:picobench	typeref:typename:registry &
g_world	./src/main.c	/^ecs_world_t *g_world;$/;"	v	typeref:typename:ecs_world_t *
gainsboro	./vendor/fmt/include/color.h	/^  gainsboro = 0xDCDCDC,                \/\/ rgb(220,220,220)$/;"	e	enum:color
gauge	./src/flecs.h	/^    ecs_gauge_t gauge;$/;"	m	union:ecs_metric_t	typeref:typename:ecs_gauge_t
gc_d	./src/grid.h	/^	GridComponentData *gc_d;$/;"	m	struct:GridComponent	typeref:typename:GridComponentData *
gc_ref	./src/grid.h	/^	ecs_ref_t *gc_ref; \/\/ GridComponent *$/;"	m	struct:GridComponentData	typeref:typename:ecs_ref_t *
gc_ref_data	./src/grid.c	/^GridComponentData* gc_ref_data(ecs_world_t *world, ecs_ref_t *gc_ref)$/;"	f	typeref:typename:GridComponentData *
gc_refs	./src/grid.h	/^    CVecVoid gc_refs; \/\/ CVecVoid<ecs_entity_t> entities$/;"	m	struct:Tile	typeref:typename:CVecVoid
gcd	./vendor/STC/misc/examples/coroutines/triples.c	/^int gcd(int a, int b) {$/;"	f	typeref:typename:int
general	./vendor/fmt/include/base.h	/^  general,  \/\/ 'g' or 'G'$/;"	e	enum:presentation_type
general	./vendor/fmt/include/format.h	/^  general,  \/\/ General: exponent notation or fixed point based on magnitude.$/;"	e	enum:detail::float_format
generate_report	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    report generate_report(CompareResult cmp = std::equal_to<result_t>()) const$/;"	f	class:picobench::runner	typeref:typename:report
generation	./src/flecs.c	/^    int32_t generation;$/;"	m	struct:ecs_reachable_cache_t	typeref:typename:int32_t	file:
generation	./src/flecs.c	/^    uint16_t generation;             \/* Used for table cleanup *\/$/;"	m	struct:ecs_table__t	typeref:typename:uint16_t	file:
generic_context	./vendor/fmt/include/format.h	/^  constexpr generic_context(OutputIt out,$/;"	f	class:generic_context
generic_context	./vendor/fmt/include/format.h	/^template <typename OutputIt, typename Char> class generic_context {$/;"	c
generic_display_string	./vendor/fmt/include/std.h	/^  auto generic_display_string() const -> std::string {$/;"	f	class:path	typeref:typename:std::string
generic_system_string	./vendor/fmt/include/std.h	/^  auto generic_system_string() const -> std::string { return generic_string(); }$/;"	f	class:path	typeref:typename:std::string
genrand64_int63	./src/mt19937-64.c	/^long long genrand64_int63(void)$/;"	f	typeref:typename:long long
genrand64_int64	./src/mt19937-64.c	/^unsigned long long genrand64_int64(void)$/;"	f	typeref:typename:unsigned long long
genrand64_real1	./src/mt19937-64.c	/^double genrand64_real1(void)$/;"	f	typeref:typename:double
genrand64_real2	./src/mt19937-64.c	/^double genrand64_real2(void)$/;"	f	typeref:typename:double
genrand64_real3	./src/mt19937-64.c	/^double genrand64_real3(void)$/;"	f	typeref:typename:double
get	./src/flecs.h	/^    A* get() const {$/;"	f	struct:flecs::table	typeref:typename:A *
get	./src/flecs.h	/^    First* get(flecs::entity_t second) const {$/;"	f	struct:flecs::table	typeref:typename:First *
get	./src/flecs.h	/^    T* get() const {$/;"	f	struct:flecs::table	typeref:typename:T *
get	./src/flecs.h	/^    T* get() {$/;"	f	struct:flecs::ref	typeref:typename:T *
get	./src/flecs.h	/^    const A* get() const {$/;"	f	struct:flecs::entity_view	typeref:typename:const A *
get	./src/flecs.h	/^    const First* get(Second constant) const {$/;"	f	struct:flecs::entity_view	typeref:typename:const First *
get	./src/flecs.h	/^    const First* get(Second second) const {$/;"	f	struct:flecs::entity_view	typeref:typename:const First *
get	./src/flecs.h	/^    const T* get() const {$/;"	f	struct:flecs::entity_view	typeref:typename:const T *
get	./src/flecs.h	/^    const void* get(flecs::entity_t first, flecs::entity_t second) const {$/;"	f	struct:flecs::entity_view	typeref:typename:const void *
get	./src/flecs.h	/^    const void* get(flecs::id_t comp) const {$/;"	f	struct:flecs::entity_view	typeref:typename:const void *
get	./src/flecs.h	/^    flecs::id get(int32_t index) const {$/;"	f	struct:flecs::type	typeref:typename:flecs::id
get	./src/flecs.h	/^    static enum_type<E>& get() {$/;"	f	struct:flecs::_::enum_type	typeref:typename:enum_type<E> &
get	./src/flecs.h	/^    void* get(flecs::entity_t first, flecs::entity_t second) const {$/;"	f	struct:flecs::table	typeref:typename:void *
get	./src/flecs.h	/^    void* get(flecs::id_t id) const {$/;"	f	struct:flecs::table	typeref:typename:void *
get	./src/flecs.h	/^const A* world::get() const {$/;"	f	class:flecs::world	typeref:typename:const A *
get	./src/flecs.h	/^const First* world::get(Second second) const {$/;"	f	class:flecs::world	typeref:typename:const First *
get	./src/flecs.h	/^const T* entity_view::get() const {$/;"	f	class:flecs::entity_view	typeref:typename:const T *
get	./src/flecs.h	/^inline bool entity_view::get(const Func& func) const {$/;"	f	class:flecs::entity_view	typeref:typename:bool
get	./src/flecs.h	/^inline const T* world::get() const {$/;"	f	class:flecs::world	typeref:typename:const T *
get	./src/flecs.h	/^inline void world::get(const Func& func) const {$/;"	f	class:flecs::world	typeref:typename:void
get	./vendor/STC/include/stc/extend.h	/^    i_type get;$/;"	m	struct:__anon462bbae20108	typeref:typename:i_extend i_type
get	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR auto get(int id) const -> format_arg {$/;"	f	class:basic_format_args	typeref:typename:format_arg
get	./vendor/fmt/include/base.h	/^  auto get() const -> basic_string_view<Char> { return str_; }$/;"	f	class:basic_format_string	typeref:typename:basic_string_view<Char>
get	./vendor/fmt/include/base.h	/^  auto get(basic_string_view<Char> name) const -> format_arg {$/;"	f	class:basic_format_args	typeref:typename:format_arg
get	./vendor/fmt/include/base.h	/^  template <typename Char> constexpr auto get() const -> Char {$/;"	f	struct:detail::fill_t	typeref:typename:Char
get	./vendor/fmt/include/compile.h	/^constexpr const auto& get([[maybe_unused]] const T& first,$/;"	f	namespace:detail	typeref:typename:const auto &
get	./vendor/fmt/include/format-inl.h	/^  auto get() -> int {$/;"	f	class:detail::fallback_file	typeref:typename:int
get	./vendor/fmt/include/format-inl.h	/^  auto get() -> int {$/;"	f	class:detail::file_base	typeref:typename:int
get	./vendor/fmt/include/format-inl.h	/^template <typename Locale> auto locale_ref::get() const -> Locale {$/;"	f	class:detail::locale_ref	typeref:typename:Locale
get	./vendor/fmt/include/os.h	/^  auto get() const noexcept -> FILE* { return file_; }$/;"	f	class:buffered_file	typeref:typename:auto
get	./vendor/fmt/include/ranges.h	/^      static auto get(const T& t) -> all {$/;"	f	struct:formatter::format::getter	typeref:typename:all
getRandomString	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^static inline bool getRandomString(const StcSet& set, const char* str) {$/;"	f	typeref:typename:bool	file:
getRandomString	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^static inline bool getRandomString(const StdSet& set, const char* str) {$/;"	f	typeref:typename:bool	file:
get_alive	./src/flecs.h	/^inline flecs::entity world::get_alive(flecs::entity_t e) const {$/;"	f	class:flecs::world	typeref:typename:flecs::entity
get_allocator	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] auto get_allocator() const -> allocator_type {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:allocator_type
get_allocator	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto get_allocator() const noexcept -> allocator_type {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:auto
get_allocator	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    const allocator_type & get_allocator() const$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:const allocator_type &
get_allocator	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  allocator_type get_allocator() const {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:allocator_type
get_allocator	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  allocator_type get_allocator() const { return m_ht.get_allocator(); }$/;"	f	class:tsl::robin_map	typeref:typename:allocator_type
get_allocator	./vendor/fmt/include/format.h	/^  auto get_allocator() const -> Allocator { return alloc_; }$/;"	f	class:basic_memory_buffer	typeref:typename:Allocator
get_arg	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto get_arg(Context& ctx, ID id) -> decltype(ctx.arg(id)) {$/;"	f	namespace:detail	typeref:typename:decltype(ctx.arg (id))
get_arg_checked	./vendor/fmt/include/compile.h	/^constexpr const T& get_arg_checked(const Args&... args) {$/;"	f	namespace:detail	typeref:typename:const T &
get_arg_index_by_name	./vendor/fmt/include/base.h	/^FMT_CONSTEXPR auto get_arg_index_by_name(basic_string_view<Char> name) -> int {$/;"	f	namespace:detail	typeref:typename:int
get_arg_index_by_name	./vendor/fmt/include/base.h	/^constexpr auto get_arg_index_by_name(basic_string_view<Char> name) -> int {$/;"	f	namespace:detail	typeref:typename:int
get_arg_index_by_name	./vendor/fmt/include/compile.h	/^constexpr int get_arg_index_by_name(basic_string_view<Char> name,$/;"	f	namespace:detail	typeref:typename:int
get_background	./vendor/fmt/include/color.h	/^  FMT_CONSTEXPR auto get_background() const noexcept -> detail::color_type {$/;"	f	class:text_style	typeref:typename:FMT_CONSTEXPR auto
get_binding_ctx	./src/flecs.h	/^    BindingCtx* get_binding_ctx(flecs::type_hooks_t& h){$/;"	f	struct:flecs::component	typeref:typename:BindingCtx *
get_binding_ctx	./src/flecs.h	/^    void* get_binding_ctx() const {$/;"	f	struct:flecs::world	typeref:typename:void *
get_bool	./src/flecs.h	/^    bool get_bool() const {$/;"	f	struct:flecs::cursor	typeref:typename:bool
get_brief	./src/flecs.h	/^inline const char* get_brief(const flecs::entity_view& e) {$/;"	f	namespace:flecs::doc	typeref:typename:const char *
get_bucket_info	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    int get_bucket_info(const size_type bucket, size_type steps[], const size_type slots) const$/;"	f	class:emhash7::HashMap	typeref:typename:int
get_buffer	./vendor/fmt/include/base.h	/^auto get_buffer(OutputIt out) -> buffer<T>& {$/;"	f	namespace:detail	typeref:typename:buffer<T> &
get_buffer	./vendor/fmt/include/base.h	/^auto get_buffer(OutputIt out) -> iterator_buffer<OutputIt, T> {$/;"	f	namespace:detail	typeref:typename:iterator_buffer<OutputIt,T>
get_cached_power	./vendor/fmt/include/format-inl.h	/^  static auto get_cached_power(int k) noexcept -> uint128_fallback {$/;"	f	struct:detail::dragonbox::cache_accessor	typeref:typename:auto
get_cached_power	./vendor/fmt/include/format-inl.h	/^  static auto get_cached_power(int k) noexcept -> uint64_t {$/;"	f	struct:detail::dragonbox::cache_accessor	typeref:typename:auto
get_cached_power	./vendor/fmt/include/format-inl.h	/^FMT_FUNC auto get_cached_power(int k) noexcept -> uint128_fallback {$/;"	f	namespace:detail::dragonbox	typeref:typename:FMT_FUNC auto
get_char	./src/flecs.h	/^    char get_char() const {$/;"	f	struct:flecs::cursor	typeref:typename:char
get_classic_locale	./vendor/fmt/include/chrono.h	/^inline auto get_classic_locale() -> const std::locale& {$/;"	f	namespace:detail	typeref:typename:const std::locale &
get_color	./src/flecs.h	/^inline const char* get_color(const flecs::entity_view& e) {$/;"	f	namespace:flecs::doc	typeref:typename:const char *
get_column	./src/flecs.h	/^    virtual void* get_column(int32_t index) const {$/;"	f	struct:flecs::table	typeref:typename:void *
get_column	./src/flecs.h	/^    void* get_column(int32_t index) const override {$/;"	f	struct:flecs::table_range	typeref:typename:void *
get_compare_result	./vendor/STC/misc/tests/ctest.h	/^static bool get_compare_result(const char* cmp, int c3, bool eq) {$/;"	f	typeref:typename:bool
get_container	./vendor/fmt/include/base.h	/^  friend auto get_container(basic_appender app) -> detail::buffer<T>& {$/;"	f	typeref:typename:detail::buffer<T> &
get_container	./vendor/fmt/include/base.h	/^inline auto get_container(OutputIt it) -> typename OutputIt::container_type& {$/;"	f	namespace:detail	typeref:typename:OutputIt::container_type &
get_cstring	./vendor/fmt/include/printf.h	/^template <typename Char> struct get_cstring {$/;"	s	namespace:detail
get_ctx	./src/flecs.h	/^    void* get_ctx() const {$/;"	f	struct:flecs::world	typeref:typename:void *
get_data	./vendor/fmt/include/format.h	/^inline auto get_data(Container& c) -> typename Container::value_type* {$/;"	f	namespace:detail	typeref:typename:Container::value_type *
get_data	./vendor/fmt/include/format.h	/^inline auto get_data(std::basic_string<Char>& s) -> Char* {$/;"	f	namespace:detail	typeref:typename:Char *
get_detail	./src/flecs.h	/^inline const char* get_detail(const flecs::entity_view& e) {$/;"	f	namespace:flecs::doc	typeref:typename:const char *
get_diss	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    size_type get_diss(size_type bucket, size_type next_bucket, const size_type slots) const$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
get_dynamic_spec	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto get_dynamic_spec(FormatArg arg) -> int {$/;"	f	namespace:detail	typeref:typename:int
get_ecs_component	./src/flecs.c	/^const EcsComponent* get_ecs_component($/;"	f	typeref:typename:const EcsComponent *	file:
get_elem_count	./src/flecs.c	/^int32_t get_elem_count($/;"	f	typeref:typename:int32_t	file:
get_emphasis	./vendor/fmt/include/color.h	/^  FMT_CONSTEXPR auto get_emphasis() const noexcept -> emphasis {$/;"	f	class:text_style	typeref:typename:FMT_CONSTEXPR auto
get_entity	./src/flecs.h	/^inline flecs::entity cursor::get_entity() const {$/;"	f	class:flecs::cursor	typeref:typename:flecs::entity
get_field	./src/flecs.h	/^    flecs::field<T> get_field(int32_t index) const {$/;"	f	struct:flecs::iter	typeref:typename:flecs::field<T>
get_file	./vendor/fmt/include/format-inl.h	/^auto get_file(F* f, int) -> apple_file<F> {$/;"	f	namespace:detail	typeref:typename:apple_file<F>
get_file	./vendor/fmt/include/format-inl.h	/^inline auto get_file(F* f, int) -> glibc_file<F> {$/;"	f	namespace:detail	typeref:typename:glibc_file<F>
get_file	./vendor/fmt/include/format-inl.h	/^inline auto get_file(FILE* f, ...) -> fallback_file<FILE> { return f; }$/;"	f	namespace:detail	typeref:typename:fallback_file<FILE>
get_file	./vendor/fmt/include/ostream.h	/^  friend auto get_file(BufType& obj) -> FILE* { return obj.*FileMemberPtr; }$/;"	f	namespace:detail	typeref:typename:FILE *
get_first	./src/flecs.h	/^    flecs::entity get_first() {$/;"	f	struct:flecs::term	typeref:typename:flecs::entity
get_float	./src/flecs.h	/^    double get_float() const {$/;"	f	struct:flecs::cursor	typeref:typename:double
get_foreground	./vendor/fmt/include/color.h	/^  FMT_CONSTEXPR auto get_foreground() const noexcept -> detail::color_type {$/;"	f	class:text_style	typeref:typename:FMT_CONSTEXPR auto
get_generation	./src/flecs.h	/^inline uint32_t get_generation(flecs::entity_t e) {$/;"	f	namespace:flecs	typeref:typename:uint32_t
get_hooks	./src/flecs.h	/^    flecs::type_hooks_t get_hooks() {$/;"	f	struct:flecs::component	typeref:typename:flecs::type_hooks_t
get_id	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR auto get_id(basic_string_view<Char> name) const -> int {$/;"	f	class:basic_format_args	typeref:typename:int
get_info	./src/flecs.h	/^    const flecs::world_info_t* get_info() const{$/;"	f	struct:flecs::world	typeref:typename:const flecs::world_info_t *
get_int	./src/flecs.h	/^    int64_t get_int() const {$/;"	f	struct:flecs::cursor	typeref:typename:int64_t
get_iter	./src/flecs.h	/^    ecs_iter_t get_iter(flecs::world_t *world) const override {$/;"	f	struct:flecs::filter	typeref:typename:ecs_iter_t
get_iter	./src/flecs.h	/^    ecs_iter_t get_iter(flecs::world_t *world) const override {$/;"	f	struct:flecs::iter_iterable	typeref:typename:ecs_iter_t
get_iter	./src/flecs.h	/^    ecs_iter_t get_iter(flecs::world_t *world) const override {$/;"	f	struct:flecs::query	typeref:typename:ecs_iter_t
get_iter	./src/flecs.h	/^    ecs_iter_t get_iter(flecs::world_t *world) const override {$/;"	f	struct:flecs::rule	typeref:typename:ecs_iter_t
get_iter	./src/flecs.h	/^    ecs_iter_t get_iter(flecs::world_t*) const {$/;"	f	struct:flecs::page_iterable	typeref:typename:ecs_iter_t
get_iter	./src/flecs.h	/^    ecs_iter_t get_iter(flecs::world_t*) const {$/;"	f	struct:flecs::worker_iterable	typeref:typename:ecs_iter_t
get_iterator	./vendor/fmt/include/base.h	/^auto get_iterator(Buf& buf, OutputIt) -> decltype(buf.out()) {$/;"	f	namespace:detail	typeref:typename:decltype(buf.out ())
get_iterator	./vendor/fmt/include/base.h	/^auto get_iterator(buffer<T>&, OutputIt out) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
get_key	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] static constexpr auto get_key(value_type const& vt) -> key_type const& {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:key_type const &
get_level	./src/flecs.h	/^inline int get_level() {$/;"	f	namespace:flecs::log	typeref:typename:int
get_link	./src/flecs.h	/^inline const char* get_link(const flecs::entity_view& e) {$/;"	f	namespace:flecs::doc	typeref:typename:const char *
get_locale	./vendor/fmt/include/chrono.h	/^  get_locale(bool localized, locale_ref loc) : has_locale_(localized) {$/;"	f	class:detail::get_locale
get_locale	./vendor/fmt/include/chrono.h	/^class get_locale {$/;"	c	namespace:detail
get_main_bucket	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    size_type get_main_bucket(const size_type bucket) const$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
get_member	./src/flecs.h	/^    flecs::string_view get_member() const {$/;"	f	struct:flecs::cursor	typeref:typename:flecs::string_view
get_milliseconds	./vendor/fmt/include/chrono.h	/^inline auto get_milliseconds(std::chrono::duration<Rep, Period> d)$/;"	f	namespace:detail	typeref:typename:std::chrono::duration<Rep,std::milli>
get_mut	./src/flecs.h	/^    A* get_mut() const {$/;"	f	struct:flecs::entity_view	typeref:typename:A *
get_mut	./src/flecs.h	/^    First* get_mut(Second constant) const {$/;"	f	struct:flecs::entity_view	typeref:typename:First *
get_mut	./src/flecs.h	/^    First* get_mut(Second second) const {$/;"	f	struct:flecs::entity_view	typeref:typename:First *
get_mut	./src/flecs.h	/^    T* get_mut() const {$/;"	f	struct:flecs::entity_view	typeref:typename:T *
get_mut	./src/flecs.h	/^    void* get_mut(flecs::entity_t first, flecs::entity_t second) const {$/;"	f	struct:flecs::entity_view	typeref:typename:void *
get_mut	./src/flecs.h	/^    void* get_mut(flecs::id_t comp) const {$/;"	f	struct:flecs::entity_view	typeref:typename:void *
get_mut	./src/flecs.h	/^A* world::get_mut() const {$/;"	f	class:flecs::world	typeref:typename:A *
get_mut	./src/flecs.h	/^First* world::get_mut(Second second) const {$/;"	f	class:flecs::world	typeref:typename:First *
get_mut	./src/flecs.h	/^T* world::get_mut() const {$/;"	f	class:flecs::world	typeref:typename:T *
get_mut_second	./src/flecs.h	/^    Second* get_mut_second() const {$/;"	f	struct:flecs::entity_view	typeref:typename:Second *
get_mut_second	./src/flecs.h	/^    Second* get_mut_second(flecs::entity_t first) const {$/;"	f	struct:flecs::entity_view	typeref:typename:Second *
get_name	./src/flecs.h	/^inline const char* get_name(const flecs::entity_view& e) {$/;"	f	namespace:flecs::doc	typeref:typename:const char *
get_or_return_default	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    ValueT get_or_return_default(const KeyT& key) const noexcept$/;"	f	class:emhash7::HashMap	typeref:typename:ValueT
get_path_string	./vendor/fmt/include/std.h	/^auto get_path_string(const std::filesystem::path& p,$/;"	f	namespace:detail	typeref:typename:auto
get_pipeline	./src/flecs.h	/^inline flecs::entity world::get_pipeline() const {$/;"	f	class:flecs::world	typeref:typename:flecs::entity
get_problem_space_view	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    static problem_space_view_map get_problem_space_view(const suite& s)$/;"	f	class:picobench::report	typeref:typename:problem_space_view_map
get_ptr	./src/flecs.h	/^    void* get_ptr() {$/;"	f	struct:flecs::cursor	typeref:typename:void *
get_ptrs	./src/flecs.h	/^    bool get_ptrs(world_t *world, const ecs_record_t *r, ecs_table_t *table,$/;"	f	struct:flecs::_::entity_with_delegate_impl	typeref:typename:bool
get_read_buffer	./vendor/fmt/include/format-inl.h	/^  auto get_read_buffer() const -> span<const char> {$/;"	f	class:detail::apple_file	typeref:typename:span<const char>
get_read_buffer	./vendor/fmt/include/format-inl.h	/^  auto get_read_buffer() const -> span<const char> {$/;"	f	class:detail::fallback_file	typeref:typename:span<const char>
get_read_buffer	./vendor/fmt/include/format-inl.h	/^  auto get_read_buffer() const -> span<const char> {$/;"	f	class:detail::glibc_file	typeref:typename:span<const char>
get_ref	./src/flecs.h	/^    ref<A> get_ref() const {$/;"	f	struct:flecs::entity	typeref:typename:ref<A>
get_ref	./src/flecs.h	/^    ref<First> get_ref(flecs::entity_t second) const {$/;"	f	struct:flecs::entity	typeref:typename:ref<First>
get_ref	./src/flecs.h	/^    ref<T> get_ref() const {$/;"	f	struct:flecs::entity	typeref:typename:ref<T>
get_ref	./src/flecs.h	/^inline ref<T> world::get_ref() const {$/;"	f	class:flecs::world	typeref:typename:ref<T>
get_ref_second	./src/flecs.h	/^    ref<Second> get_ref_second(flecs::entity_t first) const {$/;"	f	struct:flecs::entity	typeref:typename:ref<Second>
get_row	./src/flecs.h	/^    T get_row() {$/;"	f	struct:flecs::_::each_column	typeref:typename:T
get_row	./src/flecs.h	/^    T& get_row() {$/;"	f	struct:flecs::_::each_column	typeref:typename:T &
get_row	./src/flecs.h	/^    actual_type_t<T> get_row() {$/;"	f	struct:flecs::_::each_column	typeref:typename:actual_type_t<T>
get_scope	./src/flecs.h	/^inline flecs::entity world::get_scope() const {$/;"	f	class:flecs::world	typeref:typename:flecs::entity
get_second	./src/flecs.h	/^    const Second* get_second() const {$/;"	f	struct:flecs::entity_view	typeref:typename:const Second *
get_second	./src/flecs.h	/^    const Second* get_second(flecs::entity_t first) const {$/;"	f	struct:flecs::entity_view	typeref:typename:const Second *
get_second	./src/flecs.h	/^    flecs::entity get_second() {$/;"	f	struct:flecs::term	typeref:typename:flecs::entity
get_significand_size	./vendor/fmt/include/format.h	/^constexpr auto get_significand_size(const big_decimal_fp& f) -> int {$/;"	f	namespace:detail	typeref:typename:int
get_significand_size	./vendor/fmt/include/format.h	/^inline auto get_significand_size(const dragonbox::decimal_fp<T>& f) -> int {$/;"	f	namespace:detail	typeref:typename:int
get_size	./src/flecs.c	/^ecs_size_t get_size($/;"	f	typeref:typename:ecs_size_t	file:
get_src	./src/flecs.h	/^    flecs::entity get_src() {$/;"	f	struct:flecs::term	typeref:typename:flecs::entity
get_stage	./src/flecs.h	/^    flecs::world get_stage(int32_t stage_id) const {$/;"	f	struct:flecs::world	typeref:typename:flecs::world
get_stage_count	./src/flecs.h	/^    int32_t get_stage_count() const {$/;"	f	struct:flecs::world	typeref:typename:int32_t
get_stage_id	./src/flecs.h	/^    int32_t get_stage_id() const {$/;"	f	struct:flecs::world	typeref:typename:int32_t
get_string	./src/flecs.h	/^    const char *get_string() const {$/;"	f	struct:flecs::cursor	typeref:typename:const char *
get_threads	./src/flecs.h	/^inline int32_t world::get_threads() const {$/;"	f	class:flecs::world	typeref:typename:int32_t
get_time_	./src/flecs.h	/^    ecs_os_api_get_time_t get_time_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_get_time_t
get_time_in_ms	./vendor/STC/misc/benchmarks/various/cbits_benchmark.cpp	/^inline unsigned long get_time_in_ms()$/;"	f	typeref:typename:unsigned long
get_type	./src/flecs.h	/^inline flecs::entity cursor::get_type() const {$/;"	f	class:flecs::cursor	typeref:typename:flecs::entity
get_type	./vendor/fmt/include/compile.h	/^using get_type = typename get_type_impl<N, T>::type;$/;"	t	namespace:detail	typeref:typename:get_type_impl<N,T>::type
get_type_impl	./vendor/fmt/include/compile.h	/^template <int N, typename... Args> struct get_type_impl<N, type_list<Args...>> {$/;"	s	namespace:detail
get_types	./vendor/fmt/include/args.h	/^  auto get_types() const -> unsigned long long {$/;"	f	class:dynamic_format_arg_store	typeref:typename:unsigned long long
get_uint	./src/flecs.h	/^    uint64_t get_uint() const {$/;"	f	struct:flecs::cursor	typeref:typename:uint64_t
get_unchecked_field	./src/flecs.h	/^    flecs::untyped_field get_unchecked_field(int32_t index) const {$/;"	f	struct:flecs::iter	typeref:typename:flecs::untyped_field
get_unit	./src/flecs.h	/^inline flecs::entity cursor::get_unit() const {$/;"	f	class:flecs::cursor	typeref:typename:flecs::entity
get_units	./vendor/fmt/include/chrono.h	/^FMT_CONSTEXPR inline auto get_units() -> const char* {$/;"	f	namespace:detail	typeref:typename:const char *
get_value	./vendor/STC/misc/examples/coroutines/cointerleave.c	/^static int get_value(struct GenValue* g)$/;"	f	typeref:typename:int	file:
get_var	./src/flecs.h	/^inline flecs::entity iter::get_var(const char *name) const {$/;"	f	class:flecs::iter	typeref:typename:flecs::entity
get_var	./src/flecs.h	/^inline flecs::entity iter::get_var(int var_id) const {$/;"	f	class:flecs::iter	typeref:typename:flecs::entity
get_world	./src/flecs.h	/^    flecs::world get_world() const {$/;"	f	struct:flecs::world	typeref:typename:flecs::world
get_write_buffer	./vendor/fmt/include/format-inl.h	/^  auto get_write_buffer() const -> span<char> { return {nullptr, 0}; }$/;"	f	class:detail::fallback_file	typeref:typename:span<char>
get_write_buffer	./vendor/fmt/include/format-inl.h	/^  auto get_write_buffer() const -> span<char> {$/;"	f	class:detail::apple_file	typeref:typename:span<char>
get_write_buffer	./vendor/fmt/include/format-inl.h	/^  auto get_write_buffer() const -> span<char> {$/;"	f	class:detail::glibc_file	typeref:typename:span<char>
getc_unlocked	./vendor/fmt/include/format-inl.h	/^template <typename F> auto getc_unlocked(F* f) -> decltype(_fgetc_nolock(f)) {$/;"	f	namespace:detail	typeref:typename:decltype(_fgetc_nolock (f))
getter	./vendor/fmt/include/ranges.h	/^    struct getter : T {$/;"	s	function:formatter::format
ghost_white	./vendor/fmt/include/color.h	/^  ghost_white = 0xF8F8FF,              \/\/ rgb(248,248,255)$/;"	e	enum:color
glibc_file	./vendor/fmt/include/format-inl.h	/^template <typename F> class glibc_file : public file_base<F> {$/;"	c	namespace:detail
global_registry	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^class global_registry$/;"	c	namespace:picobench
global_with	./src/flecs.c	/^    ecs_entity_t global_with;$/;"	m	struct:__anon7d4a41771908	typeref:typename:ecs_entity_t	file:
glyphCount	./vendor/raylib5/include/raygui.h	/^        int glyphCount;         \/\/ Number of glyph characters$/;"	m	struct:Font	typeref:typename:int
glyphCount	./vendor/raylib5/include/raylib.h	/^    int glyphCount;         \/\/ Number of glyph characters$/;"	m	struct:Font	typeref:typename:int
glyphPadding	./vendor/raylib5/include/raygui.h	/^        int glyphPadding;       \/\/ Padding around the glyph characters$/;"	m	struct:Font	typeref:typename:int
glyphPadding	./vendor/raylib5/include/raylib.h	/^    int glyphPadding;       \/\/ Padding around the glyph characters$/;"	m	struct:Font	typeref:typename:int
glyph_draw	./src/glyph.c	/^void glyph_draw(Glyph* glyph, int pos_x, int pos_y, Color color)$/;"	f	typeref:typename:void
glyph_draw_pro	./src/glyph.c	/^void glyph_draw_pro(Glyph *glyph, int pos_x, int pos_y, int width, int height, Color color)$/;"	f	typeref:typename:void
glyph_free	./src/glyph.c	/^void glyph_free(Glyph *glyph)$/;"	f	typeref:typename:void
glyph_get_idx_by_char	./src/glyph.c	/^int glyph_get_idx_by_char(char ch) $/;"	f	typeref:typename:int
glyph_initialize	./src/glyph.c	/^void glyph_initialize($/;"	f	typeref:typename:void
glyphs	./vendor/raylib5/include/raygui.h	/^        GlyphInfo *glyphs;      \/\/ Glyphs info data$/;"	m	struct:Font	typeref:typename:GlyphInfo *
glyphs	./vendor/raylib5/include/raylib.h	/^    GlyphInfo *glyphs;      \/\/ Glyphs info data$/;"	m	struct:Font	typeref:typename:GlyphInfo *
gmtime	./vendor/fmt/include/chrono.h	/^inline auto gmtime($/;"	f	typeref:typename:std::tm
gmtime	./vendor/fmt/include/chrono.h	/^inline auto gmtime(std::time_t time) -> std::tm {$/;"	f	typeref:typename:std::tm
gmtime_r	./vendor/fmt/include/chrono.h	/^inline auto gmtime_r(...) -> null<> { return null<>(); }$/;"	f	namespace:detail	typeref:typename:null<>
gmtime_s	./vendor/fmt/include/chrono.h	/^inline auto gmtime_s(...) -> null<> { return null<>(); }$/;"	f	namespace:detail	typeref:typename:null<>
gold	./vendor/fmt/include/color.h	/^  gold = 0xFFD700,                     \/\/ rgb(255,215,0)$/;"	e	enum:color
golden_rod	./vendor/fmt/include/color.h	/^  golden_rod = 0xDAA520,               \/\/ rgb(218,165,32)$/;"	e	enum:color
goto_next_element	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        void goto_next_element()$/;"	f	class:emhash7::HashMap::const_iterator	typeref:typename:void
goto_next_element	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        void goto_next_element()$/;"	f	class:emhash7::HashMap::iterator	typeref:typename:void
graph_edge	./src/flecs.c	/^    ecs_block_allocator_t graph_edge;$/;"	m	struct:ecs_world_allocators_t	typeref:typename:ecs_block_allocator_t	file:
graph_edge_lo	./src/flecs.c	/^    ecs_block_allocator_t graph_edge_lo;$/;"	m	struct:ecs_world_allocators_t	typeref:typename:ecs_block_allocator_t	file:
gray	./vendor/fmt/include/color.h	/^  gray = 0x808080,                     \/\/ rgb(128,128,128)$/;"	e	enum:color
green	./vendor/fmt/include/color.h	/^  green = 0x008000,                    \/\/ rgb(0,128,0)$/;"	e	enum:color
green	./vendor/fmt/include/color.h	/^  green,$/;"	e	enum:terminal_color
green_yellow	./vendor/fmt/include/color.h	/^  green_yellow = 0xADFF2F,             \/\/ rgb(173,255,47)$/;"	e	enum:color
grid	./src/grid.h	/^    Grid *grid;$/;"	m	struct:GridComponentData	typeref:typename:Grid *
grid_create_gridcomponent	./src/grid.c	/^GridComponentData* grid_create_gridcomponent(Grid *grid, ecs_entity_t entity)$/;"	f	typeref:typename:GridComponentData *
grid_draw	./src/grid.c	/^void grid_draw(Grid *grid)$/;"	f	typeref:typename:void
grid_free	./src/grid.c	/^void grid_free(Grid *grid)$/;"	f	typeref:typename:void
grid_get_tile_from_coords	./src/grid.c	/^Tile* grid_get_tile_from_coords(Grid *grid, int x, int y)$/;"	f	typeref:typename:Tile *
grid_initialize	./src/grid.c	/^void grid_initialize($/;"	f	typeref:typename:void
grid_initialize_tiles	./src/grid.c	/^void grid_initialize_tiles(Grid *grid, int tile_width, int tile_height)$/;"	f	typeref:typename:void
grid_move_entity	./src/grid.c	/^Tile* grid_move_entity($/;"	f	typeref:typename:Tile *
grid_worldspace	./src/main.c	/^Grid grid_worldspace;$/;"	v	typeref:typename:Grid
gridcomponent_initialize	./src/grid.c	/^void gridcomponent_initialize(GridComponent *gc, GridComponentData *gc_d)$/;"	f	typeref:typename:void
gridcomponentdata_initialize	./src/grid.c	/^void gridcomponentdata_initialize($/;"	f	typeref:typename:void
group	./vendor/fmt/include/format.h	/^    std::string::const_iterator group;$/;"	m	struct:detail::digit_grouping::next_state	typeref:typename:std::string::const_iterator
group_by	./src/flecs.c	/^    ecs_group_by_action_t group_by;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_group_by_action_t	file:
group_by	./src/flecs.h	/^    Base& group_by() {$/;"	f	struct:flecs::query_builder_i	typeref:typename:Base &
group_by	./src/flecs.h	/^    Base& group_by(flecs::entity_t component) {$/;"	f	struct:flecs::query_builder_i	typeref:typename:Base &
group_by	./src/flecs.h	/^    Base& group_by(flecs::entity_t component, uint64_t(*group_by_action)(flecs::world_t*, flecs:/;"	f	struct:flecs::query_builder_i	typeref:typename:Base &
group_by	./src/flecs.h	/^    Base& group_by(uint64_t(*group_by_action)(flecs::world_t*, flecs::table_t *table, flecs::id_/;"	f	struct:flecs::query_builder_i	typeref:typename:Base &
group_by	./src/flecs.h	/^    ecs_group_by_action_t group_by;$/;"	m	struct:ecs_query_desc_t	typeref:typename:ecs_group_by_action_t
group_by_ctx	./src/flecs.c	/^    void *group_by_ctx;$/;"	m	struct:ecs_query_t	typeref:typename:void *	file:
group_by_ctx	./src/flecs.h	/^    Base& group_by_ctx(void *ctx, ecs_ctx_free_t ctx_free = nullptr) {$/;"	f	struct:flecs::query_builder_i	typeref:typename:Base &
group_by_ctx	./src/flecs.h	/^    void *group_by_ctx;$/;"	m	struct:ecs_query_desc_t	typeref:typename:void *
group_by_ctx_free	./src/flecs.c	/^    ecs_ctx_free_t group_by_ctx_free;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_ctx_free_t	file:
group_by_ctx_free	./src/flecs.h	/^    ecs_ctx_free_t group_by_ctx_free;$/;"	m	struct:ecs_query_desc_t	typeref:typename:ecs_ctx_free_t
group_by_id	./src/flecs.c	/^    ecs_entity_t group_by_id;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_entity_t	file:
group_by_id	./src/flecs.h	/^    ecs_id_t group_by_id;$/;"	m	struct:ecs_query_desc_t	typeref:typename:ecs_id_t
group_ctx	./src/flecs.h	/^    void* group_ctx(uint64_t group_id) const {$/;"	f	struct:flecs::query_base	typeref:typename:void *
group_digits	./vendor/fmt/include/format.h	/^template <typename T> auto group_digits(T value) -> group_digits_view<T> {$/;"	f	typeref:typename:group_digits_view<T>
group_digits_view	./vendor/fmt/include/format.h	/^template <typename T> struct group_digits_view {$/;"	s
group_id	./src/flecs.c	/^    uint64_t group_id;               \/* Value used to organize tables in groups *\/$/;"	m	struct:ecs_query_table_match_t	typeref:typename:uint64_t	file:
group_id	./src/flecs.h	/^    uint64_t group_id() const {$/;"	f	struct:flecs::iter	typeref:typename:uint64_t
group_id	./src/flecs.h	/^    uint64_t group_id;            \/* Group id for table, if group_by is used *\/$/;"	m	struct:ecs_iter_t	typeref:typename:uint64_t
group_info	./src/flecs.h	/^    const flecs::query_group_info_t* group_info(uint64_t group_id) const {$/;"	f	struct:flecs::query_base	typeref:typename:const flecs::query_group_info_t *
grouping	./vendor/fmt/include/format.h	/^  std::string grouping;$/;"	m	struct:detail::loc_writer	typeref:typename:std::string
grouping	./vendor/fmt/include/format.h	/^  std::string grouping;$/;"	m	struct:detail::thousands_sep_result	typeref:typename:std::string
grouping_	./vendor/fmt/include/format.h	/^  std::string grouping_;$/;"	m	class:detail::digit_grouping	typeref:typename:std::string
grouping_	./vendor/fmt/include/format.h	/^  std::string grouping_;$/;"	m	class:format_facet	typeref:typename:std::string
groups	./src/flecs.c	/^    ecs_map_t groups;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_map_t	file:
grow	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    void grow()$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:void
grow	./vendor/fmt/include/base.h	/^  static FMT_CONSTEXPR void grow(buffer<T>& buf, size_t) {$/;"	f	class:detail::counting_buffer	typeref:typename:FMT_CONSTEXPR void
grow	./vendor/fmt/include/base.h	/^  static FMT_CONSTEXPR void grow(buffer<T>& buf, size_t) {$/;"	f	class:detail::iterator_buffer	typeref:typename:FMT_CONSTEXPR void
grow	./vendor/fmt/include/base.h	/^  static FMT_CONSTEXPR void grow(buffer<value_type>& buf, size_t capacity) {$/;"	f	class:detail::iterator_buffer	typeref:typename:FMT_CONSTEXPR void
grow	./vendor/fmt/include/format-inl.h	/^  static void grow(buffer<char>& base, size_t) {$/;"	f	class:detail::file_print_buffer	typeref:typename:void
grow	./vendor/fmt/include/format.h	/^  static FMT_CONSTEXPR20 void grow(detail::buffer<T>& buf, size_t size) {$/;"	f	class:basic_memory_buffer	typeref:typename:FMT_CONSTEXPR20 void
grow_	./vendor/fmt/include/base.h	/^  grow_fun grow_;$/;"	m	class:detail::buffer	typeref:typename:grow_fun
grow_fun	./vendor/fmt/include/base.h	/^  using grow_fun = void (*)(buffer& buf, size_t capacity);$/;"	t	class:detail::buffer
guiAlpha	./vendor/raylib5/include/raygui.h	/^static float guiAlpha = 1.0f;                   \/\/ Gui controls transparency$/;"	v	typeref:typename:float
guiControlExclusiveMode	./vendor/raylib5/include/raygui.h	/^static bool guiControlExclusiveMode = false;    \/\/ Gui control exclusive mode (no inputs proce/;"	v	typeref:typename:bool
guiControlExclusiveRec	./vendor/raylib5/include/raygui.h	/^static Rectangle guiControlExclusiveRec = { 0 }; \/\/ Gui control exclusive bounds rectangle, us/;"	v	typeref:typename:Rectangle
guiFont	./vendor/raylib5/include/raygui.h	/^static Font guiFont = { 0 };                    \/\/ Gui current font (WARNING: highly coupled t/;"	v	typeref:typename:Font
guiIconScale	./vendor/raylib5/include/raygui.h	/^static unsigned int guiIconScale = 1;           \/\/ Gui icon default scale (if icons enabled)$/;"	v	typeref:typename:unsigned int
guiIcons	./vendor/raylib5/include/raygui.h	/^static unsigned int guiIcons[RAYGUI_ICON_MAX_ICONS*RAYGUI_ICON_DATA_ELEMENTS] = {$/;"	v	typeref:typename:unsigned int[]
guiIconsPtr	./vendor/raylib5/include/raygui.h	/^static unsigned int *guiIconsPtr = guiIcons;$/;"	v	typeref:typename:unsigned int *
guiLocked	./vendor/raylib5/include/raygui.h	/^static bool guiLocked = false;                  \/\/ Gui lock state (no inputs processed)$/;"	v	typeref:typename:bool
guiState	./vendor/raylib5/include/raygui.h	/^static GuiState guiState = STATE_NORMAL;        \/\/ Gui global state, if !STATE_NORMAL, forces /;"	v	typeref:typename:GuiState
guiStyle	./vendor/raylib5/include/raygui.h	/^static unsigned int guiStyle[RAYGUI_MAX_CONTROLS*(RAYGUI_MAX_PROPS_BASE + RAYGUI_MAX_PROPS_EXTEN/;"	v	typeref:typename:unsigned int[]
guiStyleLoaded	./vendor/raylib5/include/raygui.h	/^static bool guiStyleLoaded = false;         \/\/ Style loaded flag for lazy style initialization$/;"	v	typeref:typename:bool
guiTooltip	./vendor/raylib5/include/raygui.h	/^static bool guiTooltip = false;                 \/\/ Tooltip enabled\/disabled$/;"	v	typeref:typename:bool
guiTooltipPtr	./vendor/raylib5/include/raygui.h	/^static const char *guiTooltipPtr = NULL;        \/\/ Tooltip string pointer (string provided by /;"	v	typeref:typename:const char *
hResolution	./vendor/raylib5/include/raylib.h	/^    int hResolution;                \/\/ Horizontal resolution in pixels$/;"	m	struct:VrDeviceInfo	typeref:typename:int
hScreenSize	./vendor/raylib5/include/raylib.h	/^    float hScreenSize;              \/\/ Horizontal size in meters$/;"	m	struct:VrDeviceInfo	typeref:typename:float
half_uint	./vendor/fmt/include/format.h	/^    using half_uint =$/;"	t	function:detail::bigint::multiply	typeref:typename:conditional_t<std::is_same<UInt,uint128_t>::value,uint64_t,uint32_t>
handle	./vendor/fmt/include/base.h	/^    explicit handle(detail::custom_value<Context> custom) : custom_(custom) {}$/;"	f	class:basic_format_arg::handle
handle	./vendor/fmt/include/base.h	/^  class handle {$/;"	c	class:basic_format_arg
handle	./vendor/fmt/include/chrono.h	/^    auto handle(detail::null<>) -> bool {$/;"	f	struct:gmtime::dispatcher	typeref:typename:bool
handle	./vendor/fmt/include/chrono.h	/^    auto handle(detail::null<>) -> bool {$/;"	f	struct:localtime::dispatcher	typeref:typename:bool
handle	./vendor/fmt/include/chrono.h	/^    auto handle(std::tm* tm) -> bool { return tm != nullptr; }$/;"	f	struct:gmtime::dispatcher	typeref:typename:bool
handle	./vendor/fmt/include/chrono.h	/^    auto handle(std::tm* tm) -> bool { return tm != nullptr; }$/;"	f	struct:localtime::dispatcher	typeref:typename:bool
handle_constant	./src/flecs.h	/^        static constexpr underlying_type_t<Enum> handle_constant(underlying_type_t<E> last_value/;"	f	struct:flecs::_::enum_data_impl::reflection_count	typeref:typename:underlying_type_t<Enum>
handle_constant	./src/flecs.h	/^        static underlying_type_t<Enum> handle_constant(underlying_type_t<Enum> last_value, flecs/;"	f	struct:flecs::_::enum_type::reflection_init	typeref:typename:underlying_type_t<Enum>
handle_dynamic_spec	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR void handle_dynamic_spec(int& value,$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR void
handle_input	./src/main.c	/^void handle_input()$/;"	f	typeref:typename:void
handle_nan_inf	./vendor/fmt/include/chrono.h	/^  auto handle_nan_inf() -> bool {$/;"	f	struct:detail::chrono_formatter	typeref:typename:bool
handler	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        cmd_handler handler; \/\/ may be nullptr for external handlers$/;"	m	struct:picobench::runner::cmd_line_option	typeref:typename:cmd_handler
handler	./vendor/fmt/include/base.h	/^      Handler& handler;$/;"	m	struct:detail::parse_replacement_field::id_adapter	typeref:typename:Handler &
handler_	./vendor/fmt/include/base.h	/^    Handler& handler_;$/;"	m	struct:detail::parse_format_string::writer	typeref:typename:Handler &
handler_camera_move	./src/components.c	/^void handler_camera_move(ecs_world_t *world)$/;"	f	typeref:typename:void
handler_glyph_draw	./src/components.c	/^void handler_glyph_draw(ecs_world_t *world)$/;"	f	typeref:typename:void
handler_grid_move	./src/components.c	/^void handler_grid_move(ecs_world_t *world)$/;"	f	typeref:typename:void
handler_player_input	./src/components.c	/^void handler_player_input(ecs_world_t *world)$/;"	f	typeref:typename:void
handler_turncounter_increment	./src/components.c	/^void handler_turncounter_increment(ecs_world_t *world)$/;"	f	typeref:typename:void
hardness	./vendor/STC/misc/examples/algorithms/shape.c	/^    uint8_t hardness;$/;"	m	struct:Shape	typeref:typename:uint8_t	file:
hardness	./vendor/STC/misc/examples/algorithms/shape.cpp	/^    uint8_t hardness;$/;"	m	struct:Shape	typeref:typename:uint8_t	file:
has	./src/flecs.h	/^    bool has() const {$/;"	f	struct:flecs::entity_view	typeref:typename:bool
has	./src/flecs.h	/^    bool has() const {$/;"	f	struct:flecs::table	typeref:typename:bool
has	./src/flecs.h	/^    bool has(E value) const {$/;"	f	struct:flecs::entity_view	typeref:typename:bool
has	./src/flecs.h	/^    bool has(Second second) const {$/;"	f	struct:flecs::entity_view	typeref:typename:bool
has	./src/flecs.h	/^    bool has(flecs::entity_t first, flecs::entity_t second) const {$/;"	f	struct:flecs::table	typeref:typename:bool
has	./src/flecs.h	/^    bool has(flecs::entity_t second) const {$/;"	f	struct:flecs::table	typeref:typename:bool
has	./src/flecs.h	/^    bool has(flecs::id_t e) const {$/;"	f	struct:flecs::entity_view	typeref:typename:bool
has	./src/flecs.h	/^    bool has(flecs::id_t first, flecs::id_t second) const {$/;"	f	struct:flecs::entity_view	typeref:typename:bool
has	./src/flecs.h	/^    bool has(flecs::id_t id) const {$/;"	f	struct:flecs::table	typeref:typename:bool
has	./src/flecs.h	/^inline bool world::has() const {$/;"	f	class:flecs::world	typeref:typename:bool
has	./src/flecs.h	/^inline bool world::has(flecs::id_t first, flecs::id_t second) const {$/;"	f	class:flecs::world	typeref:typename:bool
has	./src/flecs.h	/^inline bool world::has(flecs::id_t second) const {$/;"	f	class:flecs::world	typeref:typename:bool
has_background	./vendor/fmt/include/color.h	/^  FMT_CONSTEXPR auto has_background() const noexcept -> bool {$/;"	f	class:text_style	typeref:typename:FMT_CONSTEXPR auto
has_const_begin_end	./vendor/fmt/include/ranges.h	/^struct has_const_begin_end : std::false_type {};$/;"	s	namespace:detail
has_const_begin_end	./vendor/fmt/include/ranges.h	/^struct has_const_begin_end<$/;"	s	namespace:detail
has_const_formatter	./vendor/fmt/include/base.h	/^constexpr auto has_const_formatter() -> bool {$/;"	f	namespace:detail	typeref:typename:bool
has_const_formatter_impl	./vendor/fmt/include/base.h	/^constexpr auto has_const_formatter_impl(...) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
has_const_formatter_impl	./vendor/fmt/include/base.h	/^constexpr auto has_const_formatter_impl(T*)$/;"	f	namespace:detail	typeref:typename:decltype(typename Context::template formatter_type<T> ().format (std::declval<const T &> (),std::declval<Context &> ()),true)
has_contiguous	./src/flecs.h	/^    bool has_contiguous;$/;"	m	struct:flecs::_::enum_data_impl	typeref:typename:bool
has_emphasis	./vendor/fmt/include/color.h	/^  FMT_CONSTEXPR auto has_emphasis() const noexcept -> bool {$/;"	f	class:text_style	typeref:typename:FMT_CONSTEXPR auto
has_emphasis	./vendor/fmt/include/color.h	/^  static FMT_CONSTEXPR auto has_emphasis(emphasis em, emphasis mask) noexcept$/;"	f	struct:detail::ansi_color_escape	typeref:typename:FMT_CONSTEXPR auto
has_flags	./src/flecs.h	/^    bool has_flags() const {$/;"	f	struct:flecs::id	typeref:typename:bool
has_flags	./src/flecs.h	/^    bool has_flags(flecs::id_t flags) const {$/;"	f	struct:flecs::id	typeref:typename:bool
has_flip	./vendor/fmt/include/std.h	/^struct has_flip : std::false_type {};$/;"	s	namespace:detail
has_flip	./vendor/fmt/include/std.h	/^struct has_flip<T, void_t<decltype(std::declval<T>().flip())>>$/;"	s	namespace:detail
has_flockfile	./vendor/fmt/include/format-inl.h	/^struct has_flockfile : std::false_type {};$/;"	s	namespace:detail
has_flockfile	./vendor/fmt/include/format-inl.h	/^struct has_flockfile<F, void_t<decltype(flockfile(&std::declval<F&>()))>>$/;"	s	namespace:detail
has_foreground	./vendor/fmt/include/color.h	/^  FMT_CONSTEXPR auto has_foreground() const noexcept -> bool {$/;"	f	class:text_style	typeref:typename:FMT_CONSTEXPR auto
has_format_as	./vendor/fmt/include/base.h	/^struct has_format_as$/;"	s	namespace:detail
has_formatter	./vendor/fmt/include/base.h	/^using has_formatter =$/;"	t	typeref:typename:std::is_constructible<typename Context::template formatter_type<T>>
has_implicit_bit	./vendor/fmt/include/format.h	/^template <typename Float> constexpr auto has_implicit_bit() -> bool {$/;"	f	namespace:detail	typeref:typename:bool
has_is_transparent	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^struct has_is_transparent : public std::false_type {};$/;"	s	namespace:robin_hood::detail
has_is_transparent	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^struct has_is_transparent<T, typename void_type<typename T::is_transparent>::type>$/;"	s	namespace:robin_hood::detail
has_is_transparent	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^struct has_is_transparent : std::false_type {};$/;"	s	namespace:tsl::detail_robin_hash
has_is_transparent	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^struct has_is_transparent<T,$/;"	s	namespace:tsl::detail_robin_hash
has_is_transparent	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  using has_is_transparent = tsl::detail_robin_hash::has_is_transparent<U>;$/;"	t	class:tsl::robin_map	typeref:typename:tsl::detail_robin_hash::has_is_transparent<U>
has_isfinite	./vendor/fmt/include/format.h	/^struct has_isfinite : std::false_type {};$/;"	s	namespace:detail
has_isfinite	./vendor/fmt/include/format.h	/^struct has_isfinite<T, enable_if_t<sizeof(std::isfinite(T())) != 0>>$/;"	s	namespace:detail
has_locale_	./vendor/fmt/include/chrono.h	/^  bool has_locale_ = false;$/;"	m	class:detail::get_locale	typeref:typename:bool
has_mapped_type	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  using has_mapped_type =$/;"	t	class:tsl::detail_robin_hash::robin_hash	typeref:typename:std::integral_constant<bool,!std::is_same<U,void>::value>
has_member_data_tm_gmtoff	./vendor/fmt/include/chrono.h	/^struct has_member_data_tm_gmtoff : std::false_type {};$/;"	s	namespace:detail
has_member_data_tm_gmtoff	./vendor/fmt/include/chrono.h	/^struct has_member_data_tm_gmtoff<T, void_t<decltype(T::tm_gmtoff)>>$/;"	s	namespace:detail
has_member_data_tm_zone	./vendor/fmt/include/chrono.h	/^struct has_member_data_tm_zone : std::false_type {};$/;"	s	namespace:detail
has_member_data_tm_zone	./vendor/fmt/include/chrono.h	/^struct has_member_data_tm_zone<T, void_t<decltype(T::tm_zone)>>$/;"	s	namespace:detail
has_member_fn_begin_end_t	./vendor/fmt/include/ranges.h	/^struct has_member_fn_begin_end_t : std::false_type {};$/;"	s	namespace:detail
has_member_fn_begin_end_t	./vendor/fmt/include/ranges.h	/^struct has_member_fn_begin_end_t<T, void_t<decltype(*std::declval<T>().begin()),$/;"	s	namespace:detail
has_mutable_begin_end	./vendor/fmt/include/ranges.h	/^struct has_mutable_begin_end : std::false_type {};$/;"	s	namespace:detail
has_mutable_begin_end	./vendor/fmt/include/ranges.h	/^struct has_mutable_begin_end<$/;"	s	namespace:detail
has_named_args	./vendor/fmt/include/base.h	/^  constexpr auto has_named_args() const -> bool {$/;"	f	class:basic_format_args	typeref:typename:bool
has_named_args_bit	./vendor/fmt/include/base.h	/^enum : unsigned long long { has_named_args_bit = 1ULL << 62 };$/;"	e	enum:detail::__anonea363bd90c03
has_next	./vendor/STC/include/stc/crand.h	/^typedef struct crand_normal { double mean, stddev, next; int has_next; } crand_normal_t;$/;"	m	struct:crand_normal	typeref:typename:int
has_next_	./vendor/fmt/include/format-inl.h	/^  bool has_next_ = false;$/;"	m	class:detail::fallback_file	typeref:typename:bool
has_precision_integral	./vendor/fmt/include/chrono.h	/^  bool has_precision_integral = false;$/;"	m	struct:detail::chrono_format_checker	typeref:typename:bool
has_relation	./src/flecs.h	/^    bool has_relation(flecs::id_t first) const {$/;"	f	struct:flecs::id	typeref:typename:bool
has_reserve	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^constexpr bool has_reserve = is_detected_v<detect_reserve, T>;$/;"	v	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail	typeref:typename:bool
has_second	./src/flecs.h	/^    bool has_second(flecs::entity_t first) const {$/;"	f	struct:flecs::entity_view	typeref:typename:bool
has_separator	./vendor/fmt/include/format.h	/^  auto has_separator() const -> bool { return !thousands_sep_.empty(); }$/;"	f	class:detail::digit_grouping	typeref:typename:bool
has_separator	./vendor/fmt/include/format.h	/^  constexpr auto has_separator() const -> bool { return false; }$/;"	f	class:detail::fallback_digit_grouping	typeref:typename:bool
has_table_this	./src/flecs.c	/^    bool has_table_this;          \/* Does rule have [$this] *\/$/;"	m	struct:ecs_rule_t	typeref:typename:bool	file:
has_to_string_view	./vendor/fmt/include/base.h	/^struct has_to_string_view : std::false_type {};$/;"	s	namespace:detail
has_to_string_view	./vendor/fmt/include/base.h	/^struct has_to_string_view<$/;"	s	namespace:detail
has_value	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    bool has_value() const$/;"	f	struct:ska::detailv3::sherwood_v3_entry	typeref:typename:bool
hash	./src/flecs.c	/^    uint64_t hash;                   \/* Type hash *\/$/;"	m	struct:ecs_table__t	typeref:typename:uint64_t	file:
hash	./src/flecs.c	/^    uint64_t hash;$/;"	m	struct:ecs_hashed_string_t	typeref:typename:uint64_t	file:
hash	./src/flecs.h	/^    ecs_hash_value_action_t hash;$/;"	m	struct:__anon7d4a417c0408	typeref:typename:ecs_hash_value_action_t
hash	./src/flecs.h	/^    uint64_t hash;        \/**< Hash of current value *\/$/;"	m	struct:EcsIdentifier	typeref:typename:uint64_t
hash	./src/flecs.h	/^    uint64_t hash;$/;"	m	struct:__anon7d4a417c0608	typeref:typename:uint64_t
hash	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^struct hash : public std::hash<T> {$/;"	s	namespace:robin_hood
hash	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^struct hash<Enum, typename std::enable_if<std::is_enum<Enum>::value>::type> {$/;"	s	namespace:robin_hood
hash	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^struct hash<T*> {$/;"	s	namespace:robin_hood
hash	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^struct hash<std::basic_string<CharT>> {$/;"	s	namespace:robin_hood
hash	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^struct hash<std::basic_string_view<CharT>> {$/;"	s	namespace:robin_hood
hash	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^struct hash<std::shared_ptr<T>> {$/;"	s	namespace:robin_hood
hash	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^struct hash<std::unique_ptr<T>> {$/;"	s	namespace:robin_hood
hash	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^[[maybe_unused]] [[nodiscard]] static inline auto hash(void const* key, size_t len) -> uint64_t /;"	f	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::wyhash	typeref:typename:uint64_t
hash	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^[[nodiscard]] static inline auto hash(uint64_t x) -> uint64_t {$/;"	f	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::wyhash	typeref:typename:uint64_t
hash	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^struct hash {$/;"	s	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE
hash	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^struct hash<Enum, typename std::enable_if<std::is_enum<Enum>::value>::type> {$/;"	s	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE
hash	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^struct hash<T*> {$/;"	s	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE
hash	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^struct hash<std::basic_string<CharT>> {$/;"	s	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE
hash	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^struct hash<std::basic_string_view<CharT>> {$/;"	s	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE
hash	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^struct hash<std::shared_ptr<T>> {$/;"	s	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE
hash	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^struct hash<std::unique_ptr<T>> {$/;"	s	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE
hash	./vendor/fmt/include/base.h	/^enum class state { start, align, sign, hash, zero, width, precision, locale };$/;"	e	enum:detail::state
hash64	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline static uint64_t hash64(uint64_t key)$/;"	f	class:emhash7::HashMap	typeref:typename:uint64_t
hash_bytes	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^inline size_t hash_bytes(void const* ptr, size_t len) noexcept {$/;"	f	namespace:robin_hood	typeref:typename:size_t
hash_function	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto hash_function() const -> hasher {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:hasher
hash_function	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline HashT& hash_function() const { return _hasher; }$/;"	f	class:emhash7::HashMap	typeref:typename:HashT &
hash_function	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    const ArgumentHash & hash_function() const$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:const ArgumentHash &
hash_function	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  hasher hash_function() const { return static_cast<const Hash&>(*this); }$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:hasher
hash_function	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  hasher hash_function() const { return m_ht.hash_function(); }$/;"	f	class:tsl::robin_map	typeref:typename:hasher
hash_int	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^inline size_t hash_int(uint64_t x) noexcept {$/;"	f	namespace:robin_hood	typeref:typename:size_t
hash_key	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline size_type hash_key(const UType key) const$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
hash_key	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline size_type hash_key(const UType& key) const$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
hash_key	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  std::size_t hash_key(const K& key) const {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:std::size_t
hash_object	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    size_t hash_object(const U & key) const$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:size_t
hash_object	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    size_t hash_object(const U & key)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:size_t
hash_policy	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    typedef ska::power_of_two_hash_policy hash_policy;$/;"	t	struct:ska::power_of_two_std_hash	typeref:typename:ska::power_of_two_hash_policy
hash_policy	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    typename HashPolicySelector<ArgumentHash>::type hash_policy;$/;"	m	class:ska::detailv3::sherwood_v3_table	typeref:typename:HashPolicySelector<ArgumentHash>::type
hash_type	./vendor/STC/misc/benchmarks/various/string_bench_STD.cpp	/^    using hash_type = std::hash<std::string_view>;  \/\/ just a helper local type$/;"	t	struct:string_hash	typeref:typename:std::hash<std::string_view>	file:
hasher	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    using hasher = Hash;$/;"	t	class:robin_hood::detail::Table	typeref:typename:Hash
hasher	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using hasher = Hash;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:Hash
hasher	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    typedef HashT  hasher;$/;"	t	class:emhash7::HashMap	typeref:typename:HashT
hasher	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    using hasher = ArgumentHash;$/;"	t	class:ska::detailv3::sherwood_v3_table	typeref:typename:ArgumentHash
hasher	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  using hasher = Hash;$/;"	t	class:tsl::detail_robin_hash::robin_hash	typeref:typename:Hash
hasher	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  using hasher = typename ht::hasher;$/;"	t	class:tsl::robin_map	typeref:typename:ht::hasher
hasher_storage	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    typedef functor_storage<size_t, hasher> hasher_storage;$/;"	t	struct:ska::detailv3::KeyOrValueHasher	typeref:typename:functor_storage<size_t,hasher>
hashmap	./src/flecs.c	/^    ecs_block_allocator_t hashmap;$/;"	m	struct:ecs_world_allocators_t	typeref:typename:ecs_block_allocator_t	file:
hashmap_allocator	./src/flecs.h	/^    ecs_block_allocator_t *hashmap_allocator;$/;"	m	struct:__anon7d4a417c0408	typeref:typename:ecs_block_allocator_t *
hashx	./vendor/STC/include/stc/hmap.h	/^struct hmap_slot { uint8_t hashx; };$/;"	m	struct:hmap_slot	typeref:typename:uint8_t
hdr	./src/flecs.c	/^    ecs_graph_edge_hdr_t hdr;$/;"	m	struct:ecs_graph_edge_t	typeref:typename:ecs_graph_edge_hdr_t	file:
hdr	./src/flecs.c	/^    ecs_header_t hdr;             \/* Poly header *\/$/;"	m	struct:ecs_rule_t	typeref:typename:ecs_header_t	file:
hdr	./src/flecs.c	/^    ecs_header_t hdr;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_header_t	file:
hdr	./src/flecs.c	/^    ecs_header_t hdr;$/;"	m	struct:ecs_stage_t	typeref:typename:ecs_header_t	file:
hdr	./src/flecs.c	/^    ecs_header_t hdr;$/;"	m	struct:ecs_system_t	typeref:typename:ecs_header_t	file:
hdr	./src/flecs.c	/^    ecs_header_t hdr;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_header_t	file:
hdr	./src/flecs.c	/^    ecs_table_cache_hdr_t hdr;       \/* Header for ecs_table_cache_t *\/$/;"	m	struct:ecs_query_table_t	typeref:typename:ecs_table_cache_hdr_t	file:
hdr	./src/flecs.c	/^    ecs_table_cache_hdr_t hdr;  \/* Table cache header *\/$/;"	m	struct:ecs_table_record_t	typeref:typename:ecs_table_cache_hdr_t	file:
hdr	./src/flecs.h	/^    EcsStatsHeader hdr;$/;"	m	struct:__anon7d4a417c1908	typeref:typename:EcsStatsHeader
hdr	./src/flecs.h	/^    EcsStatsHeader hdr;$/;"	m	struct:__anon7d4a417c1a08	typeref:typename:EcsStatsHeader
hdr	./src/flecs.h	/^    ecs_header_t hdr;$/;"	m	struct:ecs_filter_t	typeref:typename:ecs_header_t
hdr	./src/flecs.h	/^    ecs_header_t hdr;$/;"	m	struct:ecs_observer_t	typeref:typename:ecs_header_t
hdrs	./src/flecs.c	/^    ecs_map_t hdrs;     \/* map<uint64_t, ecs_switch_header_t> *\/$/;"	m	struct:ecs_switch_t	typeref:typename:ecs_map_t	file:
head	./src/flecs.c	/^    int32_t head;$/;"	m	struct:ecs_http_send_queue_t	typeref:typename:int32_t	file:
head	./src/flecs.h	/^    ecs_block_allocator_chunk_header_t *head;$/;"	m	struct:ecs_block_allocator_t	typeref:typename:ecs_block_allocator_chunk_header_t *
head_	./vendor/fmt/include/args.h	/^  std::unique_ptr<node<>> head_;$/;"	m	class:detail::dynamic_arg_list	typeref:typename:std::unique_ptr<node<>>
header_buf	./src/flecs.c	/^    char header_buf[32];$/;"	m	struct:__anon7d4a41770708	typeref:typename:char[32]	file:
header_buf_ptr	./src/flecs.c	/^    char *header_buf_ptr;$/;"	m	struct:__anon7d4a41770708	typeref:typename:char *	file:
header_count	./src/flecs.c	/^    int32_t header_count;$/;"	m	struct:__anon7d4a41770708	typeref:typename:int32_t	file:
header_count	./src/flecs.h	/^    int32_t header_count;$/;"	m	struct:__anon7d4a417c0b08	typeref:typename:int32_t
header_length	./src/flecs.c	/^    int32_t header_length;$/;"	m	struct:ecs_http_send_request_t	typeref:typename:int32_t	file:
header_offsets	./src/flecs.c	/^    int32_t header_offsets[ECS_HTTP_HEADER_COUNT_MAX];$/;"	m	struct:__anon7d4a41770708	typeref:typename:int32_t[]	file:
header_value_offsets	./src/flecs.c	/^    int32_t header_value_offsets[ECS_HTTP_HEADER_COUNT_MAX];$/;"	m	struct:__anon7d4a41770708	typeref:typename:int32_t[]	file:
headers	./src/flecs.c	/^    char *headers;$/;"	m	struct:ecs_http_send_request_t	typeref:typename:char *	file:
headers	./src/flecs.h	/^    ecs_http_key_value_t headers[ECS_HTTP_HEADER_COUNT_MAX];$/;"	m	struct:__anon7d4a417c0b08	typeref:typename:ecs_http_key_value_t[]
headers	./src/flecs.h	/^    ecs_strbuf_t headers;       \/**< default = "" *\/$/;"	m	struct:__anon7d4a417c0c08	typeref:typename:ecs_strbuf_t
height	./src/grid.h	/^	int height;$/;"	m	struct:Grid	typeref:typename:int
height	./src/grid.h	/^	int height;$/;"	m	struct:Tile	typeref:typename:int
height	./vendor/raylib5/include/raygui.h	/^        float height;$/;"	m	struct:Rectangle	typeref:typename:float
height	./vendor/raylib5/include/raygui.h	/^        int height;             \/\/ Image base height$/;"	m	struct:Image	typeref:typename:int
height	./vendor/raylib5/include/raygui.h	/^        int height;             \/\/ Texture base height$/;"	m	struct:Texture2D	typeref:typename:int
height	./vendor/raylib5/include/raylib.h	/^    float height;           \/\/ Rectangle height$/;"	m	struct:Rectangle	typeref:typename:float
height	./vendor/raylib5/include/raylib.h	/^    int height;             \/\/ Image base height$/;"	m	struct:Image	typeref:typename:int
height	./vendor/raylib5/include/raylib.h	/^    int height;             \/\/ Texture base height$/;"	m	struct:Texture	typeref:typename:int
hex	./vendor/fmt/include/base.h	/^  hex,      \/\/ 'x' or 'X'$/;"	e	enum:presentation_type
hexfloat	./vendor/fmt/include/base.h	/^  hexfloat  \/\/ 'a' or 'A'$/;"	e	enum:presentation_type
hi	./src/flecs.c	/^    ecs_map_t *hi;                   \/* Map for hi edges (map<id, edge_t>) *\/$/;"	m	struct:ecs_graph_edges_t	typeref:typename:ecs_map_t *	file:
hi	./vendor/STC/include/stc/priv/utf8_prv.c	/^  uint16_t hi;$/;"	m	struct:__anon57216ba30108	typeref:typename:uint16_t	file:
hi_	./vendor/fmt/include/format.h	/^  uint64_t lo_, hi_;$/;"	m	class:detail::uint128_fallback	typeref:typename:uint64_t
high	./vendor/fmt/include/format.h	/^  constexpr auto high() const noexcept -> uint64_t { return hi_; }$/;"	f	class:detail::uint128_fallback	typeref:typename:auto
high_bit	./src/flecs.h	/^    static const underlying_type_t<E> high_bit = static_cast<underlying_type_t<E>>(1) << (sizeof/;"	m	struct:flecs::_::enum_reflection	typeref:typename:const underlying_type_t<E>
high_res_clock	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^struct high_res_clock$/;"	s	namespace:picobench
high_res_clock_freq	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^static const long long high_res_clock_freq = []() -> long long$/;"	v	namespace:picobench	typeref:typename:const long long
hit	./vendor/raylib5/include/raylib.h	/^    bool hit;               \/\/ Did the ray hit something?$/;"	m	struct:RayCollision	typeref:typename:bool
hmap_slot	./vendor/STC/include/stc/hmap.h	/^struct hmap_slot { uint8_t hashx; };$/;"	s
honey_dew	./vendor/fmt/include/color.h	/^  honey_dew = 0xF0FFF0,                \/\/ rgb(240,255,240)$/;"	e	enum:color
hooks	./src/flecs.h	/^    ecs_type_hooks_t hooks;  \/**< Type hooks *\/$/;"	m	struct:ecs_type_info_t	typeref:typename:ecs_type_hooks_t
host	./src/flecs.h	/^    char host[128];$/;"	m	struct:__anon7d4a417c0808	typeref:typename:char[128]
hot_pink	./vendor/fmt/include/color.h	/^  hot_pink = 0xFF69B4,                 \/\/ rgb(255,105,180)$/;"	e	enum:color
hour	./vendor/fmt/include/chrono.h	/^  auto hour() const -> Rep {$/;"	f	struct:detail::chrono_formatter	typeref:typename:Rep
hour12	./vendor/fmt/include/chrono.h	/^  auto hour12() const -> Rep {$/;"	f	struct:detail::chrono_formatter	typeref:typename:Rep
ht	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  using ht = detail_robin_hash::robin_hash<std::pair<Key, T>, KeySelect,$/;"	t	class:tsl::robin_map	typeref:typename:detail_robin_hash::robin_hash<std::pair<Key,T>,KeySelect,ValueSelect,Hash,KeyEqual,Allocator,StoreHash,GrowthPolicy>
http	./src/flecs.h	/^    } http;$/;"	m	struct:ecs_world_stats_t	typeref:struct:ecs_world_stats_t::__anon7d4a417c1708
http_accept	./src/flecs.c	/^ecs_http_socket_t http_accept($/;"	f	typeref:typename:ecs_http_socket_t	file:
http_accept_connections	./src/flecs.c	/^void http_accept_connections($/;"	f	typeref:typename:void	file:
http_append_send_headers	./src/flecs.c	/^void http_append_send_headers($/;"	f	typeref:typename:void	file:
http_bind	./src/flecs.c	/^int http_bind($/;"	f	typeref:typename:int	file:
http_close	./src/flecs.c	/^void http_close($/;"	f	typeref:typename:void	file:
http_conn_res_t	./src/flecs.c	/^} http_conn_res_t;$/;"	t	typeref:struct:__anon7d4a41770a08	file:
http_connection_free	./src/flecs.c	/^void http_connection_free(ecs_http_connection_impl_t *conn) {$/;"	f	typeref:typename:void	file:
http_decode_request	./src/flecs.c	/^char* http_decode_request($/;"	f	typeref:typename:char *	file:
http_decode_url_str	./src/flecs.c	/^void http_decode_url_str($/;"	f	typeref:typename:void	file:
http_dequeue_requests	./src/flecs.c	/^int32_t http_dequeue_requests($/;"	f	typeref:typename:int32_t	file:
http_do_request	./src/flecs.c	/^void http_do_request($/;"	f	typeref:typename:void	file:
http_enqueue_request	./src/flecs.c	/^ecs_http_request_entry_t* http_enqueue_request($/;"	f	typeref:typename:ecs_http_request_entry_t *	file:
http_find_request_entry	./src/flecs.c	/^ecs_http_request_entry_t* http_find_request_entry($/;"	f	typeref:typename:ecs_http_request_entry_t *	file:
http_getnameinfo	./src/flecs.c	/^int http_getnameinfo($/;"	f	typeref:typename:int	file:
http_handle_request	./src/flecs.c	/^void http_handle_request($/;"	f	typeref:typename:void	file:
http_header_buf_append	./src/flecs.c	/^void http_header_buf_append($/;"	f	typeref:typename:void	file:
http_header_buf_reset	./src/flecs.c	/^void http_header_buf_reset($/;"	f	typeref:typename:void	file:
http_header_writable	./src/flecs.c	/^bool http_header_writable($/;"	f	typeref:typename:bool	file:
http_hex_2_int	./src/flecs.c	/^char http_hex_2_int(char a, char b){$/;"	f	typeref:typename:char	file:
http_init_connection	./src/flecs.c	/^http_conn_res_t http_init_connection($/;"	f	typeref:typename:http_conn_res_t	file:
http_insert_request_entry	./src/flecs.c	/^void http_insert_request_entry($/;"	f	typeref:typename:void	file:
http_parse_method	./src/flecs.c	/^void http_parse_method($/;"	f	typeref:typename:void	file:
http_parse_request	./src/flecs.c	/^bool http_parse_request($/;"	f	typeref:typename:bool	file:
http_purge_request_cache	./src/flecs.c	/^void http_purge_request_cache($/;"	f	typeref:typename:void	file:
http_recv	./src/flecs.c	/^ecs_size_t http_recv($/;"	f	typeref:typename:ecs_size_t	file:
http_recv_connection	./src/flecs.c	/^void http_recv_connection($/;"	f	typeref:typename:void	file:
http_reply_fini	./src/flecs.c	/^void http_reply_fini(ecs_http_reply_t* reply) {$/;"	f	typeref:typename:void	file:
http_request_fini	./src/flecs.c	/^void http_request_fini(ecs_http_request_impl_t *req) {$/;"	f	typeref:typename:void	file:
http_request_key_compare	./src/flecs.c	/^int http_request_key_compare(const void *ptr_1, const void *ptr_2) {$/;"	f	typeref:typename:int	file:
http_request_key_hash	./src/flecs.c	/^uint64_t http_request_key_hash(const void *ptr) {$/;"	f	typeref:typename:uint64_t	file:
http_send	./src/flecs.c	/^ecs_size_t http_send($/;"	f	typeref:typename:ecs_size_t	file:
http_send_queue_get	./src/flecs.c	/^ecs_http_send_request_t* http_send_queue_get($/;"	f	typeref:typename:ecs_http_send_request_t *	file:
http_send_queue_post	./src/flecs.c	/^ecs_http_send_request_t* http_send_queue_post($/;"	f	typeref:typename:ecs_http_send_request_t *	file:
http_send_reply	./src/flecs.c	/^void http_send_reply($/;"	f	typeref:typename:void	file:
http_server_send_queue	./src/flecs.c	/^void* http_server_send_queue(void* arg) {$/;"	f	typeref:typename:void *	file:
http_server_thread	./src/flecs.c	/^void* http_server_thread(void* arg) {$/;"	f	typeref:typename:void *	file:
http_sock_keep_alive	./src/flecs.c	/^void http_sock_keep_alive($/;"	f	typeref:typename:void	file:
http_sock_nonblock	./src/flecs.c	/^void http_sock_nonblock(ecs_http_socket_t sock, bool enable) {$/;"	f	typeref:typename:void	file:
http_sock_set_timeout	./src/flecs.c	/^void http_sock_set_timeout($/;"	f	typeref:typename:void	file:
http_socket_is_valid	./src/flecs.c	/^bool http_socket_is_valid($/;"	f	typeref:typename:bool	file:
htype	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    typedef HashMap<KeyT, ValueT, HashT, EqT> htype;$/;"	t	class:emhash7::HashMap	typeref:typename:HashMap<KeyT,ValueT,HashT,EqT>
hx	./vendor/STC/misc/benchmarks/various/cspan_bench.c	/^int hx = 30, hy = 15, hz = 15;$/;"	v	typeref:typename:int
hy	./vendor/STC/misc/benchmarks/various/cspan_bench.c	/^int hx = 30, hy = 15, hz = 15;$/;"	v	typeref:typename:int
hz	./vendor/STC/misc/benchmarks/various/cspan_bench.c	/^int hx = 30, hy = 15, hz = 15;$/;"	v	typeref:typename:int
i	./vendor/STC/include/stc/crand.h	/^    union {uint64_t i; double f;} u = {0x3FF0000000000000U | (crand_u64(rng) >> 12)};$/;"	m	union:crand_f64::__anondcbad282010a	typeref:typename:uint64_t
i	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^        union {uint64_t i; char c[8];} r = {.i = crand()};$/;"	m	union:randomize::__anon08c2d9bb020a	typeref:typename:uint64_t	file:
i	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^    union {uint64_t i; char c[8];} r = {.i = crand()};$/;"	m	union:randomize::__anon2f96ff66020a	typeref:typename:uint64_t	file:
i	./vendor/STC/misc/examples/coroutines/cotasks1.c	/^    int n, i;$/;"	m	struct:consume_items	typeref:typename:int	file:
i	./vendor/fmt/include/ranges.h	/^  int i;$/;"	m	struct:detail::format_tuple_element	typeref:typename:int
i16_t	./src/flecs.h	/^using i16_t = ecs_i16_t;$/;"	t	namespace:flecs	typeref:typename:ecs_i16_t
i32_t	./src/flecs.h	/^using i32_t = ecs_i32_t;$/;"	t	namespace:flecs	typeref:typename:ecs_i32_t
i64_t	./src/flecs.h	/^using i64_t = ecs_i64_t;$/;"	t	namespace:flecs	typeref:typename:ecs_i64_t
i8_t	./src/flecs.h	/^using i8_t = ecs_i8_t;$/;"	t	namespace:flecs	typeref:typename:ecs_i8_t
i_TYPE	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/benchmarks/plotbench/pque_benchmark.cpp	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/benchmarks/various/binsearch_bench.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/benchmarks/various/quicksort_bench.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/benchmarks/various/rust_hmap.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/algorithms/filterdemos.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/algorithms/forloops.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/algorithms/shape.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/coroutines/cointerleave.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/hashmaps/birthday.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/hashmaps/new_map.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/linkedlists/intrusive.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/linkedlists/list_splice.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/linkedlists/lists.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/linkedlists/new_list.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/mixed/astar.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/mixed/complex.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/mixed/demos.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/mixed/inits.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/priorityqueues/new_pque.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/priorityqueues/priority.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/queues/new_queue.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/queues/queue.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/smartpointers/arc_demo.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/smartpointers/arcvec_erase.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/smartpointers/map_box.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/smartpointers/new_sptr.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/sortedmaps/new_smap.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/sortedmaps/smap_find.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/sortedmaps/smap_insert.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/spans/matmult.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/vectors/lower_bound.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/vectors/new_vec.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/examples/vectors/stack.c	/^#define i_TYPE /;"	d	file:
i_TYPE	./vendor/STC/misc/tests/cspan_test.c	/^#define i_TYPE /;"	d	file:
i_allocator	./vendor/STC/include/stc/priv/linkage.h	/^  #define i_allocator /;"	d
i_at	./vendor/STC/include/stc/algo/quicksort.h	/^  #define i_at(/;"	d
i_at_mut	./vendor/STC/include/stc/algo/quicksort.h	/^  #define i_at_mut /;"	d
i_at_mut	./vendor/STC/include/stc/algo/quicksort.h	/^  #define i_at_mut(/;"	d
i_base	./vendor/STC/misc/examples/priorityqueues/functor.c	/^#define i_base /;"	d	file:
i_calloc	./vendor/STC/include/stc/priv/linkage.h	/^  #define i_calloc /;"	d
i_capacity	./vendor/STC/misc/examples/bitsets/bits2.c	/^#define i_capacity /;"	d	file:
i_capacity	./vendor/STC/misc/examples/vectors/stack.c	/^#define i_capacity /;"	d	file:
i_cmp	./vendor/STC/include/stc/priv/template.h	/^    #define i_cmp /;"	d
i_cmp	./vendor/STC/include/stc/priv/template.h	/^  #define i_cmp(/;"	d
i_cmp	./vendor/STC/misc/benchmarks/plotbench/pque_benchmark.cpp	/^#define i_cmp /;"	d	file:
i_cmp	./vendor/STC/misc/benchmarks/various/string_bench_STC.cpp	/^#define i_cmp /;"	d	file:
i_cmp	./vendor/STC/misc/examples/linkedlists/new_list.c	/^#define i_cmp /;"	d	file:
i_cmp	./vendor/STC/misc/examples/mixed/astar.c	/^#define i_cmp /;"	d	file:
i_cmp	./vendor/STC/misc/examples/mixed/inits.c	/^#define i_cmp /;"	d	file:
i_cmp	./vendor/STC/misc/examples/priorityqueues/priority.c	/^#define i_cmp /;"	d	file:
i_cmp	./vendor/STC/misc/examples/sortedmaps/listmap.c	/^#define i_cmp /;"	d	file:
i_cmp	./vendor/STC/misc/examples/sortedmaps/new_smap.c	/^#define i_cmp /;"	d	file:
i_eq	./vendor/STC/include/stc/priv/template.h	/^    #define i_eq /;"	d
i_eq	./vendor/STC/include/stc/priv/template.h	/^  #define i_eq(/;"	d
i_eq	./vendor/STC/misc/examples/hashmaps/new_map.c	/^#define i_eq /;"	d	file:
i_eq	./vendor/STC/misc/examples/vectors/new_vec.c	/^#define i_eq(/;"	d	file:
i_extend	./vendor/STC/misc/examples/priorityqueues/functor.c	/^#define i_extend /;"	d	file:
i_free	./vendor/STC/include/stc/priv/linkage.h	/^  #define i_free /;"	d
i_has_emplace	./vendor/STC/include/stc/priv/template.h	/^  #define i_has_emplace$/;"	d
i_hash	./vendor/STC/include/stc/priv/template.h	/^    #define i_hash /;"	d
i_hash	./vendor/STC/include/stc/priv/template.h	/^  #define i_hash /;"	d
i_hash	./vendor/STC/misc/examples/hashmaps/vikings.c	/^#define i_hash(/;"	d	file:
i_header	./vendor/STC/include/stc/cstr.h	/^#define i_header /;"	d
i_header	./vendor/STC/include/stc/csview.h	/^#define i_header /;"	d
i_header	./vendor/STC/include/stc/czview.h	/^#define i_header /;"	d
i_implement	./vendor/STC/include/stc/priv/linkage.h	/^  #define i_implement$/;"	d
i_implement	./vendor/STC/misc/benchmarks/various/string_bench_STC.cpp	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/algorithms/filterdemos.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/coroutines/coread.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/hashmaps/books.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/hashmaps/hashmap.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/hashmaps/new_map.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/hashmaps/phonebook.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/hashmaps/unordered_set.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/hashmaps/vikings.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/mixed/astar.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/mixed/complex.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/mixed/convert.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/mixed/demos.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/mixed/inits.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/mixed/read.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/regularexpressions/regex_match.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/smartpointers/arc_containers.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/smartpointers/box.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/smartpointers/map_box.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/smartpointers/map_ptr.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/smartpointers/music_arc.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/smartpointers/new_sptr.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/smartpointers/person_arc.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/sortedmaps/gauss2.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/sortedmaps/listmap.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/sortedmaps/mapmap.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/sortedmaps/multimap.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/sortedmaps/new_smap.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/sortedmaps/smap_erase.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/sortedmaps/smap_find.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/sortedmaps/smap_insert.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/spans/multidim.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/strings/cstr_match.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/strings/replace.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/strings/splitstr.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/strings/sso_map.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/strings/sso_substr.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/strings/sview_split.c	/^#define i_implement$/;"	d	file:
i_implement	./vendor/STC/misc/examples/strings/utf8replace_c.c	/^#define i_implement$/;"	d	file:
i_import	./vendor/STC/misc/examples/algorithms/filterdemos.c	/^#define i_import$/;"	d	file:
i_import	./vendor/STC/misc/examples/regularexpressions/regex1.c	/^#define i_import$/;"	d	file:
i_import	./vendor/STC/misc/examples/regularexpressions/regex2.c	/^#define i_import$/;"	d	file:
i_import	./vendor/STC/misc/examples/regularexpressions/regex_match.c	/^#define i_import$/;"	d	file:
i_import	./vendor/STC/misc/examples/regularexpressions/regex_replace.c	/^#define i_import$/;"	d	file:
i_import	./vendor/STC/misc/examples/strings/splitstr.c	/^#define i_import /;"	d	file:
i_import	./vendor/STC/misc/tests/cregex_test.c	/^#define i_import$/;"	d	file:
i_import	./vendor/STC/src/libstc.c	/^#define i_import$/;"	d	file:
i_is_forward	./vendor/STC/include/stc/extend.h	/^#define i_is_forward$/;"	d
i_is_forward	./vendor/STC/include/stc/priv/template.h	/^  #define i_is_forward$/;"	d
i_is_forward	./vendor/STC/misc/examples/hashmaps/new_map.c	/^#define i_is_forward$/;"	d	file:
i_is_forward	./vendor/STC/misc/examples/linkedlists/new_list.c	/^#define i_is_forward$/;"	d	file:
i_is_forward	./vendor/STC/misc/examples/queues/new_queue.c	/^#define i_is_forward$/;"	d	file:
i_is_forward	./vendor/STC/misc/examples/sortedmaps/new_smap.c	/^#define i_is_forward$/;"	d	file:
i_is_forward	./vendor/STC/misc/examples/vectors/new_vec.c	/^#define i_is_forward$/;"	d	file:
i_key	./vendor/STC/include/stc/algo/quicksort.h	/^    #define i_key /;"	d
i_key	./vendor/STC/include/stc/priv/template.h	/^    #define i_key /;"	d
i_key	./vendor/STC/include/stc/priv/template.h	/^  #define i_key /;"	d
i_key	./vendor/STC/include/stc/priv/template.h	/^  #define i_key i_key_/;"	d
i_key	./vendor/STC/misc/benchmarks/various/string_bench_STC.cpp	/^#define i_key /;"	d	file:
i_key	./vendor/STC/misc/examples/algorithms/shape.c	/^#define i_key /;"	d	file:
i_key	./vendor/STC/misc/examples/coroutines/scheduler.c	/^#define i_key /;"	d	file:
i_key	./vendor/STC/misc/examples/linkedlists/list_erase.c	/^#define i_key /;"	d	file:
i_key	./vendor/STC/misc/examples/linkedlists/new_list.c	/^#define i_key /;"	d	file:
i_key	./vendor/STC/misc/examples/mixed/complex.c	/^#define i_key /;"	d	file:
i_key	./vendor/STC/misc/examples/mixed/demos.c	/^#define i_key /;"	d	file:
i_key	./vendor/STC/misc/examples/mixed/inits.c	/^#define i_key /;"	d	file:
i_key	./vendor/STC/misc/examples/priorityqueues/functor.c	/^#define i_key /;"	d	file:
i_key	./vendor/STC/misc/examples/regularexpressions/regex_match.c	/^#define i_key /;"	d	file:
i_key	./vendor/STC/misc/examples/smartpointers/arc_containers.c	/^#define i_key /;"	d	file:
i_key	./vendor/STC/misc/examples/smartpointers/box2.c	/^#define i_key /;"	d	file:
i_key	./vendor/STC/misc/examples/sortedmaps/gauss2.c	/^#define i_key /;"	d	file:
i_key	./vendor/STC/misc/examples/sortedmaps/listmap.c	/^#define i_key /;"	d	file:
i_key	./vendor/STC/misc/examples/sortedmaps/smap_erase.c	/^#define i_key /;"	d	file:
i_key	./vendor/STC/misc/examples/sortedmaps/smap_find.c	/^#define i_key /;"	d	file:
i_key	./vendor/STC/misc/examples/sortedmaps/smap_insert.c	/^#define i_key /;"	d	file:
i_key	./vendor/STC/misc/examples/sortedmaps/sorted_map.c	/^#define i_key /;"	d	file:
i_key	./vendor/STC/misc/examples/sortedmaps/sset_erase.c	/^#define i_key /;"	d	file:
i_key	./vendor/STC/misc/examples/spans/printspan.c	/^#define i_key /;"	d	file:
i_key	./vendor/STC/misc/tests/cspan_test.c	/^#define i_key /;"	d	file:
i_key_arcbox	./vendor/STC/include/stc/priv/template.h	/^    #define i_key_arcbox /;"	d
i_key_arcbox	./vendor/STC/misc/examples/smartpointers/arc_containers.c	/^#define i_key_arcbox /;"	d	file:
i_key_arcbox	./vendor/STC/misc/examples/smartpointers/arc_containers.c	/^#define i_key_arcbox Arc \/\/ use i_key_arcbox /;"	d	file:
i_key_arcbox	./vendor/STC/misc/examples/smartpointers/arc_demo.c	/^#define i_key_arcbox /;"	d	file:
i_key_arcbox	./vendor/STC/misc/examples/smartpointers/arc_demo.c	/^#define i_key_arcbox Arc    \/\/ note: use i_key_arcbox /;"	d	file:
i_key_arcbox	./vendor/STC/misc/examples/smartpointers/arcvec_erase.c	/^#define i_key_arcbox /;"	d	file:
i_key_arcbox	./vendor/STC/misc/examples/smartpointers/box.c	/^#define i_key_arcbox /;"	d	file:
i_key_arcbox	./vendor/STC/misc/examples/smartpointers/box2.c	/^#define i_key_arcbox box_Point \/\/ NB: use i_key_arcbox /;"	d	file:
i_key_arcbox	./vendor/STC/misc/examples/smartpointers/music_arc.c	/^#define i_key_arcbox SongArc \/\/ use i_key_arcbox /;"	d	file:
i_key_arcbox	./vendor/STC/misc/examples/smartpointers/new_sptr.c	/^#define i_key_arcbox /;"	d	file:
i_key_arcbox	./vendor/STC/misc/examples/smartpointers/person_arc.c	/^#define i_key_arcbox /;"	d	file:
i_key_class	./vendor/STC/include/stc/priv/template.h	/^    #define i_key_class /;"	d
i_key_class	./vendor/STC/include/stc/priv/template.h	/^  #define i_key_class /;"	d
i_key_class	./vendor/STC/misc/examples/algorithms/filterdemos.c	/^#define i_key_class /;"	d	file:
i_key_class	./vendor/STC/misc/examples/hashmaps/vikings.c	/^#define i_key_class /;"	d	file:
i_key_class	./vendor/STC/misc/examples/mixed/complex.c	/^#define i_key_class /;"	d	file:
i_key_class	./vendor/STC/misc/examples/smartpointers/box.c	/^#define i_key_class /;"	d	file:
i_key_class	./vendor/STC/misc/examples/smartpointers/music_arc.c	/^#define i_key_class /;"	d	file:
i_key_class	./vendor/STC/misc/examples/smartpointers/new_sptr.c	/^#define i_key_class /;"	d	file:
i_key_class	./vendor/STC/misc/examples/smartpointers/person_arc.c	/^#define i_key_class /;"	d	file:
i_key_class	./vendor/STC/misc/examples/sortedmaps/multimap.c	/^#define i_key_class /;"	d	file:
i_key_ssv	./vendor/STC/include/stc/priv/template.h	/^    #define i_key_ssv /;"	d
i_key_ssv	./vendor/STC/misc/benchmarks/various/string_bench_STC.cpp	/^#define i_key_ssv$/;"	d	file:
i_key_str	./vendor/STC/include/stc/priv/template.h	/^    #define i_key_str /;"	d
i_key_str	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^#define i_key_str$/;"	d	file:
i_key_str	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^#define i_key_str$/;"	d	file:
i_key_str	./vendor/STC/misc/benchmarks/various/string_bench_STC.cpp	/^#define i_key_str$/;"	d	file:
i_key_str	./vendor/STC/misc/examples/hashmaps/books.c	/^#define i_key_str$/;"	d	file:
i_key_str	./vendor/STC/misc/examples/hashmaps/hashmap.c	/^#define i_key_str$/;"	d	file:
i_key_str	./vendor/STC/misc/examples/hashmaps/new_map.c	/^#define i_key_str$/;"	d	file:
i_key_str	./vendor/STC/misc/examples/hashmaps/phonebook.c	/^#define i_key_str$/;"	d	file:
i_key_str	./vendor/STC/misc/examples/hashmaps/unordered_set.c	/^#define i_key_str$/;"	d	file:
i_key_str	./vendor/STC/misc/examples/mixed/complex.c	/^#define i_key_str$/;"	d	file:
i_key_str	./vendor/STC/misc/examples/mixed/convert.c	/^#define i_key_str$/;"	d	file:
i_key_str	./vendor/STC/misc/examples/mixed/demos.c	/^#define i_key_str$/;"	d	file:
i_key_str	./vendor/STC/misc/examples/mixed/inits.c	/^#define i_key_str$/;"	d	file:
i_key_str	./vendor/STC/misc/examples/mixed/read.c	/^#define i_key_str$/;"	d	file:
i_key_str	./vendor/STC/misc/examples/smartpointers/arc_containers.c	/^#define i_key_str /;"	d	file:
i_key_str	./vendor/STC/misc/examples/smartpointers/map_box.c	/^#define i_key_str$/;"	d	file:
i_key_str	./vendor/STC/misc/examples/smartpointers/map_ptr.c	/^#define i_key_str$/;"	d	file:
i_key_str	./vendor/STC/misc/examples/sortedmaps/listmap.c	/^#define i_key_str$/;"	d	file:
i_key_str	./vendor/STC/misc/examples/sortedmaps/mapmap.c	/^#define i_key_str /;"	d	file:
i_key_str	./vendor/STC/misc/examples/sortedmaps/multimap.c	/^#define i_key_str /;"	d	file:
i_key_str	./vendor/STC/misc/examples/sortedmaps/new_smap.c	/^#define i_key_str$/;"	d	file:
i_key_str	./vendor/STC/misc/examples/strings/sso_map.c	/^#define i_key_str$/;"	d	file:
i_keyclone	./vendor/STC/include/stc/priv/template.h	/^    #define i_keyclone /;"	d
i_keyclone	./vendor/STC/include/stc/priv/template.h	/^  #define i_keyclone /;"	d
i_keydrop	./vendor/STC/include/stc/priv/template.h	/^    #define i_keydrop /;"	d
i_keydrop	./vendor/STC/include/stc/priv/template.h	/^  #define i_keydrop /;"	d
i_keydrop	./vendor/STC/misc/examples/algorithms/shape.c	/^#define i_keydrop(/;"	d	file:
i_keydrop	./vendor/STC/misc/examples/coroutines/scheduler.c	/^#define i_keydrop(/;"	d	file:
i_keydrop	./vendor/STC/misc/examples/linkedlists/new_list.c	/^#define i_keydrop /;"	d	file:
i_keydrop	./vendor/STC/misc/examples/smartpointers/arc_containers.c	/^#define i_keydrop(/;"	d	file:
i_keydrop	./vendor/STC/misc/examples/smartpointers/arc_demo.c	/^#define i_keydrop /;"	d	file:
i_keydrop	./vendor/STC/misc/examples/smartpointers/arcvec_erase.c	/^#define i_keydrop /;"	d	file:
i_keydrop	./vendor/STC/misc/examples/smartpointers/new_sptr.c	/^#define i_keydrop(/;"	d	file:
i_keydrop	./vendor/STC/misc/examples/sortedmaps/mapmap.c	/^#define i_keydrop(/;"	d	file:
i_keyfrom	./vendor/STC/include/stc/priv/template.h	/^    #define i_keyfrom /;"	d
i_keyfrom	./vendor/STC/include/stc/priv/template.h	/^  #define i_keyfrom /;"	d
i_keyraw	./vendor/STC/include/stc/priv/template.h	/^    #define i_keyraw /;"	d
i_keyraw	./vendor/STC/include/stc/priv/template.h	/^  #define i_keyraw /;"	d
i_keyto	./vendor/STC/include/stc/priv/template.h	/^    #define i_keyto /;"	d
i_keyto	./vendor/STC/include/stc/priv/template.h	/^  #define i_keyto /;"	d
i_len	./vendor/STC/misc/benchmarks/various/cbits_benchmark.cpp	/^#define i_len /;"	d	file:
i_less	./vendor/STC/include/stc/priv/template.h	/^  #define i_less(/;"	d
i_less	./vendor/STC/misc/examples/priorityqueues/functor.c	/^#define i_less(/;"	d	file:
i_less	./vendor/STC/misc/examples/priorityqueues/new_pque.c	/^#define i_less(/;"	d	file:
i_less	./vendor/STC/misc/examples/vectors/new_vec.c	/^#define i_less(/;"	d	file:
i_malloc	./vendor/STC/include/stc/priv/linkage.h	/^  #define i_malloc /;"	d
i_max_load_factor	./vendor/STC/include/stc/hmap.h	/^  #define i_max_load_factor /;"	d
i_max_load_factor	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^#define i_max_load_factor /;"	d	file:
i_max_load_factor	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^#define i_max_load_factor /;"	d	file:
i_max_load_factor	./vendor/STC/misc/benchmarks/various/rust_hmap.c	/^#define i_max_load_factor /;"	d	file:
i_more	./vendor/STC/include/stc/priv/template.h	/^  #define i_more$/;"	d
i_more	./vendor/STC/misc/benchmarks/various/quicksort_bench.c	/^#define i_more$/;"	d	file:
i_no_atomic	./vendor/STC/include/stc/arc.h	/^  #define i_no_atomic$/;"	d
i_no_clone	./vendor/STC/include/stc/priv/template.h	/^  #define i_no_clone$/;"	d
i_no_clone	./vendor/STC/include/stc/stack.h	/^  #define i_no_clone$/;"	d
i_no_clone	./vendor/STC/misc/examples/algorithms/shape.c	/^#define i_no_clone$/;"	d	file:
i_no_clone	./vendor/STC/misc/examples/coroutines/scheduler.c	/^#define i_no_clone$/;"	d	file:
i_no_clone	./vendor/STC/misc/examples/linkedlists/new_list.c	/^#define i_no_clone /;"	d	file:
i_no_emplace	./vendor/STC/include/stc/priv/template.h	/^  #define i_no_emplace$/;"	d
i_no_hash	./vendor/STC/include/stc/priv/template.h	/^  #define i_no_hash$/;"	d
i_opt	./vendor/STC/misc/benchmarks/various/binsearch_bench.c	/^#define i_opt /;"	d	file:
i_opt	./vendor/STC/misc/examples/smartpointers/arc_containers.c	/^#define i_opt /;"	d	file:
i_opt	./vendor/STC/misc/examples/smartpointers/music_arc.c	/^#define i_opt /;"	d	file:
i_opt	./vendor/STC/misc/examples/vectors/lower_bound.c	/^#define i_opt /;"	d	file:
i_raw_class	./vendor/STC/include/stc/priv/template.h	/^  #define i_raw_class /;"	d
i_raw_class	./vendor/STC/misc/examples/hashmaps/vikings.c	/^#define i_raw_class /;"	d	file:
i_realloc	./vendor/STC/include/stc/priv/linkage.h	/^  #define i_realloc /;"	d
i_static	./vendor/STC/include/stc/priv/linkage.h	/^  #define i_static$/;"	d
i_static	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^#define i_static$/;"	d	file:
i_static	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^#define i_static$/;"	d	file:
i_static	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^#define i_static$/;"	d	file:
i_static	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^#define i_static$/;"	d	file:
i_static	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^#define i_static$/;"	d	file:
i_static	./vendor/STC/misc/benchmarks/plotbench/pque_benchmark.cpp	/^#define i_static$/;"	d	file:
i_static	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^#define i_static$/;"	d	file:
i_static	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^#define i_static$/;"	d	file:
i_static	./vendor/STC/misc/benchmarks/various/cbits_benchmark.cpp	/^#define i_static$/;"	d	file:
i_static	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^#define i_static$/;"	d	file:
i_static	./vendor/STC/misc/benchmarks/various/string_bench_STD.cpp	/^#define i_static$/;"	d	file:
i_static	./vendor/STC/misc/examples/coroutines/cotasks1.c	/^#define i_static$/;"	d	file:
i_static	./vendor/STC/misc/examples/coroutines/cotasks2.c	/^#define i_static$/;"	d	file:
i_static	./vendor/STC/misc/examples/coroutines/filetask.c	/^#define i_static$/;"	d	file:
i_tag	./vendor/STC/include/stc/priv/template.h	/^    #define i_tag /;"	d
i_tag	./vendor/STC/include/stc/priv/template.h	/^  #define i_tag /;"	d
i_type	./vendor/STC/include/stc/algo/quicksort.h	/^    #define i_type /;"	d
i_type	./vendor/STC/include/stc/algo/quicksort.h	/^  typedef i_key i_type, c_JOIN(i_type, _value), c_JOIN(i_type, _raw);$/;"	t	typeref:typename:i_key
i_type	./vendor/STC/include/stc/cbits.h	/^#define i_type /;"	d
i_type	./vendor/STC/include/stc/cbits.h	/^typedef struct { uintptr_t *buffer; intptr_t _size; } i_type;$/;"	t	typeref:struct:__anonb7fc968f0108
i_type	./vendor/STC/include/stc/cbits.h	/^typedef struct { uintptr_t buffer[(i_capacity - 1)\/64 + 1]; } i_type;$/;"	t	typeref:struct:__anonb7fc968f0208
i_type	./vendor/STC/include/stc/priv/template.h	/^  #define i_type /;"	d
i_type	./vendor/STC/misc/benchmarks/various/cbits_benchmark.cpp	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/benchmarks/various/string_bench_STC.cpp	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/algorithms/filterdemos.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/algorithms/shape.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/bitsets/bits2.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/coroutines/scheduler.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/hashmaps/vikings.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/linkedlists/list_erase.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/linkedlists/new_list.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/mixed/complex.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/mixed/demos.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/mixed/inits.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/priorityqueues/functor.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/smartpointers/arc_containers.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/smartpointers/arc_demo.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/smartpointers/arcvec_erase.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/smartpointers/box.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/smartpointers/box2.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/smartpointers/map_box.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/smartpointers/map_ptr.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/smartpointers/music_arc.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/smartpointers/new_sptr.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/smartpointers/person_arc.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/sortedmaps/listmap.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/sortedmaps/mapmap.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/sortedmaps/multimap.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/sortedmaps/new_smap.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/sortedmaps/smap_erase.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/sortedmaps/smap_find.c	/^#define i_type /;"	d	file:
i_type	./vendor/STC/misc/examples/sortedmaps/smap_insert.c	/^#define i_type /;"	d	file:
i_use_cmp	./vendor/STC/include/stc/priv/template.h	/^  #define i_use_cmp$/;"	d
i_use_cmp	./vendor/STC/misc/examples/linkedlists/intrusive.c	/^#define i_use_cmp$/;"	d	file:
i_use_cmp	./vendor/STC/misc/examples/linkedlists/lists.c	/^#define i_use_cmp$/;"	d	file:
i_use_cmp	./vendor/STC/misc/examples/linkedlists/new_list.c	/^#define i_use_cmp /;"	d	file:
i_use_cmp	./vendor/STC/misc/examples/mixed/demos.c	/^#define i_use_cmp$/;"	d	file:
i_use_cmp	./vendor/STC/misc/examples/smartpointers/arc_demo.c	/^#define i_use_cmp /;"	d	file:
i_use_cmp	./vendor/STC/misc/examples/smartpointers/arc_demo.c	/^#define i_use_cmp$/;"	d	file:
i_use_cmp	./vendor/STC/misc/examples/smartpointers/arcvec_erase.c	/^#define i_use_cmp /;"	d	file:
i_use_cmp	./vendor/STC/misc/examples/smartpointers/arcvec_erase.c	/^#define i_use_cmp$/;"	d	file:
i_use_cmp	./vendor/STC/misc/examples/smartpointers/box.c	/^#define i_use_cmp$/;"	d	file:
i_use_cmp	./vendor/STC/misc/examples/smartpointers/new_sptr.c	/^#define i_use_cmp$/;"	d	file:
i_use_cmp	./vendor/STC/misc/examples/smartpointers/person_arc.c	/^#define i_use_cmp$/;"	d	file:
i_use_cmp	./vendor/STC/misc/examples/sortedmaps/multimap.c	/^#define i_use_cmp /;"	d	file:
i_use_eq	./vendor/STC/include/stc/priv/template.h	/^  #define i_use_eq$/;"	d
i_val	./vendor/STC/include/stc/priv/template.h	/^  #define i_val /;"	d
i_val	./vendor/STC/include/stc/priv/template.h	/^  #define i_val i_val_/;"	d
i_val	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^#define i_val /;"	d	file:
i_val	./vendor/STC/misc/benchmarks/various/string_bench_STC.cpp	/^#define i_val /;"	d	file:
i_val	./vendor/STC/misc/examples/hashmaps/vikings.c	/^#define i_val /;"	d	file:
i_val	./vendor/STC/misc/examples/mixed/demos.c	/^#define i_val /;"	d	file:
i_val	./vendor/STC/misc/examples/mixed/inits.c	/^#define i_val /;"	d	file:
i_val	./vendor/STC/misc/examples/smartpointers/arc_containers.c	/^#define i_val /;"	d	file:
i_val	./vendor/STC/misc/examples/smartpointers/map_ptr.c	/^#define i_val /;"	d	file:
i_val	./vendor/STC/misc/examples/sortedmaps/gauss2.c	/^#define i_val /;"	d	file:
i_val	./vendor/STC/misc/examples/sortedmaps/sorted_map.c	/^#define i_val /;"	d	file:
i_val	./vendor/STC/misc/examples/spans/multidim.c	/^#define i_val /;"	d	file:
i_val_arcbox	./vendor/STC/misc/examples/smartpointers/map_box.c	/^#define i_val_arcbox IBox \/\/ i_val_arcbox:/;"	d	file:
i_val_class	./vendor/STC/include/stc/priv/template.h	/^  #define i_val_class /;"	d
i_val_class	./vendor/STC/misc/examples/mixed/complex.c	/^#define i_val_class /;"	d	file:
i_val_class	./vendor/STC/misc/examples/sortedmaps/listmap.c	/^#define i_val_class /;"	d	file:
i_val_class	./vendor/STC/misc/examples/sortedmaps/mapmap.c	/^#define i_val_class /;"	d	file:
i_val_class	./vendor/STC/misc/examples/sortedmaps/multimap.c	/^#define i_val_class /;"	d	file:
i_val_str	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^#define i_val_str$/;"	d	file:
i_val_str	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^#define i_val_str$/;"	d	file:
i_val_str	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^#define i_val_str$/;"	d	file:
i_val_str	./vendor/STC/misc/examples/hashmaps/books.c	/^#define i_val_str$/;"	d	file:
i_val_str	./vendor/STC/misc/examples/hashmaps/hashmap.c	/^#define i_val_str$/;"	d	file:
i_val_str	./vendor/STC/misc/examples/hashmaps/new_map.c	/^#define i_val_str$/;"	d	file:
i_val_str	./vendor/STC/misc/examples/hashmaps/phonebook.c	/^#define i_val_str$/;"	d	file:
i_val_str	./vendor/STC/misc/examples/mixed/convert.c	/^#define i_val_str$/;"	d	file:
i_val_str	./vendor/STC/misc/examples/mixed/demos.c	/^#define i_val_str$/;"	d	file:
i_val_str	./vendor/STC/misc/examples/mixed/inits.c	/^#define i_val_str$/;"	d	file:
i_val_str	./vendor/STC/misc/examples/sortedmaps/mapmap.c	/^#define i_val_str /;"	d	file:
i_val_str	./vendor/STC/misc/examples/sortedmaps/new_smap.c	/^#define i_val_str$/;"	d	file:
i_val_str	./vendor/STC/misc/examples/sortedmaps/smap_erase.c	/^#define i_val_str$/;"	d	file:
i_val_str	./vendor/STC/misc/examples/sortedmaps/smap_find.c	/^#define i_val_str$/;"	d	file:
i_val_str	./vendor/STC/misc/examples/sortedmaps/smap_insert.c	/^#define i_val_str$/;"	d	file:
i_val_str	./vendor/STC/misc/examples/strings/sso_map.c	/^#define i_val_str$/;"	d	file:
i_valclone	./vendor/STC/include/stc/priv/template.h	/^    #define i_valclone /;"	d
i_valclone	./vendor/STC/include/stc/priv/template.h	/^  #define i_valclone /;"	d
i_valclone	./vendor/STC/misc/examples/smartpointers/map_ptr.c	/^#define i_valclone(/;"	d	file:
i_valdrop	./vendor/STC/include/stc/priv/template.h	/^    #define i_valdrop /;"	d
i_valdrop	./vendor/STC/include/stc/priv/template.h	/^  #define i_valdrop /;"	d
i_valdrop	./vendor/STC/misc/examples/smartpointers/map_ptr.c	/^#define i_valdrop(/;"	d	file:
i_valfrom	./vendor/STC/include/stc/priv/template.h	/^    #define i_valfrom /;"	d
i_valfrom	./vendor/STC/include/stc/priv/template.h	/^  #define i_valfrom /;"	d
i_valfrom	./vendor/STC/misc/examples/smartpointers/map_ptr.c	/^#define i_valfrom(/;"	d	file:
i_valraw	./vendor/STC/include/stc/priv/template.h	/^  #define i_valraw /;"	d
i_valraw	./vendor/STC/misc/examples/smartpointers/map_ptr.c	/^#define i_valraw /;"	d	file:
i_valto	./vendor/STC/include/stc/priv/template.h	/^    #define i_valto /;"	d
i_valto	./vendor/STC/include/stc/priv/template.h	/^  #define i_valto /;"	d
i_valto	./vendor/STC/misc/examples/smartpointers/map_ptr.c	/^#define i_valto(/;"	d	file:
icase	./vendor/STC/include/stc/priv/cregex_prv.c	/^    bool icase;$/;"	m	struct:__anon4ce7005a0408	typeref:typename:bool	file:
id	./src/flecs.c	/^    ecs_id_t id;                     \/* (Component) id *\/$/;"	m	struct:ecs_cmd_t	typeref:typename:ecs_id_t	file:
id	./src/flecs.c	/^    ecs_id_t id;                     \/* Component id *\/$/;"	m	struct:ecs_column_t	typeref:typename:ecs_id_t	file:
id	./src/flecs.c	/^    ecs_id_t id;                     \/* Id associated with edge *\/$/;"	m	struct:ecs_graph_edge_t	typeref:typename:ecs_id_t	file:
id	./src/flecs.c	/^    ecs_id_t id;                \/* (Component) id that contains to monitor member *\/$/;"	m	struct:EcsAlert	typeref:typename:ecs_id_t	file:
id	./src/flecs.c	/^    ecs_id_t id;$/;"	m	struct:__anon7d4a41771308	typeref:typename:ecs_id_t	file:
id	./src/flecs.c	/^    ecs_id_t id;$/;"	m	struct:__anon7d4a41772808	typeref:typename:ecs_id_t	file:
id	./src/flecs.c	/^    ecs_id_t id;$/;"	m	struct:__anon7d4a41772c08	typeref:typename:ecs_id_t	file:
id	./src/flecs.c	/^    ecs_id_t id;$/;"	m	struct:ecs_id_record_t	typeref:typename:ecs_id_t	file:
id	./src/flecs.c	/^    ecs_id_t id;$/;"	m	struct:ecs_marked_id_t	typeref:typename:ecs_id_t	file:
id	./src/flecs.c	/^    ecs_id_t id;$/;"	m	struct:ecs_reachable_elem_t	typeref:typename:ecs_id_t	file:
id	./src/flecs.c	/^    ecs_var_id_t id;       \/* variable id *\/$/;"	m	struct:ecs_rule_var_t	typeref:typename:ecs_var_id_t	file:
id	./src/flecs.c	/^    int32_t id;$/;"	m	struct:ecs_stage_t	typeref:typename:int32_t	file:
id	./src/flecs.c	/^    uint32_t id;$/;"	m	struct:ecs_stack_page_t	typeref:typename:uint32_t	file:
id	./src/flecs.c	/^    uint64_t id;                     \/* Table id in sparse set *\/$/;"	m	struct:ecs_table_t	typeref:typename:uint64_t	file:
id	./src/flecs.c	/^    uint64_t id;$/;"	m	struct:__anon7d4a41770a08	typeref:typename:uint64_t	file:
id	./src/flecs.h	/^    Base& id() {$/;"	f	struct:flecs::event_builder_base	typeref:typename:Base &
id	./src/flecs.h	/^    Base& id(entity_t first, entity_t second) {$/;"	f	struct:flecs::event_builder_base	typeref:typename:Base &
id	./src/flecs.h	/^    Base& id(entity_t second) {$/;"	f	struct:flecs::event_builder_base	typeref:typename:Base &
id	./src/flecs.h	/^    Base& id(flecs::entity_t id) {$/;"	f	struct:flecs::term_id_builder_i	typeref:typename:Base &
id	./src/flecs.h	/^    Base& id(flecs::id_t id) {$/;"	f	struct:flecs::alert_builder_i	typeref:typename:Base &
id	./src/flecs.h	/^    Base& id(flecs::id_t id) {$/;"	f	struct:flecs::event_builder_base	typeref:typename:Base &
id	./src/flecs.h	/^    ecs_entity_t id;            \/**< Entity id. If left to 0 and flags does not$/;"	m	struct:ecs_term_id_t	typeref:typename:ecs_entity_t
id	./src/flecs.h	/^    ecs_entity_t id;        \/* Component id *\/$/;"	m	struct:ecs_ref_t	typeref:typename:ecs_entity_t
id	./src/flecs.h	/^    ecs_entity_t id;      \/**< Set to modify existing entity (optional) *\/$/;"	m	struct:ecs_entity_desc_t	typeref:typename:ecs_entity_t
id	./src/flecs.h	/^    ecs_id_t id;                \/**< Component id to be matched by term. Can be$/;"	m	struct:ecs_term_t	typeref:typename:ecs_id_t
id	./src/flecs.h	/^    ecs_id_t id;$/;"	m	struct:ecs_alert_desc_t	typeref:typename:ecs_id_t
id	./src/flecs.h	/^    ecs_id_t id;$/;"	m	struct:ecs_metric_desc_t	typeref:typename:ecs_id_t
id	./src/flecs.h	/^    ecs_id_t id;$/;"	m	struct:ecs_term_iter_t	typeref:typename:ecs_id_t
id	./src/flecs.h	/^    entity_t id() const {$/;"	f	struct:flecs::entity_view	typeref:typename:entity_t
id	./src/flecs.h	/^    explicit id(const flecs::id& first, const flecs::id& second)$/;"	f	struct:flecs::id
id	./src/flecs.h	/^    explicit id(flecs::id_t first, flecs::id_t second)$/;"	f	struct:flecs::id
id	./src/flecs.h	/^    explicit id(flecs::id_t value)$/;"	f	struct:flecs::id
id	./src/flecs.h	/^    explicit id(flecs::world_t *world, flecs::id_t first, flecs::id_t second)$/;"	f	struct:flecs::id
id	./src/flecs.h	/^    explicit id(flecs::world_t *world, flecs::id_t value = 0)$/;"	f	struct:flecs::id
id	./src/flecs.h	/^    flecs::entity_t id;$/;"	m	struct:flecs::_::enum_constant_data	typeref:typename:flecs::entity_t
id	./src/flecs.h	/^    flecs::entity_t id;$/;"	m	struct:flecs::_::enum_data_impl	typeref:typename:flecs::entity_t
id	./src/flecs.h	/^    flecs::id id() {$/;"	f	struct:flecs::term	typeref:typename:flecs::id
id	./src/flecs.h	/^    id()$/;"	f	struct:flecs::id
id	./src/flecs.h	/^    metric_builder& id() {$/;"	f	struct:flecs::metric_builder	typeref:typename:metric_builder &
id	./src/flecs.h	/^    metric_builder& id(flecs::entity_t first, flecs::entity_t second) {$/;"	f	struct:flecs::metric_builder	typeref:typename:metric_builder &
id	./src/flecs.h	/^    metric_builder& id(flecs::entity_t second) {$/;"	f	struct:flecs::metric_builder	typeref:typename:metric_builder &
id	./src/flecs.h	/^    metric_builder& id(flecs::id_t the_id) {$/;"	f	struct:flecs::metric_builder	typeref:typename:metric_builder &
id	./src/flecs.h	/^    static id_t id(world_t *world = nullptr) {$/;"	f	struct:flecs::_::cpp_type	typeref:typename:id_t
id	./src/flecs.h	/^    static id_t id(world_t *world = nullptr, const char *name = nullptr,$/;"	f	struct:flecs::_::cpp_type_impl	typeref:typename:id_t
id	./src/flecs.h	/^    uint64_t id;$/;"	m	struct:__anon7d4a417c0808	typeref:typename:uint64_t
id	./src/flecs.h	/^    uint64_t id;$/;"	m	struct:__anon7d4a417c0b08	typeref:typename:uint64_t
id	./src/flecs.h	/^inline flecs::id iter::id(int32_t index) const {$/;"	f	class:flecs::iter	typeref:typename:flecs::id
id	./src/flecs.h	/^inline flecs::id world::id() const {$/;"	f	class:flecs::world	typeref:typename:flecs::id
id	./src/flecs.h	/^inline flecs::id world::id(Args&&... args) const {$/;"	f	class:flecs::world	typeref:typename:flecs::id
id	./src/flecs.h	/^inline flecs::id world::id(E value) const {$/;"	f	class:flecs::world	typeref:typename:flecs::id
id	./src/flecs.h	/^struct id {$/;"	s	namespace:flecs
id	./vendor/STC/misc/examples/coroutines/dining_philosophers.c	/^    int id;$/;"	m	struct:Philosopher	typeref:typename:int	file:
id	./vendor/fmt/include/base.h	/^  int id;$/;"	m	struct:detail::named_arg_info	typeref:typename:int
id	./vendor/fmt/include/format-inl.h	/^template <typename Locale> typename Locale::id format_facet<Locale>::id;$/;"	m	class:format_facet<Locale>	typeref:typename:Locale::id
id	./vendor/fmt/include/format.h	/^  static FMT_API typename Locale::id id;$/;"	m	class:format_facet	typeref:typename:FMT_API typename Locale::id
id	./vendor/raylib5/include/raygui.h	/^        unsigned int id;        \/\/ OpenGL texture id$/;"	m	struct:Texture2D	typeref:typename:unsigned int
id	./vendor/raylib5/include/raylib.h	/^    unsigned int id;        \/\/ OpenGL framebuffer object id$/;"	m	struct:RenderTexture	typeref:typename:unsigned int
id	./vendor/raylib5/include/raylib.h	/^    unsigned int id;        \/\/ OpenGL texture id$/;"	m	struct:Texture	typeref:typename:unsigned int
id	./vendor/raylib5/include/raylib.h	/^    unsigned int id;        \/\/ Shader program id$/;"	m	struct:Shader	typeref:typename:unsigned int
id_adapter	./vendor/fmt/include/base.h	/^    struct id_adapter {$/;"	s	function:detail::parse_replacement_field
id_create_total	./src/flecs.h	/^    int64_t id_create_total;          \/**< Total number of times a new id was created *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int64_t
id_delete_total	./src/flecs.h	/^    int64_t id_delete_total;          \/**< Total number of times an id was deleted *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int64_t
id_explicit	./src/flecs.h	/^    static entity_t id_explicit(world_t *world = nullptr,$/;"	f	struct:flecs::_::cpp_type_impl	typeref:typename:entity_t
id_flags	./src/flecs.h	/^    ecs_id_t id_flags;          \/**< Id flags of term id *\/$/;"	m	struct:ecs_term_t	typeref:typename:ecs_id_t
id_index_hi	./src/flecs.c	/^    ecs_map_t id_index_hi;           \/* map<id, ecs_id_record_t*> *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_map_t	file:
id_index_lo	./src/flecs.c	/^    ecs_id_record_t *id_index_lo;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_id_record_t *	file:
id_label	./src/flecs.c	/^    char *id_label;$/;"	m	struct:ecs_json_value_ser_ctx_t	typeref:typename:char *	file:
id_record	./src/flecs.c	/^    ecs_block_allocator_t id_record;$/;"	m	struct:ecs_world_allocators_t	typeref:typename:ecs_block_allocator_t	file:
id_record_chunk	./src/flecs.c	/^    ecs_block_allocator_t id_record_chunk;$/;"	m	struct:ecs_world_allocators_t	typeref:typename:ecs_block_allocator_t	file:
id_second	./src/flecs.h	/^    metric_builder& id_second(flecs::entity_t first) {$/;"	f	struct:flecs::metric_builder	typeref:typename:metric_builder &
id_t	./src/flecs.h	/^using id_t = ecs_id_t;$/;"	t	namespace:flecs	typeref:typename:ecs_id_t
idr	./src/flecs.c	/^    ecs_id_record_t *idr;            \/* Id record (only for set\/mut\/emplace) *\/$/;"	m	struct:ecs_cmd_t	typeref:typename:ecs_id_record_t *	file:
idr	./src/flecs.c	/^    ecs_id_record_t *idr;            \/**< Id record for monitored component *\/$/;"	m	struct:__anon7d4a41770d08	typeref:typename:ecs_id_record_t *	file:
idr	./src/flecs.c	/^    ecs_id_record_t *idr;            \/**< Id record for monitored component *\/$/;"	m	struct:__anon7d4a41770e08	typeref:typename:ecs_id_record_t *	file:
idr	./src/flecs.c	/^    ecs_id_record_t *idr;            \/**< Id record for monitored component *\/$/;"	m	struct:__anon7d4a41770f08	typeref:typename:ecs_id_record_t *	file:
idr	./src/flecs.c	/^    ecs_id_record_t *idr;$/;"	m	struct:__anon7d4a41772508	typeref:typename:ecs_id_record_t *	file:
idr	./src/flecs.c	/^    ecs_id_record_t *idr;$/;"	m	struct:__anon7d4a41772b08	typeref:typename:ecs_id_record_t *	file:
idr	./src/flecs.c	/^    ecs_id_record_t *idr;$/;"	m	struct:__anon7d4a41772c08	typeref:typename:ecs_id_record_t *	file:
idr	./src/flecs.c	/^    ecs_id_record_t *idr;$/;"	m	struct:ecs_marked_id_t	typeref:typename:ecs_id_record_t *	file:
idr	./src/flecs.h	/^    ecs_id_record_t *idr;       \/**< Cached pointer to internal index *\/$/;"	m	struct:ecs_term_t	typeref:typename:ecs_id_record_t *
idr	./src/flecs.h	/^    ecs_id_record_t *idr; \/* Id record to (*, entity) for target entities *\/$/;"	m	struct:ecs_record_t	typeref:typename:ecs_id_record_t *
idr_any	./src/flecs.c	/^    ecs_id_record_t *idr_any;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_id_record_t *	file:
idr_childof_0	./src/flecs.c	/^    ecs_id_record_t *idr_childof_0;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_id_record_t *	file:
idr_childof_wildcard	./src/flecs.c	/^    ecs_id_record_t *idr_childof_wildcard;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_id_record_t *	file:
idr_doc_color	./src/flecs.c	/^    ecs_id_record_t *idr_doc_color;$/;"	m	struct:ecs_json_ser_ctx_t	typeref:typename:ecs_id_record_t *	file:
idr_doc_name	./src/flecs.c	/^    ecs_id_record_t *idr_doc_name;$/;"	m	struct:ecs_json_ser_ctx_t	typeref:typename:ecs_id_record_t *	file:
idr_identifier_name	./src/flecs.c	/^    ecs_id_record_t *idr_identifier_name;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_id_record_t *	file:
idr_inactive	./src/flecs.c	/^    ecs_id_record_t *idr_inactive; \/* Cached record for quick inactive test *\/$/;"	m	struct:ecs_pipeline_state_t	typeref:typename:ecs_id_record_t *	file:
idr_isa_wildcard	./src/flecs.c	/^    ecs_id_record_t *idr_isa_wildcard;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_id_record_t *	file:
idr_trav	./src/flecs.c	/^    ecs_id_record_t *idr_trav;$/;"	m	struct:__anon7d4a41772a08	typeref:typename:ecs_id_record_t *	file:
idr_wildcard	./src/flecs.c	/^    ecs_id_record_t *idr_wildcard;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_id_record_t *	file:
idr_wildcard_wildcard	./src/flecs.c	/^    ecs_id_record_t *idr_wildcard_wildcard;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_id_record_t *	file:
idr_with	./src/flecs.c	/^    ecs_id_record_t *idr_with;$/;"	m	struct:__anon7d4a41772a08	typeref:typename:ecs_id_record_t *	file:
ids	./src/flecs.c	/^        ecs_rule_ids_ctx_t ids;$/;"	m	union:ecs_rule_op_ctx_t::__anon7d4a4177340a	typeref:typename:ecs_rule_ids_ctx_t	file:
ids	./src/flecs.c	/^    ecs_block_allocator_t ids;$/;"	m	struct:ecs_query_allocators_t	typeref:typename:ecs_block_allocator_t	file:
ids	./src/flecs.c	/^    ecs_id_t *ids;                   \/* Resolved (component) ids for current table *\/$/;"	m	struct:ecs_query_table_match_t	typeref:typename:ecs_id_t *	file:
ids	./src/flecs.c	/^    ecs_map_t ids;$/;"	m	struct:ecs_write_state_t	typeref:typename:ecs_map_t	file:
ids	./src/flecs.c	/^    ecs_vec_t ids; \/* vec<reachable_elem_t> *\/$/;"	m	struct:ecs_reachable_cache_t	typeref:typename:ecs_vec_t	file:
ids	./src/flecs.h	/^        flecs::array<flecs::id_t, sizeof...(Components)> ids;$/;"	m	struct:flecs::_::sig	typeref:typename:flecs::array<flecs::id_t,sizeof...(Components)>
ids	./src/flecs.h	/^    const ecs_type_t *ids;$/;"	m	struct:ecs_event_desc_t	typeref:typename:const ecs_type_t *
ids	./src/flecs.h	/^    ecs_id_t *ids;                \/* (Component) ids *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_id_t *
ids	./src/flecs.h	/^    ecs_id_t *ids;             \/**< Array with field ids *\/$/;"	m	struct:ecs_filter_t	typeref:typename:ecs_id_t *
ids	./src/flecs.h	/^    ecs_id_t ids[FLECS_ID_DESC_MAX]; \/**< Ids to create the entities with *\/$/;"	m	struct:ecs_bulk_desc_t	typeref:typename:ecs_id_t[]
idx	./vendor/STC/misc/examples/coroutines/coroutines.c	/^    int count, idx;$/;"	m	struct:fibonacci	typeref:typename:int	file:
idx	./vendor/STC/misc/examples/coroutines/coroutines.c	/^    int count, idx;$/;"	m	struct:prime	typeref:typename:int	file:
if_not_t	./src/flecs.h	/^using if_not_t = enable_if_t<false == V, int>;$/;"	t	namespace:flecs	typeref:typename:enable_if_t<false==V,int>
if_t	./src/flecs.h	/^using if_t = enable_if_t<V, int>;$/;"	t	namespace:flecs	typeref:typename:enable_if_t<V,int>
ignore_unused	./vendor/fmt/include/base.h	/^template <typename... T> FMT_CONSTEXPR void ignore_unused(const T&...) {}$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR void
image	./vendor/raylib5/include/raygui.h	/^        Image image;            \/\/ Character image data$/;"	m	struct:GlyphInfo	typeref:typename:Image
image	./vendor/raylib5/include/raylib.h	/^    Image image;            \/\/ Character image data$/;"	m	struct:GlyphInfo	typeref:typename:Image
impl	./src/flecs.h	/^    ecs_map_t impl;$/;"	m	struct:__anon7d4a417c0408	typeref:typename:ecs_map_t
impl	./src/flecs.h	/^    void *impl;$/;"	m	struct:__anon7d4a417c0e08	typeref:typename:void *
impl_	./src/flecs.h	/^    _::enum_data_impl<E>& impl_;$/;"	m	struct:flecs::enum_data	typeref:typename:_::enum_data_impl<E> &
import	./src/flecs.h	/^flecs::entity import(world& world) {$/;"	f	namespace:flecs::_	typeref:typename:flecs::entity
import	./src/flecs.h	/^inline flecs::entity world::import() {$/;"	f	class:flecs::world	typeref:typename:flecs::entity
in	./src/flecs.h	/^    Base& in() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
in	./vendor/fmt/include/base.h	/^constexpr auto in(type t, int set) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
in_or	./src/flecs.c	/^    bool in_or; \/* Whether we're in an or chain *\/$/;"	m	struct:__anon7d4a41773508	typeref:typename:bool	file:
inactive_time	./src/flecs.c	/^    ecs_ftime_t inactive_time; \/* Time the alert has been inactive *\/$/;"	m	struct:EcsAlertTimeout	typeref:typename:ecs_ftime_t	file:
increase_capacity	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    void increase_capacity() {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:void
increase_size	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    bool increase_size() {$/;"	f	class:robin_hood::detail::Table	typeref:typename:bool
increase_size	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    void increase_size() {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:void
ind	./vendor/STC/include/stc/coption.h	/^    int ind;            \/* equivalent to optind *\/$/;"	m	struct:__anonc31abe760308	typeref:typename:int
index	./src/flecs.c	/^    ecs_map_t index; \/* <table_id, T*> *\/$/;"	m	struct:ecs_table_cache_t	typeref:typename:ecs_map_t	file:
index	./src/flecs.c	/^    int16_t index;              \/* First type index where id occurs in table *\/$/;"	m	struct:ecs_table_record_t	typeref:typename:int16_t	file:
index	./src/flecs.c	/^    int32_t index;$/;"	m	struct:__anon7d4a41772d08	typeref:typename:int32_t	file:
index	./src/flecs.c	/^    int32_t index;$/;"	m	struct:__anon7d4a41772e08	typeref:typename:int32_t	file:
index	./src/flecs.h	/^    ecs_hashmap_t *index; \/**< Current index *\/$/;"	m	struct:EcsIdentifier	typeref:typename:ecs_hashmap_t *
index	./src/flecs.h	/^    int32_t index;$/;"	m	struct:__anon7d4a417c0508	typeref:typename:int32_t
index	./src/flecs.h	/^    int32_t index;$/;"	m	struct:ecs_snapshot_iter_t	typeref:typename:int32_t
index	./src/flecs.h	/^    int32_t index;$/;"	m	struct:ecs_term_iter_t	typeref:typename:int32_t
index	./src/flecs.h	/^    int32_t index;$/;"	m	struct:ecs_worker_iter_t	typeref:typename:int32_t
index	./vendor/fmt/include/base.h	/^    int index;$/;"	m	union:detail::arg_ref::value	typeref:typename:int
index	./vendor/fmt/include/base.h	/^enum class arg_id_kind { none, index, name };$/;"	e	enum:detail::arg_id_kind
index_by_value	./src/flecs.h	/^    int index_by_value(E value) const {$/;"	f	struct:flecs::enum_data	typeref:typename:int
index_by_value	./src/flecs.h	/^    int index_by_value(underlying_type_t<E> value) const {$/;"	f	struct:flecs::enum_data	typeref:typename:int
index_for_hash	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    size_t index_for_hash(size_t hash, size_t \/*num_slots_minus_one*\/) const$/;"	f	struct:ska::fibonacci_hash_policy	typeref:typename:size_t
index_for_hash	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    size_t index_for_hash(size_t hash, size_t \/*num_slots_minus_one*\/) const$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
index_for_hash	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    size_t index_for_hash(size_t hash, size_t num_slots_minus_one) const$/;"	f	struct:ska::power_of_two_hash_policy	typeref:typename:size_t
index_hash	./src/flecs.h	/^    uint64_t index_hash;  \/**< Hash of existing record in current index *\/$/;"	m	struct:EcsIdentifier	typeref:typename:uint64_t
index_sequence	./vendor/fmt/include/ranges.h	/^template <size_t... N> using index_sequence = integer_sequence<size_t, N...>;$/;"	t	namespace:detail	typeref:typename:integer_sequence<size_t,N...>
index_sequence	./vendor/fmt/include/ranges.h	/^template <size_t... N> using index_sequence = std::index_sequence<N...>;$/;"	t	namespace:detail	typeref:typename:std::index_sequence<N...>
indian_red	./vendor/fmt/include/color.h	/^  indian_red = 0xCD5C5C,               \/\/ rgb(205,92,92)$/;"	e	enum:color
indices	./vendor/raylib5/include/raylib.h	/^    unsigned short *indices;    \/\/ Vertex indices (in case vertex data comes indexed)$/;"	m	struct:Mesh	typeref:typename:unsigned short *
indigo	./vendor/fmt/include/color.h	/^  indigo = 0x4B0082,                   \/\/ rgb(75,0,130)$/;"	e	enum:color
info	./src/flecs.c	/^    ecs_query_group_info_t info;$/;"	m	struct:ecs_query_table_list_t	typeref:typename:ecs_query_group_info_t	file:
info	./src/flecs.c	/^    ecs_world_info_t info;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_world_info_t	file:
info	./vendor/fmt/include/format.h	/^    using info = dragonbox::float_info<decltype(converted_value)>;$/;"	t	function:detail::format_float
info	./vendor/fmt/include/format.h	/^    using info = dragonbox::float_info<double>;$/;"	t	function:detail::format_float	typeref:typename:dragonbox::float_info<double>
info	./vendor/fmt/include/format.h	/^  using info = dragonbox::float_info<Float>;$/;"	t	function:detail::format_hexfloat	typeref:typename:dragonbox::float_info<Float>
info_count	./src/flecs.h	/^    int32_t info_count;$/;"	m	struct:EcsAlertsActive	typeref:typename:int32_t
init	./src/flecs.h	/^    app_builder& init(ecs_app_init_action_t value) {$/;"	f	struct:flecs::app_builder	typeref:typename:app_builder &
init	./src/flecs.h	/^    ecs_app_init_action_t init; \/**< If set, function is ran before starting the$/;"	m	struct:ecs_app_desc_t	typeref:typename:ecs_app_init_action_t
init	./src/flecs.h	/^    ecs_iter_init_action_t init; \/**< Callback that creates iterator. *\/$/;"	m	struct:ecs_iterable_t	typeref:typename:ecs_iter_init_action_t
init	./src/flecs.h	/^    static void init($/;"	f	struct:flecs::_::cpp_type_impl	typeref:typename:void
init	./src/flecs.h	/^    void init(flecs::world_t *world, flecs::entity_t id) {$/;"	f	struct:flecs::_::enum_type	typeref:typename:void
init	./src/flecs.h	/^inline void init(flecs::world& world) {$/;"	f	namespace:flecs::doc::_	typeref:typename:void
init	./src/flecs.h	/^inline void init(flecs::world& world) {$/;"	f	namespace:flecs::meta::_	typeref:typename:void
init	./src/flecs.h	/^inline void init(flecs::world& world) {$/;"	f	namespace:flecs::rest::_	typeref:typename:void
init	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void init() noexcept {$/;"	f	class:robin_hood::detail::Table	typeref:typename:void
init	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        void init()$/;"	f	class:emhash7::HashMap::const_iterator	typeref:typename:void
init	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        void init()$/;"	f	class:emhash7::HashMap::iterator	typeref:typename:void
init	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    void init(size_type bucket, float mlf = EMH_DEFAULT_LOAD_FACTOR)$/;"	f	class:emhash7::HashMap	typeref:typename:void
initData	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void initData(size_t max_elements) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:void
initLongStringVec	./vendor/STC/misc/benchmarks/various/string_bench_STC.cpp	/^void initLongStringVec(vec_str* vs, vec_sv* vsv)$/;"	f	typeref:typename:void
initLongStringVec	./vendor/STC/misc/benchmarks/various/string_bench_STD.cpp	/^void initLongStringVec(std::vector<std::string>& vs, std::vector<std::string_view>& vsv)$/;"	f	typeref:typename:void
initMapNormal	./vendor/STC/misc/benchmarks/various/string_bench_STD.cpp	/^void initMapNormal(const std::vector<std::string>& vs, std::map<std::string, size_t>& mapNormal)$/;"	f	typeref:typename:void
initMapTrans	./vendor/STC/misc/benchmarks/various/string_bench_STD.cpp	/^void initMapTrans(const std::vector<std::string>& vs, std::map<std::string, size_t, std::less<> /;"	f	typeref:typename:void
initMaps	./vendor/STC/misc/benchmarks/various/string_bench_STC.cpp	/^void initMaps(const vec_str* vs, smap_str* mapTrans, smap_ssv* mapSview,$/;"	f	typeref:typename:void
initShortStringVec	./vendor/STC/misc/benchmarks/various/string_bench_STC.cpp	/^void initShortStringVec(vec_str* vs, vec_sv* vsv)$/;"	f	typeref:typename:void
initShortStringVec	./vendor/STC/misc/benchmarks/various/string_bench_STD.cpp	/^void initShortStringVec(std::vector<std::string>& vs, std::vector<std::string_view>& vsv)$/;"	f	typeref:typename:void
initUnorderedMapNormal	./vendor/STC/misc/benchmarks/various/string_bench_STD.cpp	/^void initUnorderedMapNormal(const std::vector<std::string>& vs, std::unordered_map<std::string, /;"	f	typeref:typename:void
initUnorderedMapTrans	./vendor/STC/misc/benchmarks/various/string_bench_STD.cpp	/^void initUnorderedMapTrans(const std::vector<std::string>& vs, std::unordered_map<std::string, s/;"	f	typeref:typename:void
init_	./src/flecs.h	/^    ecs_os_api_init_t init_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_init_t
init_buffer	./vendor/fmt/include/format-inl.h	/^  void init_buffer() {$/;"	f	class:detail::apple_file	typeref:typename:void
init_buffer	./vendor/fmt/include/format-inl.h	/^  void init_buffer() {$/;"	f	class:detail::glibc_file	typeref:typename:void
init_buffer	./vendor/fmt/include/format-inl.h	/^  void init_buffer() {}$/;"	f	class:detail::fallback_file	typeref:typename:void
init_builtin_components	./src/flecs.h	/^inline void world::init_builtin_components() {$/;"	f	class:flecs::world	typeref:typename:void
init_by_array64	./src/mt19937-64.c	/^void init_by_array64(unsigned long long init_key[],$/;"	f	typeref:typename:void
init_enum	./src/flecs.h	/^inline static void init_enum(flecs::world_t *world, flecs::entity_t id) {$/;"	f	namespace:flecs::_	typeref:typename:void
init_enum	./src/flecs.h	/^inline static void init_enum(flecs::world_t*, flecs::entity_t) { }$/;"	f	namespace:flecs::_	typeref:typename:void
init_event	./src/log.c	/^static void init_event(log_Event *ev, void *udata) {$/;"	f	typeref:typename:void	file:
init_genrand64	./src/mt19937-64.c	/^void init_genrand64(unsigned long long seed)$/;"	f	typeref:typename:void
init_named_arg	./vendor/fmt/include/base.h	/^void init_named_arg(named_arg_info<Char>* named_args, int& arg_index,$/;"	f	namespace:detail	typeref:typename:void
init_named_arg	./vendor/fmt/include/base.h	/^void init_named_arg(named_arg_info<Char>*, int& arg_index, int&, const T&) {$/;"	f	namespace:detail	typeref:typename:void
init_state	./vendor/STC/misc/benchmarks/various/prng_bench.cpp	/^static void init_state(uint64_t *rng, uint64_t seed) {$/;"	f	typeref:typename:void	file:
init_type_t	./src/flecs.c	/^#define init_type_t(/;"	d	file:
initial_shifts	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    static constexpr uint8_t initial_shifts = 64 - 3; \/\/ 2^(64-m_shift) number of buckets$/;"	m	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:uint8_t
initial_state	./vendor/fmt/include/format.h	/^  auto initial_state() const -> next_state { return {grouping_.begin(), 0}; }$/;"	f	class:detail::digit_grouping	typeref:typename:next_state
initialize	./src/main.c	/^void initialize()$/;"	f	typeref:typename:void
initialized	./src/flecs.c	/^    bool initialized;$/;"	m	struct:ecs_http_server_t	typeref:typename:bool	file:
initialized	./src/flecs.c	/^    bool initialized;$/;"	m	struct:ecs_json_value_ser_ctx_t	typeref:typename:bool	file:
initiative	./src/turnbasedsystem.h	/^	int initiative;	$/;"	m	struct:TurnComponentData	typeref:typename:int
inline_buffer_size	./vendor/fmt/include/format.h	/^enum { inline_buffer_size = 500 };$/;"	e	enum:__anon35c308470303
inout	./src/flecs.h	/^        flecs::array<flecs::inout_kind_t, sizeof...(Components)> inout;$/;"	m	struct:flecs::_::sig	typeref:typename:flecs::array<flecs::inout_kind_t,sizeof...(Components)>
inout	./src/flecs.h	/^    Base& inout() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
inout	./src/flecs.h	/^    Base& inout(flecs::inout_kind_t inout) {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
inout	./src/flecs.h	/^    ecs_inout_kind_t inout;     \/**< Access to contents matched by term *\/$/;"	m	struct:ecs_term_t	typeref:typename:ecs_inout_kind_t
inout	./src/flecs.h	/^    flecs::inout_kind_t inout() {$/;"	f	struct:flecs::term	typeref:typename:flecs::inout_kind_t
inout_kind_t	./src/flecs.h	/^enum inout_kind_t {$/;"	g	namespace:flecs
inout_none	./src/flecs.h	/^    Base& inout_none() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
inout_stage	./src/flecs.h	/^    Base& inout_stage(flecs::inout_kind_t inout) {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
input	./vendor/STC/include/stc/cregex.h	/^    const char* input;$/;"	m	struct:__anon7cecd9d80408	typeref:typename:const char *
input	./vendor/STC/misc/examples/regularexpressions/regex2.c	/^    struct { const char *pattern, *input; } s[] = {$/;"	m	struct:main::__anon5aa815230108	typeref:typename:const char *	file:
insert	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    iterator insert(const_iterator hint, const value_type& keyval) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:iterator
insert	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    iterator insert(const_iterator hint, value_type&& keyval) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:iterator
insert	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    std::pair<iterator, bool> insert(const value_type& keyval) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:std::pair<iterator,bool>
insert	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    std::pair<iterator, bool> insert(value_type&& keyval) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:std::pair<iterator,bool>
insert	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void insert(Iter first, Iter last) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:void
insert	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void insert(std::initializer_list<value_type> ilist) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:void
insert	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto insert(P&& value) -> std::pair<iterator, bool> {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:std::pair<iterator,bool>
insert	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto insert(const_iterator \/*hint*\/, P&& value) -> iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:iterator
insert	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto insert(const_iterator \/*hint*\/, value_type const& value) -> iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:iterator
insert	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto insert(const_iterator \/*hint*\/, value_type&& value) -> iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:iterator
insert	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto insert(value_type const& value) -> std::pair<iterator, bool> {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:std::pair<iterator,bool>
insert	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto insert(value_type&& value) -> std::pair<iterator, bool> {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:std::pair<iterator,bool>
insert	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    void insert(InputIt first, InputIt last) {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:void
insert	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    void insert(std::initializer_list<value_type> ilist) {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:void
insert	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    std::pair<iterator, bool> insert(const value_type& value)$/;"	f	class:emhash7::HashMap	typeref:typename:std::pair<iterator,bool>
insert	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    std::pair<iterator, bool> insert(value_type&& value)$/;"	f	class:emhash7::HashMap	typeref:typename:std::pair<iterator,bool>
insert	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    void insert(Iter first, Iter last)$/;"	f	class:emhash7::HashMap	typeref:typename:void
insert	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    void insert(std::initializer_list<value_type> ilist)$/;"	f	class:emhash7::HashMap	typeref:typename:void
insert	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    iterator insert(const_iterator, const value_type & value)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:iterator
insert	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    iterator insert(const_iterator, value_type && value)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:iterator
insert	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    std::pair<iterator, bool> insert(const value_type & value)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:std::pair<iterator,bool>
insert	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    std::pair<iterator, bool> insert(value_type && value)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:std::pair<iterator,bool>
insert	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    void insert(It begin, It end)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:void
insert	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    void insert(std::initializer_list<value_type> il)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:void
insert	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  std::pair<iterator, bool> insert(P&& value) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:std::pair<iterator,bool>
insert	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  void insert(InputIt first, InputIt last) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:void
insert	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  iterator insert(const_iterator hint, P&& value) {$/;"	f	class:tsl::robin_map	typeref:typename:iterator
insert	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  iterator insert(const_iterator hint, const value_type& value) {$/;"	f	class:tsl::robin_map	typeref:typename:iterator
insert	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  iterator insert(const_iterator hint, value_type&& value) {$/;"	f	class:tsl::robin_map	typeref:typename:iterator
insert	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  std::pair<iterator, bool> insert(P&& value) {$/;"	f	class:tsl::robin_map	typeref:typename:std::pair<iterator,bool>
insert	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  std::pair<iterator, bool> insert(const value_type& value) {$/;"	f	class:tsl::robin_map	typeref:typename:std::pair<iterator,bool>
insert	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  std::pair<iterator, bool> insert(value_type&& value) {$/;"	f	class:tsl::robin_map	typeref:typename:std::pair<iterator,bool>
insert	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  void insert(InputIt first, InputIt last) {$/;"	f	class:tsl::robin_map	typeref:typename:void
insert	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  void insert(std::initializer_list<value_type> ilist) {$/;"	f	class:tsl::robin_map	typeref:typename:void
insert	./vendor/STC/misc/examples/sortedmaps/listmap.c	/^void insert(Multimap* mmap, int key, const char* str)$/;"	f	typeref:typename:void
insertKeyPrepareEmptySpot	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    std::pair<size_t, InsertionState> insertKeyPrepareEmptySpot(OtherKey&& key) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:std::pair<size_t,InsertionState>
insertOrAssignImpl	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    std::pair<iterator, bool> insertOrAssignImpl(OtherKey&& key, Mapped&& obj) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:std::pair<iterator,bool>
insert_and_access_hmap_i32	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^static void insert_and_access_hmap_i32(picobench::state& s)$/;"	f	typeref:typename:void	file:
insert_and_access_hmap_str	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^static void insert_and_access_hmap_str(picobench::state& s)$/;"	f	typeref:typename:void	file:
insert_and_access_i32	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^static void insert_and_access_i32(picobench::state& s)$/;"	f	typeref:typename:void	file:
insert_and_access_i32	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^static void insert_and_access_i32(picobench::state& s)$/;"	f	typeref:typename:void	file:
insert_and_access_smap_i32	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^static void insert_and_access_smap_i32(picobench::state& s)$/;"	f	typeref:typename:void	file:
insert_and_access_smap_str	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^static void insert_and_access_smap_str(picobench::state& s)$/;"	f	typeref:typename:void	file:
insert_and_access_str	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^static void insert_and_access_str(picobench::state& s)$/;"	f	typeref:typename:void	file:
insert_and_access_str	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^static void insert_and_access_str(picobench::state& s)$/;"	f	typeref:typename:void	file:
insert_and_erase_hmap_u64	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^static void insert_and_erase_hmap_u64(picobench::state& s)$/;"	f	typeref:typename:void	file:
insert_and_erase_i32	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^static void insert_and_erase_i32(picobench::state& s)$/;"	f	typeref:typename:void	file:
insert_and_erase_i32	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^static void insert_and_erase_i32(picobench::state& s)$/;"	f	typeref:typename:void	file:
insert_and_erase_smap_i32	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^static void insert_and_erase_smap_i32(picobench::state& s)$/;"	f	typeref:typename:void	file:
insert_hint	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  iterator insert_hint(const_iterator hint, P&& value) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:iterator
insert_i32	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^static void insert_i32(picobench::state& s)$/;"	f	typeref:typename:void	file:
insert_impl	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  std::pair<iterator, bool> insert_impl(const K& key,$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:std::pair<iterator,bool>
insert_move	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void insert_move(Node&& keyval) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:void
insert_or_assign	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    iterator insert_or_assign(const_iterator hint, const key_type& key, Mapped&& obj) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:iterator
insert_or_assign	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    iterator insert_or_assign(const_iterator hint, key_type&& key, Mapped&& obj) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:iterator
insert_or_assign	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    std::pair<iterator, bool> insert_or_assign(const key_type& key, Mapped&& obj) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:std::pair<iterator,bool>
insert_or_assign	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    std::pair<iterator, bool> insert_or_assign(key_type&& key, Mapped&& obj) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:std::pair<iterator,bool>
insert_or_assign	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto insert_or_assign(K&& key, M&& mapped) -> std::pair<iterator, bool> {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:std::pair<iterator,bool>
insert_or_assign	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto insert_or_assign(Key const& key, M&& mapped) -> std::pair<iterator, bool> {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:std::pair<iterator,bool>
insert_or_assign	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto insert_or_assign(Key&& key, M&& mapped) -> std::pair<iterator, bool> {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:std::pair<iterator,bool>
insert_or_assign	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto insert_or_assign(const_iterator \/*hint*\/, K&& key, M&& mapped) -> iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:iterator
insert_or_assign	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto insert_or_assign(const_iterator \/*hint*\/, Key const& key, M&& mapped) -> iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:iterator
insert_or_assign	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto insert_or_assign(const_iterator \/*hint*\/, Key&& key, M&& mapped) -> iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:iterator
insert_or_assign	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    std::pair<iterator, bool> insert_or_assign(KeyT&& key, ValueT&& val) { return do_assign(std:/;"	f	class:emhash7::HashMap	typeref:typename:std::pair<iterator,bool>
insert_or_assign	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    std::pair<iterator, bool> insert_or_assign(const KeyT& key, ValueT&& val) { return do_assign/;"	f	class:emhash7::HashMap	typeref:typename:std::pair<iterator,bool>
insert_or_assign	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    std::pair<typename Table::iterator, bool> insert_or_assign(const key_type & key, M && m)$/;"	f	class:ska::flat_hash_map	typeref:typename:std::pair<typename Table::iterator,bool>
insert_or_assign	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    std::pair<typename Table::iterator, bool> insert_or_assign(key_type && key, M && m)$/;"	f	class:ska::flat_hash_map	typeref:typename:std::pair<typename Table::iterator,bool>
insert_or_assign	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    typename Table::iterator insert_or_assign(typename Table::const_iterator, const key_type & k/;"	f	class:ska::flat_hash_map	typeref:typename:Table::iterator
insert_or_assign	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    typename Table::iterator insert_or_assign(typename Table::const_iterator, key_type && key, M/;"	f	class:ska::flat_hash_map	typeref:typename:Table::iterator
insert_or_assign	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  iterator insert_or_assign(const_iterator hint, K&& key, M&& obj) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:iterator
insert_or_assign	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  std::pair<iterator, bool> insert_or_assign(K&& key, M&& obj) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:std::pair<iterator,bool>
insert_or_assign	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  iterator insert_or_assign(const_iterator hint, const key_type& k, M&& obj) {$/;"	f	class:tsl::robin_map	typeref:typename:iterator
insert_or_assign	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  iterator insert_or_assign(const_iterator hint, key_type&& k, M&& obj) {$/;"	f	class:tsl::robin_map	typeref:typename:iterator
insert_or_assign	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  std::pair<iterator, bool> insert_or_assign(const key_type& k, M&& obj) {$/;"	f	class:tsl::robin_map	typeref:typename:std::pair<iterator,bool>
insert_or_assign	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  std::pair<iterator, bool> insert_or_assign(key_type&& k, M&& obj) {$/;"	f	class:tsl::robin_map	typeref:typename:std::pair<iterator,bool>
insert_smap_i32	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^static void insert_smap_i32(picobench::state& s)$/;"	f	typeref:typename:void	file:
insert_unique	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline size_type insert_unique(K&& key, V&& val)$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
insert_unique	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline size_type insert_unique(const value_type& value)$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
insert_unique	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline size_type insert_unique(value_type&& value)$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
insert_value	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  void insert_value(std::size_t ibucket, distance_type dist_from_ideal_bucket,$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:void
insert_value_impl	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  void insert_value_impl(std::size_t ibucket,$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:void
insert_value_on_rehash	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  void insert_value_on_rehash(std::size_t ibucket,$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:void
inst	./vendor/STC/include/stc/priv/cregex_prv.c	/^    _Reinst*    inst;       \/* Reinstruction of the thread *\/$/;"	m	struct:_Relist	typeref:typename:_Reinst *	file:
instance_count	./src/flecs.h	/^    int32_t instance_count;       \/* Number of entities to iterate before next table *\/$/;"	m	struct:ecs_iter_t	typeref:typename:int32_t
instanced	./src/flecs.h	/^    Base& instanced() {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
instanced	./src/flecs.h	/^    bool instanced;$/;"	m	struct:ecs_filter_desc_t	typeref:typename:bool
instanced	./src/flecs.h	/^    static bool instanced() {$/;"	f	struct:flecs::_::each_delegate	typeref:typename:bool
instanced	./src/flecs.h	/^    static bool instanced() {$/;"	f	struct:flecs::_::find_delegate	typeref:typename:bool
instanced	./src/flecs.h	/^    static bool instanced() {$/;"	f	struct:flecs::_::iter_delegate	typeref:typename:bool
instances	./src/flecs.c	/^    ecs_map_t instances;        \/* Active instances for metric *\/$/;"	m	struct:EcsAlert	typeref:typename:ecs_map_t	file:
instcap	./vendor/STC/include/stc/priv/cregex_prv.c	/^    intptr_t instcap;$/;"	m	struct:_Parser	typeref:typename:intptr_t	file:
int128_opt	./vendor/fmt/include/base.h	/^enum class int128_opt {};$/;"	g	namespace:detail
int128_opt	./vendor/fmt/include/base.h	/^using int128_opt = __int128_t;  \/\/ An optional native 128-bit integer.$/;"	t	namespace:detail	typeref:typename:__int128_t
int128_type	./vendor/fmt/include/base.h	/^  int128_type,$/;"	e	enum:detail::type
int128_value	./vendor/fmt/include/base.h	/^    int128_opt int128_value;$/;"	m	union:detail::value::__anonea363bd9060a	typeref:typename:int128_opt
int_checker	./vendor/fmt/include/printf.h	/^template <> struct int_checker<true> {$/;"	s	namespace:detail
int_checker	./vendor/fmt/include/printf.h	/^template <bool IsSigned> struct int_checker {$/;"	s	namespace:detail
int_drop	./vendor/STC/misc/examples/smartpointers/arc_demo.c	/^void int_drop(int* x) {$/;"	f	typeref:typename:void
int_greater	./vendor/STC/misc/examples/priorityqueues/functor.c	/^static bool int_greater(const int* x, const int* y) { return *x > *y; }$/;"	f	typeref:typename:bool	file:
int_lambda	./vendor/STC/misc/examples/priorityqueues/functor.c	/^static bool int_lambda(const int* x, const int* y) { return (*x ^ 1) < (*y ^ 1); }$/;"	f	typeref:typename:bool	file:
int_less	./vendor/STC/misc/examples/priorityqueues/functor.c	/^static bool int_less(const int* x, const int* y) { return *x < *y; }$/;"	f	typeref:typename:bool	file:
int_type	./vendor/fmt/include/base.h	/^  int_type,$/;"	e	enum:detail::type
int_type	./vendor/fmt/include/chrono.h	/^  using int_type = typename Streambuf::int_type;$/;"	t	class:detail::formatbuf	typeref:typename:Streambuf::int_type
int_value	./vendor/fmt/include/base.h	/^    int int_value;$/;"	m	union:detail::value::__anonea363bd9060a	typeref:typename:int
integer_sequence	./vendor/fmt/include/ranges.h	/^template <typename T, T... N> struct integer_sequence {$/;"	s	namespace:detail
integer_sequence	./vendor/fmt/include/ranges.h	/^using integer_sequence = std::integer_sequence<T, N...>;$/;"	t	namespace:detail	typeref:typename:std::integer_sequence<T,N...>
interleaved	./vendor/STC/misc/examples/coroutines/cointerleave.c	/^cco_result interleaved(struct Generator* g)$/;"	f	typeref:typename:cco_result
interpupillaryDistance	./vendor/raylib5/include/raylib.h	/^    float interpupillaryDistance;   \/\/ IPD (distance between pupils) in meters$/;"	m	struct:VrDeviceInfo	typeref:typename:float
interrupted_by	./src/flecs.h	/^    ecs_entity_t interrupted_by;  \/* When set, system execution is interrupted *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_entity_t
interval	./src/flecs.h	/^    Base& interval(ecs_ftime_t interval) {$/;"	f	struct:flecs::system_builder_i	typeref:typename:Base &
interval	./src/flecs.h	/^    ecs_ftime_t interval() {$/;"	f	struct:flecs::timer	typeref:typename:ecs_ftime_t
interval	./src/flecs.h	/^    ecs_ftime_t interval;$/;"	m	struct:ecs_system_desc_t	typeref:typename:ecs_ftime_t
interval	./src/flecs.h	/^    timer& interval(ecs_ftime_t interval) {$/;"	f	struct:flecs::timer	typeref:typename:timer &
interval	./src/flecs.h	/^inline ecs_ftime_t system::interval() {$/;"	f	class:flecs::system	typeref:typename:ecs_ftime_t
interval	./src/flecs.h	/^inline void system::interval(ecs_ftime_t interval) {$/;"	f	class:flecs::system	typeref:typename:void
interval	./vendor/STC/include/stc/coroutine.h	/^typedef struct { double interval, start; } cco_timer;$/;"	m	struct:__anone7a129120408	typeref:typename:double
intlist	./vendor/STC/misc/examples/linkedlists/new_list.c	/^    list_i32 intlist;$/;"	m	struct:__anonb8bcd80c0108	typeref:typename:list_i32	file:
intvec	./vendor/STC/misc/examples/vectors/new_vec.c	/^    vec_i32 intvec;$/;"	m	struct:MyStruct	typeref:typename:vec_i32	file:
invalid	./src/flecs.c	/^    bool invalid;$/;"	m	struct:__anon7d4a41770708	typeref:typename:bool	file:
invalid_code_point	./vendor/fmt/include/format.h	/^constexpr FMT_INLINE_VARIABLE uint32_t invalid_code_point = ~uint32_t();$/;"	v	namespace:detail	typeref:typename:FMT_INLINE_VARIABLE uint32_t
invoke	./src/flecs.h	/^    flecs::entity invoke(ecs_iter_t *iter) const {$/;"	f	struct:flecs::_::find_delegate	typeref:typename:flecs::entity
invoke	./src/flecs.h	/^    static void invoke(ecs_iter_t *iter) {$/;"	f	struct:flecs::_::entity_observer_delegate	typeref:typename:void
invoke	./src/flecs.h	/^    static void invoke(ecs_iter_t *iter) {$/;"	f	struct:flecs::_::entity_payload_observer_delegate	typeref:typename:void
invoke	./src/flecs.h	/^    void invoke(ecs_iter_t *iter) const {$/;"	f	struct:flecs::_::each_delegate	typeref:typename:void
invoke	./src/flecs.h	/^    void invoke(ecs_iter_t *iter) const {$/;"	f	struct:flecs::_::iter_delegate	typeref:typename:void
invoke_callback	./src/flecs.h	/^    static flecs::entity invoke_callback($/;"	f	struct:flecs::_::find_delegate	typeref:typename:flecs::entity
invoke_callback	./src/flecs.h	/^    static flecs::entity invoke_callback(ecs_iter_t *iter, const Func& func, $/;"	f	struct:flecs::_::find_delegate	typeref:typename:flecs::entity
invoke_callback	./src/flecs.h	/^    static void invoke_callback($/;"	f	struct:flecs::_::each_delegate	typeref:typename:void
invoke_callback	./src/flecs.h	/^    static void invoke_callback($/;"	f	struct:flecs::_::entity_with_delegate_impl	typeref:typename:void
invoke_callback	./src/flecs.h	/^    static void invoke_callback(const Func& f, size_t arg, ArrayType& ptrs, $/;"	f	struct:flecs::_::entity_with_delegate_impl	typeref:typename:void
invoke_callback	./src/flecs.h	/^    static void invoke_callback(ecs_iter_t *iter, const Func& func, $/;"	f	struct:flecs::_::each_delegate	typeref:typename:void
invoke_callback	./src/flecs.h	/^    static void invoke_callback(ecs_iter_t *iter, const Func& func, $/;"	f	struct:flecs::_::iter_delegate	typeref:typename:void
invoke_callback	./src/flecs.h	/^    static void invoke_callback(ecs_iter_t *iter, const Func& func, size_t, $/;"	f	struct:flecs::_::iter_delegate	typeref:typename:void
invoke_ensure	./src/flecs.h	/^    static bool invoke_ensure(world_t *world, entity_t id, const Func& func) {$/;"	f	struct:flecs::_::entity_with_delegate_impl	typeref:typename:bool
invoke_get	./src/flecs.h	/^    static bool invoke_get(world_t *world, entity_t e, const Func& func) {$/;"	f	struct:flecs::_::entity_with_delegate_impl	typeref:typename:bool
invoke_read	./src/flecs.h	/^    static bool invoke_read(world_t *world, entity_t e, const Func& func) {$/;"	f	struct:flecs::_::entity_with_delegate_impl	typeref:typename:bool
invoke_write	./src/flecs.h	/^    static bool invoke_write(world_t *world, entity_t e, const Func& func) {$/;"	f	struct:flecs::_::entity_with_delegate_impl	typeref:typename:bool
ipaddr	./src/flecs.c	/^    const char *ipaddr;$/;"	m	struct:ecs_http_server_t	typeref:typename:const char *	file:
ipaddr	./src/flecs.h	/^    char *ipaddr;       \/**< Interface address (optional, default = 0.0.0.0) *\/$/;"	m	struct:__anon7d4a417c0e08	typeref:typename:char *
ipaddr	./src/flecs.h	/^    const char *ipaddr;               \/**< Interface to listen on (optional) *\/$/;"	m	struct:__anon7d4a417c0d08	typeref:typename:const char *
ipair	./vendor/STC/misc/examples/sortedmaps/smap_insert.c	/^    typedef vec_ii_value ipair;$/;"	t	function:main	typeref:typename:vec_ii_value	file:
ipair_cmp	./vendor/STC/misc/examples/mixed/inits.c	/^inline static int ipair_cmp(const ipair_t* a, const ipair_t* b) {$/;"	f	typeref:typename:int	file:
ipair_t	./vendor/STC/misc/examples/mixed/inits.c	/^typedef struct {int x, y;} ipair_t;$/;"	t	typeref:struct:__anon7018a51f0108	file:
iptr_t	./src/flecs.h	/^using iptr_t = ecs_iptr_t;$/;"	t	namespace:flecs	typeref:typename:ecs_iptr_t
is	./src/flecs.c	/^    } is;$/;"	m	struct:ecs_cmd_t	typeref:union:ecs_cmd_t::__anon7d4a4177010a	file:
is	./src/flecs.c	/^    } is;$/;"	m	struct:ecs_rule_op_ctx_t	typeref:union:ecs_rule_op_ctx_t::__anon7d4a4177340a	file:
is_a	./src/flecs.h	/^    Self& is_a() {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
is_a	./src/flecs.h	/^    Self& is_a(entity_t second) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
is_actual	./src/flecs.h	/^struct is_actual {$/;"	s	namespace:flecs
is_alive	./src/flecs.h	/^    bool is_alive() const {$/;"	f	struct:flecs::entity_view	typeref:typename:bool
is_alive	./src/flecs.h	/^    bool is_alive(flecs::entity_t e) const {$/;"	f	struct:flecs::world	typeref:typename:bool
is_any_pair	./src/flecs.c	/^bool is_any_pair($/;"	f	typeref:typename:bool	file:
is_arithmetic	./vendor/fmt/include/base.h	/^  auto is_arithmetic() const -> bool {$/;"	f	class:basic_format_arg	typeref:typename:bool
is_arithmetic_type	./vendor/fmt/include/base.h	/^constexpr auto is_arithmetic_type(type t) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
is_at_desired_position	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    bool is_at_desired_position() const$/;"	f	struct:ska::detailv3::sherwood_v3_entry	typeref:typename:bool
is_avalanching	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using is_avalanching = void;$/;"	t	struct:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::hash	typeref:typename:void
is_back_insert_iterator	./vendor/fmt/include/base.h	/^struct is_back_insert_iterator : std::false_type {};$/;"	s	namespace:detail
is_back_insert_iterator	./vendor/fmt/include/base.h	/^struct is_back_insert_iterator<$/;"	s	namespace:detail
is_back_insert_iterator	./vendor/fmt/include/base.h	/^struct is_back_insert_iterator<basic_appender<T>> : std::true_type {};$/;"	s	namespace:detail
is_baseline	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        bool is_baseline;$/;"	m	struct:picobench::report::benchmark	typeref:typename:bool
is_baseline	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        bool is_baseline;$/;"	m	struct:picobench::report::problem_space_benchmark	typeref:typename:bool
is_big_endian	./vendor/fmt/include/format.h	/^inline auto is_big_endian() -> bool {$/;"	f	namespace:detail	typeref:typename:bool
is_bit_reference_like	./vendor/fmt/include/std.h	/^struct is_bit_reference_like<std::__bit_const_reference<C>> {$/;"	s	namespace:detail
is_bit_reference_like	./vendor/fmt/include/std.h	/^template <typename T> struct is_bit_reference_like {$/;"	s	namespace:detail
is_buffer_appender	./vendor/fmt/include/base.h	/^struct is_buffer_appender : std::false_type {};$/;"	s	namespace:detail
is_buffer_appender	./vendor/fmt/include/base.h	/^struct is_buffer_appender<$/;"	s	namespace:detail
is_buffered	./vendor/fmt/include/format-inl.h	/^  auto is_buffered() const -> bool { return false; }$/;"	f	class:detail::fallback_file	typeref:typename:bool
is_buffered	./vendor/fmt/include/format-inl.h	/^  auto is_buffered() const -> bool {$/;"	f	class:detail::apple_file	typeref:typename:bool
is_buffered	./vendor/fmt/include/format-inl.h	/^  auto is_buffered() const -> bool {$/;"	f	class:detail::glibc_file	typeref:typename:bool
is_callable	./src/flecs.h	/^    static constexpr bool is_callable = false;$/;"	m	struct:flecs::_::function_traits_impl	typeref:typename:bool
is_callable	./src/flecs.h	/^    static constexpr bool is_callable = true;$/;"	m	struct:flecs::_::function_traits_defs	typeref:typename:bool
is_callable	./src/flecs.h	/^struct is_callable {$/;"	s	namespace:flecs
is_char	./vendor/fmt/include/base.h	/^template <> struct is_char<char> : std::true_type {};$/;"	s
is_char	./vendor/fmt/include/base.h	/^template <typename T> struct is_char : std::false_type {};$/;"	s
is_char	./vendor/fmt/include/xchar.h	/^struct is_char<char8_t> : bool_constant<detail::is_utf8_enabled()> {};$/;"	s
is_char	./vendor/fmt/include/xchar.h	/^template <> struct is_char<char16_t> : std::true_type {};$/;"	s
is_char	./vendor/fmt/include/xchar.h	/^template <> struct is_char<char32_t> : std::true_type {};$/;"	s
is_char	./vendor/fmt/include/xchar.h	/^template <> struct is_char<wchar_t> : std::true_type {};$/;"	s
is_classic_	./vendor/fmt/include/chrono.h	/^  const bool is_classic_;$/;"	m	class:detail::tm_writer	typeref:typename:const bool
is_collection	./src/flecs.c	/^    bool is_collection;$/;"	m	struct:json_serializer_ctx_t	typeref:typename:bool	file:
is_collection	./src/flecs.h	/^    bool is_collection() {$/;"	f	struct:flecs::cursor	typeref:typename:bool
is_collection	./src/flecs.h	/^    bool is_collection;       \/**< Is the scope iterating elements? *\/$/;"	m	struct:ecs_meta_scope_t	typeref:typename:bool
is_compile_string	./vendor/fmt/include/base.h	/^using is_compile_string = std::is_base_of<compile_string, S>;$/;"	t	namespace:detail	typeref:typename:std::is_base_of<compile_string,S>
is_compiled_format	./vendor/fmt/include/compile.h	/^struct is_compiled_format<code_unit<Char>> : std::true_type {};$/;"	s	namespace:detail
is_compiled_format	./vendor/fmt/include/compile.h	/^struct is_compiled_format<concat<L, R>> : std::true_type {};$/;"	s	namespace:detail
is_compiled_format	./vendor/fmt/include/compile.h	/^struct is_compiled_format<field<Char, T, N>> : std::true_type {};$/;"	s	namespace:detail
is_compiled_format	./vendor/fmt/include/compile.h	/^struct is_compiled_format<runtime_named_field<Char>> : std::true_type {};$/;"	s	namespace:detail
is_compiled_format	./vendor/fmt/include/compile.h	/^struct is_compiled_format<spec_field<Char, T, N>> : std::true_type {};$/;"	s	namespace:detail
is_compiled_format	./vendor/fmt/include/compile.h	/^struct is_compiled_format<text<Char>> : std::true_type {};$/;"	s	namespace:detail
is_compiled_format	./vendor/fmt/include/compile.h	/^template <typename T> struct is_compiled_format : std::false_type {};$/;"	s	namespace:detail
is_compiled_string	./vendor/fmt/include/compile.h	/^struct is_compiled_string : std::is_base_of<compiled_string, S> {};$/;"	s	namespace:detail
is_const	./src/flecs.c	/^    bool is_const;$/;"	m	struct:meta_type_t	typeref:typename:bool	file:
is_const_p	./src/flecs.h	/^using is_const_p = is_const< remove_pointer_t<T> >;$/;"	t	namespace:flecs	typeref:typename:is_const<remove_pointer_t<T>>
is_constant_evaluated	./vendor/fmt/include/base.h	/^constexpr auto is_constant_evaluated(bool default_value = false) noexcept$/;"	f	namespace:detail	typeref:typename:auto
is_container_adaptor_like	./vendor/fmt/include/ranges.h	/^template <typename T> class is_container_adaptor_like {$/;"	c	namespace:detail
is_contiguous	./vendor/fmt/include/base.h	/^template <typename T> struct is_contiguous : std::false_type {};$/;"	s
is_contiguous	./vendor/fmt/include/format.h	/^struct is_contiguous<basic_memory_buffer<T, SIZE, Allocator>> : std::true_type {$/;"	s
is_contiguous	./vendor/fmt/include/format.h	/^struct is_contiguous<std::basic_string<Char, Traits, Allocator>>$/;"	s
is_copy_trivially	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    static constexpr bool is_copy_trivially()$/;"	f	class:emhash7::HashMap	typeref:typename:bool
is_debug	./vendor/fmt/include/ranges.h	/^  bool is_debug = false;$/;"	m	struct:range_formatter	typeref:typename:bool
is_deferred	./src/flecs.c	/^    bool is_deferred;$/;"	m	struct:ecs_suspend_readonly_state_t	typeref:typename:bool	file:
is_deferred	./src/flecs.h	/^    bool is_deferred() const {$/;"	f	struct:flecs::world	typeref:typename:bool
is_detected	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^using is_detected = typename detail::detector<detail::nonesuch, void, Op, Args...>::value_t;$/;"	t	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail	typeref:typename:detail::detector<detail::nonesuch,void,Op,Args...>::value_t
is_detected_v	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^constexpr bool is_detected_v = is_detected<Op, Args...>::value;$/;"	v	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail	typeref:typename:bool
is_dirty	./src/flecs.c	/^    bool is_dirty;                   \/* Should monitors be evaluated? *\/$/;"	m	struct:ecs_monitor_set_t	typeref:typename:bool	file:
is_dirty	./src/flecs.c	/^    bool is_dirty;                   \/* Should queries be rematched? *\/$/;"	m	struct:ecs_monitor_t	typeref:typename:bool	file:
is_double_double	./vendor/fmt/include/format.h	/^using is_double_double = bool_constant<std::numeric_limits<T>::digits == 106>;$/;"	t	namespace:detail	typeref:typename:bool_constant<std::numeric_limits<T>::digits==106>
is_empty	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    bool is_empty() const$/;"	f	struct:ska::detailv3::sherwood_v3_entry	typeref:typename:bool
is_empty_scope	./src/flecs.h	/^    bool is_empty_scope;      \/**< Was scope populated (for collections) *\/$/;"	m	struct:ecs_meta_scope_t	typeref:typename:bool
is_entity	./src/flecs.h	/^    bool is_entity() const {$/;"	f	struct:flecs::id	typeref:typename:bool
is_exotic_char	./vendor/fmt/include/xchar.h	/^using is_exotic_char = bool_constant<!std::is_same<T, char>::value>;$/;"	t	namespace:detail	typeref:typename:bool_constant<!std::is_same<T,char>::value>
is_fast_float	./vendor/fmt/include/format.h	/^struct is_fast_float : bool_constant<std::numeric_limits<T>::is_iec559 &&$/;"	s	namespace:detail
is_fast_float	./vendor/fmt/include/format.h	/^template <typename T> struct is_fast_float<T, false> : std::false_type {};$/;"	s	namespace:detail
is_fixed_size	./src/flecs.c	/^    bool is_fixed_size;$/;"	m	struct:meta_params_t	typeref:typename:bool	file:
is_flat	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    static constexpr bool is_flat = IsFlat;$/;"	m	class:robin_hood::detail::Table	typeref:typename:bool
is_flecs_constructible	./src/flecs.h	/^struct is_flecs_constructible {$/;"	s	namespace:flecs
is_float128	./vendor/fmt/include/format.h	/^template <typename T> using is_float128 = std::is_same<T, float128>;$/;"	t	namespace:detail	typeref:typename:std::is_same<T,float128>
is_floating_point	./vendor/fmt/include/format.h	/^using is_floating_point =$/;"	t	namespace:detail	typeref:typename:bool_constant<std::is_floating_point<T>::value||is_float128<T>::value>
is_formattable	./vendor/fmt/include/base.h	/^using is_formattable = bool_constant<!std::is_base_of<$/;"	t
is_formattable_delayed	./vendor/fmt/include/ranges.h	/^struct is_formattable_delayed$/;"	s	namespace:detail
is_free	./src/flecs.h	/^    bool is_free;$/;"	m	struct:ecs_stack_cursor_t	typeref:typename:bool
is_full	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] auto is_full() const -> bool {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:bool
is_inline_array	./src/flecs.h	/^    bool is_inline_array;     \/**< Is the scope iterating an inline array? *\/$/;"	m	struct:ecs_meta_scope_t	typeref:typename:bool
is_integer	./vendor/fmt/include/format-inl.h	/^    bool is_integer;$/;"	m	struct:detail::dragonbox::cache_accessor::compute_mul_parity_result	typeref:typename:bool
is_integer	./vendor/fmt/include/format-inl.h	/^    bool is_integer;$/;"	m	struct:detail::dragonbox::cache_accessor::compute_mul_result	typeref:typename:bool
is_integer	./vendor/fmt/include/format.h	/^using is_integer =$/;"	t	namespace:detail
is_integral	./vendor/fmt/include/base.h	/^  auto is_integral() const -> bool { return detail::is_integral_type(type_); }$/;"	f	class:basic_format_arg	typeref:typename:bool
is_integral	./vendor/fmt/include/format.h	/^template <> struct is_integral<int128_opt> : std::true_type {};$/;"	s	namespace:detail
is_integral	./vendor/fmt/include/format.h	/^template <> struct is_integral<uint128_t> : std::true_type {};$/;"	s	namespace:detail
is_integral	./vendor/fmt/include/format.h	/^template <typename T> struct is_integral : std::is_integral<T> {};$/;"	s	namespace:detail
is_integral_type	./vendor/fmt/include/base.h	/^constexpr auto is_integral_type(type t) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
is_key_value	./src/flecs.c	/^    bool is_key_value;$/;"	m	struct:meta_params_t	typeref:typename:bool	file:
is_left_endpoint_integer_shorter_interval	./vendor/fmt/include/format-inl.h	/^auto is_left_endpoint_integer_shorter_interval(int exponent) noexcept -> bool {$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
is_locale	./vendor/fmt/include/format.h	/^struct is_locale : std::false_type {};$/;"	s	namespace:detail
is_locale	./vendor/fmt/include/format.h	/^struct is_locale<T, void_t<decltype(T::classic())>> : std::true_type {};$/;"	s	namespace:detail
is_locking	./vendor/fmt/include/base.h	/^FMT_CONSTEXPR inline auto is_locking() -> bool {$/;"	f	namespace:detail	typeref:typename:bool
is_locking	./vendor/fmt/include/base.h	/^template <typename T = int> FMT_CONSTEXPR inline auto is_locking() -> bool {$/;"	f	namespace:detail	typeref:typename:bool
is_map	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    static constexpr bool is_map = !std::is_void<T>::value;$/;"	m	class:robin_hood::detail::Table	typeref:typename:bool
is_map	./vendor/fmt/include/ranges.h	/^template <typename T> class is_map {$/;"	c	namespace:detail
is_map_v	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^constexpr bool is_map_v = !std::is_void_v<Mapped>;$/;"	v	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail	typeref:typename:bool
is_module	./src/flecs.c	/^    bool is_module;$/;"	m	struct:__anon7d4a41771908	typeref:typename:bool	file:
is_name_start	./vendor/fmt/include/base.h	/^template <typename Char> constexpr auto is_name_start(Char c) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
is_named_arg	./vendor/fmt/include/base.h	/^struct is_named_arg<named_arg<Char, T>> : std::true_type {};$/;"	s	namespace:detail
is_named_arg	./vendor/fmt/include/base.h	/^template <typename T> struct is_named_arg : std::false_type {};$/;"	s	namespace:detail
is_named_arg	./vendor/fmt/include/format.h	/^struct is_named_arg<statically_named_arg<T, Char, N, Str>> : std::true_type {};$/;"	s	namespace:detail
is_negative	./vendor/fmt/include/format.h	/^constexpr auto is_negative(T value) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
is_negative	./vendor/fmt/include/format.h	/^constexpr auto is_negative(T) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
is_neither_convertible_v	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^constexpr bool is_neither_convertible_v = !std::is_convertible_v<From, To1> && !std::is_converti/;"	v	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail	typeref:typename:bool
is_not_0	./src/flecs.h	/^    static constexpr underlying_type_t<E> is_not_0() {$/;"	f	struct:flecs::_::enum_reflection	typeref:typename:underlying_type_t<E>
is_output_iterator	./vendor/fmt/include/base.h	/^struct is_output_iterator : std::false_type {};$/;"	s	namespace:detail
is_output_iterator	./vendor/fmt/include/base.h	/^struct is_output_iterator<$/;"	s	namespace:detail
is_output_iterator	./vendor/fmt/include/base.h	/^template <> struct is_output_iterator<appender, char> : std::true_type {};$/;"	s	namespace:detail
is_packed	./vendor/fmt/include/base.h	/^  constexpr auto is_packed() const -> bool {$/;"	f	class:basic_format_args	typeref:typename:bool
is_pair	./src/flecs.h	/^    bool is_pair() const {$/;"	f	struct:flecs::id	typeref:typename:bool
is_pair	./src/flecs.h	/^struct is_pair {$/;"	s	namespace:flecs
is_partial	./src/flecs.c	/^    bool is_partial;$/;"	m	struct:meta_member_t	typeref:typename:bool	file:
is_power_of_two	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^  static constexpr bool is_power_of_two(std::size_t value) {$/;"	f	class:tsl::rh::power_of_two_growth_policy	typeref:typename:bool
is_power_of_two_policy	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^struct is_power_of_two_policy : std::false_type {};$/;"	s	namespace:tsl::detail_robin_hash
is_power_of_two_policy	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^struct is_power_of_two_policy<tsl::rh::power_of_two_growth_policy<GrowthFactor>>$/;"	s	namespace:tsl::detail_robin_hash
is_prime	./vendor/STC/misc/examples/coroutines/coroutines.c	/^bool is_prime(long long i) {$/;"	f	typeref:typename:bool
is_primitive_scope	./src/flecs.h	/^    bool is_primitive_scope;  \/**< If in root scope, this allows for a push for primitive types/;"	m	struct:ecs_meta_cursor_t	typeref:typename:bool
is_printable	./vendor/fmt/include/format-inl.h	/^FMT_FUNC auto is_printable(uint32_t cp) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
is_printable	./vendor/fmt/include/format-inl.h	/^inline auto is_printable(uint16_t x, const singleton* singletons,$/;"	f	namespace:detail	typeref:typename:bool
is_ptr	./src/flecs.c	/^    bool is_ptr;$/;"	m	struct:meta_type_t	typeref:typename:bool	file:
is_range	./vendor/fmt/include/ranges.h	/^template <typename T, typename Char> struct is_range {$/;"	s
is_range_	./vendor/fmt/include/ranges.h	/^struct is_range_<T, void>$/;"	s	namespace:detail
is_range_	./vendor/fmt/include/ranges.h	/^template <typename T, typename _ = void> struct is_range_ : std::false_type {};$/;"	s	namespace:detail
is_readonly	./src/flecs.c	/^    bool is_readonly;$/;"	m	struct:ecs_suspend_readonly_state_t	typeref:typename:bool	file:
is_readonly	./src/flecs.h	/^    bool is_readonly() const {$/;"	f	struct:flecs::world	typeref:typename:bool
is_readonly	./src/flecs.h	/^    bool is_readonly(int32_t index) const {$/;"	f	struct:flecs::iter	typeref:typename:bool
is_ref	./src/flecs.h	/^    bool is_ref;$/;"	m	struct:flecs::_::term_ptr	typeref:typename:bool
is_reference_wrapper	./vendor/fmt/include/args.h	/^struct is_reference_wrapper<std::reference_wrapper<T>> : std::true_type {};$/;"	s	namespace:detail
is_reference_wrapper	./vendor/fmt/include/args.h	/^template <typename T> struct is_reference_wrapper : std::false_type {};$/;"	s	namespace:detail
is_rgb	./vendor/fmt/include/color.h	/^  bool is_rgb;$/;"	m	struct:detail::color_type	typeref:typename:bool
is_same_arithmetic_type	./vendor/fmt/include/chrono.h	/^struct is_same_arithmetic_type$/;"	s	namespace:detail
is_self	./src/flecs.h	/^    bool is_self(int32_t index) const {$/;"	f	struct:flecs::iter	typeref:typename:bool
is_set	./src/flecs.h	/^    bool is_set() {$/;"	f	struct:flecs::term	typeref:typename:bool
is_set	./src/flecs.h	/^    bool is_set(int32_t index) const {$/;"	f	struct:flecs::iter	typeref:typename:bool
is_set	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    static constexpr bool is_set = !is_map;$/;"	m	class:robin_hood::detail::Table	typeref:typename:bool
is_set	./vendor/fmt/include/ranges.h	/^template <typename T> class is_set {$/;"	c	namespace:detail
is_signed	./vendor/fmt/include/format.h	/^using is_signed =$/;"	t	namespace:detail	typeref:typename:std::integral_constant<bool,std::numeric_limits<T>::is_signed||std::is_same<T,int128_opt>::value>
is_stage	./src/flecs.h	/^    bool is_stage() const {$/;"	f	struct:flecs::world	typeref:typename:bool
is_statically_named_arg	./vendor/fmt/include/base.h	/^template <typename T> struct is_statically_named_arg : std::false_type {};$/;"	s	namespace:detail
is_statically_named_arg	./vendor/fmt/include/format.h	/^struct is_statically_named_arg<statically_named_arg<T, Char, N, Str>>$/;"	s	namespace:detail
is_std_string_like	./vendor/fmt/include/base.h	/^struct is_std_string_like : std::false_type {};$/;"	s	namespace:detail
is_std_string_like	./vendor/fmt/include/base.h	/^struct is_std_string_like<T, void_t<decltype(std::declval<T>().find_first_of($/;"	s	namespace:detail
is_steady	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    static const bool is_steady = true;$/;"	m	struct:picobench::high_res_clock	typeref:typename:const bool
is_struct	./src/flecs.c	/^    bool is_struct;$/;"	m	struct:json_serializer_ctx_t	typeref:typename:bool	file:
is_supported_floating_point	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto is_supported_floating_point(T) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
is_transparent	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    static constexpr bool is_transparent =$/;"	m	class:robin_hood::detail::Table	typeref:typename:bool
is_transparent	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^  using is_transparent = void;$/;"	t	struct:string_hash	typeref:typename:void	file:
is_transparent	./vendor/STC/misc/benchmarks/various/string_bench_STD.cpp	/^    using is_transparent = void;$/;"	t	struct:MyEqual	typeref:typename:void	file:
is_transparent	./vendor/STC/misc/benchmarks/various/string_bench_STD.cpp	/^    using is_transparent = void;$/;"	t	struct:string_hash	typeref:typename:void	file:
is_transparent_tag	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^struct is_transparent_tag {};$/;"	s	namespace:robin_hood
is_transparent_v	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^constexpr bool is_transparent_v = is_detected_v<detect_is_transparent, Hash> && is_detected_v<de/;"	v	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail	typeref:typename:bool
is_triviall_destructable	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    static constexpr bool is_triviall_destructable()$/;"	f	class:emhash7::HashMap	typeref:typename:bool
is_true	./src/flecs.h	/^    bool is_true() const {$/;"	f	struct:flecs::iterable	typeref:typename:bool
is_true	./src/flecs.h	/^    bool is_true() {$/;"	f	struct:flecs::iter_iterable	typeref:typename:bool
is_tuple_formattable	./vendor/fmt/include/ranges.h	/^template <typename T, typename C> struct is_tuple_formattable {$/;"	s
is_tuple_formattable_	./vendor/fmt/include/ranges.h	/^class is_tuple_formattable_ {$/;"	c	namespace:detail
is_tuple_formattable_	./vendor/fmt/include/ranges.h	/^template <typename T, typename C> class is_tuple_formattable_<T, C, true> {$/;"	c	namespace:detail
is_tuple_like	./vendor/fmt/include/ranges.h	/^template <typename T> struct is_tuple_like {$/;"	s
is_tuple_like_	./vendor/fmt/include/ranges.h	/^template <typename T> class is_tuple_like_ {$/;"	c	namespace:detail
is_unpacked_bit	./vendor/fmt/include/base.h	/^enum : unsigned long long { is_unpacked_bit = 1ULL << 63 };$/;"	e	enum:detail::__anonea363bd90b03
is_utf8_enabled	./vendor/fmt/include/base.h	/^constexpr auto is_utf8_enabled() -> bool {$/;"	f	namespace:detail	typeref:typename:bool
is_valid	./src/flecs.h	/^    bool is_valid() const {$/;"	f	struct:flecs::entity_view	typeref:typename:bool
is_valid	./src/flecs.h	/^    bool is_valid() const {$/;"	f	struct:flecs::rule_base	typeref:typename:bool
is_valid	./src/flecs.h	/^    bool is_valid(E value) {$/;"	f	struct:flecs::enum_data	typeref:typename:bool
is_valid	./src/flecs.h	/^    bool is_valid(flecs::entity_t e) const {$/;"	f	struct:flecs::world	typeref:typename:bool
is_valid	./src/flecs.h	/^    bool is_valid(underlying_type_t<E> value) {$/;"	f	struct:flecs::enum_data	typeref:typename:bool
is_value_set	./src/flecs.c	/^    bool is_value_set;$/;"	m	struct:meta_constant_t	typeref:typename:bool	file:
is_variant_formattable	./vendor/fmt/include/std.h	/^template <typename T, typename C> struct is_variant_formattable {$/;"	s
is_variant_formattable_	./vendor/fmt/include/std.h	/^template <typename T, typename C> class is_variant_formattable_ {$/;"	c	namespace:detail
is_variant_like	./vendor/fmt/include/std.h	/^template <typename T> struct is_variant_like {$/;"	s
is_variant_like_	./vendor/fmt/include/std.h	/^struct is_variant_like_<std::variant<Types...>> : std::true_type {};$/;"	s	namespace:detail
is_variant_like_	./vendor/fmt/include/std.h	/^template <typename> struct is_variant_like_ : std::false_type {};$/;"	s	namespace:detail
is_wildcard	./src/flecs.h	/^    bool is_wildcard() const {$/;"	f	struct:flecs::id	typeref:typename:bool
is_zero_int	./vendor/fmt/include/printf.h	/^struct is_zero_int {$/;"	s	namespace:detail
isa_stmt	./src/flecs.c	/^    bool isa_stmt;$/;"	m	struct:__anon7d4a41771908	typeref:typename:bool	file:
isfinite	./vendor/fmt/include/chrono.h	/^inline auto isfinite(T) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
isfinite	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto isfinite(T value) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
isfinite	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR20 auto isfinite(T value) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
isnan	./vendor/fmt/include/format.h	/^template <typename T> constexpr auto isnan(T value) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
iso_week_num	./vendor/fmt/include/chrono.h	/^  auto iso_week_num(int tm_yday, int tm_wday) const noexcept -> int {$/;"	f	class:detail::tm_writer	typeref:typename:auto
iso_year_weeks	./vendor/fmt/include/chrono.h	/^  auto iso_year_weeks(long long curr_year) const noexcept -> int {$/;"	f	class:detail::tm_writer	typeref:typename:auto
it	./src/flecs.c	/^    ecs_iter_t *it;               \/* Iterator *\/$/;"	m	struct:__anon7d4a41773708	typeref:typename:ecs_iter_t *	file:
it	./src/flecs.c	/^    ecs_iter_t *it;$/;"	m	struct:ecs_entity_filter_iter_t	typeref:typename:ecs_iter_t *	file:
it	./src/flecs.c	/^    ecs_table_cache_iter_t it;$/;"	m	struct:__anon7d4a41772508	typeref:typename:ecs_table_cache_iter_t	file:
it	./src/flecs.c	/^    ecs_table_cache_iter_t it;$/;"	m	struct:__anon7d4a41773308	typeref:typename:ecs_table_cache_iter_t	file:
it	./src/flecs.h	/^    ecs_map_iter_t it;$/;"	m	struct:__anon7d4a417c0508	typeref:typename:ecs_map_iter_t
it	./src/flecs.h	/^    ecs_table_cache_iter_t it;$/;"	m	struct:ecs_term_iter_t	typeref:typename:ecs_table_cache_iter_t
it	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^        EntryPointer it;$/;"	m	struct:ska::detailv3::sherwood_v3_table::convertible_to_iterator	typeref:typename:EntryPointer
it	./vendor/STC/misc/examples/coroutines/cointerleave.c	/^    IVec_iter it;$/;"	m	struct:GenValue	typeref:typename:IVec_iter	file:
italic	./vendor/fmt/include/color.h	/^  italic = 1 << 2,$/;"	e	enum:emphasis
iter	./src/flecs.h	/^    T iter(Func&& func) {$/;"	f	struct:flecs::_::node_builder	typeref:typename:T
iter	./src/flecs.h	/^    iter(ecs_iter_t *it) : m_iter(it) {$/;"	f	struct:flecs::iter
iter	./src/flecs.h	/^    void iter(Func&& func) const { $/;"	f	struct:flecs::iterable	typeref:typename:void
iter	./src/flecs.h	/^    void iter(flecs::entity e, Func&& func) const {$/;"	f	struct:flecs::iterable	typeref:typename:void
iter	./src/flecs.h	/^    void iter(flecs::iter& it, Func&& func) const {$/;"	f	struct:flecs::iterable	typeref:typename:void
iter	./src/flecs.h	/^    void iter(flecs::world_t *world, Func&& func) const {$/;"	f	struct:flecs::iterable	typeref:typename:void
iter	./src/flecs.h	/^    } iter;                       \/* Iterator specific data *\/$/;"	m	struct:ecs_iter_private_t	typeref:union:ecs_iter_private_t::__anon7d4a417c020a
iter	./src/flecs.h	/^iter_iterable<Components...> iterable<Components...>::iter(flecs::world_t *world) const$/;"	f	class:flecs::iterable	typeref:typename:iter_iterable<Components...>
iter	./src/flecs.h	/^struct iter {$/;"	s	namespace:flecs
iter_count	./src/flecs.c	/^    int32_t iter_count;$/;"	m	struct:ecs_pipeline_state_t	typeref:typename:int32_t	file:
iter_delegate	./src/flecs.h	/^    explicit iter_delegate(Func&& func) noexcept $/;"	f	struct:flecs::_::iter_delegate
iter_delegate	./src/flecs.h	/^    explicit iter_delegate(const Func& func) noexcept $/;"	f	struct:flecs::_::iter_delegate
iter_delegate	./src/flecs.h	/^struct iter_delegate : delegate {$/;"	s	namespace:flecs::_
iter_iterable	./src/flecs.h	/^    iter_iterable(Iterable *it, flecs::world_t *world) $/;"	f	struct:flecs::iter_iterable
iter_iterable	./src/flecs.h	/^struct iter_iterable final : iterable<Components...> {$/;"	s	namespace:flecs
iter_stack	./src/flecs.c	/^    ecs_stack_t iter_stack;$/;"	m	struct:ecs_stage_allocators_t	typeref:typename:ecs_stack_t	file:
iter_t	./src/flecs.h	/^using iter_t = ecs_iter_t;$/;"	t	namespace:flecs	typeref:typename:ecs_iter_t
iter_t	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^        constexpr iter_t(iter_t<OtherIsConst> const& other) noexcept$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector::iter_t
iter_t	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^        constexpr iter_t(ptr_t data, size_t idx) noexcept$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector::iter_t
iter_t	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    class iter_t {$/;"	c	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector
iter_to_json_desc_t	./src/flecs.h	/^using iter_to_json_desc_t = ecs_iter_to_json_desc_t;$/;"	t	namespace:flecs	typeref:typename:ecs_iter_to_json_desc_t
iterable	./src/flecs.c	/^    ecs_iterable_t iterable;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_iterable_t	file:
iterable	./src/flecs.c	/^    ecs_iterable_t iterable;$/;"	m	struct:ecs_rule_t	typeref:typename:ecs_iterable_t	file:
iterable	./src/flecs.c	/^    ecs_iterable_t iterable;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_iterable_t	file:
iterable	./src/flecs.h	/^    ecs_iterable_t iterable;   \/**< Iterable mixin *\/$/;"	m	struct:ecs_filter_t	typeref:typename:ecs_iterable_t
iterable	./src/flecs.h	/^struct iterable {$/;"	s	namespace:flecs
iterate	./src/flecs.h	/^    void iterate(flecs::world_t *stage, Func&& func, NextFunc next, Args &&... args) const {$/;"	f	struct:flecs::iterable	typeref:typename:void
iterate_find	./src/flecs.h	/^    flecs::entity iterate_find(flecs::world_t *stage, Func&& func, NextFunc next, Args &&... arg/;"	f	struct:flecs::iterable	typeref:typename:flecs::entity
iterate_hmap_u64	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^static void iterate_hmap_u64(picobench::state& s)$/;"	f	typeref:typename:void	file:
iterate_u64	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^static void iterate_u64(picobench::state& s)$/;"	f	typeref:typename:void	file:
iterate_u64	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^static void iterate_u64(picobench::state& s)$/;"	f	typeref:typename:void	file:
iterations	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    benchmark& iterations(std::vector<size_t> data) { _state_iterations = std::move(data); retur/;"	f	class:picobench::benchmark	typeref:typename:benchmark &
iterations	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    size_t iterations() const { return _iterations; }$/;"	f	class:picobench::state	typeref:typename:size_t
iterator	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    using iterator = Iter<false>;$/;"	t	class:robin_hood::detail::Table	typeref:typename:Iter<false>
iterator	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using iterator = iter_t<false>;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:iter_t<false>
iterator	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using iterator = std::conditional_t<is_map_v<T>, typename value_container_type::iterator, co/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:std::conditional_t<is_map_v<T>,typename value_container_type::iterator,const_iterator>
iterator	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        iterator(const const_iterator& it) : _map(it._map), _bucket(it._bucket), _from(it._from)/;"	f	class:emhash7::HashMap::iterator
iterator	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        iterator(const htype* hash_map, size_type bucket) : _map(hash_map), _bucket(bucket) { _b/;"	f	class:emhash7::HashMap::iterator
iterator	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        iterator(const htype* hash_map, size_type bucket) : _map(hash_map), _bucket(bucket) { in/;"	f	class:emhash7::HashMap::iterator
iterator	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        iterator(const htype* hash_map, size_type bucket, bool) : _map(hash_map), _bucket(bucket/;"	f	class:emhash7::HashMap::iterator
iterator	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    class iterator$/;"	c	class:emhash7::HashMap
iterator	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    using iterator = templated_iterator<value_type>;$/;"	t	class:ska::detailv3::sherwood_v3_table	typeref:typename:templated_iterator<value_type>
iterator	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  using iterator = robin_iterator<false>;$/;"	t	class:tsl::detail_robin_hash::robin_hash	typeref:typename:robin_iterator<false>
iterator	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  using iterator = typename ht::iterator;$/;"	t	class:tsl::robin_map	typeref:typename:ht::iterator
iterator	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        iterator()$/;"	f	struct:picobench::state::iterator	typeref:typename:PICOBENCH_INLINE
iterator	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        iterator(state* parent)$/;"	f	struct:picobench::state::iterator	typeref:typename:PICOBENCH_INLINE
iterator	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    struct iterator$/;"	s	class:picobench::state
iterator	./vendor/fmt/include/base.h	/^  using iterator = appender;$/;"	t	class:context	typeref:typename:appender
iterator	./vendor/fmt/include/base.h	/^  using iterator = const Char*;$/;"	t	class:basic_format_parse_context	typeref:typename:const Char *
iterator	./vendor/fmt/include/base.h	/^  using iterator = const Char*;$/;"	t	class:basic_string_view	typeref:typename:const Char *
iterator	./vendor/fmt/include/format.h	/^  using iterator = OutputIt;$/;"	t	class:generic_context	typeref:typename:OutputIt
iterator	./vendor/fmt/include/format.h	/^  using iterator = basic_appender<Char>;$/;"	t	struct:detail::arg_formatter	typeref:typename:basic_appender<Char>
iterator	./vendor/fmt/include/format.h	/^  using iterator = basic_appender<Char>;$/;"	t	struct:detail::default_arg_formatter	typeref:typename:basic_appender<Char>
iterator	./vendor/fmt/include/format.h	/^  using iterator = reserve_iterator<OutputIt>;$/;"	t	function:detail::do_write_float	typeref:typename:reserve_iterator<OutputIt>
iterator	./vendor/fmt/include/printf.h	/^  using iterator = basic_appender<Char>;$/;"	t	function:detail::vprintf	typeref:typename:basic_appender<Char>
iterator_buffer	./vendor/fmt/include/base.h	/^  explicit iterator_buffer(OutputIt out, size_t = 0)$/;"	f	class:detail::iterator_buffer
iterator_buffer	./vendor/fmt/include/base.h	/^  explicit iterator_buffer(OutputIt out, size_t n = buffer_size)$/;"	f	class:detail::iterator_buffer
iterator_buffer	./vendor/fmt/include/base.h	/^  explicit iterator_buffer(T* out, size_t = 0)$/;"	f	class:detail::iterator_buffer
iterator_buffer	./vendor/fmt/include/base.h	/^  explicit iterator_buffer(T* out, size_t n = buffer_size)$/;"	f	class:detail::iterator_buffer
iterator_buffer	./vendor/fmt/include/base.h	/^  explicit iterator_buffer(container_type& c)$/;"	f	class:detail::iterator_buffer
iterator_buffer	./vendor/fmt/include/base.h	/^  iterator_buffer(iterator_buffer&& other) noexcept$/;"	f	class:detail::iterator_buffer
iterator_buffer	./vendor/fmt/include/base.h	/^class iterator_buffer : public Traits, public buffer<T> {$/;"	c	namespace:detail
iterator_buffer	./vendor/fmt/include/base.h	/^class iterator_buffer<$/;"	c	namespace:detail
iterator_buffer	./vendor/fmt/include/base.h	/^class iterator_buffer<T*, T, fixed_buffer_traits> : public fixed_buffer_traits,$/;"	c	namespace:detail
iterator_buffer	./vendor/fmt/include/base.h	/^template <typename T> class iterator_buffer<T*, T> : public buffer<T> {$/;"	c	namespace:detail
iterator_category	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        using iterator_category = std::forward_iterator_tag;$/;"	t	class:robin_hood::detail::Table::Iter	typeref:typename:std::forward_iterator_tag
iterator_category	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^        using iterator_category = std::forward_iterator_tag;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector::iter_t	typeref:typename:std::forward_iterator_tag
iterator_category	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        typedef std::forward_iterator_tag iterator_category;$/;"	t	class:emhash7::HashMap::const_iterator	typeref:typename:std::forward_iterator_tag
iterator_category	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        typedef std::forward_iterator_tag iterator_category;$/;"	t	class:emhash7::HashMap::iterator	typeref:typename:std::forward_iterator_tag
iterator_category	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^        using iterator_category = std::forward_iterator_tag;$/;"	t	struct:ska::detailv3::sherwood_v3_table::templated_iterator	typeref:typename:std::forward_iterator_tag
iterator_category	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^    using iterator_category = std::forward_iterator_tag;$/;"	t	class:tsl::detail_robin_hash::robin_hash::robin_iterator	typeref:typename:std::forward_iterator_tag
iterator_category	./vendor/fmt/include/base.h	/^  using iterator_category = int;$/;"	t	class:basic_appender	typeref:typename:int
iterator_category	./vendor/fmt/include/format.h	/^  using iterator_category = output_iterator_tag;$/;"	t	struct:std::iterator_traits	typeref:typename:output_iterator_tag
iterator_t	./vendor/fmt/include/format.h	/^using iterator_t = decltype(std::begin(std::declval<T&>()));$/;"	t	namespace:detail
iterator_traits	./vendor/fmt/include/format.h	/^template <> struct iterator_traits<fmt::appender> {$/;"	s	namespace:std
iters	./src/flecs.c	/^    ecs_iter_t *iters;          \/* Iterator for worker(s) *\/$/;"	m	struct:ecs_pipeline_state_t	typeref:typename:ecs_iter_t *	file:
ivory	./vendor/fmt/include/color.h	/^  ivory = 0xFFFFF0,                    \/\/ rgb(255,255,240)$/;"	e	enum:color
join	./vendor/fmt/include/ranges.h	/^FMT_CONSTEXPR auto join(const std::tuple<T...>& tuple, string_view sep)$/;"	f	typeref:typename:tuple_join_view<char,T...>
join	./vendor/fmt/include/ranges.h	/^auto join(It begin, Sentinel end, string_view sep) -> join_view<It, Sentinel> {$/;"	f	typeref:typename:join_view<It,Sentinel>
join	./vendor/fmt/include/ranges.h	/^auto join(Range&& r, string_view sep)$/;"	f	typeref:typename:join_view<decltype(detail::range_begin (r)) ,decltype(detail::range_end (r)) >
join	./vendor/fmt/include/ranges.h	/^auto join(std::initializer_list<T> list, string_view sep)$/;"	f	typeref:typename:join_view<const T *,const T * >
join	./vendor/fmt/include/xchar.h	/^auto join(It begin, Sentinel end, wstring_view sep)$/;"	f	typeref:typename:join_view<It,Sentinel,wchar_t>
join	./vendor/fmt/include/xchar.h	/^auto join(Range&& range, wstring_view sep)$/;"	f	typeref:typename:join_view<detail::iterator_t<Range>,detail::sentinel_t<Range>,wchar_t>
join	./vendor/fmt/include/xchar.h	/^auto join(const std::tuple<T...>& tuple, basic_string_view<wchar_t> sep)$/;"	f	typeref:typename:tuple_join_view<wchar_t,T...>
join	./vendor/fmt/include/xchar.h	/^auto join(std::initializer_list<T> list, wstring_view sep)$/;"	f	typeref:typename:join_view<const T *,const T *,wchar_t>
join_view	./vendor/fmt/include/ranges.h	/^  join_view(It b, Sentinel e, basic_string_view<Char> s)$/;"	f	struct:join_view
join_view	./vendor/fmt/include/ranges.h	/^struct join_view : detail::view {$/;"	s
json_ser_array	./src/flecs.c	/^int json_ser_array($/;"	f	typeref:typename:int	file:
json_ser_bitmask	./src/flecs.c	/^int json_ser_bitmask($/;"	f	typeref:typename:int	file:
json_ser_custom_member	./src/flecs.c	/^int json_ser_custom_member($/;"	f	typeref:typename:int	file:
json_ser_custom_type	./src/flecs.c	/^int json_ser_custom_type($/;"	f	typeref:typename:int	file:
json_ser_custom_value	./src/flecs.c	/^int json_ser_custom_value($/;"	f	typeref:typename:int	file:
json_ser_elements	./src/flecs.c	/^int json_ser_elements($/;"	f	typeref:typename:int	file:
json_ser_enum	./src/flecs.c	/^int json_ser_enum($/;"	f	typeref:typename:int	file:
json_ser_vector	./src/flecs.c	/^int json_ser_vector($/;"	f	typeref:typename:int	file:
json_serializer_ctx_t	./src/flecs.c	/^typedef struct json_serializer_ctx_t {$/;"	s	file:
json_serializer_ctx_t	./src/flecs.c	/^} json_serializer_ctx_t;$/;"	t	typeref:struct:json_serializer_ctx_t	file:
json_typeinfo_ser_array	./src/flecs.c	/^int json_typeinfo_ser_array($/;"	f	typeref:typename:int	file:
json_typeinfo_ser_array_type	./src/flecs.c	/^int json_typeinfo_ser_array_type($/;"	f	typeref:typename:int	file:
json_typeinfo_ser_bitmask	./src/flecs.c	/^void json_typeinfo_ser_bitmask($/;"	f	typeref:typename:void	file:
json_typeinfo_ser_constants	./src/flecs.c	/^void json_typeinfo_ser_constants($/;"	f	typeref:typename:void	file:
json_typeinfo_ser_enum	./src/flecs.c	/^void json_typeinfo_ser_enum($/;"	f	typeref:typename:void	file:
json_typeinfo_ser_primitive	./src/flecs.c	/^int json_typeinfo_ser_primitive($/;"	f	typeref:typename:int	file:
json_typeinfo_ser_range	./src/flecs.c	/^void json_typeinfo_ser_range($/;"	f	typeref:typename:void	file:
json_typeinfo_ser_type	./src/flecs.c	/^int json_typeinfo_ser_type($/;"	f	typeref:typename:int	file:
json_typeinfo_ser_type_op	./src/flecs.c	/^int json_typeinfo_ser_type_op($/;"	f	typeref:typename:int	file:
json_typeinfo_ser_type_ops	./src/flecs.c	/^int json_typeinfo_ser_type_ops($/;"	f	typeref:typename:int	file:
json_typeinfo_ser_unit	./src/flecs.c	/^int json_typeinfo_ser_unit($/;"	f	typeref:typename:int	file:
json_typeinfo_ser_vector	./src/flecs.c	/^int json_typeinfo_ser_vector($/;"	f	typeref:typename:int	file:
kappa	./vendor/fmt/include/format.h	/^  static const int kappa = 1;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
kappa	./vendor/fmt/include/format.h	/^  static const int kappa = 2;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
kcalloc	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kcalloc(/;"	d
keep_alive	./src/flecs.c	/^    int32_t keep_alive;$/;"	m	struct:ecs_id_record_t	typeref:typename:int32_t	file:
keep_in_range	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    size_t keep_in_range(size_t index, size_t num_slots_minus_one) const$/;"	f	struct:ska::fibonacci_hash_policy	typeref:typename:size_t
keep_in_range	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    size_t keep_in_range(size_t index, size_t num_slots_minus_one) const$/;"	f	struct:ska::power_of_two_hash_policy	typeref:typename:size_t
keep_in_range	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    size_t keep_in_range(size_t index, size_t num_slots_minus_one) const$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
keep_names	./src/flecs.h	/^    bool keep_names;$/;"	m	struct:ecs_flatten_desc_t	typeref:typename:bool
key	./src/flecs.h	/^    const char *key;$/;"	m	struct:__anon7d4a417c0908	typeref:typename:const char *
key	./src/flecs.h	/^    ecs_map_key_t key;$/;"	m	struct:ecs_bucket_entry_t	typeref:typename:ecs_map_key_t
key	./src/flecs.h	/^    void *key;$/;"	m	struct:__anon7d4a417c0608	typeref:typename:void *
key	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^    const typename robin_hash::key_type& key() const {$/;"	f	class:tsl::detail_robin_hash::robin_hash::robin_iterator	typeref:typename:const typename robin_hash::key_type &
keyToIdx	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void keyToIdx(HashKey&& key, size_t* idx, InfoType* info) const {$/;"	f	class:robin_hood::detail::Table	typeref:typename:void
key_eq	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto key_eq() const -> key_equal {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:key_equal
key_eq	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline EqT& key_eq() const { return _eq; }$/;"	f	class:emhash7::HashMap	typeref:typename:EqT &
key_eq	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    const ArgumentEqual & key_eq() const$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:const ArgumentEqual &
key_eq	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  key_equal key_eq() const { return static_cast<const KeyEqual&>(*this); }$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:key_equal
key_eq	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  key_equal key_eq() const { return m_ht.key_eq(); }$/;"	f	class:tsl::robin_map	typeref:typename:key_equal
key_equal	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    using key_equal = KeyEqual;$/;"	t	class:robin_hood::detail::Table	typeref:typename:KeyEqual
key_equal	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using key_equal = KeyEqual;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:KeyEqual
key_equal	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    typedef EqT    key_equal;$/;"	t	class:emhash7::HashMap	typeref:typename:EqT
key_equal	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    using key_equal = ArgumentEqual;$/;"	t	class:ska::detailv3::sherwood_v3_table	typeref:typename:ArgumentEqual
key_equal	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  using key_equal = KeyEqual;$/;"	t	class:tsl::detail_robin_hash::robin_hash	typeref:typename:KeyEqual
key_equal	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  using key_equal = typename ht::key_equal;$/;"	t	class:tsl::robin_map	typeref:typename:ht::key_equal
key_equal	./vendor/STC/misc/benchmarks/various/string_bench_STD.cpp	/^    using key_equal = std::equal_to<>;  \/\/ Pred to use$/;"	t	struct:string_hash	typeref:typename:std::equal_to<>	file:
key_found	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    enum class InsertionState { overflow_error, key_found, new_node, overwrite_node };$/;"	e	enum:robin_hood::detail::Table::InsertionState
key_size	./src/flecs.h	/^    ecs_size_t key_size;$/;"	m	struct:__anon7d4a417c0408	typeref:typename:ecs_size_t
key_type	./src/flecs.c	/^    meta_type_t key_type;$/;"	m	struct:meta_params_t	typeref:typename:meta_type_t	file:
key_type	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    using key_type = Key;$/;"	t	class:robin_hood::detail::Table	typeref:typename:Key
key_type	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using key_type = Key;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:Key
key_type	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    typedef KeyT   key_type;$/;"	t	class:emhash7::HashMap	typeref:typename:KeyT
key_type	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    using key_type = K;$/;"	t	class:ska::flat_hash_map	typeref:typename:K
key_type	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    using key_type = T;$/;"	t	class:ska::flat_hash_set	typeref:typename:T
key_type	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  using key_type = typename KeySelect::key_type;$/;"	t	class:tsl::detail_robin_hash::robin_hash	typeref:typename:KeySelect::key_type
key_type	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^    using key_type = Key;$/;"	t	class:tsl::robin_map::KeySelect	typeref:typename:Key
key_type	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  using key_type = typename ht::key_type;$/;"	t	class:tsl::robin_map	typeref:typename:ht::key_type
keys	./src/flecs.h	/^    ecs_vec_t keys;$/;"	m	struct:__anon7d4a417c0308	typeref:typename:ecs_vec_t
kfree	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kfree(/;"	d
kh_begin	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kh_begin(/;"	d
kh_clear	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kh_clear(name, h) kh_clear_/;"	d
kh_cstr_t	./vendor/STC/misc/benchmarks/external/khash.h	/^typedef const char *kh_cstr_t;$/;"	t	typeref:typename:const char *
kh_del	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kh_del(name, h, k) kh_del_/;"	d
kh_destroy	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kh_destroy(name, h) kh_destroy_/;"	d
kh_end	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kh_end(/;"	d
kh_exist	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kh_exist(/;"	d
kh_foreach	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kh_foreach(/;"	d
kh_foreach_value	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kh_foreach_value(/;"	d
kh_get	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kh_get(name, h, k) kh_get_/;"	d
kh_init	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kh_init(name) kh_init_/;"	d
kh_inline	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kh_inline /;"	d
kh_int64_hash_equal	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kh_int64_hash_equal(/;"	d
kh_int64_hash_func	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kh_int64_hash_func(/;"	d
kh_int_hash_equal	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kh_int_hash_equal(/;"	d
kh_int_hash_func	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kh_int_hash_func(/;"	d
kh_int_hash_func2	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kh_int_hash_func2(/;"	d
kh_key	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kh_key(/;"	d
kh_n_buckets	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kh_n_buckets(/;"	d
kh_put	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kh_put(name, h, k, r) kh_put_/;"	d
kh_resize	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kh_resize(name, h, s) kh_resize_/;"	d
kh_size	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kh_size(/;"	d
kh_str_hash_equal	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kh_str_hash_equal(/;"	d
kh_str_hash_func	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kh_str_hash_func(/;"	d
kh_val	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kh_val(/;"	d
kh_value	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kh_value(/;"	d
khaki	./vendor/fmt/include/color.h	/^  khaki = 0xF0E68C,                    \/\/ rgb(240,230,140)$/;"	e	enum:color
khash_t	./vendor/STC/misc/benchmarks/external/khash.h	/^#define khash_t(/;"	d
khint32_t	./vendor/STC/misc/benchmarks/external/khash.h	/^typedef unsigned int khint32_t;$/;"	t	typeref:typename:unsigned int
khint32_t	./vendor/STC/misc/benchmarks/external/khash.h	/^typedef unsigned long khint32_t;$/;"	t	typeref:typename:unsigned long
khint64_t	./vendor/STC/misc/benchmarks/external/khash.h	/^typedef unsigned long khint64_t;$/;"	t	typeref:typename:unsigned long
khint64_t	./vendor/STC/misc/benchmarks/external/khash.h	/^typedef unsigned long long khint64_t;$/;"	t	typeref:typename:unsigned long long
khint_t	./vendor/STC/misc/benchmarks/external/khash.h	/^typedef khint32_t khint_t;$/;"	t	typeref:typename:khint32_t
khiter_t	./vendor/STC/misc/benchmarks/external/khash.h	/^typedef khint_t khiter_t;$/;"	t	typeref:typename:khint_t
kickout_bucket	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    size_type kickout_bucket(const size_type kmain, const size_type kbucket)$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
kind	./src/flecs.c	/^    ecs_cmd_kind_t kind;             \/* Command kind *\/$/;"	m	struct:ecs_cmd_t	typeref:typename:ecs_cmd_kind_t	file:
kind	./src/flecs.c	/^    ecs_entity_t kind;                \/**< Metric kind (gauge, counter) *\/$/;"	m	struct:__anon7d4a41770b08	typeref:typename:ecs_entity_t	file:
kind	./src/flecs.c	/^    ecs_primitive_kind_t kind;  \/* Primitive type kind *\/$/;"	m	struct:EcsAlert	typeref:typename:ecs_primitive_kind_t	file:
kind	./src/flecs.c	/^    ecs_query_eventkind_t kind;$/;"	m	struct:ecs_query_event_t	typeref:typename:ecs_query_eventkind_t	file:
kind	./src/flecs.c	/^    ecs_table_eventkind_t kind;$/;"	m	struct:ecs_table_event_t	typeref:typename:ecs_table_eventkind_t	file:
kind	./src/flecs.c	/^    int8_t kind;           \/* variable kind (EcsVarEntity or EcsVarTable) *\/$/;"	m	struct:ecs_rule_var_t	typeref:typename:int8_t	file:
kind	./src/flecs.c	/^    uint8_t kind;              \/* Instruction kind *\/$/;"	m	struct:ecs_rule_op_t	typeref:typename:uint8_t	file:
kind	./src/flecs.h	/^    Base& kind() {$/;"	f	struct:flecs::system_builder_i	typeref:typename:Base &
kind	./src/flecs.h	/^    Base& kind(E phase)$/;"	f	struct:flecs::system_builder_i	typeref:typename:Base &
kind	./src/flecs.h	/^    Base& kind(entity_t phase) {$/;"	f	struct:flecs::system_builder_i	typeref:typename:Base &
kind	./src/flecs.h	/^    ecs_entity_t kind;$/;"	m	struct:ecs_metric_desc_t	typeref:typename:ecs_entity_t
kind	./src/flecs.h	/^    ecs_iter_kind_t kind; $/;"	m	struct:ecs_filter_iter_t	typeref:typename:ecs_iter_kind_t
kind	./src/flecs.h	/^    ecs_meta_type_op_kind_t kind;$/;"	m	struct:ecs_meta_type_op_t	typeref:typename:ecs_meta_type_op_kind_t
kind	./src/flecs.h	/^    ecs_primitive_kind_t kind;$/;"	m	struct:EcsPrimitive	typeref:typename:ecs_primitive_kind_t
kind	./src/flecs.h	/^    ecs_primitive_kind_t kind;$/;"	m	struct:ecs_primitive_desc_t	typeref:typename:ecs_primitive_kind_t
kind	./src/flecs.h	/^    ecs_type_kind_t kind;$/;"	m	struct:EcsMetaType	typeref:typename:ecs_type_kind_t
kind	./src/flecs.h	/^    metric_builder& kind() {$/;"	f	struct:flecs::metric_builder	typeref:typename:metric_builder &
kind	./src/flecs.h	/^    metric_builder& kind(flecs::entity_t the_kind) {$/;"	f	struct:flecs::metric_builder	typeref:typename:metric_builder &
kind	./vendor/fmt/include/base.h	/^  arg_id_kind kind;$/;"	m	struct:detail::arg_ref	typeref:typename:arg_id_kind
klib_unused	./vendor/STC/misc/benchmarks/external/khash.h	/^#define klib_unused /;"	d
klib_unused	./vendor/STC/misc/benchmarks/external/khash.h	/^#define klib_unused$/;"	d
kmalloc	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kmalloc(/;"	d
krealloc	./vendor/STC/misc/benchmarks/external/khash.h	/^#define krealloc(/;"	d
kroundup32	./vendor/STC/misc/benchmarks/external/khash.h	/^#define kroundup32(/;"	d
l	./vendor/STC/include/stc/priv/cregex_prv.c	/^    } l;$/;"	m	struct:_Reinst	typeref:union:_Reinst::__anon4ce7005a030a	file:
label	./src/flecs.c	/^    const char *label;     \/* for debugging *\/$/;"	m	struct:ecs_rule_var_t	typeref:typename:const char *	file:
label	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    benchmark& label(const char* label) { _name = label; return *this; }$/;"	f	class:picobench::benchmark	typeref:typename:benchmark &
ladec_	./src/flecs.h	/^    ecs_os_api_lainc_t ladec_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_lainc_t
lainc_	./src/flecs.h	/^    ecs_os_api_lainc_t lainc_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_lainc_t
last	./src/flecs.c	/^    ecs_query_table_match_t *last;   \/* Last discovered match for table *\/$/;"	m	struct:ecs_query_table_t	typeref:typename:ecs_query_table_match_t *	file:
last	./src/flecs.c	/^    ecs_query_table_match_t *last;$/;"	m	struct:ecs_query_table_list_t	typeref:typename:ecs_query_table_match_t *	file:
last	./src/flecs.c	/^    ecs_table_cache_hdr_t *last;$/;"	m	struct:ecs_table_cache_list_t	typeref:typename:ecs_table_cache_hdr_t *	file:
last	./src/flecs.c	/^    int32_t last;                    \/* If -1, a delete command was inserted *\/$/;"	m	struct:ecs_cmd_entry_t	typeref:typename:int32_t	file:
last	./src/flecs.h	/^    ecs_query_table_match_t *node, *prev, *last;$/;"	m	struct:ecs_query_iter_t	typeref:typename:ecs_query_table_match_t *
last	./src/flecs.h	/^    int last() const {$/;"	f	struct:flecs::enum_data	typeref:typename:int
last	./vendor/STC/include/stc/priv/cregex_prv.c	/^    _Reinst*    last;$/;"	m	struct:_Node	typeref:typename:_Reinst *	file:
last	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    iterator last() const$/;"	f	class:emhash7::HashMap	typeref:typename:iterator
last	./vendor/STC/misc/examples/smartpointers/box.c	/^typedef struct { cstr name, last; } Person;$/;"	m	struct:__anon71539ea50108	typeref:typename:cstr	file:
last	./vendor/STC/misc/examples/smartpointers/new_sptr.c	/^typedef struct { cstr name, last; } Person;$/;"	m	struct:__anonedee870e0108	typeref:typename:cstr	file:
last	./vendor/STC/misc/examples/smartpointers/person_arc.c	/^typedef struct { cstr name, last; } Person;$/;"	m	struct:__anon0e10c9080108	typeref:typename:cstr	file:
last_	./src/flecs.h	/^    int64_t last_;$/;"	m	struct:ecs_query_stats_t	typeref:typename:int64_t
last_	./src/flecs.h	/^    int64_t last_;$/;"	m	struct:ecs_sync_stats_t	typeref:typename:int64_t
last_	./src/flecs.h	/^    int64_t last_;$/;"	m	struct:ecs_system_stats_t	typeref:typename:int64_t
last_	./src/flecs.h	/^    int64_t last_;$/;"	m	struct:ecs_world_stats_t	typeref:typename:int64_t
last_assign_id	./src/flecs.c	/^    ecs_id_t last_assign_id;$/;"	m	struct:__anon7d4a41771908	typeref:typename:ecs_id_t	file:
last_bucket	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  bool last_bucket() const noexcept { return m_last_bucket; }$/;"	f	class:tsl::detail_robin_hash::bucket_entry	typeref:typename:bool
last_column	./src/flecs.h	/^    int32_t last_column;$/;"	m	struct:ecs_term_iter_t	typeref:typename:int32_t
last_component_id	./src/flecs.h	/^    ecs_entity_t last_component_id;   \/**< Last issued component entity id *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:ecs_entity_t
last_event_id	./src/flecs.h	/^    int32_t *last_event_id;     \/**< Last handled event id *\/$/;"	m	struct:ecs_observer_t	typeref:typename:int32_t *
last_event_id	./src/flecs.h	/^    int32_t *last_event_id;$/;"	m	struct:ecs_observer_desc_t	typeref:typename:int32_t *
last_event_id_storage	./src/flecs.h	/^    int32_t last_event_id_storage;$/;"	m	struct:ecs_observer_t	typeref:typename:int32_t
last_frame	./src/flecs.c	/^    int64_t last_frame;             \/* Last frame for which the system was considered *\/$/;"	m	struct:ecs_system_t	typeref:typename:int64_t	file:
last_id	./src/flecs.c	/^    uint64_t last_id;$/;"	m	struct:ecs_snapshot_t	typeref:typename:uint64_t	file:
last_integer_type	./vendor/fmt/include/base.h	/^  last_integer_type = char_type,$/;"	e	enum:detail::type
last_numeric_type	./vendor/fmt/include/base.h	/^  last_numeric_type = long_double_type,$/;"	e	enum:detail::type
last_object	./src/flecs.c	/^    ecs_entity_t last_object;$/;"	m	struct:__anon7d4a41771908	typeref:typename:ecs_entity_t	file:
last_predicate	./src/flecs.c	/^    ecs_entity_t last_predicate;$/;"	m	struct:__anon7d4a41771908	typeref:typename:ecs_entity_t	file:
last_subject	./src/flecs.c	/^    ecs_entity_t last_subject;$/;"	m	struct:__anon7d4a41771908	typeref:typename:ecs_entity_t	file:
last_system	./src/flecs.c	/^    ecs_entity_t last_system;   \/* Last system ran by pipeline *\/$/;"	m	struct:ecs_pipeline_state_t	typeref:typename:ecs_entity_t	file:
last_turn_time	./src/turnbasedsystem.h	/^	double last_turn_time;$/;"	m	struct:TurnComponentData	typeref:typename:double
lastwasand	./vendor/STC/include/stc/priv/cregex_prv.c	/^    bool lastwasand;     \/* Last token was _operand *\/$/;"	m	struct:_Parser	typeref:typename:bool	file:
lavender	./vendor/fmt/include/color.h	/^  lavender = 0xE6E6FA,                 \/\/ rgb(230,230,250)$/;"	e	enum:color
lavender_blush	./vendor/fmt/include/color.h	/^  lavender_blush = 0xFFF0F5,           \/\/ rgb(255,240,245)$/;"	e	enum:color
lawn_green	./vendor/fmt/include/color.h	/^  lawn_green = 0x7CFC00,               \/\/ rgb(124,252,0)$/;"	e	enum:color
layout	./vendor/raylib5/include/raylib.h	/^    int layout;             \/\/ Layout of the n-patch: 3x3, 1x3 or 3x1$/;"	m	struct:NPatchInfo	typeref:typename:int
lbl_begin	./src/flecs.c	/^    ecs_rule_lbl_t lbl_begin;$/;"	m	struct:__anon7d4a41773508	typeref:typename:ecs_rule_lbl_t	file:
lbl_cond_eval	./src/flecs.c	/^    ecs_rule_lbl_t lbl_cond_eval;$/;"	m	struct:__anon7d4a41773508	typeref:typename:ecs_rule_lbl_t	file:
lbl_query	./src/flecs.c	/^    ecs_rule_lbl_t lbl_query; \/* Used to find the op that does the actual searching *\/$/;"	m	struct:__anon7d4a41773508	typeref:typename:ecs_rule_lbl_t	file:
leaf	./src/flecs.c	/^    bool leaf; \/* Table owns and inherits id (for Up queries without Self) *\/$/;"	m	struct:__anon7d4a41772608	typeref:typename:bool	file:
left	./vendor/STC/include/stc/priv/cregex_prv.c	/^        struct _Reinst *left;    \/* left child of TOK_OR *\/$/;"	m	union:_Reinst::__anon4ce7005a030a	typeref:struct:_Reinst *	file:
left	./vendor/raylib5/include/raylib.h	/^    int left;               \/\/ Left border offset$/;"	m	struct:NPatchInfo	typeref:typename:int
leftLensCenter	./vendor/raylib5/include/raylib.h	/^    float leftLensCenter[2];        \/\/ VR left lens center$/;"	m	struct:VrStereoConfig	typeref:typename:float[2]
leftScreenCenter	./vendor/raylib5/include/raylib.h	/^    float leftScreenCenter[2];      \/\/ VR left screen center$/;"	m	struct:VrStereoConfig	typeref:typename:float[2]
left_fork	./vendor/STC/misc/examples/coroutines/dining_philosophers.c	/^    cco_sem* left_fork;$/;"	m	struct:Philosopher	typeref:typename:cco_sem *	file:
lemon_chiffon	./vendor/fmt/include/color.h	/^  lemon_chiffon = 0xFFFACD,            \/\/ rgb(255,250,205)$/;"	e	enum:color
len	./vendor/STC/include/c11/fmt.h	/^    intptr_t cap, len;$/;"	m	struct:__anon6f5400bc0108	typeref:typename:intptr_t
len	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    int len = 0;$/;"	m	class:picobench::picostring	typeref:typename:int
length	./src/flecs.c	/^    ecs_size_t length;$/;"	m	struct:ecs_hashed_string_t	typeref:typename:ecs_size_t	file:
length	./src/flecs.h	/^    ecs_size_t length;    \/**< Length of identifier *\/$/;"	m	struct:EcsIdentifier	typeref:typename:ecs_size_t
length	./src/flecs.h	/^    ecs_size_t length;$/;"	m	struct:ecs_strbuf_t	typeref:typename:ecs_size_t
length	./src/flecs.h	/^    static constexpr size_t length( char const (&)[N] ) {$/;"	f	struct:flecs::string	typeref:typename:size_t
length	./src/flecs.h	/^    std::size_t length() const {$/;"	f	struct:flecs::string	typeref:typename:std::size_t
length	./src/flecs.h	/^struct length {$/;"	s	struct:flecs::units
length	./vendor/fmt/include/base.h	/^template <typename Char> FMT_CONSTEXPR auto length(const Char* s) -> size_t {$/;"	f	namespace:detail	typeref:typename:size_t
lensDistortionValues	./vendor/raylib5/include/raylib.h	/^    float lensDistortionValues[4];  \/\/ Lens distortion constant parameters$/;"	m	struct:VrDeviceInfo	typeref:typename:float[4]
lensSeparationDistance	./vendor/raylib5/include/raylib.h	/^    float lensSeparationDistance;   \/\/ Lens separation distance in meters$/;"	m	struct:VrDeviceInfo	typeref:typename:float
level	./src/log.c	/^  int level;$/;"	m	struct:__anon6383736c0108	typeref:typename:int	file:
level	./src/log.c	/^  int level;$/;"	m	struct:__anon6383736c0208	typeref:typename:int	file:
level	./src/log.h	/^  int level;$/;"	m	struct:__anon638373710108	typeref:typename:int
level	./vendor/STC/include/stc/smap.h	/^    int8_t level;$/;"	m	struct:_m_node	typeref:typename:int8_t
level_colors	./src/log.c	/^static const char *level_colors[] = {$/;"	v	typeref:typename:const char * []	file:
level_strings	./src/log.c	/^static const char *level_strings[] = {$/;"	v	typeref:typename:const char * []	file:
lhs	./vendor/fmt/include/compile.h	/^  L lhs;$/;"	m	struct:detail::concat	typeref:typename:L
light_blue	./vendor/fmt/include/color.h	/^  light_blue = 0xADD8E6,               \/\/ rgb(173,216,230)$/;"	e	enum:color
light_coral	./vendor/fmt/include/color.h	/^  light_coral = 0xF08080,              \/\/ rgb(240,128,128)$/;"	e	enum:color
light_cyan	./vendor/fmt/include/color.h	/^  light_cyan = 0xE0FFFF,               \/\/ rgb(224,255,255)$/;"	e	enum:color
light_golden_rod_yellow	./vendor/fmt/include/color.h	/^  light_golden_rod_yellow = 0xFAFAD2,  \/\/ rgb(250,250,210)$/;"	e	enum:color
light_gray	./vendor/fmt/include/color.h	/^  light_gray = 0xD3D3D3,               \/\/ rgb(211,211,211)$/;"	e	enum:color
light_green	./vendor/fmt/include/color.h	/^  light_green = 0x90EE90,              \/\/ rgb(144,238,144)$/;"	e	enum:color
light_pink	./vendor/fmt/include/color.h	/^  light_pink = 0xFFB6C1,               \/\/ rgb(255,182,193)$/;"	e	enum:color
light_salmon	./vendor/fmt/include/color.h	/^  light_salmon = 0xFFA07A,             \/\/ rgb(255,160,122)$/;"	e	enum:color
light_sea_green	./vendor/fmt/include/color.h	/^  light_sea_green = 0x20B2AA,          \/\/ rgb(32,178,170)$/;"	e	enum:color
light_sky_blue	./vendor/fmt/include/color.h	/^  light_sky_blue = 0x87CEFA,           \/\/ rgb(135,206,250)$/;"	e	enum:color
light_slate_gray	./vendor/fmt/include/color.h	/^  light_slate_gray = 0x778899,         \/\/ rgb(119,136,153)$/;"	e	enum:color
light_steel_blue	./vendor/fmt/include/color.h	/^  light_steel_blue = 0xB0C4DE,         \/\/ rgb(176,196,222)$/;"	e	enum:color
light_yellow	./vendor/fmt/include/color.h	/^  light_yellow = 0xFFFFE0,             \/\/ rgb(255,255,224)$/;"	e	enum:color
likely_	./src/flecs.c	/^  #define likely_(/;"	d	file:
lime	./vendor/fmt/include/color.h	/^  lime = 0x00FF00,                     \/\/ rgb(0,255,0)$/;"	e	enum:color
lime_green	./vendor/fmt/include/color.h	/^  lime_green = 0x32CD32,               \/\/ rgb(50,205,50)$/;"	e	enum:color
limit	./src/flecs.h	/^    int32_t limit;$/;"	m	struct:ecs_page_iter_t	typeref:typename:int32_t
limit	./src/flecs.h	/^    system_runner_fluent& limit(int32_t limit) {$/;"	f	struct:flecs::system_runner_fluent	typeref:typename:system_runner_fluent &
limit	./vendor/fmt/include/base.h	/^  auto limit(size_t size) -> size_t { return size; }$/;"	f	struct:detail::buffer_traits	typeref:typename:size_t
limit	./vendor/fmt/include/base.h	/^  auto limit(size_t size) -> size_t {$/;"	f	class:detail::fixed_buffer_traits	typeref:typename:size_t
limit_	./vendor/fmt/include/base.h	/^  size_t limit_;$/;"	m	class:detail::fixed_buffer_traits	typeref:typename:size_t
line	./src/log.h	/^  int line;$/;"	m	struct:__anon638373710108	typeref:typename:int
line	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    static void line(std::ostream& out, int width = 79)$/;"	f	class:picobench::report	typeref:typename:void
line	./vendor/STC/misc/examples/coroutines/coread.c	/^    cstr line;$/;"	m	struct:file_read	typeref:typename:cstr	file:
line_buffered	./vendor/fmt/include/format-inl.h	/^    line_buffered = 0x200,  \/\/ _IO_LINE_BUF$/;"	e	enum:detail::glibc_file::__anonf306e7170303
line_buffered	./vendor/fmt/include/format-inl.h	/^    line_buffered = 1,  \/\/ __SNBF$/;"	e	enum:detail::apple_file::__anonf306e7170403
linen	./vendor/fmt/include/color.h	/^  linen = 0xFAF0E6,                    \/\/ rgb(250,240,230)$/;"	e	enum:color
link	./vendor/STC/include/stc/smap.h	/^    int32_t link[2];$/;"	m	struct:_m_node	typeref:typename:int32_t[2]
list	./src/flecs.c	/^    ecs_query_table_list_t list;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_query_table_list_t	file:
list_sp	./src/flecs.h	/^    int32_t list_sp;$/;"	m	struct:ecs_strbuf_t	typeref:typename:int32_t
list_stack	./src/flecs.h	/^    ecs_strbuf_list_elem list_stack[ECS_STRBUF_MAX_LIST_DEPTH];$/;"	m	struct:ecs_strbuf_t	typeref:typename:ecs_strbuf_list_elem[]
listdemo1	./vendor/STC/misc/examples/mixed/demos.c	/^void listdemo1(void)$/;"	f	typeref:typename:void
literals	./vendor/fmt/include/compile.h	/^inline namespace literals {$/;"	n
literals	./vendor/fmt/include/format.h	/^inline namespace literals {$/;"	n
literals	./vendor/fmt/include/xchar.h	/^inline namespace literals {$/;"	n
litmode	./vendor/STC/include/stc/priv/cregex_prv.c	/^    bool litmode;$/;"	m	struct:_Parser	typeref:typename:bool	file:
lo	./src/flecs.c	/^    ecs_graph_edge_t *lo;            \/* Small array optimized for low edges *\/$/;"	m	struct:ecs_graph_edges_t	typeref:typename:ecs_graph_edge_t *	file:
lo	./vendor/STC/include/stc/priv/utf8_prv.c	/^  uint16_t lo;$/;"	m	struct:__anon57216ba30108	typeref:typename:uint16_t	file:
lo_	./vendor/fmt/include/format.h	/^  uint64_t lo_, hi_;$/;"	m	class:detail::uint128_fallback	typeref:typename:uint64_t
load_factor	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    float load_factor() const noexcept { \/\/ NOLINT(modernize-use-nodiscard)$/;"	f	class:robin_hood::detail::Table	typeref:typename:float
load_factor	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] auto load_factor() const -> float {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:float
load_factor	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline float load_factor() const { return static_cast<float>(_num_filled) \/ (_mask + 1); }$/;"	f	class:emhash7::HashMap	typeref:typename:float
load_factor	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    float load_factor() const$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:float
load_factor	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  float load_factor() const {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:float
load_factor	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  float load_factor() const { return m_ht.load_factor(); }$/;"	f	class:tsl::robin_map	typeref:typename:float
loc	./vendor/fmt/include/format.h	/^  locale_ref loc;$/;"	m	struct:detail::default_arg_formatter	typeref:typename:locale_ref
loc_	./vendor/fmt/include/base.h	/^  detail::locale_ref loc_;$/;"	m	class:context	typeref:typename:detail::locale_ref
loc_	./vendor/fmt/include/chrono.h	/^  const std::locale& loc_;$/;"	m	class:detail::tm_writer	typeref:typename:const std::locale &
loc_	./vendor/fmt/include/format.h	/^  detail::locale_ref loc_;$/;"	m	class:generic_context	typeref:typename:detail::locale_ref
loc_value	./vendor/fmt/include/format.h	/^  loc_value(T value) : value_(detail::make_arg<format_context>(value)) {}$/;"	f	class:loc_value
loc_value	./vendor/fmt/include/format.h	/^  loc_value(T) {}$/;"	f	class:loc_value
loc_value	./vendor/fmt/include/format.h	/^class loc_value {$/;"	c
loc_writer	./vendor/fmt/include/format.h	/^template <typename Char = char> struct loc_writer {$/;"	s	namespace:detail
local_runner	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    local_runner() : runner(true)$/;"	f	class:picobench::local_runner
local_runner	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^class local_runner : public runner$/;"	c	namespace:picobench
locale	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR auto locale() -> detail::locale_ref { return loc_; }$/;"	f	class:context	typeref:typename:detail::locale_ref
locale	./vendor/fmt/include/base.h	/^enum class state { start, align, sign, hash, zero, width, precision, locale };$/;"	e	enum:detail::state
locale	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR auto locale() -> detail::locale_ref { return loc_; }$/;"	f	class:generic_context	typeref:typename:detail::locale_ref
locale	./vendor/fmt/include/format.h	/^  bool locale : 1;$/;"	m	struct:detail::float_specs	typeref:typename:bool:1
locale	./vendor/fmt/include/format.h	/^  locale_ref locale;$/;"	m	struct:detail::arg_formatter	typeref:typename:locale_ref
locale	./vendor/fmt/include/printf.h	/^  auto locale() -> detail::locale_ref { return {}; }$/;"	f	class:basic_printf_context	typeref:typename:detail::locale_ref
locale_	./vendor/fmt/include/base.h	/^  const void* locale_;  \/\/ A type-erased pointer to std::locale.$/;"	m	class:detail::locale_ref	typeref:typename:const void *
locale_	./vendor/fmt/include/chrono.h	/^    std::locale locale_;$/;"	m	union:detail::get_locale::__anon56511d07020a	typeref:typename:std::locale
locale_ref	./vendor/fmt/include/base.h	/^  constexpr locale_ref() : locale_(nullptr) {}$/;"	f	class:detail::locale_ref
locale_ref	./vendor/fmt/include/base.h	/^class locale_ref {$/;"	c	namespace:detail
locale_ref	./vendor/fmt/include/format-inl.h	/^locale_ref::locale_ref(const Locale& loc) : locale_(&loc) {$/;"	f	class:detail::locale_ref
localized	./vendor/fmt/include/base.h	/^  bool localized : 1;$/;"	m	struct:format_specs	typeref:typename:bool:1
localized	./vendor/fmt/include/chrono.h	/^  bool localized = false;$/;"	m	struct:detail::chrono_formatter	typeref:typename:bool
localized_	./vendor/fmt/include/chrono.h	/^  bool localized_ = false;$/;"	m	struct:formatter	typeref:typename:bool
localtime	./vendor/fmt/include/chrono.h	/^inline auto localtime(std::chrono::local_time<Duration> time) -> std::tm {$/;"	f	typeref:typename:std::tm
localtime	./vendor/fmt/include/chrono.h	/^inline auto localtime(std::time_t time) -> std::tm {$/;"	f	typeref:typename:std::tm
localtime_s	./vendor/fmt/include/chrono.h	/^inline auto localtime_s(...) -> null<> { return null<>(); }$/;"	f	namespace:detail	typeref:typename:null<>
lock	./src/flecs.c	/^    ecs_os_mutex_t lock;$/;"	m	struct:ecs_http_server_t	typeref:typename:ecs_os_mutex_t	file:
lock	./src/flecs.c	/^    int32_t lock;                    \/* Prevents modifications *\/$/;"	m	struct:ecs_table__t	typeref:typename:int32_t	file:
lock	./src/log.c	/^  log_LockFn lock;$/;"	m	struct:__anon6383736c0208	typeref:typename:log_LockFn	file:
lock	./src/log.c	/^static void lock(void)   {$/;"	f	typeref:typename:void	file:
locking	./vendor/fmt/include/base.h	/^struct locking : bool_constant<mapped_type_constant<T, format_context>::value ==$/;"	s	namespace:detail
locking	./vendor/fmt/include/base.h	/^struct locking<T, void_t<typename formatter<remove_cvref_t<T>>::nonlocking>>$/;"	s	namespace:detail
locs	./vendor/raylib5/include/raylib.h	/^    int *locs;              \/\/ Shader locations array (RL_MAX_SHADER_LOCATIONS)$/;"	m	struct:Shader	typeref:typename:int *
log	./src/flecs.h	/^namespace log {$/;"	n	namespace:flecs
log2	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^inline int8_t log2(size_t value)$/;"	f	namespace:ska::detailv3	typeref:typename:int8_t
log_	./src/flecs.h	/^    ecs_os_api_log_t log_; \/* Logging function. The level should be interpreted as: *\/$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_log_t
log_Event	./src/log.h	/^} log_Event;$/;"	t	typeref:struct:__anon638373710108
log_LockFn	./src/log.h	/^typedef void (*log_LockFn)(bool lock, void *udata);$/;"	t	typeref:typename:void (*)(bool lock,void * udata)
log_LogFn	./src/log.h	/^typedef void (*log_LogFn)(log_Event *ev);$/;"	t	typeref:typename:void (*)(log_Event * ev)
log_add_callback	./src/log.c	/^int log_add_callback(log_LogFn fn, void *udata, int level) {$/;"	f	typeref:typename:int
log_add_fp	./src/log.c	/^int log_add_fp(FILE *fp, int level) {$/;"	f	typeref:typename:int
log_debug	./src/log.h	/^#define log_debug(/;"	d
log_error	./src/log.h	/^#define log_error(/;"	d
log_fatal	./src/log.h	/^#define log_fatal(/;"	d
log_indent_	./src/flecs.h	/^    int32_t log_indent_;$/;"	m	struct:ecs_os_api_t	typeref:typename:int32_t
log_info	./src/log.h	/^#define log_info(/;"	d
log_last_error_	./src/flecs.h	/^    int32_t log_last_error_;$/;"	m	struct:ecs_os_api_t	typeref:typename:int32_t
log_last_timestamp_	./src/flecs.h	/^    int64_t log_last_timestamp_;$/;"	m	struct:ecs_os_api_t	typeref:typename:int64_t
log_level_	./src/flecs.h	/^    int32_t log_level_;$/;"	m	struct:ecs_os_api_t	typeref:typename:int32_t
log_level_string	./src/log.c	/^const char* log_level_string(int level) {$/;"	f	typeref:typename:const char *
log_log	./src/log.c	/^void log_log(int level, const char *file, int line, const char *fmt, ...) {$/;"	f	typeref:typename:void
log_out_	./src/flecs.h	/^    FILE *log_out_;$/;"	m	struct:ecs_os_api_t	typeref:typename:FILE *
log_set_level	./src/log.c	/^void log_set_level(int level) {$/;"	f	typeref:typename:void
log_set_lock	./src/log.c	/^void log_set_lock(log_LockFn fn, void *udata) {$/;"	f	typeref:typename:void
log_set_quiet	./src/log.c	/^void log_set_quiet(bool enable) {$/;"	f	typeref:typename:void
log_trace	./src/log.h	/^#define log_trace(/;"	d
log_warn	./src/log.h	/^#define log_warn(/;"	d
lon	./vendor/STC/include/stc/types.h	/^    struct { cstr_value* data; size_t size, ncap; } lon;$/;"	m	union:cstr	typeref:struct:cstr::__anon0ab7b7af0608
long_double_type	./vendor/fmt/include/base.h	/^  long_double_type,$/;"	e	enum:detail::type
long_double_value	./vendor/fmt/include/base.h	/^    long double long_double_value;$/;"	m	union:detail::value::__anonea363bd9060a	typeref:typename:long double
long_long_type	./vendor/fmt/include/base.h	/^  long_long_type,$/;"	e	enum:detail::type
long_long_value	./vendor/fmt/include/base.h	/^    long long long_long_value;$/;"	m	union:detail::value::__anonea363bd9060a	typeref:typename:long long
long_short	./vendor/fmt/include/base.h	/^enum { long_short = sizeof(long) == sizeof(int) };$/;"	e	enum:detail::__anonea363bd90703
long_type	./vendor/fmt/include/base.h	/^using long_type = conditional_t<long_short, int, long long>;$/;"	t	namespace:detail	typeref:typename:conditional_t<long_short,int,long long>
lookup	./src/flecs.c	/^    const char *lookup;    \/* Lookup string for variable *\/$/;"	m	struct:ecs_rule_var_t	typeref:typename:const char *	file:
lookup	./src/flecs.h	/^inline entity world::lookup(const char *name, bool search_path) const {$/;"	f	class:flecs::world	typeref:typename:entity
lookup	./src/flecs.h	/^inline flecs::entity entity_view::lookup(const char *path, bool search_path) const {$/;"	f	class:flecs::entity_view	typeref:typename:flecs::entity
lookup_action	./src/flecs.h	/^    ecs_entity_t (*lookup_action)($/;"	m	struct:ecs_from_json_desc_t	typeref:typename:ecs_entity_t (*)(const ecs_world_t *,const char * value,void * ctx)
lookup_action	./src/flecs.h	/^    ecs_entity_t (*lookup_action)($/;"	m	struct:ecs_parse_expr_desc_t	typeref:typename:ecs_entity_t (*)(const ecs_world_t *,const char * value,void * ctx)
lookup_action	./src/flecs.h	/^    ecs_entity_t (*lookup_action)(const ecs_world_t*, const char*, void*);$/;"	m	struct:ecs_meta_cursor_t	typeref:typename:ecs_entity_t (*)(const ecs_world_t *,const char *,void *)
lookup_ctx	./src/flecs.h	/^    void *lookup_ctx;$/;"	m	struct:ecs_from_json_desc_t	typeref:typename:void *
lookup_ctx	./src/flecs.h	/^    void *lookup_ctx;$/;"	m	struct:ecs_meta_cursor_t	typeref:typename:void *
lookup_ctx	./src/flecs.h	/^    void *lookup_ctx;$/;"	m	struct:ecs_parse_expr_desc_t	typeref:typename:void *
lookup_path	./src/flecs.c	/^    const ecs_entity_t *lookup_path; \/* Search path used by lookup operations *\/$/;"	m	struct:ecs_stage_t	typeref:typename:const ecs_entity_t *	file:
looping	./vendor/raylib5/include/raylib.h	/^    bool looping;               \/\/ Music looping enable$/;"	m	struct:Music	typeref:typename:bool
lose_depth	./src/flecs.h	/^    bool lose_depth;$/;"	m	struct:ecs_flatten_desc_t	typeref:typename:bool
lossless_integral_conversion	./vendor/fmt/include/chrono.h	/^FMT_CONSTEXPR auto lossless_integral_conversion(const From from, int& ec)$/;"	f	namespace:safe_duration_cast	typeref:typename:To
low	./vendor/fmt/include/format.h	/^  constexpr auto low() const noexcept -> uint64_t { return lo_; }$/;"	f	class:detail::uint128_fallback	typeref:typename:auto
lowcase_ind	./vendor/STC/include/stc/priv/utf8_tab.c	/^static uint8_t lowcase_ind[184] = {$/;"	v	typeref:typename:uint8_t[184]	file:
lower	./vendor/STC/include/stc/crand.h	/^typedef struct crand_uniform { int64_t lower; uint64_t range, threshold; } crand_uniform_t;$/;"	m	struct:crand_uniform	typeref:typename:int64_t
lower_count	./vendor/fmt/include/format-inl.h	/^  unsigned char lower_count;$/;"	m	struct:detail::singleton	typeref:typename:unsigned char
luminous_intensity	./src/flecs.h	/^struct luminous_intensity {$/;"	s	struct:flecs::units
lx	./vendor/STC/misc/benchmarks/various/cspan_bench.c	/^int lx = 15, ly = 10, lz = 5;$/;"	v	typeref:typename:int
ly	./vendor/STC/misc/benchmarks/various/cspan_bench.c	/^int lx = 15, ly = 10, lz = 5;$/;"	v	typeref:typename:int
lz	./vendor/STC/misc/benchmarks/various/cspan_bench.c	/^int lx = 15, ly = 10, lz = 5;$/;"	v	typeref:typename:int
m	./vendor/STC/include/stc/priv/cregex_prv.c	/^    _Resub m[_NSUBEXP];$/;"	m	struct:_Resublist	typeref:typename:_Resub[]	file:
m0	./vendor/raylib5/include/raylib.h	/^    float m0, m4, m8, m12;  \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m0	./vendor/raylib5/include/raymath.h	/^    float m0, m4, m8, m12;      \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m00	./vendor/STC/misc/examples/spans/matmult.c	/^typedef struct { Mat2 m00, m01, m10, m11; } Partition;$/;"	m	struct:__anonc4048f0a0108	typeref:typename:Mat2	file:
m01	./vendor/STC/misc/examples/spans/matmult.c	/^typedef struct { Mat2 m00, m01, m10, m11; } Partition;$/;"	m	struct:__anonc4048f0a0108	typeref:typename:Mat2	file:
m1	./vendor/raylib5/include/raylib.h	/^    float m1, m5, m9, m13;  \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m1	./vendor/raylib5/include/raymath.h	/^    float m1, m5, m9, m13;      \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m10	./vendor/STC/misc/examples/spans/matmult.c	/^typedef struct { Mat2 m00, m01, m10, m11; } Partition;$/;"	m	struct:__anonc4048f0a0108	typeref:typename:Mat2	file:
m10	./vendor/raylib5/include/raylib.h	/^    float m2, m6, m10, m14; \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m10	./vendor/raylib5/include/raymath.h	/^    float m2, m6, m10, m14;     \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m11	./vendor/STC/misc/examples/spans/matmult.c	/^typedef struct { Mat2 m00, m01, m10, m11; } Partition;$/;"	m	struct:__anonc4048f0a0108	typeref:typename:Mat2	file:
m11	./vendor/raylib5/include/raylib.h	/^    float m3, m7, m11, m15; \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m11	./vendor/raylib5/include/raymath.h	/^    float m3, m7, m11, m15;     \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m12	./vendor/raylib5/include/raylib.h	/^    float m0, m4, m8, m12;  \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m12	./vendor/raylib5/include/raymath.h	/^    float m0, m4, m8, m12;      \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m13	./vendor/raylib5/include/raylib.h	/^    float m1, m5, m9, m13;  \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m13	./vendor/raylib5/include/raymath.h	/^    float m1, m5, m9, m13;      \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m14	./vendor/raylib5/include/raylib.h	/^    float m2, m6, m10, m14; \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m14	./vendor/raylib5/include/raymath.h	/^    float m2, m6, m10, m14;     \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m15	./vendor/raylib5/include/raylib.h	/^    float m3, m7, m11, m15; \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m15	./vendor/raylib5/include/raymath.h	/^    float m3, m7, m11, m15;     \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m2	./vendor/STC/include/stc/priv/utf8_tab.c	/^struct CaseMapping { uint16_t c1, c2, m2; };$/;"	m	struct:CaseMapping	typeref:typename:uint16_t	file:
m2	./vendor/raylib5/include/raylib.h	/^    float m2, m6, m10, m14; \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m2	./vendor/raylib5/include/raymath.h	/^    float m2, m6, m10, m14;     \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m3	./vendor/raylib5/include/raylib.h	/^    float m3, m7, m11, m15; \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m3	./vendor/raylib5/include/raymath.h	/^    float m3, m7, m11, m15;     \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m4	./vendor/raylib5/include/raylib.h	/^    float m0, m4, m8, m12;  \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m4	./vendor/raylib5/include/raymath.h	/^    float m0, m4, m8, m12;      \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m5	./vendor/raylib5/include/raylib.h	/^    float m1, m5, m9, m13;  \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m5	./vendor/raylib5/include/raymath.h	/^    float m1, m5, m9, m13;      \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m6	./vendor/raylib5/include/raylib.h	/^    float m2, m6, m10, m14; \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m6	./vendor/raylib5/include/raymath.h	/^    float m2, m6, m10, m14;     \/\/ Matrix third row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m7	./vendor/raylib5/include/raylib.h	/^    float m3, m7, m11, m15; \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m7	./vendor/raylib5/include/raymath.h	/^    float m3, m7, m11, m15;     \/\/ Matrix fourth row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m8	./vendor/raylib5/include/raylib.h	/^    float m0, m4, m8, m12;  \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m8	./vendor/raylib5/include/raymath.h	/^    float m0, m4, m8, m12;      \/\/ Matrix first row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m9	./vendor/raylib5/include/raylib.h	/^    float m1, m5, m9, m13;  \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
m9	./vendor/raylib5/include/raymath.h	/^    float m1, m5, m9, m13;      \/\/ Matrix second row (4 components)$/;"	m	struct:Matrix	typeref:typename:float
mData	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        value_type mData;$/;"	m	class:robin_hood::detail::Table::DataNode	typeref:typename:value_type
mData	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        value_type* mData;$/;"	m	class:robin_hood::detail::Table::DataNode	typeref:typename:value_type *
mHashMultiplier	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    uint64_t mHashMultiplier = UINT64_C(0xc4ceb9fe1a85ec53);                \/\/ 8 byte  8$/;"	m	class:robin_hood::detail::Table	typeref:typename:uint64_t
mHead	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    T* mHead{nullptr};$/;"	m	class:robin_hood::detail::BulkPoolAllocator	typeref:typename:T *
mInfo	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        uint8_t const* mInfo{nullptr};$/;"	m	class:robin_hood::detail::Table::Iter	typeref:typename:uint8_t const *
mInfo	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    uint8_t* mInfo = reinterpret_cast<uint8_t*>(&mMask);                    \/\/ 8 byte 24$/;"	m	class:robin_hood::detail::Table	typeref:typename:uint8_t *
mInfoHashShift	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    InfoType mInfoHashShift = InitialInfoHashShift;                         \/\/ 4 byte 56$/;"	m	class:robin_hood::detail::Table	typeref:typename:InfoType
mInfoInc	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    InfoType mInfoInc = InitialInfoInc;                                     \/\/ 4 byte 52$/;"	m	class:robin_hood::detail::Table	typeref:typename:InfoType
mKeyVals	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        NodePtr mKeyVals{nullptr};$/;"	m	class:robin_hood::detail::Table::Iter	typeref:typename:NodePtr
mKeyVals	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    Node* mKeyVals = reinterpret_cast_no_cast_align_warning<Node*>(&mMask); \/\/ 8 byte 16$/;"	m	class:robin_hood::detail::Table	typeref:typename:Node *
mListForFree	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    T** mListForFree{nullptr};$/;"	m	class:robin_hood::detail::BulkPoolAllocator	typeref:typename:T **
mMask	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    size_t mMask = 0;                                                       \/\/ 8 byte 40$/;"	m	class:robin_hood::detail::Table	typeref:typename:size_t
mMaxNumElementsAllowed	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    size_t mMaxNumElementsAllowed = 0;                                      \/\/ 8 byte 48$/;"	m	class:robin_hood::detail::Table	typeref:typename:size_t
mNumElements	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    size_t mNumElements = 0;                                                \/\/ 8 byte 32$/;"	m	class:robin_hood::detail::Table	typeref:typename:size_t
m_array	./src/flecs.h	/^    T m_array[Size];$/;"	m	struct:flecs::array	typeref:typename:T[]
m_begin	./src/flecs.h	/^    std::size_t m_begin;$/;"	m	struct:flecs::iter	typeref:typename:std::size_t
m_blocks	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    std::vector<pointer, vec_alloc> m_blocks{};$/;"	m	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:std::vector<pointer,vec_alloc>
m_bucket	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^    bucket_entry_ptr m_bucket;$/;"	m	class:tsl::detail_robin_hash::robin_hash::robin_iterator	typeref:typename:bucket_entry_ptr
m_bucket_count	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  size_type m_bucket_count;$/;"	m	class:tsl::detail_robin_hash::robin_hash	typeref:typename:size_type
m_buckets	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    bucket_pointer m_buckets{};$/;"	m	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:bucket_pointer
m_buckets	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  bucket_entry* m_buckets;$/;"	m	class:tsl::detail_robin_hash::robin_hash	typeref:typename:bucket_entry *
m_buckets_data	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  buckets_container_type m_buckets_data;$/;"	m	class:tsl::detail_robin_hash::robin_hash	typeref:typename:buckets_container_type
m_buf	./src/flecs.h	/^    ecs_strbuf_t m_buf;$/;"	m	struct:flecs::stringstream	typeref:typename:ecs_strbuf_t
m_chain_it	./src/flecs.h	/^    ecs_iter_t m_chain_it;$/;"	m	struct:flecs::page_iterable	typeref:typename:ecs_iter_t
m_chain_it	./src/flecs.h	/^    ecs_iter_t m_chain_it;$/;"	m	struct:flecs::worker_iterable	typeref:typename:ecs_iter_t
m_const_str	./src/flecs.h	/^    const char *m_const_str;$/;"	m	struct:flecs::string	typeref:typename:const char *
m_count	./src/flecs.h	/^    int32_t m_count = 0;$/;"	m	struct:flecs::table_range	typeref:typename:int32_t
m_count	./src/flecs.h	/^    size_t m_count;$/;"	m	struct:flecs::field	typeref:typename:size_t
m_count	./src/flecs.h	/^    size_t m_count;$/;"	m	struct:flecs::untyped_field	typeref:typename:size_t
m_created	./src/flecs.h	/^    bool m_created = false;$/;"	m	struct:flecs::metric_builder	typeref:typename:bool
m_cursor	./src/flecs.h	/^    ecs_meta_cursor_t m_cursor;$/;"	m	struct:flecs::cursor	typeref:typename:ecs_meta_cursor_t
m_data	./src/flecs.h	/^    T* m_data;$/;"	m	struct:flecs::field	typeref:typename:T *
m_data	./src/flecs.h	/^    void* m_data;$/;"	m	struct:flecs::untyped_field	typeref:typename:void *
m_data	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^        ptr_t m_data{};$/;"	m	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector::iter_t	typeref:typename:ptr_t
m_delta_time	./src/flecs.h	/^    ecs_ftime_t m_delta_time;$/;"	m	struct:flecs::system_runner_fluent	typeref:typename:ecs_ftime_t
m_desc	./src/flecs.h	/^    TDesc m_desc;$/;"	m	struct:flecs::_::builder	typeref:typename:TDesc
m_desc	./src/flecs.h	/^    TDesc m_desc;$/;"	m	struct:flecs::_::node_builder	typeref:typename:TDesc
m_desc	./src/flecs.h	/^    ecs_alert_desc_t *m_desc;$/;"	m	struct:flecs::alert_builder_i	typeref:typename:ecs_alert_desc_t *
m_desc	./src/flecs.h	/^    ecs_app_desc_t m_desc;$/;"	m	struct:flecs::app_builder	typeref:typename:ecs_app_desc_t
m_desc	./src/flecs.h	/^    ecs_event_desc_t m_desc;$/;"	m	struct:flecs::event_builder_base	typeref:typename:ecs_event_desc_t
m_desc	./src/flecs.h	/^    ecs_filter_desc_t *m_desc;$/;"	m	struct:flecs::filter_builder_i	typeref:typename:ecs_filter_desc_t *
m_desc	./src/flecs.h	/^    ecs_metric_desc_t m_desc = {};$/;"	m	struct:flecs::metric_builder	typeref:typename:ecs_metric_desc_t
m_desc	./src/flecs.h	/^    ecs_observer_desc_t *m_desc;$/;"	m	struct:flecs::observer_builder_i	typeref:typename:ecs_observer_desc_t *
m_desc	./src/flecs.h	/^    ecs_pipeline_desc_t *m_desc;$/;"	m	struct:flecs::pipeline_builder_i	typeref:typename:ecs_pipeline_desc_t *
m_desc	./src/flecs.h	/^    ecs_query_desc_t *m_desc;$/;"	m	struct:flecs::query_builder_i	typeref:typename:ecs_query_desc_t *
m_desc	./src/flecs.h	/^    ecs_system_desc_t *m_desc;$/;"	m	struct:flecs::system_builder_i	typeref:typename:ecs_system_desc_t *
m_dist_and_fingerprint	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    uint32_t m_dist_and_fingerprint; \/\/ upper 3 byte: distance to original bucket. lower byte:/;"	m	struct:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::bucket_type::standard	typeref:typename:uint32_t
m_dist_from_ideal_bucket	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  distance_type m_dist_from_ideal_bucket;$/;"	m	class:tsl::detail_robin_hash::bucket_entry	typeref:typename:distance_type
m_end	./src/flecs.h	/^    std::size_t m_end;$/;"	m	struct:flecs::iter	typeref:typename:std::size_t
m_equal	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    KeyEqual m_equal{};$/;"	m	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:KeyEqual
m_event_count	./src/flecs.h	/^    int32_t m_event_count;$/;"	m	struct:flecs::observer_builder_i	typeref:typename:int32_t
m_expr_count	./src/flecs.h	/^    int32_t m_expr_count;$/;"	m	struct:flecs::filter_builder_i	typeref:typename:int32_t
m_filter	./src/flecs.h	/^    filter_t m_filter = ECS_FILTER_INIT;$/;"	m	struct:flecs::filter_base	typeref:typename:filter_t
m_filter_ptr	./src/flecs.h	/^    const filter_t *m_filter_ptr;$/;"	m	struct:flecs::filter_base	typeref:typename:const filter_t *
m_func	./src/flecs.h	/^    Func m_func;$/;"	m	struct:flecs::_::each_delegate	typeref:typename:Func
m_func	./src/flecs.h	/^    Func m_func;$/;"	m	struct:flecs::_::entity_observer_delegate	typeref:typename:Func
m_func	./src/flecs.h	/^    Func m_func;$/;"	m	struct:flecs::_::entity_payload_observer_delegate	typeref:typename:Func
m_func	./src/flecs.h	/^    Func m_func;$/;"	m	struct:flecs::_::find_delegate	typeref:typename:Func
m_func	./src/flecs.h	/^    Func m_func;$/;"	m	struct:flecs::_::iter_delegate	typeref:typename:Func
m_grow_on_next_insert	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  bool m_grow_on_next_insert;$/;"	m	class:tsl::detail_robin_hash::robin_hash	typeref:typename:bool
m_hash	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    Hash m_hash{};$/;"	m	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:Hash
m_hash	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  truncated_hash_type m_hash;$/;"	m	class:tsl::detail_robin_hash::bucket_entry_hash	typeref:typename:truncated_hash_type
m_ht	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  ht m_ht;$/;"	m	class:tsl::robin_map	typeref:typename:ht
m_id	./src/flecs.h	/^    entity_t m_id;$/;"	m	struct:flecs::system_runner_fluent	typeref:typename:entity_t
m_id	./src/flecs.h	/^    flecs::id_t m_id;$/;"	m	struct:flecs::id	typeref:typename:flecs::id_t
m_ids	./src/flecs.h	/^    flecs::type_t m_ids;$/;"	m	struct:flecs::event_builder_base	typeref:typename:flecs::type_t
m_ids_array	./src/flecs.h	/^    flecs::id_t m_ids_array[ECS_EVENT_DESC_ID_COUNT_MAX];$/;"	m	struct:flecs::event_builder_base	typeref:typename:flecs::id_t[]
m_idx	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^        size_t m_idx{};$/;"	m	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector::iter_t	typeref:typename:size_t
m_index	./src/flecs.h	/^    int m_index;$/;"	m	struct:flecs::array_iterator	typeref:typename:int
m_instanced	./src/flecs.h	/^    bool m_instanced;$/;"	m	struct:flecs::_::node_builder	typeref:typename:bool
m_iprime	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^  unsigned int m_iprime;$/;"	m	class:tsl::rh::prime_growth_policy	typeref:typename:unsigned int
m_is_shared	./src/flecs.h	/^    bool m_is_shared;$/;"	m	struct:flecs::field	typeref:typename:bool
m_is_shared	./src/flecs.h	/^    bool m_is_shared;$/;"	m	struct:flecs::untyped_field	typeref:typename:bool
m_it	./src/flecs.h	/^    ecs_iter_t m_it;$/;"	m	struct:flecs::iter_iterable	typeref:typename:ecs_iter_t
m_iter	./src/flecs.h	/^    flecs::iter_t *m_iter;$/;"	m	struct:flecs::iter	typeref:typename:flecs::iter_t *
m_last_bucket	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  bool m_last_bucket;$/;"	m	class:tsl::detail_robin_hash::bucket_entry	typeref:typename:bool
m_length	./src/flecs.h	/^    ecs_size_t m_length;$/;"	m	struct:flecs::string	typeref:typename:ecs_size_t
m_limit	./src/flecs.h	/^    int32_t m_limit;$/;"	m	struct:flecs::page_iterable	typeref:typename:int32_t
m_limit	./src/flecs.h	/^    int32_t m_limit;$/;"	m	struct:flecs::system_runner_fluent	typeref:typename:int32_t
m_limit	./src/flecs.h	/^    int32_t m_limit;$/;"	m	struct:flecs::worker_iterable	typeref:typename:int32_t
m_load_threshold	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  size_type m_load_threshold;$/;"	m	class:tsl::detail_robin_hash::robin_hash	typeref:typename:size_type
m_mask	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^  std::size_t m_mask;$/;"	m	class:tsl::rh::power_of_two_growth_policy	typeref:typename:std::size_t
m_max_bucket_capacity	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    size_t m_max_bucket_capacity = 0;$/;"	m	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:size_t
m_max_load_factor	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    float m_max_load_factor = default_max_load_factor;$/;"	m	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:float
m_max_load_factor	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  float m_max_load_factor;$/;"	m	class:tsl::detail_robin_hash::robin_hash	typeref:typename:float
m_min_load_factor	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  float m_min_load_factor;$/;"	m	class:tsl::detail_robin_hash::robin_hash	typeref:typename:float
m_mod	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^  std::size_t m_mod;$/;"	m	class:tsl::rh::mod_growth_policy	typeref:typename:std::size_t
m_nb_elements	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  size_type m_nb_elements;$/;"	m	class:tsl::detail_robin_hash::robin_hash	typeref:typename:size_type
m_next	./src/flecs.h	/^    ecs_iter_next_action_t m_next;$/;"	m	struct:flecs::iter_iterable	typeref:typename:ecs_iter_next_action_t
m_next_each	./src/flecs.h	/^    ecs_iter_next_action_t m_next_each;$/;"	m	struct:flecs::iter_iterable	typeref:typename:ecs_iter_next_action_t
m_num_buckets	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    size_t m_num_buckets = 0;$/;"	m	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:size_t
m_offset	./src/flecs.h	/^    int32_t m_offset = 0;$/;"	m	struct:flecs::table_range	typeref:typename:int32_t
m_offset	./src/flecs.h	/^    int32_t m_offset;$/;"	m	struct:flecs::page_iterable	typeref:typename:int32_t
m_offset	./src/flecs.h	/^    int32_t m_offset;$/;"	m	struct:flecs::system_runner_fluent	typeref:typename:int32_t
m_offset	./src/flecs.h	/^    int32_t m_offset;$/;"	m	struct:flecs::worker_iterable	typeref:typename:int32_t
m_owned	./src/flecs.h	/^    bool m_owned;$/;"	m	struct:flecs::world	typeref:typename:bool
m_param	./src/flecs.h	/^    void *m_param;$/;"	m	struct:flecs::system_runner_fluent	typeref:typename:void *
m_prev_scope	./src/flecs.h	/^    flecs::entity_t m_prev_scope;$/;"	m	struct:flecs::scoped_world	typeref:typename:flecs::entity_t
m_query	./src/flecs.h	/^    query_t *m_query;$/;"	m	struct:flecs::query_base	typeref:typename:query_t *
m_ref	./src/flecs.h	/^    flecs::ref_t m_ref;$/;"	m	struct:flecs::ref	typeref:typename:flecs::ref_t
m_row	./src/flecs.h	/^    size_t m_row;    $/;"	m	struct:flecs::_::each_column_base	typeref:typename:size_t
m_rule	./src/flecs.h	/^    rule_t *m_rule;$/;"	m	struct:flecs::rule_base	typeref:typename:rule_t *
m_shifts	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    uint8_t m_shifts = initial_shifts;$/;"	m	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:uint8_t
m_size	./src/flecs.h	/^    size_t m_size;$/;"	m	struct:flecs::untyped_field	typeref:typename:size_t
m_size	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    size_t m_size{};$/;"	m	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:size_t
m_snapshot	./src/flecs.h	/^    snapshot_t *m_snapshot;$/;"	m	struct:flecs::snapshot	typeref:typename:snapshot_t *
m_stage	./src/flecs.h	/^    world_t *m_stage;$/;"	m	struct:flecs::system_runner_fluent	typeref:typename:world_t *
m_stage_count	./src/flecs.h	/^    int32_t m_stage_count;$/;"	m	struct:flecs::system_runner_fluent	typeref:typename:int32_t
m_stage_current	./src/flecs.h	/^    int32_t m_stage_current;$/;"	m	struct:flecs::system_runner_fluent	typeref:typename:int32_t
m_str	./src/flecs.h	/^    char *m_str = nullptr;$/;"	m	struct:flecs::string	typeref:typename:char *
m_table	./src/flecs.h	/^    table_t *m_table;$/;"	m	struct:flecs::table	typeref:typename:table_t *
m_term	./src/flecs.h	/^    const _::term_ptr& m_term;$/;"	m	struct:flecs::_::each_column_base	typeref:typename:const _::term_ptr &
m_term	./src/flecs.h	/^    ecs_term_t *m_term;$/;"	m	struct:flecs::term_builder_i	typeref:typename:ecs_term_t *
m_term_id	./src/flecs.h	/^    ecs_term_id_t *m_term_id;$/;"	m	struct:flecs::term_id_builder_i	typeref:typename:ecs_term_id_t *
m_term_index	./src/flecs.h	/^    int32_t m_term_index;$/;"	m	struct:flecs::filter_builder_i	typeref:typename:int32_t
m_terms	./src/flecs.h	/^    array m_terms;$/;"	m	struct:flecs::_::term_ptrs	typeref:typename:array
m_try_shrink_on_next_insert	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  bool m_try_shrink_on_next_insert;$/;"	m	class:tsl::detail_robin_hash::robin_hash	typeref:typename:bool
m_type	./src/flecs.h	/^    const type_t *m_type;$/;"	m	struct:flecs::type	typeref:typename:const type_t *
m_value	./src/flecs.h	/^    T m_value;$/;"	m	struct:flecs::_::range_iterator	typeref:typename:T
m_value	./src/flecs.h	/^    T* m_value;$/;"	m	struct:flecs::array_iterator	typeref:typename:T *
m_value	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  alignas(value_type) unsigned char m_value[sizeof(value_type)];$/;"	m	class:tsl::detail_robin_hash::bucket_entry	typeref:typename:unsigned char[]
m_value_idx	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    uint32_t m_value_idx;            \/\/ index into the m_values vector.$/;"	m	struct:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::bucket_type::standard	typeref:typename:uint32_t
m_values	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    value_container_type m_values{}; \/\/ Contains all the key-value pairs in one densely stored/;"	m	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:value_container_type
m_world	./src/flecs.h	/^        flecs::world_t *m_world;$/;"	m	struct:flecs::_::sig	typeref:typename:flecs::world_t *
m_world	./src/flecs.h	/^    const world& m_world;$/;"	m	struct:flecs::snapshot	typeref:typename:const world &
m_world	./src/flecs.h	/^    flecs::world_t *m_world;$/;"	m	struct:flecs::_::builder	typeref:typename:flecs::world_t *
m_world	./src/flecs.h	/^    flecs::world_t *m_world;$/;"	m	struct:flecs::_::node_builder	typeref:typename:flecs::world_t *
m_world	./src/flecs.h	/^    flecs::world_t *m_world;$/;"	m	struct:flecs::app_builder	typeref:typename:flecs::world_t *
m_world	./src/flecs.h	/^    flecs::world_t *m_world;$/;"	m	struct:flecs::event_builder_base	typeref:typename:flecs::world_t *
m_world	./src/flecs.h	/^    flecs::world_t *m_world;$/;"	m	struct:flecs::id	typeref:typename:flecs::world_t *
m_world	./src/flecs.h	/^    flecs::world_t *m_world;$/;"	m	struct:flecs::metric_builder	typeref:typename:flecs::world_t *
m_world	./src/flecs.h	/^    flecs::world_t *m_world;$/;"	m	struct:flecs::term	typeref:typename:flecs::world_t *
m_world	./src/flecs.h	/^    world_t *m_world = nullptr;$/;"	m	struct:flecs::filter_base	typeref:typename:world_t *
m_world	./src/flecs.h	/^    world_t *m_world;$/;"	m	struct:flecs::query_base	typeref:typename:world_t *
m_world	./src/flecs.h	/^    world_t *m_world;$/;"	m	struct:flecs::ref	typeref:typename:world_t *
m_world	./src/flecs.h	/^    world_t *m_world;$/;"	m	struct:flecs::rule_base	typeref:typename:world_t *
m_world	./src/flecs.h	/^    world_t *m_world;$/;"	m	struct:flecs::table	typeref:typename:world_t *
m_world	./src/flecs.h	/^    world_t *m_world;$/;"	m	struct:flecs::type	typeref:typename:world_t *
m_world	./src/flecs.h	/^    world_t *m_world;$/;"	m	struct:flecs::world	typeref:typename:world_t *
magenta	./vendor/fmt/include/color.h	/^  magenta = 0xFF00FF,                  \/\/ rgb(255,0,255)$/;"	e	enum:color
magenta	./vendor/fmt/include/color.h	/^  magenta,$/;"	e	enum:terminal_color
magic	./src/flecs.h	/^    int32_t magic; \/* Magic number verifying it's a flecs object *\/$/;"	m	struct:ecs_header_t	typeref:typename:int32_t
magic0	./vendor/STC/misc/tests/ctest.h	/^    uint32_t magic0, padding;$/;"	m	struct:ctest	typeref:typename:uint32_t
magic1	./vendor/STC/misc/tests/ctest.h	/^    uint32_t magic1;$/;"	m	struct:ctest	typeref:typename:uint32_t
main	./src/main.c	/^int main()$/;"	f	typeref:typename:int
main	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	./vendor/STC/misc/benchmarks/plotbench/pque_benchmark.cpp	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	./vendor/STC/misc/benchmarks/various/binsearch_bench.c	/^int main(int argc, char const *argv[])$/;"	f	typeref:typename:int
main	./vendor/STC/misc/benchmarks/various/cbits_benchmark.cpp	/^int main(int argc, char **argv)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/benchmarks/various/cspan_bench.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/benchmarks/various/prng_bench.cpp	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/benchmarks/various/quicksort_bench.c	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	./vendor/STC/misc/benchmarks/various/rust_hashmap.rs	/^fn main() {$/;"	f
main	./vendor/STC/misc/benchmarks/various/rust_hmap.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^int main(void) {$/;"	f	typeref:typename:int
main	./vendor/STC/misc/benchmarks/various/string_bench_STC.cpp	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/benchmarks/various/string_bench_STD.cpp	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/algorithms/filterdemos.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/algorithms/forloops.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/algorithms/random.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/algorithms/shape.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/algorithms/shape.cpp	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/bitsets/bits.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/bitsets/bits2.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/bitsets/prime.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/coroutines/cointerleave.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/coroutines/coread.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/coroutines/coroutines.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/coroutines/cotasks1.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/coroutines/cotasks2.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/coroutines/dining_philosophers.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/coroutines/filetask.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/coroutines/generator.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/coroutines/scheduler.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/coroutines/triples.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/hashmaps/birthday.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/hashmaps/books.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/hashmaps/hashmap.c	/^int main(void) {$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/hashmaps/new_map.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/hashmaps/phonebook.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/hashmaps/unordered_set.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/hashmaps/vikings.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/linkedlists/intrusive.c	/^int main(void) {$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/linkedlists/list_erase.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/linkedlists/list_splice.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/linkedlists/lists.c	/^int main(void) {$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/linkedlists/new_list.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/mixed/astar.c	/^main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/mixed/complex.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/mixed/convert.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/mixed/demos.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/mixed/inits.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/mixed/read.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/priorityqueues/functor.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/priorityqueues/new_pque.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/priorityqueues/priority.c	/^int main(void) {$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/queues/new_queue.c	/^int main(void) {$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/queues/queue.c	/^int main(void) {$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/regularexpressions/regex1.c	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/regularexpressions/regex2.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/regularexpressions/regex_match.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/regularexpressions/regex_replace.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/smartpointers/arc_containers.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/smartpointers/arc_demo.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/smartpointers/arcvec_erase.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/smartpointers/box.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/smartpointers/box2.c	/^int main(void) {$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/smartpointers/map_box.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/smartpointers/map_ptr.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/smartpointers/music_arc.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/smartpointers/new_sptr.c	/^int main(void) {$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/smartpointers/person_arc.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/sortedmaps/gauss2.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/sortedmaps/listmap.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/sortedmaps/mapmap.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/sortedmaps/multimap.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/sortedmaps/new_smap.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/sortedmaps/smap_erase.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/sortedmaps/smap_find.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/sortedmaps/smap_insert.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/sortedmaps/sorted_map.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/sortedmaps/sset_erase.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/spans/matmult.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/spans/mdspan.c	/^int main(void) {$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/spans/multidim.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/spans/printspan.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/spans/submdspan.c	/^int main(void) {$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/strings/cstr_match.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/strings/replace.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/strings/splitstr.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/strings/sso_map.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/strings/sso_substr.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/strings/sview_split.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/strings/utf8replace_c.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/strings/utf8replace_rs.rs	/^pub fn main() {$/;"	f
main	./vendor/STC/misc/examples/vectors/lower_bound.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/vectors/new_vec.c	/^int main(void)$/;"	f	typeref:typename:int
main	./vendor/STC/misc/examples/vectors/stack.c	/^int main(void) {$/;"	f	typeref:typename:int
main	./vendor/STC/misc/tests/main.c	/^int main(int argc, const char *argv[])$/;"	f	typeref:typename:int
main	./vendor/STC/src/utf8_tab.py	/^def main():$/;"	f
make	./src/flecs.h	/^    static each_delegate* make(const Func& func) {$/;"	f	struct:flecs::_::each_delegate	typeref:typename:each_delegate *
make_alive	./src/flecs.h	/^inline flecs::entity world::make_alive(flecs::entity_t e) const {$/;"	f	class:flecs::world	typeref:typename:flecs::entity
make_arg	./vendor/fmt/include/base.h	/^FMT_CONSTEXPR auto make_arg(T& val) -> basic_format_arg<Context> {$/;"	f	namespace:detail	typeref:typename:basic_format_arg<Context>
make_arg	./vendor/fmt/include/base.h	/^FMT_CONSTEXPR auto make_arg(T& val) -> value<Context> {$/;"	f	namespace:detail	typeref:typename:value<Context>
make_arg	./vendor/fmt/include/base.h	/^FMT_CONSTEXPR inline auto make_arg(T& val) -> basic_format_arg<Context> {$/;"	f	namespace:detail	typeref:typename:basic_format_arg<Context>
make_arg_formatter	./vendor/fmt/include/printf.h	/^auto make_arg_formatter(basic_appender<Char> iter, format_specs& s)$/;"	f	namespace:detail	typeref:typename:arg_formatter<Char>
make_background_color	./vendor/fmt/include/color.h	/^FMT_CONSTEXPR auto make_background_color(detail::color_type background) noexcept$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR auto
make_caselist	./vendor/STC/src/utf8_tab.py	/^def make_caselist(df, casetype):$/;"	f
make_concat	./vendor/fmt/include/compile.h	/^constexpr concat<L, R> make_concat(L lhs, R rhs) {$/;"	f	namespace:detail	typeref:typename:concat<L,R>
make_descriptor	./vendor/fmt/include/base.h	/^constexpr unsigned long long make_descriptor() {$/;"	f	namespace:detail	typeref:typename:unsigned long long
make_emphasis	./vendor/fmt/include/color.h	/^FMT_CONSTEXPR auto make_emphasis(emphasis em) noexcept$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR auto
make_foreground_color	./vendor/fmt/include/color.h	/^FMT_CONSTEXPR auto make_foreground_color(detail::color_type foreground) noexcept$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR auto
make_format_args	./vendor/fmt/include/base.h	/^constexpr FMT_ALWAYS_INLINE auto make_format_args(T&... args)$/;"	f	typeref:typename:detail::format_arg_store<Context,NUM_ARGS,0,DESC>
make_format_args	./vendor/fmt/include/base.h	/^constexpr auto make_format_args(T&... args)$/;"	f	typeref:typename:detail::format_arg_store<Context,sizeof...(T),NUM_NAMED_ARGS,DESC>
make_index_sequence	./vendor/fmt/include/ranges.h	/^template <size_t N> using make_index_sequence = std::make_index_sequence<N>;$/;"	t	namespace:detail	typeref:typename:std::make_index_sequence<N>
make_index_sequence	./vendor/fmt/include/ranges.h	/^using make_index_sequence = make_integer_sequence<size_t, N>;$/;"	t	namespace:detail	typeref:typename:make_integer_sequence<size_t,N>
make_integer_sequence	./vendor/fmt/include/ranges.h	/^struct make_integer_sequence : make_integer_sequence<T, N - 1, N - 1, Ns...> {};$/;"	s	namespace:detail
make_integer_sequence	./vendor/fmt/include/ranges.h	/^struct make_integer_sequence<T, 0, Ns...> : integer_sequence<T, Ns...> {};$/;"	s	namespace:detail
make_printf_args	./vendor/fmt/include/printf.h	/^inline auto make_printf_args(T&... args)$/;"	f	typeref:typename:decltype(fmt::make_format_args<basic_printf_context<Char>> (args...))
make_table	./vendor/STC/src/utf8_tab.py	/^def make_table(caselist):$/;"	f
make_text	./vendor/fmt/include/compile.h	/^constexpr text<Char> make_text(basic_string_view<Char> s, size_t pos,$/;"	f	namespace:detail	typeref:typename:text<Char>
make_unsigned_or_bool	./vendor/fmt/include/printf.h	/^template <> struct make_unsigned_or_bool<bool> {$/;"	s	namespace:detail
make_unsigned_or_bool	./vendor/fmt/include/printf.h	/^template <typename T> struct make_unsigned_or_bool : std::make_unsigned<T> {};$/;"	s	namespace:detail
make_unsigned_or_unchanged	./vendor/fmt/include/chrono.h	/^struct make_unsigned_or_unchanged {$/;"	s	namespace:detail
make_unsigned_or_unchanged	./vendor/fmt/include/chrono.h	/^template <typename T> struct make_unsigned_or_unchanged<T, true> {$/;"	s	namespace:detail
make_unsigned_t	./vendor/fmt/include/base.h	/^using make_unsigned_t = typename std::make_unsigned<T>::type;$/;"	t	typeref:typename:std::make_unsigned<T>::type
make_void	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^struct make_void {$/;"	s	namespace:tsl::detail_robin_hash
make_wformat_args	./vendor/fmt/include/xchar.h	/^constexpr auto make_wformat_args(T&... args)$/;"	f	typeref:typename:decltype(fmt::make_format_args<wformat_context> (args...))
make_write_int_arg	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto make_write_int_arg(T value, sign_t sign)$/;"	f	namespace:detail	typeref:typename:write_int_arg<uint32_or_64_or_128_t<T>>
malloc_	./src/flecs.h	/^    ecs_os_api_malloc_t malloc_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_malloc_t
manual_indexing_id	./vendor/fmt/include/compile.h	/^enum { manual_indexing_id = -1 };$/;"	e	enum:detail::__anon17584c270103
map	./src/flecs.h	/^    const ecs_map_t *map;$/;"	m	struct:ecs_map_iter_t	typeref:typename:const ecs_map_t *
map	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^using map = detail::table<Key, T, Hash, KeyEqual, AllocatorOrContainer, Bucket, false>;$/;"	t	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE	typeref:typename:detail::table<Key,T,Hash,KeyEqual,AllocatorOrContainer,Bucket,false>
map	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^using map =$/;"	t	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::pmr	typeref:typename:detail::table<Key,T,Hash,KeyEqual,ANKERL_UNORDERED_DENSE_PMR::polymorphic_allocator<std::pair<Key,T>>,Bucket,false>
map	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR auto map(const T&) -> unformattable_pointer {$/;"	f	struct:detail::arg_mapper	typeref:typename:unformattable_pointer
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(T val) -> char_type {$/;"	f	struct:detail::arg_mapper	typeref:typename:char_type
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(T& val) -> decltype(FMT_DECLTYPE_THIS do_map(val)) {$/;"	f	struct:detail::arg_mapper	typeref:typename:decltype(FMT_DECLTYPE_THIS do_map (val))
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(T) -> unformattable_char {$/;"	f	struct:detail::arg_mapper	typeref:typename:unformattable_char
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(bool val) -> bool { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:bool
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(char_type* val) -> const char_type* { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:const char_type *
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(const T (&values)[N]) -> const T (&)[N] {$/;"	f	struct:detail::arg_mapper	typeref:typename:const T (&)[N]{}FMT_MAP_API auto map (const T & val)->decltype(FMT_DECLTYPE_THIS map (U ()))
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(const T& named_arg)$/;"	f	struct:detail::arg_mapper	typeref:typename:decltype(FMT_DECLTYPE_THIS map (named_arg.value))
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(const T& val) -> basic_string_view<Char> {$/;"	f	struct:detail::arg_mapper	typeref:typename:basic_string_view<Char>
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(const T&) -> unformattable_char {$/;"	f	struct:detail::arg_mapper	typeref:typename:unformattable_char
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(const char_type* val) -> const char_type* { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:const char_type *
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(const void* val) -> const void* { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:const void *
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(const volatile void* val) -> const void* {$/;"	f	struct:detail::arg_mapper	typeref:typename:const void *
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(double val) -> double { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:double
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(float val) -> float { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:float
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(int val) -> int { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:int
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(int128_opt val) -> int128_opt { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:int128_opt
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(long double val) -> long double { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:long double
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(long long val) -> long long { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:long long
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(long val) -> long_type { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:long_type
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(short val) -> int { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:int
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(signed char val) -> int { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:int
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(std::nullptr_t val) -> const void* { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:const void *
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(uint128_opt val) -> uint128_opt { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:uint128_opt
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(unsigned char val) -> unsigned { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:unsigned
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(unsigned long long val) -> unsigned long long {$/;"	f	struct:detail::arg_mapper	typeref:typename:unsigned long long
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(unsigned long val) -> ulong_type { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:ulong_type
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(unsigned short val) -> unsigned { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:unsigned
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(unsigned val) -> unsigned { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:unsigned
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(void* val) -> const void* { return val; }$/;"	f	struct:detail::arg_mapper	typeref:typename:const void *
map	./vendor/fmt/include/base.h	/^  FMT_MAP_API auto map(volatile void* val) -> const void* {$/;"	f	struct:detail::arg_mapper	typeref:typename:const void *
map	./vendor/fmt/include/base.h	/^  auto map(...) -> unformattable { return {}; }$/;"	f	struct:detail::arg_mapper	typeref:typename:unformattable
map	./vendor/fmt/include/ranges.h	/^  static auto map(T&& value) -> T&& {$/;"	f	struct:detail::range_mapper	typeref:typename:T &&
map	./vendor/fmt/include/ranges.h	/^  static auto map(T&& value)$/;"	f	struct:detail::range_mapper	typeref:typename:decltype(mapper ().map (static_cast<T &&> (value)))
map	./vendor/fmt/include/ranges.h	/^enum class range_format { disabled, map, set, sequence, string, debug_string };$/;"	e	enum:range_format
map_t	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using map_t = ankerl::unordered_dense::detail::table<Key, T, Hash, KeyEqual, AllocatorOrCont/;"	t	function:std::erase_if	typeref:typename:ankerl::unordered_dense::detail::table<Key,T,Hash,KeyEqual,AllocatorOrContainer,Bucket,IsSegmented>
map_type	./vendor/fmt/include/ranges.h	/^  using map_type = detail::maybe_const_range<R>;$/;"	t	struct:formatter	typeref:typename:detail::maybe_const_range<R>
mapdemo1	./vendor/STC/misc/examples/mixed/demos.c	/^void mapdemo1(void)$/;"	f	typeref:typename:void
mapdemo2	./vendor/STC/misc/examples/mixed/demos.c	/^void mapdemo2(void)$/;"	f	typeref:typename:void
mapdemo3	./vendor/STC/misc/examples/mixed/demos.c	/^void mapdemo3(void)$/;"	f	typeref:typename:void
mapped_type	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    using mapped_type = T;$/;"	t	class:robin_hood::detail::Table	typeref:typename:T
mapped_type	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using mapped_type = T;$/;"	t	struct:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::base_table_type_map	typeref:typename:T
mapped_type	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    typedef ValueT mapped_type;$/;"	t	class:emhash7::HashMap	typeref:typename:ValueT
mapped_type	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    using mapped_type = V;$/;"	t	class:ska::flat_hash_map	typeref:typename:V
mapped_type	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  using mapped_type = T;$/;"	t	class:tsl::robin_map	typeref:typename:T
mapped_type	./vendor/fmt/include/args.h	/^    static constexpr detail::type mapped_type =$/;"	m	struct:dynamic_format_arg_store::need_copy	typeref:typename:detail::type
mapped_type	./vendor/fmt/include/base.h	/^  using mapped_type = conditional_t<$/;"	t	function:detail::parse_format_specs
mapped_type_constant	./vendor/fmt/include/base.h	/^using mapped_type_constant =$/;"	t	namespace:detail
mapper	./vendor/fmt/include/ranges.h	/^  using mapper = arg_mapper<Context>;$/;"	t	struct:detail::range_mapper	typeref:typename:arg_mapper<Context>
maps	./vendor/raylib5/include/raylib.h	/^    MaterialMap *maps;      \/\/ Material maps array (MAX_MATERIAL_MAPS)$/;"	m	struct:Material	typeref:typename:MaterialMap *
marked_ids	./src/flecs.c	/^    ecs_vec_t marked_ids;            \/* vector<ecs_marked_ids_t> *\/$/;"	m	struct:ecs_store_t	typeref:typename:ecs_vec_t	file:
maroon	./vendor/fmt/include/color.h	/^  maroon = 0x800000,                   \/\/ rgb(128,0,0)$/;"	e	enum:color
mask	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    static constexpr auto mask = num_elements_in_block - 1U;$/;"	m	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:auto
mask1	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^uint64_t seed = 1, mask1 = 0xfffffff, mask2 = 0xffff;$/;"	v	typeref:typename:uint64_t
mask1	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^uint64_t seed = 1, mask1 = 0xffffffff;$/;"	v	typeref:typename:uint64_t
mask1	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^uint64_t seed = 1, mask1 = 0xfffffff, mask2 = 0xffff;$/;"	v	typeref:typename:uint64_t
mask1	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^uint64_t seed = 1, mask1 = 0xfffffff;$/;"	v	typeref:typename:uint64_t
mask1	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^uint64_t seed = 1, mask1 = 0xfffffff, mask2 = 0xffff;$/;"	v	typeref:typename:uint64_t
mask2	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^uint64_t seed = 1, mask1 = 0xfffffff, mask2 = 0xffff;$/;"	v	typeref:typename:uint64_t
mask2	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^uint64_t seed = 1, mask1 = 0xfffffff, mask2 = 0xffff;$/;"	v	typeref:typename:uint64_t
mask2	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^uint64_t seed = 1, mask1 = 0xfffffff, mask2 = 0xffff;$/;"	v	typeref:typename:uint64_t
mass	./src/flecs.h	/^struct mass {$/;"	s	struct:flecs::units
match	./src/flecs.c	/^    ecs_query_table_match_t *match;$/;"	m	struct:sort_helper_t	typeref:typename:ecs_query_table_match_t *	file:
match	./vendor/STC/include/stc/cregex.h	/^    csview match[CREG_MAX_CAPTURES];$/;"	m	struct:__anon7cecd9d80408	typeref:typename:csview[]
match_count	./src/flecs.c	/^    int32_t match_count;             \/* How often have tables been (un)matched *\/$/;"	m	struct:ecs_query_t	typeref:typename:int32_t	file:
match_count	./src/flecs.c	/^    int32_t match_count;        \/* Used to track of rebuild is necessary *\/$/;"	m	struct:ecs_pipeline_state_t	typeref:typename:int32_t	file:
match_count	./src/flecs.h	/^    int32_t match_count;  \/**< How often tables have been matched\/unmatched *\/$/;"	m	struct:ecs_query_group_info_t	typeref:typename:int32_t
match_count	./src/flecs.h	/^    int32_t match_count;$/;"	m	struct:ecs_term_iter_t	typeref:typename:int32_t
match_flags	./src/flecs.c	/^    ecs_flags16_t match_flags; \/* Flags that modify matching behavior *\/$/;"	m	struct:ecs_rule_op_t	typeref:typename:ecs_flags16_t	file:
match_indices	./src/flecs.h	/^    int32_t *match_indices;       \/* Indices of current match for term. Allows an iterator to i/;"	m	struct:ecs_iter_t	typeref:typename:int32_t *
matched	./src/flecs.c	/^    ecs_id_t matched;$/;"	m	struct:__anon7d4a41772a08	typeref:typename:ecs_id_t	file:
matched_empty_table_count	./src/flecs.h	/^    ecs_metric_t matched_empty_table_count; \/**< Matched empty tables *\/$/;"	m	struct:ecs_query_stats_t	typeref:typename:ecs_metric_t
matched_entity_count	./src/flecs.h	/^    ecs_metric_t matched_entity_count;      \/**< Number of matched entities *\/$/;"	m	struct:ecs_query_stats_t	typeref:typename:ecs_metric_t
matched_table_count	./src/flecs.h	/^    ecs_metric_t matched_table_count;       \/**< Matched non-empty tables *\/$/;"	m	struct:ecs_query_stats_t	typeref:typename:ecs_metric_t
matches_left	./src/flecs.h	/^    int32_t matches_left;$/;"	m	struct:ecs_filter_iter_t	typeref:typename:int32_t
materialCount	./vendor/raylib5/include/raylib.h	/^    int materialCount;      \/\/ Number of materials$/;"	m	struct:Model	typeref:typename:int
materials	./vendor/raylib5/include/raylib.h	/^    Material *materials;    \/\/ Materials array$/;"	m	struct:Model	typeref:typename:Material *
max	./src/flecs.c	/^    double min, max;$/;"	m	struct:__anon7d4a41772008	typeref:typename:double	file:
max	./src/flecs.c	/^    int64_t min, max;$/;"	m	struct:__anon7d4a41771e08	typeref:typename:int64_t	file:
max	./src/flecs.c	/^    uint64_t min, max;$/;"	m	struct:__anon7d4a41771f08	typeref:typename:uint64_t	file:
max	./src/flecs.h	/^    double max;$/;"	m	struct:ecs_member_value_range_t	typeref:typename:double
max	./src/flecs.h	/^    ecs_float_t max[ECS_STAT_WINDOW];$/;"	m	struct:ecs_gauge_t	typeref:typename:ecs_float_t[]
max	./src/flecs.h	/^    int max;$/;"	m	struct:flecs::_::enum_data_impl	typeref:typename:int
max	./vendor/raylib5/include/raylib.h	/^    Vector3 max;            \/\/ Maximum vertex box-corner$/;"	m	struct:BoundingBox	typeref:typename:Vector3
max_bucket_count	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    static constexpr auto max_bucket_count() noexcept -> size_t { \/\/ NOLINT(modernize-use-nodi/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:auto
max_bucket_count	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline constexpr size_type max_bucket_count() const { return max_size(); }$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
max_bucket_count	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    size_type max_bucket_count() const$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:size_type
max_bucket_count	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^  std::size_t max_bucket_count() const { return MAX_BUCKET_COUNT; }$/;"	f	class:tsl::rh::mod_growth_policy	typeref:typename:std::size_t
max_bucket_count	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^  std::size_t max_bucket_count() const { return detail::PRIMES.back(); }$/;"	f	class:tsl::rh::prime_growth_policy	typeref:typename:std::size_t
max_bucket_count	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^  std::size_t max_bucket_count() const {$/;"	f	class:tsl::rh::power_of_two_growth_policy	typeref:typename:std::size_t
max_bucket_count	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  size_type max_bucket_count() const {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:size_type
max_bucket_count	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  size_type max_bucket_count() const { return m_ht.max_bucket_count(); }$/;"	f	class:tsl::robin_map	typeref:typename:size_type
max_c	./vendor/STC/misc/examples/coroutines/triples.c	/^    int max_c;$/;"	m	struct:triples	typeref:typename:int	file:
max_id	./src/flecs.c	/^    uint64_t max_id;$/;"	m	struct:ecs_entity_index_t	typeref:typename:uint64_t	file:
max_id	./src/flecs.h	/^    ecs_entity_t max_id;              \/**< Last allowed entity id *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:ecs_entity_t
max_id	./src/flecs.h	/^    uint64_t max_id;         \/* Local max index (if no global is set) *\/$/;"	m	struct:ecs_sparse_t	typeref:typename:uint64_t
max_k	./vendor/fmt/include/format.h	/^  static const int max_k = 341;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
max_k	./vendor/fmt/include/format.h	/^  static const int max_k = 46;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
max_load_factor	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    float max_load_factor() const noexcept { \/\/ NOLINT(modernize-use-nodiscard)$/;"	f	class:robin_hood::detail::Table	typeref:typename:float
max_load_factor	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] auto max_load_factor() const -> float {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:float
max_load_factor	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    void max_load_factor(float ml) {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:void
max_load_factor	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline constexpr float max_load_factor() const { return (1 << 27) \/ (float)_mlf; }$/;"	f	class:emhash7::HashMap	typeref:typename:float
max_load_factor	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline void max_load_factor(float mlf)$/;"	f	class:emhash7::HashMap	typeref:typename:void
max_load_factor	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    float max_load_factor() const$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:float
max_load_factor	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    void max_load_factor(float value)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:void
max_load_factor	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  float max_load_factor() const { return m_max_load_factor; }$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:float
max_load_factor	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  void max_load_factor(float ml) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:void
max_load_factor	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  float max_load_factor() const { return m_ht.max_load_factor(); }$/;"	f	class:tsl::robin_map	typeref:typename:float
max_load_factor	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  void max_load_factor(float ml) { m_ht.max_load_factor(ml); }$/;"	f	class:tsl::robin_map	typeref:typename:void
max_lookups	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    int8_t max_lookups = detailv3::min_lookups - 1;$/;"	m	class:ska::detailv3::sherwood_v3_table	typeref:typename:int8_t
max_packed_args	./vendor/fmt/include/base.h	/^enum { max_packed_args = 62 \/ packed_arg_bits };$/;"	e	enum:detail::__anonea363bd90a03
max_size	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    size_type max_size() const noexcept { \/\/ NOLINT(modernize-use-nodiscard)$/;"	f	class:robin_hood::detail::Table	typeref:typename:size_type
max_size	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] static constexpr auto max_size() noexcept -> size_t {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:auto
max_size	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline constexpr size_type max_size() const { return 1ull << (sizeof(size_type) * 8 - 1); }$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
max_size	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    size_t max_size() const$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:size_t
max_size	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  size_type max_size() const noexcept { return m_buckets_data.max_size(); }$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:size_type
max_size	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  size_type max_size() const noexcept { return m_ht.max_size(); }$/;"	f	class:tsl::robin_map	typeref:typename:size_type
max_size	./vendor/fmt/include/base.h	/^  auto max_size() const -> int {$/;"	f	class:basic_format_args	typeref:typename:int
max_size	./vendor/fmt/include/base.h	/^  enum { max_size = 4 };$/;"	e	enum:detail::fill_t::__anonea363bd91103
max_size	./vendor/fmt/include/chrono.h	/^  static constexpr const size_t max_size = 32;$/;"	m	struct:detail::codecvt_result	typeref:typename:const size_t
max_triples	./vendor/STC/misc/examples/coroutines/generator.c	/^    int max_triples;$/;"	m	struct:__anon399785530108	typeref:typename:int	file:
max_value	./vendor/fmt/include/format.h	/^template <typename T> constexpr auto max_value() -> T {$/;"	f	namespace:detail	typeref:typename:T
maybe_const_range	./vendor/fmt/include/ranges.h	/^using maybe_const_range =$/;"	t	namespace:detail	typeref:typename:conditional_t<has_const_begin_end<R>::value,const R,R>
maybe_set_debug_format	./vendor/fmt/include/ranges.h	/^FMT_CONSTEXPR auto maybe_set_debug_format(Formatter& f, bool set)$/;"	f	namespace:detail	typeref:typename:decltype(f.set_debug_format (set))
maybe_set_debug_format	./vendor/fmt/include/ranges.h	/^FMT_CONSTEXPR void maybe_set_debug_format(Formatter&, ...) {}$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR void
maybe_set_debug_format	./vendor/fmt/include/std.h	/^  FMT_CONSTEXPR static auto maybe_set_debug_format(U& u, bool set)$/;"	f	struct:formatter	typeref:typename:decltype(u.set_debug_format (set))
maybe_set_debug_format	./vendor/fmt/include/std.h	/^  FMT_CONSTEXPR static void maybe_set_debug_format(U&, ...) {}$/;"	f	struct:formatter	typeref:typename:FMT_CONSTEXPR void
mean	./vendor/STC/include/stc/crand.h	/^typedef struct crand_normal { double mean, stddev, next; int has_next; } crand_normal_t;$/;"	m	struct:crand_normal	typeref:typename:double
measure_eval_duration	./src/flecs.h	/^    bool measure_eval_duration;     \/**< Serialize evaluation duration *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
medium_aquamarine	./vendor/fmt/include/color.h	/^  medium_aquamarine = 0x66CDAA,        \/\/ rgb(102,205,170)$/;"	e	enum:color
medium_blue	./vendor/fmt/include/color.h	/^  medium_blue = 0x0000CD,              \/\/ rgb(0,0,205)$/;"	e	enum:color
medium_orchid	./vendor/fmt/include/color.h	/^  medium_orchid = 0xBA55D3,            \/\/ rgb(186,85,211)$/;"	e	enum:color
medium_purple	./vendor/fmt/include/color.h	/^  medium_purple = 0x9370DB,            \/\/ rgb(147,112,219)$/;"	e	enum:color
medium_sea_green	./vendor/fmt/include/color.h	/^  medium_sea_green = 0x3CB371,         \/\/ rgb(60,179,113)$/;"	e	enum:color
medium_slate_blue	./vendor/fmt/include/color.h	/^  medium_slate_blue = 0x7B68EE,        \/\/ rgb(123,104,238)$/;"	e	enum:color
medium_spring_green	./vendor/fmt/include/color.h	/^  medium_spring_green = 0x00FA9A,      \/\/ rgb(0,250,154)$/;"	e	enum:color
medium_turquoise	./vendor/fmt/include/color.h	/^  medium_turquoise = 0x48D1CC,         \/\/ rgb(72,209,204)$/;"	e	enum:color
medium_violet_red	./vendor/fmt/include/color.h	/^  medium_violet_red = 0xC71585,        \/\/ rgb(199,21,133)$/;"	e	enum:color
member	./src/flecs.c	/^    ecs_entity_t member;        \/* Member to monitor *\/$/;"	m	struct:EcsAlert	typeref:typename:ecs_entity_t	file:
member	./src/flecs.h	/^    Base& member(const char *m, const char *v = nullptr) {$/;"	f	struct:flecs::alert_builder_i	typeref:typename:Base &
member	./src/flecs.h	/^    Base& member(flecs::entity_t m) {$/;"	f	struct:flecs::alert_builder_i	typeref:typename:Base &
member	./src/flecs.h	/^    ecs_entity_t member;$/;"	m	struct:ecs_alert_desc_t	typeref:typename:ecs_entity_t
member	./src/flecs.h	/^    ecs_entity_t member;$/;"	m	struct:ecs_member_t	typeref:typename:ecs_entity_t
member	./src/flecs.h	/^    ecs_entity_t member;$/;"	m	struct:ecs_metric_desc_t	typeref:typename:ecs_entity_t
member	./src/flecs.h	/^    int (*member)($/;"	m	struct:ecs_serializer_t	typeref:typename:int (*)(const struct ecs_serializer_t * ser,const char * member)
member	./src/flecs.h	/^    int member(const char *name) {$/;"	f	struct:flecs::cursor	typeref:typename:int
member	./src/flecs.h	/^    metric_builder& member(flecs::entity_t e) {$/;"	f	struct:flecs::metric_builder	typeref:typename:metric_builder &
member	./src/flecs.h	/^inline int ecs_serializer_t::member(const char *name) const {$/;"	f	class:ecs_serializer_t	typeref:typename:int
member	./src/flecs.h	/^inline metric_builder& metric_builder::member(const char *name) {$/;"	f	class:flecs::metric_builder	typeref:typename:metric_builder &
member	./src/flecs.h	/^untyped_component& member(const char *name, int32_t count = 0, size_t offset = 0) {$/;"	f	struct:flecs::untyped_component	typeref:typename:untyped_component &
member	./src/flecs.h	/^untyped_component& member(const char* name, const MemberType ComponentType::* ptr) {$/;"	f	struct:flecs::untyped_component	typeref:typename:untyped_component &
member	./src/flecs.h	/^untyped_component& member(flecs::entity_t type_id, const char* name, int32_t count = 0, size_t o/;"	f	struct:flecs::untyped_component	typeref:typename:untyped_component &
member	./src/flecs.h	/^untyped_component& member(flecs::entity_t type_id, flecs::entity_t unit, const char *name, int32/;"	f	struct:flecs::untyped_component	typeref:typename:untyped_component &
member	./src/flecs.h	/^untyped_component& member(flecs::entity_t unit, const char *name, int32_t count = 0, size_t offs/;"	f	struct:flecs::untyped_component	typeref:typename:untyped_component &
member	./src/flecs.h	/^untyped_component& member(flecs::entity_t unit, const char* name, const MemberType ComponentType/;"	f	struct:flecs::untyped_component	typeref:typename:untyped_component &
member_	./src/flecs.h	/^    int (*member_)($/;"	m	struct:ecs_serializer_t	typeref:typename:int (*)(const struct ecs_serializer_t * ser,const char * name)
member_index	./src/flecs.h	/^    int32_t member_index;   \/**< Index of member in struct *\/$/;"	m	struct:ecs_meta_type_op_t	typeref:typename:int32_t
member_t	./src/flecs.h	/^using member_t = ecs_member_t;$/;"	t	namespace:flecs	typeref:typename:ecs_member_t
members	./src/flecs.h	/^    ecs_hashmap_t *members;   \/**< string -> member index *\/$/;"	m	struct:ecs_meta_scope_t	typeref:typename:ecs_hashmap_t *
members	./src/flecs.h	/^    ecs_hashmap_t *members; \/**< string -> member index (structs only) *\/$/;"	m	struct:ecs_meta_type_op_t	typeref:typename:ecs_hashmap_t *
members	./src/flecs.h	/^    ecs_member_t members[ECS_MEMBER_DESC_CACHE_SIZE];$/;"	m	struct:ecs_struct_desc_t	typeref:typename:ecs_member_t[]
members	./src/flecs.h	/^    ecs_vec_t members; \/* vector<ecs_member_t> *\/$/;"	m	struct:EcsStruct	typeref:typename:ecs_vec_t
memory	./src/flecs.h	/^    void *memory;$/;"	m	struct:ecs_block_allocator_block_t	typeref:typename:void *
memory	./src/flecs.h	/^    } memory;$/;"	m	struct:ecs_world_stats_t	typeref:struct:ecs_world_stats_t::__anon7d4a417c1608
memory_buffer	./vendor/fmt/include/format.h	/^using memory_buffer = basic_memory_buffer<char>;$/;"	t	typeref:typename:basic_memory_buffer<char>
merge	./src/flecs.h	/^    void merge() const {$/;"	f	struct:flecs::world	typeref:typename:void
merge	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    void merge(HashMap& rhs)$/;"	f	class:emhash7::HashMap	typeref:typename:void
merge_count	./src/flecs.h	/^        ecs_metric_t merge_count;          \/**< Number of merges executed. *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1408	typeref:typename:ecs_metric_t
merge_count_total	./src/flecs.h	/^    int64_t merge_count_total;        \/**< Total number of merges *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int64_t
merge_time	./src/flecs.h	/^        ecs_metric_t merge_time;           \/**< Time spent on merging commands. *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1508	typeref:typename:ecs_metric_t
merge_time_last	./src/flecs.h	/^    double merge_time_last;     \/**< Time spent in merges *\/$/;"	m	struct:__anon7d4a417c1b08	typeref:typename:double
merge_time_total	./src/flecs.h	/^    double merge_time_total;    \/**< Total time spent in merges *\/$/;"	m	struct:__anon7d4a417c1b08	typeref:typename:double
merge_time_total	./src/flecs.h	/^    ecs_ftime_t merge_time_total;     \/**< Total time spent in merges *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:ecs_ftime_t
meshCount	./vendor/raylib5/include/raylib.h	/^    int meshCount;          \/\/ Number of meshes$/;"	m	struct:Model	typeref:typename:int
meshMaterial	./vendor/raylib5/include/raylib.h	/^    int *meshMaterial;      \/\/ Mesh material number$/;"	m	struct:Model	typeref:typename:int *
meshes	./vendor/raylib5/include/raylib.h	/^    Mesh *meshes;           \/\/ Meshes array$/;"	m	struct:Model	typeref:typename:Mesh *
message	./src/flecs.c	/^    char *message;$/;"	m	struct:EcsAlert	typeref:typename:char *	file:
message	./src/flecs.h	/^    Base& message(const char *message) {$/;"	f	struct:flecs::alert_builder_i	typeref:typename:Base &
message	./src/flecs.h	/^    char *message;$/;"	m	struct:EcsAlertInstance	typeref:typename:char *
message	./src/flecs.h	/^    const char *message;$/;"	m	struct:ecs_alert_desc_t	typeref:typename:const char *
meta	./src/flecs.h	/^namespace meta {$/;"	n	namespace:flecs
meta_constant_t	./src/flecs.c	/^typedef struct meta_constant_t {$/;"	s	file:
meta_constant_t	./src/flecs.c	/^} meta_constant_t;$/;"	t	typeref:struct:meta_constant_t	file:
meta_lookup	./src/flecs.c	/^ecs_entity_t meta_lookup($/;"	f	typeref:typename:ecs_entity_t	file:
meta_lookup_array	./src/flecs.c	/^ecs_entity_t meta_lookup_array($/;"	f	typeref:typename:ecs_entity_t	file:
meta_lookup_bitmask	./src/flecs.c	/^ecs_entity_t meta_lookup_bitmask($/;"	f	typeref:typename:ecs_entity_t	file:
meta_lookup_vector	./src/flecs.c	/^ecs_entity_t meta_lookup_vector($/;"	f	typeref:typename:ecs_entity_t	file:
meta_member_t	./src/flecs.c	/^typedef struct meta_member_t {$/;"	s	file:
meta_member_t	./src/flecs.c	/^} meta_member_t;$/;"	t	typeref:struct:meta_member_t	file:
meta_open_scope	./src/flecs.c	/^const char * meta_open_scope($/;"	f	typeref:typename:const char *	file:
meta_params_t	./src/flecs.c	/^typedef struct meta_params_t {$/;"	s	file:
meta_params_t	./src/flecs.c	/^} meta_params_t;$/;"	t	typeref:struct:meta_params_t	file:
meta_parse_bitmask	./src/flecs.c	/^int meta_parse_bitmask($/;"	f	typeref:typename:int	file:
meta_parse_constant	./src/flecs.c	/^const char* meta_parse_constant($/;"	f	typeref:typename:const char *	file:
meta_parse_constants	./src/flecs.c	/^int meta_parse_constants($/;"	f	typeref:typename:int	file:
meta_parse_ctx_t	./src/flecs.c	/^typedef struct meta_parse_ctx_t {$/;"	s	file:
meta_parse_ctx_t	./src/flecs.c	/^} meta_parse_ctx_t;$/;"	t	typeref:struct:meta_parse_ctx_t	file:
meta_parse_desc	./src/flecs.c	/^int meta_parse_desc($/;"	f	typeref:typename:int	file:
meta_parse_enum	./src/flecs.c	/^int meta_parse_enum($/;"	f	typeref:typename:int	file:
meta_parse_member	./src/flecs.c	/^const char* meta_parse_member($/;"	f	typeref:typename:const char *	file:
meta_parse_struct	./src/flecs.c	/^int meta_parse_struct($/;"	f	typeref:typename:int	file:
meta_parse_type	./src/flecs.c	/^const char* meta_parse_type($/;"	f	typeref:typename:const char *	file:
meta_type_t	./src/flecs.c	/^typedef struct meta_type_t {$/;"	s	file:
meta_type_t	./src/flecs.c	/^} meta_type_t;$/;"	t	typeref:struct:meta_type_t	file:
method	./src/flecs.c	/^    ecs_http_method_t method;$/;"	m	struct:__anon7d4a41770708	typeref:typename:ecs_http_method_t	file:
method	./src/flecs.h	/^    ecs_http_method_t method;$/;"	m	struct:__anon7d4a417c0b08	typeref:typename:ecs_http_method_t
metric	./src/flecs.c	/^    ecs_entity_t metric;              \/**< Metric entity *\/$/;"	m	struct:__anon7d4a41770b08	typeref:typename:ecs_entity_t	file:
metric	./src/flecs.c	/^    ecs_metric_ctx_t metric;$/;"	m	struct:__anon7d4a41770c08	typeref:typename:ecs_metric_ctx_t	file:
metric	./src/flecs.c	/^    ecs_metric_ctx_t metric;$/;"	m	struct:__anon7d4a41770d08	typeref:typename:ecs_metric_ctx_t	file:
metric	./src/flecs.c	/^    ecs_metric_ctx_t metric;$/;"	m	struct:__anon7d4a41770e08	typeref:typename:ecs_metric_ctx_t	file:
metric	./src/flecs.c	/^    ecs_metric_ctx_t metric;$/;"	m	struct:__anon7d4a41770f08	typeref:typename:ecs_metric_ctx_t	file:
metric	./src/flecs.h	/^inline flecs::metric_builder world::metric(Args &&... args) const {$/;"	f	class:flecs::world	typeref:typename:flecs::metric_builder
metric	./src/flecs.h	/^inline untyped_component& untyped_component::metric($/;"	f	class:flecs::untyped_component	typeref:typename:untyped_component &
metric_builder	./src/flecs.h	/^    metric_builder(flecs::world_t *world, flecs::entity_t entity) $/;"	f	struct:flecs::metric_builder
metric_builder	./src/flecs.h	/^struct metric_builder {$/;"	s	namespace:flecs
metrics	./src/flecs.h	/^inline metrics::metrics(flecs::world& world) {$/;"	f	class:flecs::metrics
metrics	./src/flecs.h	/^struct metrics {$/;"	s	namespace:flecs
midnight_blue	./vendor/fmt/include/color.h	/^  midnight_blue = 0x191970,            \/\/ rgb(25,25,112)$/;"	e	enum:color
milliseconds	./vendor/fmt/include/chrono.h	/^  using milliseconds = std::chrono::duration<rep, std::milli>;$/;"	t	struct:detail::chrono_formatter	typeref:typename:std::chrono::duration<rep,std::milli>
min	./src/flecs.c	/^    double min, max;$/;"	m	struct:__anon7d4a41772008	typeref:typename:double	file:
min	./src/flecs.c	/^    int64_t min, max;$/;"	m	struct:__anon7d4a41771e08	typeref:typename:int64_t	file:
min	./src/flecs.c	/^    uint64_t min, max;$/;"	m	struct:__anon7d4a41771f08	typeref:typename:uint64_t	file:
min	./src/flecs.h	/^    double min;$/;"	m	struct:ecs_member_value_range_t	typeref:typename:double
min	./src/flecs.h	/^    ecs_float_t min[ECS_STAT_WINDOW];$/;"	m	struct:ecs_gauge_t	typeref:typename:ecs_float_t[]
min	./src/flecs.h	/^    int min;$/;"	m	struct:flecs::_::enum_data_impl	typeref:typename:int
min	./vendor/raylib5/include/raylib.h	/^    Vector3 min;            \/\/ Minimum vertex box-corner$/;"	m	struct:BoundingBox	typeref:typename:Vector3
min_id	./src/flecs.h	/^    ecs_entity_t min_id;              \/**< First allowed entity id *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:ecs_entity_t
min_k	./vendor/fmt/include/format.h	/^  static const int min_k = -292;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
min_k	./vendor/fmt/include/format.h	/^  static const int min_k = -31;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
min_load_factor	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  float min_load_factor() const { return m_min_load_factor; }$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:float
min_load_factor	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  void min_load_factor(float ml) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:void
min_load_factor	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  float min_load_factor() const { return m_ht.min_load_factor(); }$/;"	f	class:tsl::robin_map	typeref:typename:float
min_load_factor	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  void min_load_factor(float ml) { m_ht.min_load_factor(ml); }$/;"	f	class:tsl::robin_map	typeref:typename:void
min_lookups	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^static constexpr int8_t min_lookups = 4;$/;"	v	namespace:ska::detailv3	typeref:typename:int8_t
mint_cream	./vendor/fmt/include/color.h	/^  mint_cream = 0xF5FFFA,               \/\/ rgb(245,255,250)$/;"	e	enum:color
minute	./vendor/fmt/include/chrono.h	/^  auto minute() const -> Rep {$/;"	f	struct:detail::chrono_formatter	typeref:typename:Rep
mipmaps	./vendor/raylib5/include/raygui.h	/^        int mipmaps;            \/\/ Mipmap levels, 1 by default$/;"	m	struct:Image	typeref:typename:int
mipmaps	./vendor/raylib5/include/raygui.h	/^        int mipmaps;            \/\/ Mipmap levels, 1 by default$/;"	m	struct:Texture2D	typeref:typename:int
mipmaps	./vendor/raylib5/include/raylib.h	/^    int mipmaps;            \/\/ Mipmap levels, 1 by default$/;"	m	struct:Image	typeref:typename:int
mipmaps	./vendor/raylib5/include/raylib.h	/^    int mipmaps;            \/\/ Mipmap levels, 1 by default$/;"	m	struct:Texture	typeref:typename:int
missing_reflection	./src/flecs.c	/^    ecs_map_t missing_reflection;$/;"	m	struct:__anon7d4a41771d08	typeref:typename:ecs_map_t	file:
misty_rose	./vendor/fmt/include/color.h	/^  misty_rose = 0xFFE4E1,               \/\/ rgb(255,228,225)$/;"	e	enum:color
mix	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^[[nodiscard]] static inline auto mix(uint64_t a, uint64_t b) -> uint64_t {$/;"	f	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::wyhash	typeref:typename:uint64_t
mixed_hash	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] constexpr auto mixed_hash(K const& key) const -> uint64_t {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:uint64_t
mixin_kind_str	./src/flecs.c	/^static const char* mixin_kind_str[] = {$/;"	v	typeref:typename:const char * []	file:
mixins	./src/flecs.h	/^    ecs_mixins_t *mixins; \/* Table with offsets to (optional) mixins *\/$/;"	m	struct:ecs_header_t	typeref:typename:ecs_mixins_t *
moccasin	./vendor/fmt/include/color.h	/^  moccasin = 0xFFE4B5,                 \/\/ rgb(255,228,181)$/;"	e	enum:color
mod	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^static constexpr std::size_t mod(std::size_t hash) {$/;"	f	namespace:tsl::rh::detail	typeref:typename:std::size_t
mod	./vendor/fmt/include/chrono.h	/^inline auto mod(T x, int y) -> T {$/;"	f	namespace:detail	typeref:typename:T
mod0	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod0(size_t) { return 0llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod1009	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod1009(size_t hash) { return hash % 1009llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod10193	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod10193(size_t hash) { return hash % 10193llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod102877	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod102877(size_t hash) { return hash % 102877llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod1037059	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod1037059(size_t hash) { return hash % 1037059llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod10453007	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod10453007(size_t hash) { return hash % 10453007llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod105359939	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod105359939(size_t hash) { return hash % 105359939llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod1061961721	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod1061961721(size_t hash) { return hash % 1061961721llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod10703903591	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod10703903591(size_t hash) { return hash % 10703903591llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod107888587883	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod107888587883(size_t hash) { return hash % 107888587883llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod1087448823553	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod1087448823553(size_t hash) { return hash % 1087448823553llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod10960797308051	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod10960797308051(size_t hash) { return hash % 10960797308051llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod11	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod11(size_t hash) { return hash % 11llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod110477914016779	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod110477914016779(size_t hash) { return hash % 110477914016779llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod1113547595345903	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod1113547595345903(size_t hash) { return hash % 1113547595345903llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod11223856443489329	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod11223856443489329(size_t hash) { return hash % 11223856443489329llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod113129383953203213	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod113129383953203213(size_t hash) { return hash % 113129383953203213llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod1140272737634240411	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod1140272737634240411(size_t hash) { return hash % 1140272737634240411llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod11493228998133068689	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod11493228998133068689(size_t hash) { return hash % 11493228998133068689llu; /;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod1259	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod1259(size_t hash) { return hash % 1259llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod127	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod127(size_t hash) { return hash % 127llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod12853	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod12853(size_t hash) { return hash % 12853llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod129607	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod129607(size_t hash) { return hash % 129607llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod13	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod13(size_t hash) { return hash % 13llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod1306601	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod1306601(size_t hash) { return hash % 1306601llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod13169977	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod13169977(size_t hash) { return hash % 13169977llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod132745199	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod132745199(size_t hash) { return hash % 132745199llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod1337987929	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod1337987929(size_t hash) { return hash % 1337987929llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod13486073473	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod13486073473(size_t hash) { return hash % 13486073473llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod135931102921	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod135931102921(size_t hash) { return hash % 135931102921llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod1370099663459	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod1370099663459(size_t hash) { return hash % 1370099663459llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod13809739252051	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod13809739252051(size_t hash) { return hash % 13809739252051llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod139193449418173	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod139193449418173(size_t hash) { return hash % 139193449418173llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod1402982055436147	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod1402982055436147(size_t hash) { return hash % 1402982055436147llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod14141172994150357	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod14141172994150357(size_t hash) { return hash % 14141172994150357llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod142534092204280003	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod142534092204280003(size_t hash) { return hash % 142534092204280003llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod1436653624766633509	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod1436653624766633509(size_t hash) { return hash % 1436653624766633509llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod14480561146010017169	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod14480561146010017169(size_t hash) { return hash % 14480561146010017169llu; /;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod151	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod151(size_t hash) { return hash % 151llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod1597	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod1597(size_t hash) { return hash % 1597llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod16193	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod16193(size_t hash) { return hash % 16193llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod163307	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod163307(size_t hash) { return hash % 163307llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod1646237	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod1646237(size_t hash) { return hash % 1646237llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod16593127	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod16593127(size_t hash) { return hash % 16593127llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod167248483	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod167248483(size_t hash) { return hash % 167248483llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod1685759167	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod1685759167(size_t hash) { return hash % 1685759167llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod16991387857	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod16991387857(size_t hash) { return hash % 16991387857llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod17	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod17(size_t hash) { return hash % 17llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod171262457903	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod171262457903(size_t hash) { return hash % 171262457903llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod1726217406467	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod1726217406467(size_t hash) { return hash % 1726217406467llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod17399181177241	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod17399181177241(size_t hash) { return hash % 17399181177241llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod175372756929481	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod175372756929481(size_t hash) { return hash % 175372756929481llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod1767646624268779	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod1767646624268779(size_t hash) { return hash % 1767646624268779llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod17816761525534927	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod17816761525534927(size_t hash) { return hash % 17816761525534927llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod179581703095829107	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod179581703095829107(size_t hash) { return hash % 179581703095829107llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod1810070143251252131	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod1810070143251252131(size_t hash) { return hash % 1810070143251252131llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod18446744073709551557	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod18446744073709551557(size_t hash) { return hash % 18446744073709551557llu; /;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod197	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod197(size_t hash) { return hash % 197llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod2	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod2(size_t hash) { return hash % 2llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod2011	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod2011(size_t hash) { return hash % 2011llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod20399	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod20399(size_t hash) { return hash % 20399llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod205759	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod205759(size_t hash) { return hash % 205759llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod2074129	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod2074129(size_t hash) { return hash % 2074129llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod20906033	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod20906033(size_t hash) { return hash % 20906033llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod210719881	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod210719881(size_t hash) { return hash % 210719881llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod2123923447	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod2123923447(size_t hash) { return hash % 2123923447llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod21407807219	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod21407807219(size_t hash) { return hash % 21407807219llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod215777175787	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod215777175787(size_t hash) { return hash % 215777175787llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod2174897647073	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod2174897647073(size_t hash) { return hash % 2174897647073llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod21921594616111	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod21921594616111(size_t hash) { return hash % 21921594616111llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod220955828033581	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod220955828033581(size_t hash) { return hash % 220955828033581llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod2227095190691797	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod2227095190691797(size_t hash) { return hash % 2227095190691797llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod22447712886978529	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod22447712886978529(size_t hash) { return hash % 22447712886978529llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod226258767906406483	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod226258767906406483(size_t hash) { return hash % 226258767906406483llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod2280545475268481167	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod2280545475268481167(size_t hash) { return hash % 2280545475268481167llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod23	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod23(size_t hash) { return hash % 23llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod251	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod251(size_t hash) { return hash % 251llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod2539	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod2539(size_t hash) { return hash % 2539llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod25717	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod25717(size_t hash) { return hash % 25717llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod259229	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod259229(size_t hash) { return hash % 259229llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod2613229	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod2613229(size_t hash) { return hash % 2613229llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod26339969	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod26339969(size_t hash) { return hash % 26339969llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod265490441	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod265490441(size_t hash) { return hash % 265490441llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod2675975881	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod2675975881(size_t hash) { return hash % 2675975881llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod26972146961	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod26972146961(size_t hash) { return hash % 26972146961llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod271862205833	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod271862205833(size_t hash) { return hash % 271862205833llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod2740199326961	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod2740199326961(size_t hash) { return hash % 2740199326961llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod27619478504183	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod27619478504183(size_t hash) { return hash % 27619478504183llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod278386898836457	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod278386898836457(size_t hash) { return hash % 278386898836457llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod2805964110872297	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod2805964110872297(size_t hash) { return hash % 2805964110872297llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod28282345988300791	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod28282345988300791(size_t hash) { return hash % 28282345988300791llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod285068184408560057	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod285068184408560057(size_t hash) { return hash % 285068184408560057llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod2873307249533267101	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod2873307249533267101(size_t hash) { return hash % 2873307249533267101llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod29	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod29(size_t hash) { return hash % 29llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod3	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod3(size_t hash) { return hash % 3llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod313	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod313(size_t hash) { return hash % 313llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod3203	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod3203(size_t hash) { return hash % 3203llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod32401	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod32401(size_t hash) { return hash % 32401llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod326617	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod326617(size_t hash) { return hash % 326617llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod3292489	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod3292489(size_t hash) { return hash % 3292489llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod33186281	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod33186281(size_t hash) { return hash % 33186281llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod334496971	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod334496971(size_t hash) { return hash % 334496971llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod3371518343	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod3371518343(size_t hash) { return hash % 3371518343llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod33982775741	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod33982775741(size_t hash) { return hash % 33982775741llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod342524915839	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod342524915839(size_t hash) { return hash % 342524915839llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod3452434812973	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod3452434812973(size_t hash) { return hash % 3452434812973llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod34798362354533	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod34798362354533(size_t hash) { return hash % 34798362354533llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod350745513859007	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod350745513859007(size_t hash) { return hash % 350745513859007llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod3535293248537579	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod3535293248537579(size_t hash) { return hash % 3535293248537579llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod35633523051069991	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod35633523051069991(size_t hash) { return hash % 35633523051069991llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod359163406191658253	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod359163406191658253(size_t hash) { return hash % 359163406191658253llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod3620140286502504283	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod3620140286502504283(size_t hash) { return hash % 3620140286502504283llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod37	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod37(size_t hash) { return hash % 37llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod397	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod397(size_t hash) { return hash % 397llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod4027	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod4027(size_t hash) { return hash % 4027llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod40823	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod40823(size_t hash) { return hash % 40823llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod411527	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod411527(size_t hash) { return hash % 411527llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod4148279	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod4148279(size_t hash) { return hash % 4148279llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod41812097	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod41812097(size_t hash) { return hash % 41812097llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod421439783	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod421439783(size_t hash) { return hash % 421439783llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod4247846927	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod4247846927(size_t hash) { return hash % 4247846927llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod42815614441	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod42815614441(size_t hash) { return hash % 42815614441llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod431554351609	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod431554351609(size_t hash) { return hash % 431554351609llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod4349795294267	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod4349795294267(size_t hash) { return hash % 4349795294267llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod43843189232363	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod43843189232363(size_t hash) { return hash % 43843189232363llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod441911656067171	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod441911656067171(size_t hash) { return hash % 441911656067171llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod4454190381383713	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod4454190381383713(size_t hash) { return hash % 4454190381383713llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod44895425773957261	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod44895425773957261(size_t hash) { return hash % 44895425773957261llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod452517535812813007	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod452517535812813007(size_t hash) { return hash % 452517535812813007llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod4561090950536962147	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod4561090950536962147(size_t hash) { return hash % 4561090950536962147llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod47	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod47(size_t hash) { return hash % 47llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod499	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod499(size_t hash) { return hash % 499llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod5	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod5(size_t hash) { return hash % 5llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod5087	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod5087(size_t hash) { return hash % 5087llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod51437	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod51437(size_t hash) { return hash % 51437llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod518509	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod518509(size_t hash) { return hash % 518509llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod5226491	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod5226491(size_t hash) { return hash % 5226491llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod52679969	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod52679969(size_t hash) { return hash % 52679969llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod530980861	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod530980861(size_t hash) { return hash % 530980861llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod5351951779	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod5351951779(size_t hash) { return hash % 5351951779llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod53944293929	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod53944293929(size_t hash) { return hash % 53944293929llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod543724411781	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod543724411781(size_t hash) { return hash % 543724411781llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod5480398654009	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod5480398654009(size_t hash) { return hash % 5480398654009llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod55238957008387	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod55238957008387(size_t hash) { return hash % 55238957008387llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod556773797672909	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod556773797672909(size_t hash) { return hash % 556773797672909llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod5611928221744609	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod5611928221744609(size_t hash) { return hash % 5611928221744609llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod56564691976601587	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod56564691976601587(size_t hash) { return hash % 56564691976601587llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod570136368817120201	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod570136368817120201(size_t hash) { return hash % 570136368817120201llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod5746614499066534157	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod5746614499066534157(size_t hash) { return hash % 5746614499066534157llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod59	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod59(size_t hash) { return hash % 59llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod631	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod631(size_t hash) { return hash % 631llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod6421	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod6421(size_t hash) { return hash % 6421llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod64811	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod64811(size_t hash) { return hash % 64811llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod653267	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod653267(size_t hash) { return hash % 653267llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod6584983	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod6584983(size_t hash) { return hash % 6584983llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod66372617	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod66372617(size_t hash) { return hash % 66372617llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod668993977	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod668993977(size_t hash) { return hash % 668993977llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod6743036717	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod6743036717(size_t hash) { return hash % 6743036717llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod67965551447	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod67965551447(size_t hash) { return hash % 67965551447llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod685049831731	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod685049831731(size_t hash) { return hash % 685049831731llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod6904869625999	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod6904869625999(size_t hash) { return hash % 6904869625999llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod69596724709081	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod69596724709081(size_t hash) { return hash % 69596724709081llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod7	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod7(size_t hash) { return hash % 7llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod701491027718027	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod701491027718027(size_t hash) { return hash % 701491027718027llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod7070586497075177	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod7070586497075177(size_t hash) { return hash % 7070586497075177llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod71267046102139967	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod71267046102139967(size_t hash) { return hash % 71267046102139967llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod718326812383316683	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod718326812383316683(size_t hash) { return hash % 718326812383316683llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod7240280573005008577	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod7240280573005008577(size_t hash) { return hash % 7240280573005008577llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod73	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod73(size_t hash) { return hash % 73llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod797	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod797(size_t hash) { return hash % 797llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod8089	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod8089(size_t hash) { return hash % 8089llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod81649	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod81649(size_t hash) { return hash % 81649llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod823117	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod823117(size_t hash) { return hash % 823117llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod8296553	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod8296553(size_t hash) { return hash % 8296553llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod83624237	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod83624237(size_t hash) { return hash % 83624237llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod842879579	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod842879579(size_t hash) { return hash % 842879579llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod8495693897	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod8495693897(size_t hash) { return hash % 8495693897llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod85631228929	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod85631228929(size_t hash) { return hash % 85631228929llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod863108703229	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod863108703229(size_t hash) { return hash % 863108703229llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod8699590588571	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod8699590588571(size_t hash) { return hash % 8699590588571llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod87686378464759	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod87686378464759(size_t hash) { return hash % 87686378464759llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod883823312134381	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod883823312134381(size_t hash) { return hash % 883823312134381llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod8908380762767489	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod8908380762767489(size_t hash) { return hash % 8908380762767489llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod89790851547914507	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod89790851547914507(size_t hash) { return hash % 89790851547914507llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod905035071625626043	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod905035071625626043(size_t hash) { return hash % 905035071625626043llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod9122181901073924329	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod9122181901073924329(size_t hash) { return hash % 9122181901073924329llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod97	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static size_t mod97(size_t hash) { return hash % 97llu; }$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:size_t
mod_function	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    using mod_function = size_t (*)(size_t);$/;"	t	struct:ska::prime_number_hash_policy
mod_growth_policy	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^  explicit mod_growth_policy(std::size_t& min_bucket_count_in_out) {$/;"	f	class:tsl::rh::mod_growth_policy
mod_growth_policy	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^class mod_growth_policy {$/;"	c	namespace:tsl::rh
modified	./src/flecs.h	/^    void modified() const {$/;"	f	struct:flecs::entity	typeref:typename:void
modified	./src/flecs.h	/^    void modified(entity_t comp) const {$/;"	f	struct:flecs::entity	typeref:typename:void
modified	./src/flecs.h	/^    void modified(entity_t first, entity_t second) const {$/;"	f	struct:flecs::entity	typeref:typename:void
modified	./src/flecs.h	/^    void modified(entity_t second) const {$/;"	f	struct:flecs::entity	typeref:typename:void
modified	./src/flecs.h	/^inline void world::modified() const {$/;"	f	class:flecs::world	typeref:typename:void
modified_count	./src/flecs.h	/^        ecs_metric_t modified_count;$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1308	typeref:typename:ecs_metric_t
modified_count	./src/flecs.h	/^        int64_t modified_count;        \/**< Modified commands processed *\/$/;"	m	struct:ecs_world_info_t::__anon7d4a417c0708	typeref:typename:int64_t
module	./src/flecs.h	/^inline flecs::entity world::module(const char *name) const {$/;"	f	class:flecs::world	typeref:typename:flecs::entity
module_file_base	./src/flecs.c	/^char *module_file_base(const char *module, char sep) {$/;"	f	typeref:typename:char *	file:
module_to_dl_	./src/flecs.h	/^    ecs_os_api_module_to_path_t module_to_dl_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_module_to_path_t
module_to_etc_	./src/flecs.h	/^    ecs_os_api_module_to_path_t module_to_etc_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_module_to_path_t
monitor	./src/flecs.c	/^    ecs_vec_t monitor;$/;"	m	struct:flecs_flat_table_term_t	typeref:typename:ecs_vec_t	file:
monitor	./src/flecs.c	/^    int32_t *monitor;                \/* Used to monitor table for changes *\/$/;"	m	struct:ecs_query_table_match_t	typeref:typename:int32_t *	file:
monitor	./src/flecs.c	/^    int32_t monitor;$/;"	m	struct:flecs_flat_monitor_t	typeref:typename:int32_t	file:
monitor	./src/flecs.h	/^inline monitor::monitor(flecs::world& world) {$/;"	f	class:flecs::monitor
monitor	./src/flecs.h	/^struct monitor {$/;"	s	namespace:flecs
monitor_generation	./src/flecs.c	/^    int32_t monitor_generation;$/;"	m	struct:ecs_query_t	typeref:typename:int32_t	file:
monitor_generation	./src/flecs.c	/^    int32_t monitor_generation;$/;"	m	struct:ecs_world_t	typeref:typename:int32_t	file:
monitors	./src/flecs.c	/^    ecs_block_allocator_t monitors;$/;"	m	struct:ecs_query_allocators_t	typeref:typename:ecs_block_allocator_t	file:
monitors	./src/flecs.c	/^    ecs_map_t monitors;              \/* map<id, ecs_monitor_t> *\/$/;"	m	struct:ecs_monitor_set_t	typeref:typename:ecs_map_t	file:
monitors	./src/flecs.c	/^    ecs_monitor_set_t monitors;      \/* map<id, ecs_monitor_t> *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_monitor_set_t	file:
monostate	./vendor/fmt/include/base.h	/^  constexpr monostate() {}$/;"	f	struct:monostate
monostate	./vendor/fmt/include/base.h	/^struct monostate {$/;"	s
month	./vendor/fmt/include/chrono.h	/^  constexpr auto month() const noexcept -> fmt::month { return month_; }$/;"	f	class:year_month_day	typeref:typename:auto
month	./vendor/fmt/include/chrono.h	/^  constexpr explicit month(unsigned m) noexcept$/;"	f	class:month
month	./vendor/fmt/include/chrono.h	/^class month {$/;"	c
month	./vendor/fmt/include/chrono.h	/^using month = std::chrono::month;$/;"	t	typeref:typename:std::chrono::month
month_	./vendor/fmt/include/chrono.h	/^  fmt::month month_;$/;"	m	class:year_month_day	typeref:typename:fmt::month
move	./src/flecs.h	/^    bool move;                  \/**< Used by internals *\/$/;"	m	struct:ecs_term_t	typeref:typename:bool
move	./src/flecs.h	/^    ecs_move_t move;            \/**< move assignment *\/$/;"	m	struct:ecs_type_hooks_t	typeref:typename:ecs_move_t
move	./src/flecs.h	/^    ecs_term_t move() { \/* explicit move to ecs_term_t *\/$/;"	f	struct:flecs::term	typeref:typename:ecs_term_t
move	./src/flecs.h	/^    void move(flecs::rule_base&& obj) {$/;"	f	struct:flecs::rule_base	typeref:typename:void
move	./src/flecs.h	/^ecs_move_t move() {$/;"	f	namespace:flecs::_	typeref:typename:ecs_move_t
move	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 void move(basic_memory_buffer& other) {$/;"	f	class:basic_memory_buffer	typeref:typename:FMT_CONSTEXPR20 void
move_ctor	./src/flecs.h	/^    ecs_move_t move_ctor;$/;"	m	struct:ecs_type_hooks_t	typeref:typename:ecs_move_t
move_ctor	./src/flecs.h	/^ecs_move_t move_ctor() {$/;"	f	namespace:flecs::_	typeref:typename:ecs_move_t
move_ctor_impl	./src/flecs.h	/^void move_ctor_impl(void *dst_ptr, void *src_ptr, int32_t count, $/;"	f	namespace:flecs::_	typeref:typename:void
move_dtor	./src/flecs.h	/^    ecs_move_t move_dtor;$/;"	m	struct:ecs_type_hooks_t	typeref:typename:ecs_move_t
move_dtor	./src/flecs.h	/^ecs_move_t move_dtor() {$/;"	f	namespace:flecs::_	typeref:typename:ecs_move_t
move_dtor_impl	./src/flecs.h	/^void move_dtor_impl(void *dst_ptr, void *src_ptr, int32_t count, $/;"	f	namespace:flecs::_	typeref:typename:void
move_impl	./src/flecs.h	/^void move_impl(void *dst_ptr, void *src_ptr, int32_t count, $/;"	f	namespace:flecs::_	typeref:typename:void
msg_end	./vendor/STC/misc/tests/ctest.h	/^static void msg_end(void) {$/;"	f	typeref:typename:void
msg_start	./vendor/STC/misc/tests/ctest.h	/^static void msg_start(const char* color, const char* title) {$/;"	f	typeref:typename:void
mt	./src/mt19937-64.c	/^static unsigned long long mt[NN]; $/;"	v	typeref:typename:unsigned long long[]	file:
mti	./src/mt19937-64.c	/^static int mti=NN+1; $/;"	v	typeref:typename:int	file:
multi_threaded	./src/flecs.c	/^    bool multi_threaded;        \/* Whether systems can be ran multi threaded *\/$/;"	m	struct:ecs_pipeline_op_t	typeref:typename:bool	file:
multi_threaded	./src/flecs.c	/^    bool multi_threaded;$/;"	m	struct:ecs_system_t	typeref:typename:bool	file:
multi_threaded	./src/flecs.h	/^    Base& multi_threaded(bool value = true) {$/;"	f	struct:flecs::system_builder_i	typeref:typename:Base &
multi_threaded	./src/flecs.h	/^    bool multi_threaded;$/;"	m	struct:ecs_sync_stats_t	typeref:typename:bool
multi_threaded	./src/flecs.h	/^    bool multi_threaded;$/;"	m	struct:ecs_system_desc_t	typeref:typename:bool
multiply	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 void multiply(UInt value) {$/;"	f	class:detail::bigint	typeref:typename:FMT_CONSTEXPR20 void
multiply	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 void multiply(uint32_t value) {$/;"	f	class:detail::bigint	typeref:typename:FMT_CONSTEXPR20 void
multiply	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR inline auto multiply(uint64_t lhs, uint64_t rhs) -> uint64_t {$/;"	f	namespace:detail	typeref:typename:uint64_t
mum	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^static inline void mum(uint64_t* a, uint64_t* b) {$/;"	f	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::wyhash	typeref:typename:void
mut	./src/flecs.h	/^inline flecs::entity entity_view::mut(const flecs::entity_view& e) const {$/;"	f	class:flecs::entity_view	typeref:typename:flecs::entity
mut	./src/flecs.h	/^inline flecs::entity entity_view::mut(const flecs::iter& it) const {$/;"	f	class:flecs::entity_view	typeref:typename:flecs::entity
mut	./src/flecs.h	/^inline flecs::entity entity_view::mut(const flecs::world& stage) const {$/;"	f	class:flecs::entity_view	typeref:typename:flecs::entity
mutable_iterator	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  iterator mutable_iterator(const_iterator pos) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:iterator
mutable_iterator	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  iterator mutable_iterator(const_iterator pos) {$/;"	f	class:tsl::robin_map	typeref:typename:iterator
mutex_free_	./src/flecs.h	/^    ecs_os_api_mutex_free_t mutex_free_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_mutex_free_t
mutex_lock_	./src/flecs.h	/^    ecs_os_api_mutex_lock_t mutex_lock_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_mutex_lock_t
mutex_new_	./src/flecs.h	/^    ecs_os_api_mutex_new_t mutex_new_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_mutex_new_t
mutex_unlock_	./src/flecs.h	/^    ecs_os_api_mutex_lock_t mutex_unlock_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_mutex_lock_t
n	./vendor/STC/include/stc/priv/cregex_prv.c	/^    static struct { const char* c; int n, r; } cls[] = {$/;"	m	struct:_lexasciiclass::__anon4ce7005a0608	typeref:typename:int	file:
n	./vendor/STC/include/stc/priv/cregex_prv.c	/^    static struct { const char* c; uint32_t n, r; } cls[] = {$/;"	m	struct:_lexutfclass::__anon4ce7005a0708	typeref:typename:uint32_t	file:
n	./vendor/STC/misc/benchmarks/plotbench/plot.py	/^n = int(sys.argv[1]) if len(sys.argv) > 1 else 0$/;"	v
n	./vendor/STC/misc/examples/coroutines/cotasks1.c	/^    int n, i;$/;"	m	struct:consume_items	typeref:typename:int	file:
name	./src/flecs.c	/^    const char *name;      \/* variable name *\/$/;"	m	struct:ecs_rule_var_t	typeref:typename:const char *	file:
name	./src/flecs.c	/^    const char *name;$/;"	m	struct:__anon7d4a41771908	typeref:typename:const char *	file:
name	./src/flecs.c	/^    const char *name;$/;"	m	struct:__anon7d4a41773808	typeref:typename:const char *	file:
name	./src/flecs.c	/^    const char *name;$/;"	m	struct:meta_parse_ctx_t	typeref:typename:const char *	file:
name	./src/flecs.c	/^    ecs_meta_token_t name;$/;"	m	struct:meta_constant_t	typeref:typename:ecs_meta_token_t	file:
name	./src/flecs.c	/^    ecs_meta_token_t name;$/;"	m	struct:meta_member_t	typeref:typename:ecs_meta_token_t	file:
name	./src/flecs.h	/^    Base& name(const char *name) {$/;"	f	struct:flecs::term_id_builder_i	typeref:typename:Base &
name	./src/flecs.h	/^    char *name;                 \/**< Name of term *\/$/;"	m	struct:ecs_term_t	typeref:typename:char *
name	./src/flecs.h	/^    char *name;$/;"	m	struct:ecs_expr_var_t	typeref:typename:char *
name	./src/flecs.h	/^    const char *name;           \/**< Name. This can be either the variable name$/;"	m	struct:ecs_term_id_t	typeref:typename:const char *
name	./src/flecs.h	/^    const char *name;        \/**< Type name. *\/$/;"	m	struct:ecs_type_info_t	typeref:typename:const char *
name	./src/flecs.h	/^    const char *name;       \/**< Name of value (only used for struct members) *\/$/;"	m	struct:ecs_meta_type_op_t	typeref:typename:const char *
name	./src/flecs.h	/^    const char *name;     \/**< Name of the entity. If no entity is provided, an$/;"	m	struct:ecs_entity_desc_t	typeref:typename:const char *
name	./src/flecs.h	/^    const char *name; \/**< Name of expression (used for logging) *\/$/;"	m	struct:ecs_from_json_desc_t	typeref:typename:const char *
name	./src/flecs.h	/^    const char *name;$/;"	m	struct:ecs_bitmask_constant_t	typeref:typename:const char *
name	./src/flecs.h	/^    const char *name;$/;"	m	struct:ecs_enum_constant_t	typeref:typename:const char *
name	./src/flecs.h	/^    const char *name;$/;"	m	struct:ecs_member_t	typeref:typename:const char *
name	./src/flecs.h	/^    const char *name;$/;"	m	struct:ecs_parse_expr_desc_t	typeref:typename:const char *
name	./src/flecs.h	/^    flecs::string_view name() const {$/;"	f	struct:flecs::entity_view	typeref:typename:flecs::string_view
name	./vendor/STC/include/stc/coption.h	/^    const char *name;$/;"	m	struct:__anonc31abe760208	typeref:typename:const char *
name	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        const char* name;$/;"	m	struct:picobench::report::benchmark	typeref:typename:const char *
name	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        const char* name;$/;"	m	struct:picobench::report::problem_space_benchmark	typeref:typename:const char *
name	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        const char* name;$/;"	m	struct:picobench::report::suite	typeref:typename:const char *
name	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    const char* name() const { return _name; }$/;"	f	class:picobench::benchmark	typeref:typename:const char *
name	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    const char* name;$/;"	m	struct:picobench::rsuite	typeref:typename:const char *
name	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^typedef struct { const char* name; Range test[N_TESTS]; } Sample;$/;"	m	struct:__anonfac950030308	typeref:typename:const char *	file:
name	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^typedef struct { const char* name; Range test[N_TESTS]; } Sample;$/;"	m	struct:__anonca721fef0308	typeref:typename:const char *	file:
name	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^typedef struct { const char* name; Range test[N_TESTS]; } Sample;$/;"	m	struct:__anona03d81450308	typeref:typename:const char *	file:
name	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^typedef struct { const char* name; Range test[N_TESTS]; } Sample;$/;"	m	struct:__anon0565975a0308	typeref:typename:const char *	file:
name	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^typedef struct { const char* name; Range test[N_TESTS]; } Sample;$/;"	m	struct:__anon603333870308	typeref:typename:const char *	file:
name	./vendor/STC/misc/examples/hashmaps/new_map.c	/^    cstr name;$/;"	m	struct:MyStruct	typeref:typename:cstr	file:
name	./vendor/STC/misc/examples/hashmaps/vikings.c	/^    const char* name;$/;"	m	struct:RViking	typeref:typename:const char *	file:
name	./vendor/STC/misc/examples/hashmaps/vikings.c	/^    cstr name;$/;"	m	struct:Viking	typeref:typename:cstr	file:
name	./vendor/STC/misc/examples/smartpointers/box.c	/^typedef struct { cstr name, last; } Person;$/;"	m	struct:__anon71539ea50108	typeref:typename:cstr	file:
name	./vendor/STC/misc/examples/smartpointers/new_sptr.c	/^typedef struct { cstr name, last; } Person;$/;"	m	struct:__anonedee870e0108	typeref:typename:cstr	file:
name	./vendor/STC/misc/examples/smartpointers/person_arc.c	/^typedef struct { cstr name, last; } Person;$/;"	m	struct:__anon0e10c9080108	typeref:typename:cstr	file:
name	./vendor/STC/misc/examples/sortedmaps/new_smap.c	/^    cstr name;$/;"	m	struct:__anon6b61945d0108	typeref:typename:cstr	file:
name	./vendor/fmt/include/base.h	/^    basic_string_view<Char> name;$/;"	m	union:detail::arg_ref::value	typeref:typename:basic_string_view<Char>
name	./vendor/fmt/include/base.h	/^  const Char* name;$/;"	m	struct:detail::named_arg	typeref:typename:const Char *
name	./vendor/fmt/include/base.h	/^  const Char* name;$/;"	m	struct:detail::named_arg_info	typeref:typename:const Char *
name	./vendor/fmt/include/base.h	/^enum class arg_id_kind { none, index, name };$/;"	e	enum:detail::arg_id_kind
name	./vendor/fmt/include/compile.h	/^  basic_string_view<Char> name;$/;"	m	struct:detail::runtime_named_field	typeref:typename:basic_string_view<Char>
name	./vendor/fmt/include/format.h	/^  static constexpr auto name = Str.data;$/;"	m	struct:detail::statically_named_arg	typeref:typename:auto
name	./vendor/raylib5/include/raylib.h	/^    char name[32];          \/\/ Animation name$/;"	m	struct:ModelAnimation	typeref:typename:char[32]
name	./vendor/raylib5/include/raylib.h	/^    char name[32];          \/\/ Bone name$/;"	m	struct:BoneInfo	typeref:typename:char[32]
name_col	./src/flecs.c	/^    int16_t name_col;$/;"	m	struct:__anon7d4a41772e08	typeref:typename:int16_t	file:
name_index	./src/flecs.c	/^    ecs_hashmap_t *name_index;       \/* Cached pointer to name index *\/$/;"	m	struct:ecs_table__t	typeref:typename:ecs_hashmap_t *	file:
name_index	./src/flecs.c	/^    ecs_hashmap_t *name_index;$/;"	m	struct:ecs_id_record_t	typeref:typename:ecs_hashmap_t *	file:
name_prefix	./src/flecs.h	/^    const char *name_prefix;          \/**< Value set by ecs_set_name_prefix(). Used$/;"	m	struct:ecs_world_info_t	typeref:typename:const char *
named_arg	./vendor/fmt/include/base.h	/^  named_arg(const Char* n, const T& v) : name(n), value(v) {}$/;"	f	struct:detail::named_arg
named_arg	./vendor/fmt/include/base.h	/^template <typename Char, typename T> struct named_arg : view {$/;"	s	namespace:detail
named_arg_info	./vendor/fmt/include/base.h	/^template <typename Char> struct named_arg_info {$/;"	s	namespace:detail
named_arg_value	./vendor/fmt/include/base.h	/^template <typename Char> struct named_arg_value {$/;"	s	namespace:detail
named_args	./vendor/fmt/include/base.h	/^    named_arg_value<char_type> named_args;$/;"	m	union:detail::value::__anonea363bd9060a	typeref:typename:named_arg_value<char_type>
named_args	./vendor/fmt/include/base.h	/^  named_arg_info<typename Context::char_type> named_args[NUM_NAMED_ARGS];$/;"	m	struct:detail::format_arg_store	typeref:typename:named_arg_info<typename Context::char_type>[]
named_info_	./vendor/fmt/include/args.h	/^  std::vector<detail::named_arg_info<char_type>> named_info_;$/;"	m	class:dynamic_format_arg_store	typeref:typename:std::vector<detail::named_arg_info<char_type>>
nanosec	./src/flecs.h	/^    uint32_t nanosec;$/;"	m	struct:ecs_time_t	typeref:typename:uint32_t
native_formatter	./vendor/fmt/include/base.h	/^template <typename T, typename Char, type TYPE> struct native_formatter {$/;"	s	namespace:detail
navajo_white	./vendor/fmt/include/color.h	/^  navajo_white = 0xFFDEAD,             \/\/ rgb(255,222,173)$/;"	e	enum:color
navy	./vendor/fmt/include/color.h	/^  navy = 0x000080,                     \/\/ rgb(0,0,128)$/;"	e	enum:color
nbra	./vendor/STC/include/stc/priv/cregex_prv.c	/^    short nbra;$/;"	m	struct:_Parser	typeref:typename:short	file:
ncap	./vendor/STC/include/stc/types.h	/^    struct { cstr_value* data; size_t size, ncap; } lon;$/;"	m	struct:cstr::__anon0ab7b7af0608	typeref:typename:size_t
nclass	./vendor/STC/include/stc/priv/cregex_prv.c	/^    short nclass;$/;"	m	struct:_Parser	typeref:typename:short	file:
need_copy	./vendor/fmt/include/args.h	/^  template <typename T> struct need_copy {$/;"	s	class:dynamic_format_arg_store
needs_escape	./vendor/fmt/include/format.h	/^inline auto needs_escape(uint32_t cp) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
needs_flush	./vendor/fmt/include/format-inl.h	/^  auto needs_flush() const -> bool { return false; }$/;"	f	class:detail::fallback_file	typeref:typename:bool
needs_flush	./vendor/fmt/include/format-inl.h	/^  bool needs_flush() const {$/;"	f	class:detail::apple_file	typeref:typename:bool
needs_flush	./vendor/fmt/include/format-inl.h	/^  bool needs_flush() const {$/;"	f	class:detail::glibc_file	typeref:typename:bool
negative	./vendor/fmt/include/chrono.h	/^  bool negative;$/;"	m	struct:detail::chrono_formatter	typeref:typename:bool
nested	./vendor/fmt/include/format.h	/^  auto nested(const T& value) const -> nested_view<T, Char> {$/;"	f	struct:nested_formatter	typeref:typename:nested_view<T,Char>
nested_formatter	./vendor/fmt/include/format.h	/^  constexpr nested_formatter() : width_(0), align_(align_t::none) {}$/;"	f	struct:nested_formatter
nested_formatter	./vendor/fmt/include/format.h	/^template <typename T, typename Char = char> struct nested_formatter {$/;"	s
nested_view	./vendor/fmt/include/format.h	/^template <typename T, typename Char> struct nested_view {$/;"	s
new_benchmark	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^benchmark& global_registry::new_benchmark(const char* name, benchmark_proc proc)$/;"	f	class:picobench::global_registry	typeref:typename:benchmark &
new_node	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    enum class InsertionState { overflow_error, key_found, new_node, overwrite_node };$/;"	e	enum:robin_hood::detail::Table::InsertionState
next	./src/flecs.c	/^    ecs_query_table_match_t *next, *prev;$/;"	m	struct:ecs_query_table_match_t	typeref:typename:ecs_query_table_match_t *	file:
next	./src/flecs.c	/^    ecs_rule_lbl_t next;       \/* Forwarding label. Must come after prev *\/$/;"	m	struct:ecs_rule_op_t	typeref:typename:ecs_rule_lbl_t	file:
next	./src/flecs.c	/^    int32_t next;       \/* Next node in list *\/$/;"	m	struct:ecs_switch_node_t	typeref:typename:int32_t	file:
next	./src/flecs.c	/^    struct ecs_graph_edge_hdr_t *next;$/;"	m	struct:ecs_graph_edge_hdr_t	typeref:struct:ecs_graph_edge_hdr_t *	file:
next	./src/flecs.c	/^    struct ecs_id_record_t *prev, *next;$/;"	m	struct:ecs_id_record_elem_t	typeref:struct:ecs_id_record_t *	file:
next	./src/flecs.c	/^    struct ecs_stack_page_t *next;$/;"	m	struct:ecs_stack_page_t	typeref:struct:ecs_stack_page_t *	file:
next	./src/flecs.c	/^    struct ecs_table_cache_hdr_t *prev, *next;$/;"	m	struct:ecs_table_cache_hdr_t	typeref:struct:ecs_table_cache_hdr_t *	file:
next	./src/flecs.h	/^    ecs_iter_next_action_t next;  \/* Function to progress iterator *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_iter_next_action_t
next	./src/flecs.h	/^    int next() {$/;"	f	struct:flecs::cursor	typeref:typename:int
next	./src/flecs.h	/^    int next(int cur) const {$/;"	f	struct:flecs::enum_data	typeref:typename:int
next	./src/flecs.h	/^    struct ecs_block_allocator_block_t *next;$/;"	m	struct:ecs_block_allocator_block_t	typeref:struct:ecs_block_allocator_block_t *
next	./src/flecs.h	/^    struct ecs_block_allocator_chunk_header_t *next;$/;"	m	struct:ecs_block_allocator_chunk_header_t	typeref:struct:ecs_block_allocator_chunk_header_t *
next	./src/flecs.h	/^    struct ecs_bucket_entry_t *next;$/;"	m	struct:ecs_bucket_entry_t	typeref:struct:ecs_bucket_entry_t *
next	./src/flecs.h	/^    struct ecs_table_cache_hdr_t *cur, *next;$/;"	m	struct:ecs_table_cache_iter_t	typeref:struct:ecs_table_cache_hdr_t *
next	./vendor/STC/include/stc/crand.h	/^typedef struct crand_normal { double mean, stddev, next; int has_next; } crand_normal_t;$/;"	m	struct:crand_normal	typeref:typename:double
next	./vendor/STC/include/stc/priv/cregex_prv.c	/^        struct _Reinst *next;    \/* next instruction for TOK_CAT & TOK_LBRA *\/$/;"	m	union:_Reinst::__anon4ce7005a030a	typeref:struct:_Reinst *	file:
next	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void next(InfoType* info, size_t* idx) const noexcept {$/;"	f	class:robin_hood::detail::Table	typeref:typename:void
next	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] auto next(value_idx_type bucket_idx) const -> value_idx_type {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:value_idx_type
next	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        iterator& next()$/;"	f	class:emhash7::HashMap::iterator	typeref:typename:iterator &
next	./vendor/STC/misc/examples/coroutines/cotasks1.c	/^    struct next_value next;$/;"	m	struct:produce_items	typeref:struct:next_value	file:
next	./vendor/cjson/include/cJSON.h	/^    struct cJSON *next;$/;"	m	struct:cJSON	typeref:struct:cJSON *
next	./vendor/fmt/include/args.h	/^  std::unique_ptr<node<>> next;$/;"	m	struct:detail::node	typeref:typename:std::unique_ptr<node<>>
next	./vendor/fmt/include/format.h	/^  auto next(next_state& state) const -> int {$/;"	f	class:detail::digit_grouping	typeref:typename:int
nextHashMultiplier	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void nextHashMultiplier() {$/;"	f	class:robin_hood::detail::Table	typeref:typename:void
nextWhileLess	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void nextWhileLess(InfoType* info, size_t* idx) const noexcept {$/;"	f	class:robin_hood::detail::Table	typeref:typename:void
next_	./vendor/fmt/include/format-inl.h	/^  char next_;  \/\/ The next unconsumed character in the buffer.$/;"	m	class:detail::fallback_file	typeref:typename:char
next_action	./src/flecs.h	/^    ecs_iter_next_action_t next_action() const override {$/;"	f	struct:flecs::filter	typeref:typename:ecs_iter_next_action_t
next_action	./src/flecs.h	/^    ecs_iter_next_action_t next_action() const override {$/;"	f	struct:flecs::iter_iterable	typeref:typename:ecs_iter_next_action_t
next_action	./src/flecs.h	/^    ecs_iter_next_action_t next_action() const override {$/;"	f	struct:flecs::query	typeref:typename:ecs_iter_next_action_t
next_action	./src/flecs.h	/^    ecs_iter_next_action_t next_action() const override {$/;"	f	struct:flecs::rule	typeref:typename:ecs_iter_next_action_t
next_action	./src/flecs.h	/^    ecs_iter_next_action_t next_action() const {$/;"	f	struct:flecs::page_iterable	typeref:typename:ecs_iter_next_action_t
next_action	./src/flecs.h	/^    ecs_iter_next_action_t next_action() const {$/;"	f	struct:flecs::worker_iterable	typeref:typename:ecs_iter_next_action_t
next_arg_id	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR auto next_arg_id() -> int {$/;"	f	class:basic_format_parse_context	typeref:typename:int
next_arg_id	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR auto next_arg_id() -> int {$/;"	f	class:detail::compile_parse_context	typeref:typename:int
next_arg_id	./vendor/fmt/include/compile.h	/^  int next_arg_id;$/;"	m	struct:detail::parse_specs_result	typeref:typename:int
next_arg_id_	./vendor/fmt/include/base.h	/^  int next_arg_id_;$/;"	m	class:basic_format_parse_context	typeref:typename:int
next_bucket	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  std::size_t next_bucket(std::size_t index) const noexcept {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:std::size_t
next_bucket_count	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^  std::size_t next_bucket_count() const {$/;"	f	class:tsl::rh::mod_growth_policy	typeref:typename:std::size_t
next_bucket_count	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^  std::size_t next_bucket_count() const {$/;"	f	class:tsl::rh::power_of_two_growth_policy	typeref:typename:std::size_t
next_bucket_count	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^  std::size_t next_bucket_count() const {$/;"	f	class:tsl::rh::prime_growth_policy	typeref:typename:std::size_t
next_each_action	./src/flecs.h	/^    ecs_iter_next_action_t next_each_action() const override {$/;"	f	struct:flecs::filter	typeref:typename:ecs_iter_next_action_t
next_each_action	./src/flecs.h	/^    ecs_iter_next_action_t next_each_action() const override {$/;"	f	struct:flecs::iter_iterable	typeref:typename:ecs_iter_next_action_t
next_each_action	./src/flecs.h	/^    ecs_iter_next_action_t next_each_action() const override {$/;"	f	struct:flecs::query	typeref:typename:ecs_iter_next_action_t
next_each_action	./src/flecs.h	/^    ecs_iter_next_action_t next_each_action() const override {$/;"	f	struct:flecs::rule	typeref:typename:ecs_iter_next_action_t
next_each_action	./src/flecs.h	/^    ecs_iter_next_action_t next_each_action() const {$/;"	f	struct:flecs::page_iterable	typeref:typename:ecs_iter_next_action_t
next_each_action	./src/flecs.h	/^    ecs_iter_next_action_t next_each_action() const {$/;"	f	struct:flecs::worker_iterable	typeref:typename:ecs_iter_next_action_t
next_for_entity	./src/flecs.c	/^    int32_t next_for_entity;         \/* Next operation for entity *\/    $/;"	m	struct:ecs_cmd_t	typeref:typename:int32_t	file:
next_list	./src/flecs.h	/^    struct ecs_table_cache_hdr_t *next_list;$/;"	m	struct:ecs_table_cache_iter_t	typeref:struct:ecs_table_cache_hdr_t *
next_match	./src/flecs.c	/^    ecs_query_table_match_t *next_match;$/;"	m	struct:ecs_query_table_match_t	typeref:typename:ecs_query_table_match_t *	file:
next_power_of_two	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^inline size_t next_power_of_two(size_t i)$/;"	f	namespace:ska::detailv3	typeref:typename:size_t
next_size_over	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    int8_t next_size_over(size_t & size) const$/;"	f	struct:ska::fibonacci_hash_policy	typeref:typename:int8_t
next_size_over	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    int8_t next_size_over(size_t & size) const$/;"	f	struct:ska::power_of_two_hash_policy	typeref:typename:int8_t
next_size_over	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    mod_function next_size_over(size_t & size) const$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:mod_function
next_state	./vendor/fmt/include/format.h	/^  struct next_state {$/;"	s	class:detail::digit_grouping
next_value	./vendor/STC/misc/examples/coroutines/cotasks1.c	/^int next_value(struct next_value* co)$/;"	f	typeref:typename:int
next_value	./vendor/STC/misc/examples/coroutines/cotasks1.c	/^struct next_value {$/;"	s	file:
next_value	./vendor/STC/misc/examples/coroutines/cotasks2.c	/^int next_value(struct next_value* co, cco_runtime* rt)$/;"	f	typeref:typename:int
next_while_less	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] auto next_while_less(K const& key) const -> Bucket {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:Bucket
no_delimiters_	./vendor/fmt/include/ranges.h	/^  bool no_delimiters_ = false;$/;"	m	struct:formatter	typeref:typename:bool
no_error	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    no_error,$/;"	e	enum:picobench::error_t
no_readonly	./src/flecs.c	/^    bool no_readonly;           \/* Is pipeline in readonly mode *\/$/;"	m	struct:ecs_pipeline_state_t	typeref:typename:bool	file:
no_readonly	./src/flecs.c	/^    bool no_readonly;           \/* Whether systems are staged or not *\/$/;"	m	struct:ecs_pipeline_op_t	typeref:typename:bool	file:
no_readonly	./src/flecs.c	/^    bool no_readonly;$/;"	m	struct:ecs_system_t	typeref:typename:bool	file:
no_readonly	./src/flecs.h	/^    Base& no_readonly(bool value = true) {$/;"	f	struct:flecs::system_builder_i	typeref:typename:Base &
no_readonly	./src/flecs.h	/^    bool no_readonly;$/;"	m	struct:ecs_sync_stats_t	typeref:typename:bool
no_readonly	./src/flecs.h	/^    bool no_readonly;$/;"	m	struct:ecs_system_desc_t	typeref:typename:bool
no_value	./vendor/fmt/include/base.h	/^    monostate no_value;$/;"	m	union:detail::value::__anonea363bd9060a	typeref:typename:monostate
node	./src/flecs.c	/^    ecs_graph_node_t node;           \/* Graph node *\/$/;"	m	struct:ecs_table_t	typeref:typename:ecs_graph_node_t	file:
node	./src/flecs.h	/^    ecs_query_table_match_t *node, *prev, *last;$/;"	m	struct:ecs_query_iter_t	typeref:typename:ecs_query_table_match_t *
node	./vendor/fmt/include/args.h	/^template <typename = void> struct node {$/;"	s	namespace:detail
node_builder	./src/flecs.h	/^    explicit node_builder(flecs::world_t* world, const char *name = nullptr)$/;"	f	struct:flecs::_::node_builder
node_builder	./src/flecs.h	/^struct node_builder : IBuilder<Base, Components ...>$/;"	s	namespace:flecs::_
nodes	./src/flecs.c	/^    ecs_vec_t nodes;    \/* vec<ecs_switch_node_t> *\/$/;"	m	struct:ecs_switch_t	typeref:typename:ecs_vec_t	file:
nodes	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        void nodes(M& m) const noexcept {$/;"	f	struct:robin_hood::detail::Table::Destroyer	typeref:typename:void
nodesDoNotDeallocate	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        void nodesDoNotDeallocate(M& m) const noexcept {$/;"	f	struct:robin_hood::detail::Table::Destroyer	typeref:typename:void
none	./vendor/fmt/include/base.h	/^  none = 0,$/;"	e	enum:presentation_type
none	./vendor/fmt/include/base.h	/^enum class arg_id_kind { none, index, name };$/;"	e	enum:detail::arg_id_kind
none	./vendor/fmt/include/chrono.h	/^  none,$/;"	e	enum:detail::pad_type
none_type	./vendor/fmt/include/base.h	/^  none_type,$/;"	e	enum:detail::type
nonesuch	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^struct nonesuch {};$/;"	s	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail
nonlocking	./vendor/fmt/include/base.h	/^  using nonlocking = void;$/;"	t	struct:detail::native_formatter	typeref:typename:void
nonlocking	./vendor/fmt/include/ranges.h	/^  using nonlocking = void;$/;"	t	struct:formatter	typeref:typename:void
normal	./vendor/raylib5/include/raylib.h	/^    Vector3 normal;         \/\/ Surface normal of hit$/;"	m	struct:RayCollision	typeref:typename:Vector3
normalize	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto normalize(basic_fp<F> value) -> basic_fp<F> {$/;"	f	namespace:detail	typeref:typename:basic_fp<F>
normals	./vendor/raylib5/include/raylib.h	/^    float *normals;         \/\/ Vertex normals (XYZ - 3 components per vertex) (shader-location/;"	m	struct:Mesh	typeref:typename:float *
not_	./src/flecs.h	/^    Base& not_() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
not_alive_count	./src/flecs.h	/^        ecs_metric_t not_alive_count;     \/**< Number of not alive (recyclable) entity ids *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c0f08	typeref:typename:ecs_metric_t
not_from	./src/flecs.h	/^    Base& not_from() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
nothrow	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^struct nothrow {$/;"	s	namespace:robin_hood::detail::swappable
now	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    uint64_t now;$/;"	m	struct:picobench::fake_time	typeref:typename:uint64_t
now	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^high_res_clock::time_point high_res_clock::now()$/;"	f	class:picobench::high_res_clock	typeref:typename:high_res_clock::time_point
now_	./src/flecs.h	/^    ecs_os_api_now_t now_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_now_t
np	./vendor/STC/src/utf8_tab.py	/^import numpy as np$/;"	I	nameref:module:numpy
nr16	./vendor/STC/include/stc/priv/utf8_prv.c	/^  int nr16;$/;"	m	struct:__anon57216ba30208	typeref:typename:int	file:
nsubids	./vendor/STC/include/stc/priv/cregex_prv.c	/^    int nsubids;$/;"	m	struct:_Reprog	typeref:typename:int	file:
null	./src/flecs.h	/^    flecs::entity null() {$/;"	f	struct:flecs::entity	typeref:typename:flecs::entity
null	./src/flecs.h	/^    flecs::entity null(const flecs::world_t *world) {$/;"	f	struct:flecs::entity	typeref:typename:flecs::entity
null	./vendor/fmt/include/chrono.h	/^template <typename T = void> struct null {};$/;"	s	namespace:detail
null_chrono_spec_handler	./vendor/fmt/include/chrono.h	/^template <typename Derived> struct null_chrono_spec_handler {$/;"	s	namespace:detail
null_stream	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    null_stream() : std::ostream(&_buf) {}$/;"	f	struct:picobench::null_stream
null_stream	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^struct null_stream : public std::ostream$/;"	s	namespace:picobench
null_streambuf	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^class null_streambuf : public std::streambuf$/;"	c	namespace:picobench
nullary	./vendor/STC/misc/tests/ctest.h	/^    ctest_nullary_run_func nullary;$/;"	m	union:ctest_run_func_union	typeref:typename:ctest_nullary_run_func
num_args	./vendor/fmt/include/base.h	/^  constexpr auto num_args() const -> int { return num_args_; }$/;"	f	class:detail::compile_parse_context	typeref:typename:int
num_args	./vendor/fmt/include/base.h	/^  static constexpr int num_args = sizeof...(Args);$/;"	m	class:detail::format_string_checker	typeref:typename:int
num_args_	./vendor/fmt/include/base.h	/^  int num_args_;$/;"	m	class:detail::compile_parse_context	typeref:typename:int
num_bigits	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 auto num_bigits() const -> int {$/;"	f	class:detail::bigint	typeref:typename:int
num_bits	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    static constexpr auto num_bits = num_bits_closest(MaxSegmentSizeBytes, sizeof(T));$/;"	m	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:auto
num_bits	./vendor/fmt/include/format.h	/^template <> constexpr auto num_bits<int128_opt>() -> int { return 128; }$/;"	f	namespace:detail	typeref:typename:int
num_bits	./vendor/fmt/include/format.h	/^template <> constexpr auto num_bits<uint128_fallback>() -> int { return 128; }$/;"	f	namespace:detail	typeref:typename:int
num_bits	./vendor/fmt/include/format.h	/^template <> constexpr auto num_bits<uint128_opt>() -> int { return 128; }$/;"	f	namespace:detail	typeref:typename:int
num_bits	./vendor/fmt/include/format.h	/^template <typename T> constexpr auto num_bits() -> int {$/;"	f	namespace:detail	typeref:typename:int
num_bits_closest	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    static constexpr auto num_bits_closest(size_t max_val, size_t s) -> size_t {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:size_t
num_buckets_for_reserve	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    size_t num_buckets_for_reserve(size_t num_elements) const$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:size_t
num_elements	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    size_t num_elements = 0;$/;"	m	class:ska::detailv3::sherwood_v3_table	typeref:typename:size_t
num_elements_in_block	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    static constexpr auto num_elements_in_block = 1U << num_bits;$/;"	m	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:auto
num_emphases	./vendor/fmt/include/color.h	/^  static constexpr size_t num_emphases = 8;$/;"	m	struct:detail::ansi_color_escape	typeref:typename:size_t
num_forks	./vendor/STC/misc/examples/coroutines/dining_philosophers.c	/^    num_forks = num_philosophers,$/;"	e	enum:__anon9ebb27040103	file:
num_philosophers	./vendor/STC/misc/examples/coroutines/dining_philosophers.c	/^    num_philosophers = 5,$/;"	e	enum:__anon9ebb27040103	file:
num_significand_bits	./vendor/fmt/include/format.h	/^  static constexpr const int num_significand_bits =$/;"	m	struct:detail::basic_fp	typeref:typename:const int
num_significand_bits	./vendor/fmt/include/format.h	/^template <typename Float> constexpr auto num_significand_bits() -> int {$/;"	f	namespace:detail	typeref:typename:int
num_slots_minus_one	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    size_t num_slots_minus_one = 0;$/;"	m	class:ska::detailv3::sherwood_v3_table	typeref:typename:size_t
numeric_cast	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^static T numeric_cast(U value,$/;"	f	namespace:tsl::detail_robin_hash	typeref:typename:T
numeric_system	./vendor/fmt/include/chrono.h	/^enum class numeric_system {$/;"	g	namespace:detail
nx	./vendor/STC/misc/benchmarks/various/cspan_bench.c	/^    nx = 64,$/;"	e	enum:__anond4f61b3d0103	file:
ny	./vendor/STC/misc/benchmarks/various/cspan_bench.c	/^    ny = 64,$/;"	e	enum:__anond4f61b3d0103	file:
nz	./vendor/STC/misc/benchmarks/various/cspan_bench.c	/^    nz = 64$/;"	e	enum:__anond4f61b3d0103	file:
observable	./src/flecs.c	/^    ecs_observable_t observable;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_observable_t	file:
observable	./src/flecs.h	/^    ecs_observable_t *observable; \/**< Observable for observer *\/$/;"	m	struct:ecs_observer_t	typeref:typename:ecs_observable_t *
observable	./src/flecs.h	/^    ecs_poly_t *observable;$/;"	m	struct:ecs_event_desc_t	typeref:typename:ecs_poly_t *
observable	./src/flecs.h	/^    ecs_poly_t *observable;$/;"	m	struct:ecs_observer_desc_t	typeref:typename:ecs_poly_t *
observable	./src/flecs.h	/^inline Base& query_builder_i<Base, Components ...>::observable(const query_base& parent) {$/;"	f	class:flecs::query_builder_i	typeref:typename:Base &
observe	./src/flecs.h	/^inline Self& entity_builder<Self>::observe(Func&& f) {$/;"	f	class:flecs::entity_builder	typeref:typename:Self &
observe	./src/flecs.h	/^inline Self& entity_builder<Self>::observe(flecs::entity_t evt, Func&& f) {$/;"	f	class:flecs::entity_builder	typeref:typename:Self &
observed_table_count	./src/flecs.h	/^    int32_t observed_table_count;$/;"	m	struct:ecs_term_iter_t	typeref:typename:int32_t
observer	./src/flecs.h	/^    explicit observer() : entity() { }$/;"	f	struct:flecs::observer
observer	./src/flecs.h	/^    observer(flecs::world_t *world, ecs_observer_desc_t *desc, bool instanced) $/;"	f	struct:flecs::observer
observer	./src/flecs.h	/^inline observer world::observer(flecs::entity e) const {$/;"	f	class:flecs::world	typeref:typename:observer
observer	./src/flecs.h	/^inline observer_builder<Comps...> world::observer(Args &&... args) const {$/;"	f	class:flecs::world	typeref:typename:observer_builder<Comps...>
observer	./src/flecs.h	/^struct observer final : entity$/;"	s	namespace:flecs
observer_builder	./src/flecs.h	/^    observer_builder(flecs::world_t* world, const char *name = nullptr)$/;"	f	struct:flecs::observer_builder
observer_builder	./src/flecs.h	/^struct observer_builder final : _::observer_builder_base<Components...> {$/;"	s	namespace:flecs
observer_builder_base	./src/flecs.h	/^    using observer_builder_base = node_builder<$/;"	t	namespace:flecs::_	typeref:typename:node_builder<observer,ecs_observer_desc_t,observer_builder<Components...>,observer_builder_i,Components...>
observer_builder_i	./src/flecs.h	/^    observer_builder_i()$/;"	f	struct:flecs::observer_builder_i
observer_builder_i	./src/flecs.h	/^    observer_builder_i(ecs_observer_desc_t *desc) $/;"	f	struct:flecs::observer_builder_i
observer_builder_i	./src/flecs.h	/^struct observer_builder_i : filter_builder_i<Base, Components ...> {$/;"	s	namespace:flecs
observer_count	./src/flecs.c	/^    int32_t observer_count;$/;"	m	struct:ecs_event_id_record_t	typeref:typename:int32_t	file:
observer_count	./src/flecs.h	/^        ecs_metric_t observer_count;       \/**< Number of observers *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1208	typeref:typename:ecs_metric_t
observer_t	./src/flecs.h	/^using observer_t = ecs_observer_t;$/;"	t	namespace:flecs	typeref:typename:ecs_observer_t
observers	./src/flecs.c	/^    ecs_map_t observers;             \/* map<trigger_id, trigger_t> *\/$/;"	m	struct:ecs_event_id_record_t	typeref:typename:ecs_map_t	file:
observers_ran	./src/flecs.h	/^        ecs_metric_t observers_ran;        \/**< Number of times an observer was invoked. *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1408	typeref:typename:ecs_metric_t
observers_ran_frame	./src/flecs.h	/^    int64_t observers_ran_frame;      \/**< Total number of times observer was invoked *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int64_t
oct	./vendor/fmt/include/base.h	/^  oct,      \/\/ 'o'$/;"	e	enum:presentation_type
offset	./src/flecs.c	/^    int32_t offset;                  \/* Starting point in table  *\/$/;"	m	struct:ecs_query_table_match_t	typeref:typename:int32_t	file:
offset	./src/flecs.c	/^    int32_t offset;             \/* Offset in systems vector *\/$/;"	m	struct:ecs_pipeline_op_t	typeref:typename:int32_t	file:
offset	./src/flecs.c	/^    int32_t offset;             \/* Offset of member in component *\/$/;"	m	struct:EcsAlert	typeref:typename:int32_t	file:
offset	./src/flecs.c	/^    int32_t offset;$/;"	m	struct:__anon7d4a41772d08	typeref:typename:int32_t	file:
offset	./src/flecs.c	/^    uint16_t offset;                 \/**< Offset of member in component *\/$/;"	m	struct:__anon7d4a41770c08	typeref:typename:uint16_t	file:
offset	./src/flecs.h	/^    T offset;$/;"	m	struct:flecs::_::enum_constant_data	typeref:typename:T
offset	./src/flecs.h	/^    ecs_size_t offset;      \/**< Offset of current field *\/$/;"	m	struct:ecs_meta_type_op_t	typeref:typename:ecs_size_t
offset	./src/flecs.h	/^    int32_t offset() const {$/;"	f	struct:flecs::table_range	typeref:typename:int32_t
offset	./src/flecs.h	/^    int32_t offset;               \/* Offset relative to current table *\/$/;"	m	struct:ecs_iter_t	typeref:typename:int32_t
offset	./src/flecs.h	/^    int32_t offset;       \/* Leave both members to 0 to cover entire table *\/$/;"	m	struct:ecs_table_range_t	typeref:typename:int32_t
offset	./src/flecs.h	/^    int32_t offset;$/;"	m	struct:EcsMember	typeref:typename:int32_t
offset	./src/flecs.h	/^    int32_t offset;$/;"	m	struct:ecs_event_desc_t	typeref:typename:int32_t
offset	./src/flecs.h	/^    int32_t offset;$/;"	m	struct:ecs_member_t	typeref:typename:int32_t
offset	./src/flecs.h	/^    int32_t offset;$/;"	m	struct:ecs_page_iter_t	typeref:typename:int32_t
offset	./src/flecs.h	/^    system_runner_fluent& offset(int32_t offset) {$/;"	f	struct:flecs::system_runner_fluent	typeref:typename:system_runner_fluent &
offset	./vendor/raylib5/include/raylib.h	/^    Vector2 offset;         \/\/ Camera offset (displacement from target)$/;"	m	struct:Camera2D	typeref:typename:Vector2
offsetX	./vendor/raylib5/include/raygui.h	/^        int offsetX;            \/\/ Character offset X when drawing$/;"	m	struct:GlyphInfo	typeref:typename:int
offsetX	./vendor/raylib5/include/raylib.h	/^    int offsetX;            \/\/ Character offset X when drawing$/;"	m	struct:GlyphInfo	typeref:typename:int
offsetY	./vendor/raylib5/include/raygui.h	/^        int offsetY;            \/\/ Character offset Y when drawing$/;"	m	struct:GlyphInfo	typeref:typename:int
offsetY	./vendor/raylib5/include/raylib.h	/^    int offsetY;            \/\/ Character offset Y when drawing$/;"	m	struct:GlyphInfo	typeref:typename:int
oflag	./vendor/fmt/include/os.h	/^  int oflag = file::WRONLY | file::CREATE | file::TRUNC;$/;"	m	struct:detail::ostream_params	typeref:typename:int
ol_data	./vendor/STC/misc/examples/sortedmaps/multimap.c	/^struct OlympicsData { int year; const char *city, *country, *date; } ol_data[] = {$/;"	v	typeref:struct:OlympicsData[]
old_lace	./vendor/fmt/include/color.h	/^  old_lace = 0xFDF5E6,                 \/\/ rgb(253,245,230)$/;"	e	enum:color
olive	./vendor/fmt/include/color.h	/^  olive = 0x808000,                    \/\/ rgb(128,128,0)$/;"	e	enum:color
olive_drab	./vendor/fmt/include/color.h	/^  olive_drab = 0x6B8E23,               \/\/ rgb(107,142,35)$/;"	e	enum:color
omap_i32	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^using omap_i32 = std::map<int, int>;$/;"	t	typeref:typename:std::map<int,int>	file:
omap_str	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^using omap_str = std::map<std::string, std::string>;$/;"	t	typeref:typename:std::map<std::string,std::string>	file:
omap_u64	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^using omap_u64 = std::map<uint64_t, uint64_t>;$/;"	t	typeref:typename:std::map<uint64_t,uint64_t>	file:
on_12_hour	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_12_hour(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_12_hour	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_12_hour(numeric_system, pad_type) {}$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_CONSTEXPR void
on_12_hour	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_12_hour(numeric_system, pad_type) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_12_hour	./vendor/fmt/include/chrono.h	/^  void on_12_hour(numeric_system ns, pad_type pad) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_12_hour	./vendor/fmt/include/chrono.h	/^  void on_12_hour(numeric_system ns, pad_type pad) {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_12_hour_time	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_12_hour_time() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_12_hour_time	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_12_hour_time() {}$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_CONSTEXPR void
on_12_hour_time	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_12_hour_time() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_12_hour_time	./vendor/fmt/include/chrono.h	/^  void on_12_hour_time() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_12_hour_time	./vendor/fmt/include/chrono.h	/^  void on_12_hour_time() {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_24_hour	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_24_hour(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_24_hour	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_24_hour(numeric_system, pad_type) {}$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_CONSTEXPR void
on_24_hour	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_24_hour(numeric_system, pad_type) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_24_hour	./vendor/fmt/include/chrono.h	/^  void on_24_hour(numeric_system ns, pad_type pad) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_24_hour	./vendor/fmt/include/chrono.h	/^  void on_24_hour(numeric_system ns, pad_type pad) {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_24_hour_time	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_24_hour_time() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_24_hour_time	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_24_hour_time() {}$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_CONSTEXPR void
on_24_hour_time	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_24_hour_time() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_24_hour_time	./vendor/fmt/include/chrono.h	/^  void on_24_hour_time() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_24_hour_time	./vendor/fmt/include/chrono.h	/^  void on_24_hour_time() {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_abbr_month	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_abbr_month() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_abbr_month	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_abbr_month() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_abbr_month	./vendor/fmt/include/chrono.h	/^  void on_abbr_month() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_abbr_month	./vendor/fmt/include/chrono.h	/^  void on_abbr_month() {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_abbr_weekday	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_abbr_weekday() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_abbr_weekday	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_abbr_weekday() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_abbr_weekday	./vendor/fmt/include/chrono.h	/^  void on_abbr_weekday() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_abbr_weekday	./vendor/fmt/include/chrono.h	/^  void on_abbr_weekday() {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_add	./src/flecs.h	/^    component<T>& on_add(Func&& func) {$/;"	f	struct:flecs::component	typeref:typename:component<T> &
on_add	./src/flecs.h	/^    ecs_event_record_t on_add;$/;"	m	struct:ecs_observable_t	typeref:typename:ecs_event_record_t
on_add	./src/flecs.h	/^    ecs_iter_action_t on_add;$/;"	m	struct:ecs_type_hooks_t	typeref:typename:ecs_iter_action_t
on_add	./src/flecs.h	/^    void *on_add = nullptr;$/;"	m	struct:flecs::_::component_binding_ctx	typeref:typename:void *
on_am_pm	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_am_pm() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_am_pm	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_am_pm() {}$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_CONSTEXPR void
on_am_pm	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_am_pm() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_am_pm	./vendor/fmt/include/chrono.h	/^  void on_am_pm() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_am_pm	./vendor/fmt/include/chrono.h	/^  void on_am_pm() {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_arg_id	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR auto on_arg_id() -> int { return context_.next_arg_id(); }$/;"	f	class:detail::format_string_checker	typeref:typename:int
on_arg_id	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR auto on_arg_id(basic_string_view<Char> id) -> int {$/;"	f	class:detail::format_string_checker	typeref:typename:int
on_arg_id	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR auto on_arg_id(int id) -> int {$/;"	f	class:detail::format_string_checker	typeref:typename:int
on_arg_id	./vendor/fmt/include/format.h	/^    FMT_CONSTEXPR auto on_arg_id() -> int {$/;"	f	struct:detail::vformat_to::format_handler	typeref:typename:int
on_arg_id	./vendor/fmt/include/format.h	/^    FMT_CONSTEXPR auto on_arg_id(basic_string_view<Char> id) -> int {$/;"	f	struct:detail::vformat_to::format_handler	typeref:typename:int
on_arg_id	./vendor/fmt/include/format.h	/^    FMT_CONSTEXPR auto on_arg_id(int id) -> int {$/;"	f	struct:detail::vformat_to::format_handler	typeref:typename:int
on_auto	./vendor/fmt/include/compile.h	/^  constexpr int on_auto() {$/;"	f	struct:detail::arg_id_handler	typeref:typename:int
on_century	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_century(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_century	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_century(numeric_system) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_century	./vendor/fmt/include/chrono.h	/^  void on_century(numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_century	./vendor/fmt/include/chrono.h	/^  void on_century(numeric_system) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_commands	./src/flecs.c	/^    ecs_on_commands_action_t on_commands;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_on_commands_action_t	file:
on_commands_active	./src/flecs.c	/^    ecs_on_commands_action_t on_commands_active;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_on_commands_action_t	file:
on_commands_ctx	./src/flecs.c	/^    void *on_commands_ctx;$/;"	m	struct:ecs_world_t	typeref:typename:void *	file:
on_commands_ctx_active	./src/flecs.c	/^    void *on_commands_ctx_active;$/;"	m	struct:ecs_world_t	typeref:typename:void *	file:
on_datetime	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_datetime(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_datetime	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_datetime(numeric_system) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_datetime	./vendor/fmt/include/chrono.h	/^  void on_datetime(numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_datetime	./vendor/fmt/include/chrono.h	/^  void on_datetime(numeric_system) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_day_of_month	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_day_of_month(numeric_system, pad_type) {$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_day_of_month	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_day_of_month(numeric_system, pad_type) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_day_of_month	./vendor/fmt/include/chrono.h	/^  void on_day_of_month(numeric_system ns, pad_type pad) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_day_of_month	./vendor/fmt/include/chrono.h	/^  void on_day_of_month(numeric_system, pad_type) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_day_of_year	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_day_of_year() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_day_of_year	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_day_of_year() {}$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_CONSTEXPR void
on_day_of_year	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_day_of_year() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_day_of_year	./vendor/fmt/include/chrono.h	/^  void on_day_of_year() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_day_of_year	./vendor/fmt/include/chrono.h	/^  void on_day_of_year() {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_dec0_week_of_year	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_dec0_week_of_year(numeric_system, pad_type) {$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_dec0_week_of_year	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_dec0_week_of_year(numeric_system, pad_type) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_dec0_week_of_year	./vendor/fmt/include/chrono.h	/^  void on_dec0_week_of_year(numeric_system ns, pad_type pad) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_dec0_week_of_year	./vendor/fmt/include/chrono.h	/^  void on_dec0_week_of_year(numeric_system, pad_type) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_dec0_weekday	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_dec0_weekday(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_dec0_weekday	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_dec0_weekday(numeric_system) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_dec0_weekday	./vendor/fmt/include/chrono.h	/^  void on_dec0_weekday(numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_dec0_weekday	./vendor/fmt/include/chrono.h	/^  void on_dec0_weekday(numeric_system) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_dec1_week_of_year	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_dec1_week_of_year(numeric_system, pad_type) {$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_dec1_week_of_year	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_dec1_week_of_year(numeric_system, pad_type) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_dec1_week_of_year	./vendor/fmt/include/chrono.h	/^  void on_dec1_week_of_year(numeric_system ns, pad_type pad) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_dec1_week_of_year	./vendor/fmt/include/chrono.h	/^  void on_dec1_week_of_year(numeric_system, pad_type) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_dec1_weekday	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_dec1_weekday(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_dec1_weekday	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_dec1_weekday(numeric_system) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_dec1_weekday	./vendor/fmt/include/chrono.h	/^  void on_dec1_weekday(numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_dec1_weekday	./vendor/fmt/include/chrono.h	/^  void on_dec1_weekday(numeric_system) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_dec_month	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_dec_month(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_dec_month	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_dec_month(numeric_system) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_dec_month	./vendor/fmt/include/chrono.h	/^  void on_dec_month(numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_dec_month	./vendor/fmt/include/chrono.h	/^  void on_dec_month(numeric_system) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_duration_unit	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_duration_unit() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_duration_unit	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_duration_unit() {}$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_CONSTEXPR void
on_duration_unit	./vendor/fmt/include/chrono.h	/^  void on_duration_unit() {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_duration_unit	./vendor/fmt/include/chrono.h	/^  void on_duration_unit() {}$/;"	f	class:detail::tm_writer	typeref:typename:void
on_duration_value	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_duration_value() const {$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_CONSTEXPR void
on_duration_value	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_duration_value() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_duration_value	./vendor/fmt/include/chrono.h	/^  void on_duration_value() {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_duration_value	./vendor/fmt/include/chrono.h	/^  void on_duration_value() {}$/;"	f	class:detail::tm_writer	typeref:typename:void
on_error	./vendor/fmt/include/base.h	/^  FMT_NORETURN FMT_CONSTEXPR void on_error(const char* message) {$/;"	f	class:detail::format_string_checker	typeref:typename:FMT_NORETURN FMT_CONSTEXPR void
on_error	./vendor/fmt/include/format.h	/^    FMT_NORETURN void on_error(const char* message) { report_error(message); }$/;"	f	struct:detail::vformat_to::format_handler	typeref:typename:FMT_NORETURN void
on_error_bucket_overflow	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^[[noreturn]] inline ANKERL_UNORDERED_DENSE_NOINLINE void on_error_bucket_overflow() {$/;"	f	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail	typeref:typename:ANKERL_UNORDERED_DENSE_NOINLINE void
on_error_key_not_found	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^[[noreturn]] inline ANKERL_UNORDERED_DENSE_NOINLINE void on_error_key_not_found() {$/;"	f	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail	typeref:typename:ANKERL_UNORDERED_DENSE_NOINLINE void
on_error_too_many_elements	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^[[noreturn]] inline ANKERL_UNORDERED_DENSE_NOINLINE void on_error_too_many_elements() {$/;"	f	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail	typeref:typename:ANKERL_UNORDERED_DENSE_NOINLINE void
on_format_specs	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR auto on_format_specs(int id, const Char* begin, const Char*)$/;"	f	class:detail::format_string_checker	typeref:typename:const Char *
on_format_specs	./vendor/fmt/include/format.h	/^    auto on_format_specs(int id, const Char* begin, const Char* end)$/;"	f	struct:detail::vformat_to::format_handler	typeref:typename:const Char *
on_full_month	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_full_month() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_full_month	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_full_month() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_full_month	./vendor/fmt/include/chrono.h	/^  void on_full_month() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_full_month	./vendor/fmt/include/chrono.h	/^  void on_full_month() {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_full_weekday	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_full_weekday() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_full_weekday	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_full_weekday() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_full_weekday	./vendor/fmt/include/chrono.h	/^  void on_full_weekday() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_full_weekday	./vendor/fmt/include/chrono.h	/^  void on_full_weekday() {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_group_create	./src/flecs.c	/^    ecs_group_create_action_t on_group_create;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_group_create_action_t	file:
on_group_create	./src/flecs.h	/^    Base& on_group_create(ecs_group_create_action_t action) {$/;"	f	struct:flecs::query_builder_i	typeref:typename:Base &
on_group_create	./src/flecs.h	/^    ecs_group_create_action_t on_group_create;$/;"	m	struct:ecs_query_desc_t	typeref:typename:ecs_group_create_action_t
on_group_delete	./src/flecs.c	/^    ecs_group_delete_action_t on_group_delete;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_group_delete_action_t	file:
on_group_delete	./src/flecs.h	/^    Base& on_group_delete(ecs_group_delete_action_t action) {$/;"	f	struct:flecs::query_builder_i	typeref:typename:Base &
on_group_delete	./src/flecs.h	/^    ecs_group_delete_action_t on_group_delete;$/;"	m	struct:ecs_query_desc_t	typeref:typename:ecs_group_delete_action_t
on_index	./vendor/fmt/include/base.h	/^      FMT_CONSTEXPR void on_index(int id) { arg_id = handler.on_arg_id(id); }$/;"	f	struct:detail::parse_replacement_field::id_adapter	typeref:typename:FMT_CONSTEXPR void
on_index	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR void on_index(int id) {$/;"	f	struct:detail::dynamic_spec_id_handler	typeref:typename:FMT_CONSTEXPR void
on_index	./vendor/fmt/include/compile.h	/^  constexpr int on_index(int id) {$/;"	f	struct:detail::arg_id_handler	typeref:typename:int
on_iso_date	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_iso_date() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_iso_date	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_iso_date() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_iso_date	./vendor/fmt/include/chrono.h	/^  void on_iso_date() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_iso_date	./vendor/fmt/include/chrono.h	/^  void on_iso_date() {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_iso_time	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_iso_time() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_iso_time	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_iso_time() {}$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_CONSTEXPR void
on_iso_time	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_iso_time() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_iso_time	./vendor/fmt/include/chrono.h	/^  void on_iso_time() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_iso_time	./vendor/fmt/include/chrono.h	/^  void on_iso_time() {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_iso_week_based_short_year	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_iso_week_based_short_year() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_iso_week_based_short_year	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_iso_week_based_short_year() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_iso_week_based_short_year	./vendor/fmt/include/chrono.h	/^  void on_iso_week_based_short_year() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_iso_week_based_short_year	./vendor/fmt/include/chrono.h	/^  void on_iso_week_based_short_year() {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_iso_week_based_year	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_iso_week_based_year() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_iso_week_based_year	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_iso_week_based_year() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_iso_week_based_year	./vendor/fmt/include/chrono.h	/^  void on_iso_week_based_year() { write_year(tm_iso_week_year()); }$/;"	f	class:detail::tm_writer	typeref:typename:void
on_iso_week_based_year	./vendor/fmt/include/chrono.h	/^  void on_iso_week_based_year() {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_iso_week_of_year	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_iso_week_of_year(numeric_system, pad_type) {$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_iso_week_of_year	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_iso_week_of_year(numeric_system, pad_type) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_iso_week_of_year	./vendor/fmt/include/chrono.h	/^  void on_iso_week_of_year(numeric_system ns, pad_type pad) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_iso_week_of_year	./vendor/fmt/include/chrono.h	/^  void on_iso_week_of_year(numeric_system, pad_type) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_loc_date	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_loc_date(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_loc_date	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_loc_date(numeric_system) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_loc_date	./vendor/fmt/include/chrono.h	/^  void on_loc_date(numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_loc_date	./vendor/fmt/include/chrono.h	/^  void on_loc_date(numeric_system) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_loc_time	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_loc_time(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_loc_time	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_loc_time(numeric_system) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_loc_time	./vendor/fmt/include/chrono.h	/^  void on_loc_time(numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_loc_time	./vendor/fmt/include/chrono.h	/^  void on_loc_time(numeric_system) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_minute	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_minute(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_minute	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_minute(numeric_system, pad_type) {}$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_CONSTEXPR void
on_minute	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_minute(numeric_system, pad_type) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_minute	./vendor/fmt/include/chrono.h	/^  void on_minute(numeric_system ns, pad_type pad) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_minute	./vendor/fmt/include/chrono.h	/^  void on_minute(numeric_system ns, pad_type pad) {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_name	./vendor/fmt/include/base.h	/^      FMT_CONSTEXPR void on_name(basic_string_view<Char> id) {$/;"	f	struct:detail::parse_replacement_field::id_adapter	typeref:typename:FMT_CONSTEXPR void
on_name	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR void on_name(basic_string_view<Char> id) {$/;"	f	struct:detail::dynamic_spec_id_handler	typeref:typename:FMT_CONSTEXPR void
on_name	./vendor/fmt/include/compile.h	/^  constexpr int on_name(basic_string_view<Char> id) {$/;"	f	struct:detail::arg_id_handler	typeref:typename:int
on_offset_year	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_offset_year() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_offset_year	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_offset_year() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_offset_year	./vendor/fmt/include/chrono.h	/^  void on_offset_year() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_offset_year	./vendor/fmt/include/chrono.h	/^  void on_offset_year() {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_remove	./src/flecs.h	/^    component<T>& on_remove(Func&& func) {$/;"	f	struct:flecs::component	typeref:typename:component<T> &
on_remove	./src/flecs.h	/^    ecs_event_record_t on_remove;$/;"	m	struct:ecs_observable_t	typeref:typename:ecs_event_record_t
on_remove	./src/flecs.h	/^    ecs_iter_action_t on_remove;$/;"	m	struct:ecs_type_hooks_t	typeref:typename:ecs_iter_action_t
on_remove	./src/flecs.h	/^    void *on_remove = nullptr;$/;"	m	struct:flecs::_::component_binding_ctx	typeref:typename:void *
on_replacement_field	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR void on_replacement_field(int id, const Char* begin) {$/;"	f	class:detail::format_string_checker	typeref:typename:FMT_CONSTEXPR void
on_replacement_field	./vendor/fmt/include/format.h	/^    FMT_INLINE void on_replacement_field(int id, const Char*) {$/;"	f	struct:detail::vformat_to::format_handler	typeref:typename:FMT_INLINE void
on_second	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_second(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_second	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_second(numeric_system, pad_type) {}$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_CONSTEXPR void
on_second	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_second(numeric_system, pad_type) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_second	./vendor/fmt/include/chrono.h	/^  void on_second(numeric_system ns, pad_type pad) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_second	./vendor/fmt/include/chrono.h	/^  void on_second(numeric_system ns, pad_type pad) {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_set	./src/flecs.h	/^    component<T>& on_set(Func&& func) {$/;"	f	struct:flecs::component	typeref:typename:component<T> &
on_set	./src/flecs.h	/^    ecs_event_record_t on_set;$/;"	m	struct:ecs_observable_t	typeref:typename:ecs_event_record_t
on_set	./src/flecs.h	/^    ecs_iter_action_t on_set;$/;"	m	struct:ecs_type_hooks_t	typeref:typename:ecs_iter_action_t
on_set	./src/flecs.h	/^    void *on_set = nullptr;$/;"	m	struct:flecs::_::component_binding_ctx	typeref:typename:void *
on_short_year	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_short_year(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_short_year	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_short_year(numeric_system) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_short_year	./vendor/fmt/include/chrono.h	/^  void on_short_year(numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_short_year	./vendor/fmt/include/chrono.h	/^  void on_short_year(numeric_system) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_text	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR void on_text(const Char*, const Char*) {}$/;"	f	class:detail::format_string_checker	typeref:typename:FMT_CONSTEXPR void
on_text	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_text(const Char* begin, const Char* end) {$/;"	f	class:detail::tm_writer	typeref:typename:FMT_CONSTEXPR void
on_text	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_text(const Char*, const Char*) {}$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_CONSTEXPR void
on_text	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_text(const Char*, const Char*) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_text	./vendor/fmt/include/chrono.h	/^  void on_text(const char_type* begin, const char_type* end) {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_text	./vendor/fmt/include/format.h	/^    void on_text(const Char* begin, const Char* end) {$/;"	f	struct:detail::vformat_to::format_handler	typeref:typename:void
on_tz_name	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_tz_name() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_tz_name	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_tz_name() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_tz_name	./vendor/fmt/include/chrono.h	/^  void on_tz_name() { format_tz_name_impl(tm_); }$/;"	f	class:detail::tm_writer	typeref:typename:void
on_tz_name	./vendor/fmt/include/chrono.h	/^  void on_tz_name() {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_us_date	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_us_date() { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_us_date	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_us_date() {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_us_date	./vendor/fmt/include/chrono.h	/^  void on_us_date() {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_us_date	./vendor/fmt/include/chrono.h	/^  void on_us_date() {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_utc_offset	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_utc_offset(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_utc_offset	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_utc_offset(numeric_system) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_utc_offset	./vendor/fmt/include/chrono.h	/^  void on_utc_offset(numeric_system ns) { format_utc_offset_impl(tm_, ns); }$/;"	f	class:detail::tm_writer	typeref:typename:void
on_utc_offset	./vendor/fmt/include/chrono.h	/^  void on_utc_offset(numeric_system) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
on_wildcard	./src/flecs.h	/^    ecs_event_record_t on_wildcard;$/;"	m	struct:ecs_observable_t	typeref:typename:ecs_event_record_t
on_year	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_year(numeric_system) { unsupported(); }$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
on_year	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void on_year(numeric_system) {}$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_CONSTEXPR void
on_year	./vendor/fmt/include/chrono.h	/^  void on_year(numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
on_year	./vendor/fmt/include/chrono.h	/^  void on_year(numeric_system) {}$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
one_sec_delay	./vendor/STC/misc/benchmarks/various/cbits_benchmark.cpp	/^void one_sec_delay()$/;"	f	typeref:typename:void
op	./src/flecs.h	/^    int16_t op;$/;"	m	struct:ecs_rule_iter_t	typeref:typename:int16_t
op_count	./src/flecs.c	/^    int32_t op_count;             \/* Number of operations *\/$/;"	m	struct:ecs_rule_t	typeref:typename:int32_t	file:
op_count	./src/flecs.h	/^    int32_t op_count;         \/**< Number of operations in ops array to process *\/$/;"	m	struct:ecs_meta_scope_t	typeref:typename:int32_t
op_count	./src/flecs.h	/^    int32_t op_count;       \/**< Number of operations until next field or end *\/$/;"	m	struct:ecs_meta_type_op_t	typeref:typename:int32_t
op_ctx	./src/flecs.c	/^    ecs_rule_op_ctx_t *op_ctx;    \/* Operation context (stack) *\/$/;"	m	struct:__anon7d4a41773708	typeref:typename:ecs_rule_op_ctx_t *	file:
op_ctx	./src/flecs.h	/^    struct ecs_rule_op_ctx_t *op_ctx;    \/* Operation-specific state *\/$/;"	m	struct:ecs_rule_iter_t	typeref:struct:ecs_rule_op_ctx_t *
op_cur	./src/flecs.h	/^    int32_t op_cur;           \/**< Current operation *\/$/;"	m	struct:ecs_meta_scope_t	typeref:typename:int32_t
op_index	./src/flecs.c	/^    ecs_rule_lbl_t op_index;      \/* Currently evaluated operation *\/$/;"	m	struct:__anon7d4a41773708	typeref:typename:ecs_rule_lbl_t	file:
op_index	./src/flecs.c	/^    ecs_rule_lbl_t op_index;$/;"	m	struct:__anon7d4a41773208	typeref:typename:ecs_rule_lbl_t	file:
opaque	./src/flecs.h	/^    const EcsOpaque *opaque;  \/**< Opaque type interface *\/$/;"	m	struct:ecs_meta_scope_t	typeref:typename:const EcsOpaque *
opaque	./src/flecs.h	/^    opaque(flecs::world_t *w = nullptr) : world(w) {$/;"	f	struct:flecs::opaque
opaque	./src/flecs.h	/^component& opaque(const Func& type_support) {$/;"	f	struct:flecs::component	typeref:typename:component &
opaque	./src/flecs.h	/^flecs::opaque<T, ElemType> opaque(flecs::id_t as_type) {$/;"	f	struct:flecs::component	typeref:typename:flecs::opaque<T,ElemType>
opaque	./src/flecs.h	/^flecs::opaque<T> opaque(flecs::entity as_type) {$/;"	f	struct:flecs::component	typeref:typename:flecs::opaque<T>
opaque	./src/flecs.h	/^flecs::opaque<T> opaque(flecs::entity_t as_type) {$/;"	f	struct:flecs::component	typeref:typename:flecs::opaque<T>
opaque	./src/flecs.h	/^flecs::opaque<T> opaque(flecs::untyped_component as_type) {$/;"	f	struct:flecs::component	typeref:typename:flecs::opaque<T>
opaque	./src/flecs.h	/^struct opaque {$/;"	s	namespace:flecs
oper	./src/flecs.h	/^        flecs::array<flecs::oper_kind_t, sizeof...(Components)> oper;$/;"	m	struct:flecs::_::sig	typeref:typename:flecs::array<flecs::oper_kind_t,sizeof...(Components)>
oper	./src/flecs.h	/^    Base& oper(flecs::oper_kind_t oper) {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
oper	./src/flecs.h	/^    ecs_oper_kind_t oper;       \/**< Operator of term *\/$/;"	m	struct:ecs_term_t	typeref:typename:ecs_oper_kind_t
oper	./src/flecs.h	/^    flecs::oper_kind_t oper() {$/;"	f	struct:flecs::term	typeref:typename:flecs::oper_kind_t
oper_kind_t	./src/flecs.h	/^enum oper_kind_t {$/;"	g	namespace:flecs
operations	./src/flecs.c	/^    ecs_vec_t operations;$/;"	m	struct:ecs_stage_t	typeref:typename:ecs_vec_t	file:
operations	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^const char* operations[] = {"insert", "erase", "access", "iter", "destruct"};$/;"	v	typeref:typename:const char * []
operations	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^const char* operations[] = {"insert", "erase", "access", "iter", "destruct"};$/;"	v	typeref:typename:const char * []
operations	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^const char* operations[] = {"insert", "erase", "access", "iter", "destruct"};$/;"	v	typeref:typename:const char * []
operations	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^const char* operations[] = {"insert", "erase", "access", "iter", "destruct"};$/;"	v	typeref:typename:const char * []
operations	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^const char* operations[] = {"insert", "erase", "access", "iter", "destruct"};$/;"	v	typeref:typename:const char * []
operator !=	./src/flecs.h	/^    bool operator!=(array_iterator const& other) const$/;"	f	struct:flecs::array_iterator	typeref:typename:bool
operator !=	./src/flecs.h	/^    bool operator!=(const char *str) const {$/;"	f	struct:flecs::string	typeref:typename:bool
operator !=	./src/flecs.h	/^    bool operator!=(const flecs::string& str) const {$/;"	f	struct:flecs::string	typeref:typename:bool
operator !=	./src/flecs.h	/^    bool operator!=(range_iterator const& other) const$/;"	f	struct:flecs::_::range_iterator	typeref:typename:bool
operator !=	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        bool operator!=(Iter<O> const& o) const noexcept {$/;"	f	class:robin_hood::detail::Table::Iter	typeref:typename:bool
operator !=	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    bool operator!=(const Table& other) const {$/;"	f	class:robin_hood::detail::Table	typeref:typename:bool
operator !=	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^inline constexpr bool operator!=(pair<A, B> const& x, pair<A, B> const& y) {$/;"	f	namespace:robin_hood	typeref:typename:bool
operator !=	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^        constexpr auto operator!=(iter_t<O> const& o) const noexcept -> bool {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector::iter_t	typeref:typename:auto
operator !=	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    friend auto operator!=(table const& a, table const& b) -> bool {$/;"	f	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail	typeref:typename:bool
operator !=	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        bool operator!=(const const_iterator& rhs) const { return _bucket != rhs._bucket; }$/;"	f	class:emhash7::HashMap::const_iterator	typeref:typename:bool
operator !=	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        bool operator!=(const const_iterator& rhs) const { return _bucket != rhs._bucket; }$/;"	f	class:emhash7::HashMap::iterator	typeref:typename:bool
operator !=	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        bool operator!=(const iterator& rhs) const { return _bucket != rhs._bucket; }$/;"	f	class:emhash7::HashMap::iterator	typeref:typename:bool
operator !=	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    bool operator != (const Con& rhs) const { return !(*this == rhs); }$/;"	f	class:emhash7::HashMap	typeref:typename:bool
operator !=	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^        friend bool operator!=(const templated_iterator & lhs, const templated_iterator & rhs)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:bool
operator !=	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    friend bool operator!=(const flat_hash_map & lhs, const flat_hash_map & rhs)$/;"	f	namespace:ska	typeref:typename:bool
operator !=	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    friend bool operator!=(const flat_hash_set & lhs, const flat_hash_set & rhs)$/;"	f	namespace:ska	typeref:typename:bool
operator !=	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^    friend bool operator!=(const robin_iterator& lhs,$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:bool
operator !=	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  friend bool operator!=(const robin_map& lhs, const robin_map& rhs) {$/;"	f	namespace:tsl	typeref:typename:bool
operator !=	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        bool operator!=(const iterator&) const$/;"	f	struct:picobench::state::iterator	typeref:typename:PICOBENCH_INLINE bool
operator !=	./vendor/fmt/include/base.h	/^  friend auto operator!=(basic_string_view lhs, basic_string_view rhs) -> bool {$/;"	f	typeref:typename:bool
operator !=	./vendor/fmt/include/format.h	/^  friend constexpr auto operator!=(const uint128_fallback& lhs,$/;"	f	namespace:detail	typeref:typename:bool
operator ""_a	./vendor/fmt/include/format.h	/^template <detail_exported::fixed_string Str> constexpr auto operator""_a() {$/;"	f	namespace:literals	typeref:typename:auto
operator ""_a	./vendor/fmt/include/xchar.h	/^constexpr auto operator""_a(const wchar_t* s, size_t)$/;"	f	namespace:literals	typeref:typename:detail::udl_arg<wchar_t>
operator ""_cf	./vendor/fmt/include/compile.h	/^template <detail_exported::fixed_string Str> constexpr auto operator""_cf() {$/;"	f	namespace:literals	typeref:typename:auto
operator &	./vendor/fmt/include/format.h	/^  friend constexpr auto operator&(const uint128_fallback& lhs,$/;"	f	namespace:detail	typeref:typename:uint128_fallback
operator &=	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR void operator&=(uint128_fallback n) {$/;"	f	class:detail::uint128_fallback	typeref:typename:FMT_CONSTEXPR void
operator ()	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        void operator()(M const& s, M& t) const {$/;"	f	struct:robin_hood::detail::Table::Cloner	typeref:typename:void
operator ()	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        void operator()(M const& source, M& target) const {$/;"	f	struct:robin_hood::detail::Table::Cloner	typeref:typename:void
operator ()	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    size_t operator()(Enum e) const noexcept {$/;"	f	struct:robin_hood::hash	typeref:typename:size_t
operator ()	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    size_t operator()(T const& obj) const$/;"	f	struct:robin_hood::hash	typeref:typename:size_t
operator ()	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    size_t operator()(T* ptr) const noexcept {$/;"	f	struct:robin_hood::hash	typeref:typename:size_t
operator ()	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    size_t operator()(std::basic_string<CharT> const& str) const noexcept {$/;"	f	struct:robin_hood::hash	typeref:typename:size_t
operator ()	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    size_t operator()(std::basic_string_view<CharT> const& sv) const noexcept {$/;"	f	struct:robin_hood::hash	typeref:typename:size_t
operator ()	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    size_t operator()(std::shared_ptr<T> const& ptr) const noexcept {$/;"	f	struct:robin_hood::hash	typeref:typename:size_t
operator ()	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    size_t operator()(std::unique_ptr<T> const& ptr) const noexcept {$/;"	f	struct:robin_hood::hash	typeref:typename:size_t
operator ()	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto operator()(Enum e) const noexcept -> uint64_t {$/;"	f	struct:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::hash	typeref:typename:auto
operator ()	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto operator()(T const& obj) const noexcept(noexcept(std::declval<std::hash<T>>().operator(/;"	f	struct:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::hash	typeref:typename:auto
operator ()	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto operator()(T* ptr) const noexcept -> uint64_t {$/;"	f	struct:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::hash	typeref:typename:auto
operator ()	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto operator()(std::basic_string<CharT> const& str) const noexcept -> uint64_t {$/;"	f	struct:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::hash	typeref:typename:auto
operator ()	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto operator()(std::basic_string_view<CharT> const& sv) const noexcept -> uint64_t {$/;"	f	struct:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::hash	typeref:typename:auto
operator ()	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto operator()(std::shared_ptr<T> const& ptr) const noexcept -> uint64_t {$/;"	f	struct:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::hash	typeref:typename:auto
operator ()	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto operator()(std::unique_ptr<T> const& ptr) const noexcept -> uint64_t {$/;"	f	struct:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::hash	typeref:typename:auto
operator ()	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    Result operator()(Args &&... args) const$/;"	f	struct:ska::detailv3::functor_storage	typeref:typename:Result
operator ()	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    Result operator()(Args &&... args)$/;"	f	struct:ska::detailv3::functor_storage	typeref:typename:Result
operator ()	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    Result operator()(Args... args) const$/;"	f	struct:ska::detailv3::functor_storage	typeref:typename:Result
operator ()	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    bool operator()(const key_type & lhs, const key_type & rhs)$/;"	f	struct:ska::detailv3::KeyOrValueEquality	typeref:typename:bool
operator ()	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    bool operator()(const key_type & lhs, const std::pair<F, S> & rhs)$/;"	f	struct:ska::detailv3::KeyOrValueEquality	typeref:typename:bool
operator ()	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    bool operator()(const key_type & lhs, const value_type & rhs)$/;"	f	struct:ska::detailv3::KeyOrValueEquality	typeref:typename:bool
operator ()	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    bool operator()(const std::pair<F, S> & lhs, const key_type & rhs)$/;"	f	struct:ska::detailv3::KeyOrValueEquality	typeref:typename:bool
operator ()	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    bool operator()(const std::pair<F, S> & lhs, const value_type & rhs)$/;"	f	struct:ska::detailv3::KeyOrValueEquality	typeref:typename:bool
operator ()	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    bool operator()(const std::pair<FL, SL> & lhs, const std::pair<FR, SR> & rhs)$/;"	f	struct:ska::detailv3::KeyOrValueEquality	typeref:typename:bool
operator ()	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    bool operator()(const value_type & lhs, const key_type & rhs)$/;"	f	struct:ska::detailv3::KeyOrValueEquality	typeref:typename:bool
operator ()	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    bool operator()(const value_type & lhs, const std::pair<F, S> & rhs)$/;"	f	struct:ska::detailv3::KeyOrValueEquality	typeref:typename:bool
operator ()	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    bool operator()(const value_type & lhs, const value_type & rhs)$/;"	f	struct:ska::detailv3::KeyOrValueEquality	typeref:typename:bool
operator ()	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    size_t operator()(const key_type & key) const$/;"	f	struct:ska::detailv3::KeyOrValueHasher	typeref:typename:size_t
operator ()	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    size_t operator()(const key_type & key)$/;"	f	struct:ska::detailv3::KeyOrValueHasher	typeref:typename:size_t
operator ()	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    size_t operator()(const std::pair<F, S> & value) const$/;"	f	struct:ska::detailv3::KeyOrValueHasher	typeref:typename:size_t
operator ()	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    size_t operator()(const std::pair<F, S> & value)$/;"	f	struct:ska::detailv3::KeyOrValueHasher	typeref:typename:size_t
operator ()	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    size_t operator()(const value_type & value) const$/;"	f	struct:ska::detailv3::KeyOrValueHasher	typeref:typename:size_t
operator ()	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    size_t operator()(const value_type & value)$/;"	f	struct:ska::detailv3::KeyOrValueHasher	typeref:typename:size_t
operator ()	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    void operator()(T & lhs, T && rhs)$/;"	f	struct:ska::detailv3::AssignIfTrue	typeref:typename:void
operator ()	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    void operator()(T & lhs, const T & rhs)$/;"	f	struct:ska::detailv3::AssignIfTrue	typeref:typename:void
operator ()	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    void operator()(T &, T &&)$/;"	f	struct:ska::detailv3::AssignIfTrue	typeref:typename:void
operator ()	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    void operator()(T &, const T &)$/;"	f	struct:ska::detailv3::AssignIfTrue	typeref:typename:void
operator ()	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^    const key_type& operator()($/;"	f	class:tsl::robin_map::KeySelect	typeref:typename:const key_type &
operator ()	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^    const value_type& operator()($/;"	f	class:tsl::robin_map::ValueSelect	typeref:typename:const value_type &
operator ()	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^    key_type& operator()(std::pair<Key, T>& key_value) noexcept {$/;"	f	class:tsl::robin_map::KeySelect	typeref:typename:key_type &
operator ()	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^    value_type& operator()(std::pair<Key, T>& key_value) noexcept {$/;"	f	class:tsl::robin_map::ValueSelect	typeref:typename:value_type &
operator ()	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^  [[nodiscard]] size_t operator()(const char *txt) const {$/;"	f	struct:string_hash	typeref:typename:size_t	file:
operator ()	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^  [[nodiscard]] size_t operator()(const std::string &txt) const {$/;"	f	struct:string_hash	typeref:typename:size_t	file:
operator ()	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^  [[nodiscard]] size_t operator()(std::string_view txt) const {$/;"	f	struct:string_hash	typeref:typename:size_t	file:
operator ()	./vendor/STC/misc/benchmarks/various/string_bench_STD.cpp	/^    size_t operator()(const char* txt) const { return hash_type{}(txt); }$/;"	f	struct:string_hash	typeref:typename:size_t	file:
operator ()	./vendor/STC/misc/benchmarks/various/string_bench_STD.cpp	/^    size_t operator()(const std::string& txt) const { return hash_type{}(txt); }$/;"	f	struct:string_hash	typeref:typename:size_t	file:
operator ()	./vendor/STC/misc/benchmarks/various/string_bench_STD.cpp	/^    size_t operator()(std::string_view txt) const { return hash_type{}(txt); }$/;"	f	struct:string_hash	typeref:typename:size_t	file:
operator ()	./vendor/fmt/include/base.h	/^    FMT_CONSTEXPR auto operator()(pres pres_type, int set) -> const Char* {$/;"	f	struct:detail::parse_format_specs::__anonea363bd91308	typeref:typename:const Char *
operator ()	./vendor/fmt/include/base.h	/^    FMT_CONSTEXPR void operator()(const Char* from, const Char* to) {$/;"	f	struct:detail::parse_format_string::writer	typeref:typename:FMT_CONSTEXPR void
operator ()	./vendor/fmt/include/base.h	/^    FMT_CONSTEXPR void operator()(state s, bool valid = true) {$/;"	f	struct:detail::parse_format_specs::__anonea363bd91208	typeref:typename:FMT_CONSTEXPR void
operator ()	./vendor/fmt/include/format.h	/^    FMT_CONSTEXPR auto operator()(uint32_t cp, string_view) const -> bool {$/;"	f	struct:detail::compute_width::count_code_points	typeref:typename:bool
operator ()	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR FMT_INLINE auto operator()(T value) -> iterator {$/;"	f	struct:detail::arg_formatter	typeref:typename:iterator
operator ()	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR auto operator()(T value) -> unsigned long long {$/;"	f	struct:detail::precision_checker	typeref:typename:unsigned long long
operator ()	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR auto operator()(T value) -> unsigned long long {$/;"	f	struct:detail::width_checker	typeref:typename:unsigned long long
operator ()	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR auto operator()(T) -> unsigned long long {$/;"	f	struct:detail::precision_checker	typeref:typename:unsigned long long
operator ()	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR auto operator()(T) -> unsigned long long {$/;"	f	struct:detail::width_checker	typeref:typename:unsigned long long
operator ()	./vendor/fmt/include/format.h	/^  auto operator()(T value) -> bool {$/;"	f	struct:detail::loc_writer	typeref:typename:bool
operator ()	./vendor/fmt/include/format.h	/^  auto operator()(T) -> bool {$/;"	f	struct:detail::loc_writer	typeref:typename:bool
operator ()	./vendor/fmt/include/format.h	/^  auto operator()(typename basic_format_arg<context>::handle h) -> iterator {$/;"	f	struct:detail::default_arg_formatter	typeref:typename:iterator
operator ()	./vendor/fmt/include/format.h	/^  auto operator()(typename basic_format_arg<context>::handle) -> iterator {$/;"	f	struct:detail::arg_formatter	typeref:typename:iterator
operator ()	./vendor/fmt/include/format.h	/^  template <typename T> auto operator()(T value) -> iterator {$/;"	f	struct:detail::default_arg_formatter	typeref:typename:iterator
operator ()	./vendor/fmt/include/printf.h	/^  auto operator()(T value) -> bool {$/;"	f	struct:detail::is_zero_int	typeref:typename:bool
operator ()	./vendor/fmt/include/printf.h	/^  auto operator()(T value) -> int {$/;"	f	struct:detail::printf_precision_handler	typeref:typename:int
operator ()	./vendor/fmt/include/printf.h	/^  auto operator()(T value) -> unsigned {$/;"	f	class:detail::printf_width_handler	typeref:typename:unsigned
operator ()	./vendor/fmt/include/printf.h	/^  auto operator()(T) -> bool {$/;"	f	struct:detail::is_zero_int	typeref:typename:bool
operator ()	./vendor/fmt/include/printf.h	/^  auto operator()(T) -> int {$/;"	f	struct:detail::printf_precision_handler	typeref:typename:int
operator ()	./vendor/fmt/include/printf.h	/^  auto operator()(T) -> unsigned {$/;"	f	class:detail::printf_width_handler	typeref:typename:unsigned
operator ()	./vendor/fmt/include/printf.h	/^  auto operator()(const Char* s) -> const Char* { return s; }$/;"	f	struct:detail::get_cstring	typeref:typename:const Char *
operator ()	./vendor/fmt/include/printf.h	/^  template <typename T> auto operator()(T) -> const Char* { return nullptr; }$/;"	f	struct:detail::get_cstring	typeref:typename:const Char *
operator ()	./vendor/fmt/include/printf.h	/^  void operator()(T value) {$/;"	f	class:detail::char_converter	typeref:typename:void
operator ()	./vendor/fmt/include/printf.h	/^  void operator()(T value) {$/;"	f	class:detail::printf_arg_formatter	typeref:typename:void
operator ()	./vendor/fmt/include/printf.h	/^  void operator()(T) {}  \/\/ No conversion needed for non-integral types.$/;"	f	class:detail::char_converter	typeref:typename:void
operator ()	./vendor/fmt/include/printf.h	/^  void operator()(U value) {$/;"	f	class:detail::arg_converter	typeref:typename:void
operator ()	./vendor/fmt/include/printf.h	/^  void operator()(U) {}  \/\/ No conversion needed for non-integral types.$/;"	f	class:detail::arg_converter	typeref:typename:void
operator ()	./vendor/fmt/include/printf.h	/^  void operator()(basic_string_view<Char> value) { base::operator()(value); }$/;"	f	class:detail::printf_arg_formatter	typeref:typename:void
operator ()	./vendor/fmt/include/printf.h	/^  void operator()(bool value) {$/;"	f	class:detail::arg_converter	typeref:typename:void
operator ()	./vendor/fmt/include/printf.h	/^  void operator()(const char* value) {$/;"	f	class:detail::printf_arg_formatter	typeref:typename:void
operator ()	./vendor/fmt/include/printf.h	/^  void operator()(const void* value) {$/;"	f	class:detail::printf_arg_formatter	typeref:typename:void
operator ()	./vendor/fmt/include/printf.h	/^  void operator()(const wchar_t* value) {$/;"	f	class:detail::printf_arg_formatter	typeref:typename:void
operator ()	./vendor/fmt/include/printf.h	/^  void operator()(monostate value) { base::operator()(value); }$/;"	f	class:detail::printf_arg_formatter	typeref:typename:void
operator ()	./vendor/fmt/include/printf.h	/^  void operator()(typename basic_format_arg<context_type>::handle handle) {$/;"	f	class:detail::printf_arg_formatter	typeref:typename:void
operator ()	./vendor/fmt/include/ranges.h	/^  template <typename Formatter> FMT_CONSTEXPR void operator()(Formatter& f) {$/;"	f	struct:detail::parse_empty_specs	typeref:typename:FMT_CONSTEXPR void
operator ()	./vendor/fmt/include/ranges.h	/^  void operator()(const formatter<T, char_type>& f, const T& v) {$/;"	f	struct:detail::format_tuple_element	typeref:typename:void
operator ()	./vendor/fmt/include/std.h	/^    FMT_CONSTEXPR auto operator()(OutputIt out) -> OutputIt {$/;"	f	struct:formatter::writer	typeref:typename:OutputIt
operator *	./src/flecs.h	/^    T & operator*() const$/;"	f	struct:flecs::array_iterator	typeref:typename:T &
operator *	./src/flecs.h	/^    T const& operator*() const$/;"	f	struct:flecs::_::range_iterator	typeref:typename:T const &
operator *	./src/flecs.h	/^    const type& operator*() const {$/;"	f	struct:flecs::pair	typeref:typename:const type &
operator *	./src/flecs.h	/^    type& operator*() {$/;"	f	struct:flecs::pair	typeref:typename:type &
operator *	./src/flecs.h	/^T& field<T>::operator*() const {$/;"	f	class:flecs::field	typeref:typename:T &
operator *	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        const value_type& operator*() const noexcept {$/;"	f	class:robin_hood::detail::Table::DataNode	typeref:typename:const value_type &
operator *	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        const value_type& operator*() const {$/;"	f	class:robin_hood::detail::Table::DataNode	typeref:typename:const value_type &
operator *	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        reference operator*() const {$/;"	f	class:robin_hood::detail::Table::Iter	typeref:typename:reference
operator *	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        value_type& operator*() noexcept {$/;"	f	class:robin_hood::detail::Table::DataNode	typeref:typename:value_type &
operator *	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        value_type& operator*() {$/;"	f	class:robin_hood::detail::Table::DataNode	typeref:typename:value_type &
operator *	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^        constexpr auto operator*() const noexcept -> reference {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector::iter_t	typeref:typename:auto
operator *	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        reference operator*() const$/;"	f	class:emhash7::HashMap::const_iterator	typeref:typename:reference
operator *	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        reference operator*() const$/;"	f	class:emhash7::HashMap::iterator	typeref:typename:reference
operator *	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^        ValueType & operator*() const$/;"	f	struct:ska::detailv3::sherwood_v3_table::templated_iterator	typeref:typename:ValueType &
operator *	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^    reference operator*() const { return m_bucket->value(); }$/;"	f	class:tsl::detail_robin_hash::robin_hash::robin_iterator	typeref:typename:reference
operator *	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        size_t operator*() const$/;"	f	struct:picobench::state::iterator	typeref:typename:PICOBENCH_INLINE size_t
operator *	./vendor/fmt/include/base.h	/^  auto operator*() -> basic_appender& { return *this; }$/;"	f	class:basic_appender	typeref:typename:basic_appender &
operator *	./vendor/fmt/include/format.h	/^  friend auto operator*(const uint128_fallback& lhs, uint32_t rhs)$/;"	f	namespace:detail	typeref:typename:uint128_fallback
operator *	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR inline auto operator*(fp x, fp y) -> fp {$/;"	f	namespace:detail	typeref:typename:fp
operator *=	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 auto operator*=(Int value) -> bigint& {$/;"	f	class:detail::bigint	typeref:typename:bigint &
operator +	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^        constexpr auto operator+(difference_type diff) noexcept -> iter_t {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector::iter_t	typeref:typename:auto
operator +	./vendor/fmt/include/format.h	/^  friend auto operator+(const uint128_fallback& lhs,$/;"	f	namespace:detail	typeref:typename:uint128_fallback
operator ++	./src/flecs.h	/^    array_iterator& operator++()$/;"	f	struct:flecs::array_iterator	typeref:typename:array_iterator &
operator ++	./src/flecs.h	/^    range_iterator& operator++()$/;"	f	struct:flecs::_::range_iterator	typeref:typename:range_iterator &
operator ++	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        Iter operator++(int) noexcept {$/;"	f	class:robin_hood::detail::Table::Iter	typeref:typename:Iter
operator ++	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        Iter& operator++() noexcept {$/;"	f	class:robin_hood::detail::Table::Iter	typeref:typename:Iter &
operator ++	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^        constexpr auto operator++() noexcept -> iter_t& {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector::iter_t	typeref:typename:auto
operator ++	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        const_iterator operator++(int)$/;"	f	class:emhash7::HashMap::const_iterator	typeref:typename:const_iterator
operator ++	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        const_iterator& operator++()$/;"	f	class:emhash7::HashMap::const_iterator	typeref:typename:const_iterator &
operator ++	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        iterator operator++(int)$/;"	f	class:emhash7::HashMap::iterator	typeref:typename:iterator
operator ++	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        iterator& operator++()$/;"	f	class:emhash7::HashMap::iterator	typeref:typename:iterator &
operator ++	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^        templated_iterator & operator++()$/;"	f	struct:ska::detailv3::sherwood_v3_table::templated_iterator	typeref:typename:templated_iterator &
operator ++	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^        templated_iterator operator++(int)$/;"	f	struct:ska::detailv3::sherwood_v3_table::templated_iterator	typeref:typename:templated_iterator
operator ++	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^    robin_iterator operator++(int) {$/;"	f	class:tsl::detail_robin_hash::robin_hash::robin_iterator	typeref:typename:robin_iterator
operator ++	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^    robin_iterator& operator++() {$/;"	f	class:tsl::detail_robin_hash::robin_hash::robin_iterator	typeref:typename:robin_iterator &
operator ++	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        iterator& operator++()$/;"	f	struct:picobench::state::iterator	typeref:typename:PICOBENCH_INLINE iterator &
operator ++	./vendor/fmt/include/base.h	/^  auto operator++() -> basic_appender& { return *this; }$/;"	f	class:basic_appender	typeref:typename:basic_appender &
operator ++	./vendor/fmt/include/base.h	/^  auto operator++(int) -> basic_appender { return *this; }$/;"	f	class:basic_appender	typeref:typename:basic_appender
operator +=	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR void operator+=(uint128_fallback n) {$/;"	f	class:detail::uint128_fallback	typeref:typename:FMT_CONSTEXPR void
operator +=	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 auto operator+=(uint64_t n) noexcept -> uint128_fallback& {$/;"	f	class:detail::uint128_fallback	typeref:typename:FMT_CONSTEXPR20 auto
operator -	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^        constexpr auto operator-(iter_t<OtherIsConst> const& other) noexcept -> difference_type /;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector::iter_t	typeref:typename:auto
operator -	./vendor/fmt/include/format.h	/^  friend auto operator-(const uint128_fallback& lhs, uint64_t rhs)$/;"	f	namespace:detail	typeref:typename:uint128_fallback
operator ->	./src/flecs.h	/^    T* operator->() {$/;"	f	struct:flecs::ref	typeref:typename:T *
operator ->	./src/flecs.h	/^    const type* operator->() const {$/;"	f	struct:flecs::pair	typeref:typename:const type *
operator ->	./src/flecs.h	/^    type* operator->() {$/;"	f	struct:flecs::pair	typeref:typename:type *
operator ->	./src/flecs.h	/^T* field<T>::operator->() const {$/;"	f	class:flecs::field	typeref:typename:T *
operator ->	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        pointer operator->() const {$/;"	f	class:robin_hood::detail::Table::Iter	typeref:typename:pointer
operator ->	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        value_type const* operator->() const noexcept {$/;"	f	class:robin_hood::detail::Table::DataNode	typeref:typename:value_type const *
operator ->	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        value_type* operator->() noexcept {$/;"	f	class:robin_hood::detail::Table::DataNode	typeref:typename:value_type *
operator ->	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^        constexpr auto operator->() const noexcept -> pointer {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector::iter_t	typeref:typename:auto
operator ->	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        pointer operator->() const$/;"	f	class:emhash7::HashMap::const_iterator	typeref:typename:pointer
operator ->	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        pointer operator->() const$/;"	f	class:emhash7::HashMap::iterator	typeref:typename:pointer
operator ->	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^        ValueType * operator->() const$/;"	f	struct:ska::detailv3::sherwood_v3_table::templated_iterator	typeref:typename:ValueType *
operator ->	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^    pointer operator->() const { return std::addressof(m_bucket->value()); }$/;"	f	class:tsl::detail_robin_hash::robin_hash::robin_iterator	typeref:typename:pointer
operator <	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^inline constexpr bool operator<(pair<A, B> const& x, pair<A, B> const& y) noexcept(noexcept($/;"	f	namespace:robin_hood	typeref:typename:bool
operator <	./vendor/fmt/include/base.h	/^  friend auto operator<(basic_string_view lhs, basic_string_view rhs) -> bool {$/;"	f	typeref:typename:bool
operator <<	./src/flecs.h	/^    stringstream& operator<<(const char* str) {$/;"	f	struct:flecs::stringstream	typeref:typename:stringstream &
operator <<	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^inline std::ostream& operator<<(std::ostream& os, Counts const& c) {$/;"	f	namespace:robin_hood	typeref:typename:std::ostream &
operator <<	./vendor/STC/misc/examples/algorithms/shape.cpp	/^std::ostream& operator<<(std::ostream& os, const Point& p) {$/;"	f	typeref:typename:std::ostream &
operator <<	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR auto operator<<(int shift) const -> uint128_fallback {$/;"	f	class:detail::uint128_fallback	typeref:typename:uint128_fallback
operator <<=	./vendor/fmt/include/format.h	/^  FMT_NOINLINE FMT_CONSTEXPR20 auto operator<<=(int shift) -> bigint& {$/;"	f	class:detail::bigint	typeref:typename:bigint &
operator <=	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^inline constexpr bool operator<=(pair<A, B> const& x, pair<A, B> const& y) {$/;"	f	namespace:robin_hood	typeref:typename:bool
operator <=	./vendor/fmt/include/base.h	/^  friend auto operator<=(basic_string_view lhs, basic_string_view rhs) -> bool {$/;"	f	typeref:typename:bool
operator =	./src/flecs.h	/^    filter& operator=(const filter& obj) {$/;"	f	struct:flecs::filter	typeref:typename:filter &
operator =	./src/flecs.h	/^    filter& operator=(filter&& obj) noexcept {$/;"	f	struct:flecs::filter	typeref:typename:filter &
operator =	./src/flecs.h	/^    filter_base& operator=(const filter_base& obj) {$/;"	f	struct:flecs::filter_base	typeref:typename:filter_base &
operator =	./src/flecs.h	/^    filter_base& operator=(filter_base&& obj) noexcept {$/;"	f	struct:flecs::filter_base	typeref:typename:filter_base &
operator =	./src/flecs.h	/^    snapshot& operator=(const snapshot& obj) {$/;"	f	struct:flecs::snapshot	typeref:typename:snapshot &
operator =	./src/flecs.h	/^    snapshot& operator=(snapshot&& obj) noexcept {$/;"	f	struct:flecs::snapshot	typeref:typename:snapshot &
operator =	./src/flecs.h	/^    string& operator=(string&& str) noexcept {$/;"	f	struct:flecs::string	typeref:typename:string &
operator =	./src/flecs.h	/^    stringstream& operator=(stringstream&& str) noexcept {$/;"	f	struct:flecs::stringstream	typeref:typename:stringstream &
operator =	./src/flecs.h	/^    term& operator=(const term& t) {$/;"	f	struct:flecs::term	typeref:typename:term &
operator =	./src/flecs.h	/^    term& operator=(term&& t) noexcept {$/;"	f	struct:flecs::term	typeref:typename:term &
operator =	./src/flecs.h	/^    world& operator=(world&& obj) noexcept {$/;"	f	struct:flecs::world	typeref:typename:world &
operator =	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        Iter& operator=(Iter<OtherIsConst> const& other) noexcept {$/;"	f	class:robin_hood::detail::Table::Iter	typeref:typename:Iter &
operator =	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    BulkPoolAllocator& operator=(BulkPoolAllocator&& o) noexcept {$/;"	f	class:robin_hood::detail::BulkPoolAllocator	typeref:typename:BulkPoolAllocator &
operator =	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    Table& operator=(Table const& o) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:Table &
operator =	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    Table& operator=(Table&& o) noexcept {$/;"	f	class:robin_hood::detail::Table	typeref:typename:Table &
operator =	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    operator=(const BulkPoolAllocator& ROBIN_HOOD_UNUSED(o) \/*unused*\/) noexcept {$/;"	f	class:robin_hood::detail::BulkPoolAllocator	typeref:typename:BulkPoolAllocator &
operator =	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^        constexpr auto operator=(iter_t<OtherIsConst> const& other) noexcept -> iter_t& {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector::iter_t	typeref:typename:auto
operator =	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto operator=(segmented_vector const& other) -> segmented_vector& {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:segmented_vector &
operator =	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto operator=(segmented_vector&& other) noexcept -> segmented_vector& {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:auto
operator =	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto operator=(std::initializer_list<value_type> ilist) -> table& {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:table &
operator =	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto operator=(table const& other) -> table& {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:table &
operator =	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto operator=(table&& other) noexcept($/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:auto
operator =	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    HashMap& operator= (HashMap&& rhs) noexcept$/;"	f	class:emhash7::HashMap	typeref:typename:HashMap &
operator =	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    HashMap& operator= (const HashMap& rhs) noexcept$/;"	f	class:emhash7::HashMap	typeref:typename:HashMap &
operator =	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    entry& operator = (const entry& rhs)$/;"	f	struct:emhash7::entry	typeref:typename:entry &
operator =	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    entry& operator = (entry&& rhs) noexcept$/;"	f	struct:emhash7::entry	typeref:typename:entry &
operator =	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    sherwood_v3_table & operator=(const sherwood_v3_table & other)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:sherwood_v3_table &
operator =	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    sherwood_v3_table & operator=(sherwood_v3_table && other) noexcept$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:sherwood_v3_table &
operator =	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  bucket_entry& operator=(const bucket_entry& other) noexcept($/;"	f	class:tsl::detail_robin_hash::bucket_entry	typeref:typename:bucket_entry &
operator =	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  robin_hash& operator=(const robin_hash& other) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:robin_hash &
operator =	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  robin_hash& operator=(robin_hash&& other) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:robin_hash &
operator =	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  robin_map& operator=(std::initializer_list<value_type> ilist) {$/;"	f	class:tsl::robin_map	typeref:typename:robin_map &
operator =	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR auto operator=(int idx) -> arg_ref& {$/;"	f	struct:detail::arg_ref	typeref:typename:arg_ref &
operator =	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR void operator=(basic_string_view<Char> s) {$/;"	f	struct:detail::fill_t	typeref:typename:FMT_CONSTEXPR void
operator =	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR void operator=(char c) {$/;"	f	struct:detail::fill_t	typeref:typename:FMT_CONSTEXPR void
operator =	./vendor/fmt/include/base.h	/^  auto operator=(T c) -> basic_appender& {$/;"	f	class:basic_appender	typeref:typename:basic_appender &
operator =	./vendor/fmt/include/format.h	/^  auto operator=(basic_memory_buffer&& other) noexcept -> basic_memory_buffer& {$/;"	f	class:basic_memory_buffer	typeref:typename:auto
operator =	./vendor/fmt/include/format.h	/^  template <typename Int> FMT_CONSTEXPR20 void operator=(Int n) {$/;"	f	class:detail::bigint	typeref:typename:FMT_CONSTEXPR20 void
operator =	./vendor/fmt/include/format.h	/^  template <typename T> auto operator=(T&& value) const -> named_arg<Char, T> {$/;"	f	struct:detail::udl_arg	typeref:typename:named_arg<Char,T>
operator =	./vendor/fmt/include/format.h	/^  template <typename T> auto operator=(T&& value) const {$/;"	f	struct:detail::udl_arg	typeref:typename:auto
operator =	./vendor/fmt/include/os.h	/^  auto operator=(buffered_file&& other) -> buffered_file& {$/;"	f	class:buffered_file	typeref:typename:buffered_file &
operator =	./vendor/fmt/include/os.h	/^  auto operator=(file&& other) -> file& {$/;"	f	class:file	typeref:typename:file &
operator =	./vendor/fmt/include/os.h	/^  auto operator=(size_t val) const -> buffer_size {$/;"	f	struct:detail::buffer_size	typeref:typename:buffer_size
operator ==	./src/flecs.h	/^    bool operator==(const char *str) const {$/;"	f	struct:flecs::string	typeref:typename:bool
operator ==	./src/flecs.h	/^    bool operator==(const flecs::string& str) const {$/;"	f	struct:flecs::string	typeref:typename:bool
operator ==	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        bool operator==(Iter<O> const& o) const noexcept {$/;"	f	class:robin_hood::detail::Table::Iter	typeref:typename:bool
operator ==	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    bool operator==(const Table& other) const {$/;"	f	class:robin_hood::detail::Table	typeref:typename:bool
operator ==	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^inline constexpr bool operator==(pair<A, B> const& x, pair<A, B> const& y) {$/;"	f	namespace:robin_hood	typeref:typename:bool
operator ==	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^        constexpr auto operator==(iter_t<O> const& o) const noexcept -> bool {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector::iter_t	typeref:typename:auto
operator ==	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    friend auto operator==(table const& a, table const& b) -> bool {$/;"	f	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail	typeref:typename:bool
operator ==	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        bool operator==(const const_iterator& rhs) const { return _bucket == rhs._bucket; }$/;"	f	class:emhash7::HashMap::const_iterator	typeref:typename:bool
operator ==	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        bool operator==(const const_iterator& rhs) const { return _bucket == rhs._bucket; }$/;"	f	class:emhash7::HashMap::iterator	typeref:typename:bool
operator ==	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        bool operator==(const iterator& rhs) const { return _bucket == rhs._bucket; }$/;"	f	class:emhash7::HashMap::iterator	typeref:typename:bool
operator ==	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    bool operator == (const Con& rhs) const$/;"	f	class:emhash7::HashMap	typeref:typename:bool
operator ==	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    bool operator == (const entry<First, Second>& p) const$/;"	f	struct:emhash7::entry	typeref:typename:bool
operator ==	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    bool operator == (const std::pair<First, Second>& p) const$/;"	f	struct:emhash7::entry	typeref:typename:bool
operator ==	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^        friend bool operator==(const templated_iterator & lhs, const templated_iterator & rhs)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:bool
operator ==	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    friend bool operator==(const flat_hash_map & lhs, const flat_hash_map & rhs)$/;"	f	namespace:ska	typeref:typename:bool
operator ==	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    friend bool operator==(const flat_hash_set & lhs, const flat_hash_set & rhs)$/;"	f	namespace:ska	typeref:typename:bool
operator ==	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^    friend bool operator==(const robin_iterator& lhs,$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:bool
operator ==	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  friend bool operator==(const robin_map& lhs, const robin_map& rhs) {$/;"	f	namespace:tsl	typeref:typename:bool
operator ==	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR friend auto operator==(basic_string_view lhs,$/;"	f	typeref:typename:bool
operator ==	./vendor/fmt/include/format-inl.h	/^inline auto operator==(basic_fp<F> x, basic_fp<F> y) -> bool {$/;"	f	namespace:detail	typeref:typename:bool
operator ==	./vendor/fmt/include/format.h	/^  friend constexpr auto operator==(const uint128_fallback& lhs,$/;"	f	namespace:detail	typeref:typename:bool
operator >	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^inline constexpr bool operator>(pair<A, B> const& x, pair<A, B> const& y) {$/;"	f	namespace:robin_hood	typeref:typename:bool
operator >	./vendor/fmt/include/base.h	/^  friend auto operator>(basic_string_view lhs, basic_string_view rhs) -> bool {$/;"	f	typeref:typename:bool
operator >	./vendor/fmt/include/format.h	/^  friend constexpr auto operator>(const uint128_fallback& lhs,$/;"	f	namespace:detail	typeref:typename:bool
operator >=	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^inline constexpr bool operator>=(pair<A, B> const& x, pair<A, B> const& y) {$/;"	f	namespace:robin_hood	typeref:typename:bool
operator >=	./vendor/fmt/include/base.h	/^  friend auto operator>=(basic_string_view lhs, basic_string_view rhs) -> bool {$/;"	f	typeref:typename:bool
operator >>	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR auto operator>>(int shift) const -> uint128_fallback {$/;"	f	class:detail::uint128_fallback	typeref:typename:uint128_fallback
operator >>=	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR auto operator>>=(int shift) -> uint128_fallback& {$/;"	f	class:detail::uint128_fallback	typeref:typename:uint128_fallback &
operator Base&	./src/flecs.h	/^    operator Base&() {$/;"	f	struct:flecs::alert_builder_i
operator Base&	./src/flecs.h	/^    operator Base&() {$/;"	f	struct:flecs::event_builder_base
operator Base&	./src/flecs.h	/^    operator Base&() {$/;"	f	struct:flecs::filter_builder_i
operator Base&	./src/flecs.h	/^    operator Base&() {$/;"	f	struct:flecs::observer_builder_i
operator Base&	./src/flecs.h	/^    operator Base&() {$/;"	f	struct:flecs::query_builder_i
operator Base&	./src/flecs.h	/^    operator Base&() {$/;"	f	struct:flecs::system_builder_i
operator Base&	./src/flecs.h	/^    operator Base&() {$/;"	f	struct:flecs::term_builder_i
operator Base&	./src/flecs.h	/^    operator Base&() {$/;"	f	struct:flecs::term_id_builder_i
operator F*	./vendor/fmt/include/format-inl.h	/^  operator F*() const { return file_; }$/;"	f	class:detail::file_base
operator OutputIt&	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR operator OutputIt&() & {$/;"	f	struct:format_to_result	typeref:typename:FMT_CONSTEXPR
operator OutputIt&&	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR operator OutputIt&&() && {$/;"	f	struct:format_to_result	typeref:typename:FMT_CONSTEXPR
operator T	./vendor/fmt/include/format.h	/^  constexpr explicit operator T() const {$/;"	f	class:detail::uint128_fallback
operator TDesc*	./src/flecs.h	/^    operator TDesc*() {$/;"	f	struct:flecs::_::builder
operator V	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^        operator V() const$/;"	f	struct:ska::flat_hash_map::convertible_to_value
operator []	./src/flecs.h	/^    T operator[](size_t index) { ecs_os_abort(); (void)index; return T(); }$/;"	f	struct:flecs::array	typeref:typename:T
operator []	./src/flecs.h	/^    T& operator[](int index) {$/;"	f	struct:flecs::array	typeref:typename:T &
operator []	./src/flecs.h	/^    T& operator[](size_t index) {$/;"	f	struct:flecs::array	typeref:typename:T &
operator []	./src/flecs.h	/^    void* operator[](size_t index) const {$/;"	f	struct:flecs::untyped_field	typeref:typename:void *
operator []	./src/flecs.h	/^T& field<T>::operator[](size_t index) const {$/;"	f	class:flecs::field	typeref:typename:T &
operator []	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    typename std::enable_if<!std::is_void<Q>::value, Q&>::type operator[](const key_type& key) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:std::enable_if<!std::is_void<Q>::value,Q &>::type
operator []	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    typename std::enable_if<!std::is_void<Q>::value, Q&>::type operator[](key_type&& key) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:std::enable_if<!std::is_void<Q>::value,Q &>::type
operator []	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] constexpr auto operator[](size_t i) const noexcept -> T const& {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:auto
operator []	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] constexpr auto operator[](size_t i) noexcept -> T& {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:auto
operator []	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto operator[](K&& key) -> Q& {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:Q &
operator []	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto operator[](Key const& key) -> Q& {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:Q &
operator []	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto operator[](Key&& key) -> Q& {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:Q &
operator []	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    ValueT& operator[](KeyT&& key) noexcept$/;"	f	class:emhash7::HashMap	typeref:typename:ValueT &
operator []	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    ValueT& operator[](const KeyT& key) noexcept$/;"	f	class:emhash7::HashMap	typeref:typename:ValueT &
operator []	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    inline V & operator[](K && key)$/;"	f	class:ska::flat_hash_map	typeref:typename:V &
operator []	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    inline V & operator[](const K & key)$/;"	f	class:ska::flat_hash_map	typeref:typename:V &
operator []	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  typename U::value_type& operator[](K&& key) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:U::value_type &
operator []	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  T& operator[](Key&& key) { return m_ht[std::move(key)]; }$/;"	f	class:tsl::robin_map	typeref:typename:T &
operator []	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  T& operator[](const Key& key) { return m_ht[key]; }$/;"	f	class:tsl::robin_map	typeref:typename:T &
operator []	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR auto operator[](Idx index) const -> const T& {$/;"	f	class:detail::buffer	typeref:typename:const T &
operator []	./vendor/fmt/include/base.h	/^  constexpr auto operator[](size_t pos) const noexcept -> const Char& {$/;"	f	class:basic_string_view	typeref:typename:auto
operator []	./vendor/fmt/include/base.h	/^  template <typename Idx> FMT_CONSTEXPR auto operator[](Idx index) -> T& {$/;"	f	class:detail::buffer	typeref:typename:T &
operator []	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 auto operator[](int index) -> bigit& {$/;"	f	class:detail::bigint	typeref:typename:bigit &
operator []	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 auto operator[](int index) const -> bigit {$/;"	f	class:detail::bigint	typeref:typename:bigit
operator basic_string_view<Char>	./vendor/fmt/include/base.h	/^  FMT_ALWAYS_INLINE operator basic_string_view<Char>() const { return str_; }$/;"	f	class:basic_format_string	typeref:typename:FMT_ALWAYS_INLINE
operator basic_string_view<Char>	./vendor/fmt/include/base.h	/^  constexpr operator basic_string_view<Char>() const {$/;"	f	struct:detail::string_literal
operator basic_string_view<char_type>	./vendor/fmt/include/compile.h	/^  explicit constexpr operator basic_string_view<char_type>() const {$/;"	f	struct:detail::udl_compiled_string
operator basic_string_view<wchar_t>	./vendor/fmt/include/format.h	/^  operator basic_string_view<wchar_t>() const { return {&buffer_[0], size()}; }$/;"	f	class:detail::utf8_to_utf16
operator bool	./src/flecs.h	/^    explicit operator bool() const {$/;"	f	struct:flecs::entity_view
operator bool	./vendor/fmt/include/base.h	/^  constexpr explicit operator bool() const noexcept {$/;"	f	class:basic_format_arg
operator bool	./vendor/fmt/include/base.h	/^  explicit operator bool() const noexcept { return locale_ != nullptr; }$/;"	f	class:detail::locale_ref
operator const Char*	./vendor/fmt/include/color.h	/^  FMT_CONSTEXPR operator const Char*() const noexcept { return buffer; }$/;"	f	struct:detail::ansi_color_escape	typeref:typename:FMT_CONSTEXPR
operator const OutputIt&	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR operator const OutputIt&() const& {$/;"	f	struct:format_to_result	typeref:typename:FMT_CONSTEXPR
operator const char*	./src/flecs.h	/^    operator const char*() const {$/;"	f	struct:flecs::string
operator const flecs::filter_t*	./src/flecs.h	/^    operator const flecs::filter_t*() const {$/;"	f	struct:flecs::filter_base
operator const function_ptr&	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    operator const function_ptr &()$/;"	f	struct:ska::detailv3::functor_storage
operator const std::locale&	./vendor/fmt/include/chrono.h	/^  operator const std::locale&() const {$/;"	f	class:detail::get_locale
operator const type&	./src/flecs.h	/^    operator const type&() const {$/;"	f	struct:flecs::pair
operator const type_t*	./src/flecs.h	/^    operator const type_t*() const {$/;"	f	struct:flecs::type
operator const_iterator	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^        operator const_iterator()$/;"	f	struct:ska::detailv3::sherwood_v3_table::convertible_to_iterator
operator delete	./src/flecs.h	/^inline void  operator delete(void*, flecs::_::placement_new_tag_t, void*)      noexcept {       /;"	f	typeref:typename:void
operator flecs::entity	./src/flecs.h	/^inline metric_builder::operator flecs::entity() {$/;"	f	class:flecs::metric_builder
operator flecs::filter<>	./src/flecs.h	/^inline filter_base::operator flecs::filter<> () const {$/;"	f	class:flecs::filter_base
operator flecs::id_t	./src/flecs.h	/^    operator flecs::id_t() const {$/;"	f	struct:flecs::id
operator function_ptr&	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    operator function_ptr &()$/;"	f	struct:ska::detailv3::functor_storage
operator int	./vendor/fmt/include/chrono.h	/^  constexpr explicit operator int() const noexcept { return value_; }$/;"	f	class:year
operator iterator	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^        operator iterator()$/;"	f	struct:ska::detailv3::sherwood_v3_table::convertible_to_iterator
operator new	./src/flecs.h	/^inline void* operator new(size_t,   flecs::_::placement_new_tag_t, void* _ptr) noexcept { return/;"	f	typeref:typename:void *
operator query<>	./src/flecs.h	/^inline query_base::operator query<>() const {$/;"	f	class:flecs::query_base
operator query_t*	./src/flecs.h	/^    operator query_t*() const {$/;"	f	struct:flecs::query_base
operator rule<>	./src/flecs.h	/^inline rule_base::operator rule<>() const {$/;"	f	class:flecs::rule_base
operator rule_t*	./src/flecs.h	/^    operator rule_t*() const {$/;"	f	struct:flecs::rule_base
operator string_view	./vendor/fmt/include/format.h	/^  operator string_view() const { return string_view(&buffer_[0], size()); }$/;"	f	class:detail::to_utf8
operator table_t*	./src/flecs.h	/^    operator table_t*() const {$/;"	f	struct:flecs::table
operator templated_iterator<const value_type>	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^        operator templated_iterator<const value_type>() const$/;"	f	struct:ska::detailv3::sherwood_v3_table::templated_iterator
operator type&	./src/flecs.h	/^    operator type&() {$/;"	f	struct:flecs::pair
operator unsigned	./vendor/fmt/include/chrono.h	/^  constexpr explicit operator unsigned() const noexcept { return value_; }$/;"	f	class:day
operator unsigned	./vendor/fmt/include/chrono.h	/^  constexpr explicit operator unsigned() const noexcept { return value_; }$/;"	f	class:month
operator world_t*	./src/flecs.h	/^    operator world_t*() const { return m_world; }$/;"	f	struct:flecs::world
operator |	./vendor/fmt/include/color.h	/^  friend FMT_CONSTEXPR auto operator|(text_style lhs, const text_style& rhs)$/;"	f	typeref:typename:text_style
operator |	./vendor/fmt/include/color.h	/^FMT_CONSTEXPR inline auto operator|(emphasis lhs, emphasis rhs) noexcept$/;"	f	typeref:typename:FMT_CONSTEXPR auto
operator |	./vendor/fmt/include/format.h	/^  friend constexpr auto operator|(const uint128_fallback& lhs,$/;"	f	namespace:detail	typeref:typename:uint128_fallback
operator |=	./vendor/fmt/include/color.h	/^  FMT_CONSTEXPR auto operator|=(const text_style& rhs) -> text_style& {$/;"	f	class:text_style	typeref:typename:text_style &
operator ~	./vendor/fmt/include/format.h	/^  friend constexpr auto operator~(const uint128_fallback& n)$/;"	f	namespace:detail	typeref:typename:uint128_fallback
ops	./src/flecs.c	/^    ecs_rule_op_t *ops;           \/* Operations *\/$/;"	m	struct:ecs_rule_t	typeref:typename:ecs_rule_op_t *	file:
ops	./src/flecs.c	/^    ecs_vec_t *ops;$/;"	m	struct:__anon7d4a41773608	typeref:typename:ecs_vec_t *	file:
ops	./src/flecs.c	/^    ecs_vec_t ops;              \/* Pipeline schedule *\/$/;"	m	struct:ecs_pipeline_state_t	typeref:typename:ecs_vec_t	file:
ops	./src/flecs.h	/^    const struct ecs_rule_op_t *ops;$/;"	m	struct:ecs_rule_iter_t	typeref:typename:const struct ecs_rule_op_t *
ops	./src/flecs.h	/^    ecs_meta_type_op_t *ops;  \/**< The type operations (see ecs_meta_type_op_t) *\/$/;"	m	struct:ecs_meta_scope_t	typeref:typename:ecs_meta_type_op_t *
ops	./src/flecs.h	/^    ecs_vec_t ops;      \/**< vector<ecs_meta_type_op_t> *\/$/;"	m	struct:EcsMetaTypeSerialized	typeref:typename:ecs_vec_t
opt	./vendor/STC/include/stc/coption.h	/^    int opt;            \/* equivalent to optopt *\/$/;"	m	struct:__anonc31abe760308	typeref:typename:int
optional	./src/flecs.h	/^    Base& optional() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
optstr	./vendor/STC/include/stc/coption.h	/^    const char *optstr; \/* points to the option string *\/$/;"	m	struct:__anonc31abe760308	typeref:typename:const char *
or_	./src/flecs.h	/^    Base& or_() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
or_from	./src/flecs.h	/^    Base& or_from() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
orange	./vendor/fmt/include/color.h	/^  orange = 0xFFA500,                   \/\/ rgb(255,165,0)$/;"	e	enum:color
orange_red	./vendor/fmt/include/color.h	/^  orange_red = 0xFF4500,               \/\/ rgb(255,69,0)$/;"	e	enum:color
orchid	./vendor/fmt/include/color.h	/^  orchid = 0xDA70D6,                   \/\/ rgb(218,112,214)$/;"	e	enum:color
order_by	./src/flecs.c	/^    ecs_order_by_action_t order_by;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_order_by_action_t	file:
order_by	./src/flecs.h	/^    Base& order_by(flecs::entity_t component, int(*compare)(flecs::entity_t, const void*, flecs:/;"	f	struct:flecs::query_builder_i	typeref:typename:Base &
order_by	./src/flecs.h	/^    Base& order_by(int(*compare)(flecs::entity_t, const T*, flecs::entity_t, const T*)) {$/;"	f	struct:flecs::query_builder_i	typeref:typename:Base &
order_by	./src/flecs.h	/^    ecs_order_by_action_t order_by;$/;"	m	struct:ecs_query_desc_t	typeref:typename:ecs_order_by_action_t
order_by_component	./src/flecs.c	/^    ecs_entity_t order_by_component;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_entity_t	file:
order_by_component	./src/flecs.h	/^    ecs_entity_t order_by_component;$/;"	m	struct:ecs_query_desc_t	typeref:typename:ecs_entity_t
order_by_term	./src/flecs.c	/^    int32_t order_by_term;$/;"	m	struct:ecs_query_t	typeref:typename:int32_t	file:
origin	./vendor/STC/misc/examples/smartpointers/box2.c	/^Point origin(void) {$/;"	f	typeref:typename:Point
orphaned	./src/flecs.h	/^    bool orphaned() const {$/;"	f	struct:flecs::query_base	typeref:typename:bool
ostream	./vendor/fmt/include/os.h	/^  ostream(cstring_view path, const detail::ostream_params& params)$/;"	f	class:ostream
ostream	./vendor/fmt/include/os.h	/^  ostream(ostream&& other) : buffer_(std::move(other.buffer_)) {}$/;"	f	class:ostream
ostream	./vendor/fmt/include/os.h	/^class FMT_API ostream {$/;"	c
ostream_formatter	./vendor/fmt/include/ostream.h	/^using ostream_formatter = basic_ostream_formatter<char>;$/;"	t	typeref:typename:basic_ostream_formatter<char>
ostream_params	./vendor/fmt/include/os.h	/^  ostream_params() {}$/;"	f	struct:detail::ostream_params
ostream_params	./vendor/fmt/include/os.h	/^  ostream_params(T... params, detail::buffer_size bs)$/;"	f	struct:detail::ostream_params
ostream_params	./vendor/fmt/include/os.h	/^  ostream_params(T... params, int new_oflag) : ostream_params(params...) {$/;"	f	struct:detail::ostream_params
ostream_params	./vendor/fmt/include/os.h	/^  ostream_params(detail::buffer_size bs) : buffer_size(bs.value) {}$/;"	f	struct:detail::ostream_params
ostream_params	./vendor/fmt/include/os.h	/^  ostream_params(int new_oflag) : oflag(new_oflag) {}$/;"	f	struct:detail::ostream_params
ostream_params	./vendor/fmt/include/os.h	/^struct ostream_params {$/;"	s	namespace:detail
other	./src/flecs.c	/^    ecs_rule_lbl_t other;      \/* Misc register used for control flow *\/$/;"	m	struct:ecs_rule_op_t	typeref:typename:ecs_rule_lbl_t	file:
other_count	./src/flecs.h	/^        ecs_metric_t other_count;$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1308	typeref:typename:ecs_metric_t
other_count	./src/flecs.h	/^        int64_t other_count;           \/**< Other commands processed *\/$/;"	m	struct:ecs_world_info_t::__anon7d4a417c0708	typeref:typename:int64_t
other_table	./src/flecs.h	/^    ecs_table_t *other_table;     \/* Prev or next table when adding\/removing *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_table_t *
other_table	./src/flecs.h	/^    ecs_table_t *other_table;$/;"	m	struct:ecs_event_desc_t	typeref:typename:ecs_table_t *
out	./src/flecs.h	/^    Base& out() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
out	./vendor/STC/misc/benchmarks/plotbench/run_all.bat	/^@set out=plot_win.csv$/;"	v
out	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR auto out() -> iterator { return out_; }$/;"	f	class:context	typeref:typename:iterator
out	./vendor/fmt/include/base.h	/^  OutputIt out;$/;"	m	struct:format_to_n_result	typeref:typename:OutputIt
out	./vendor/fmt/include/base.h	/^  OutputIt out;$/;"	m	struct:format_to_result	typeref:typename:OutputIt
out	./vendor/fmt/include/base.h	/^  auto out() -> OutputIt { return back_inserter(container_); }$/;"	f	class:detail::iterator_buffer	typeref:typename:OutputIt
out	./vendor/fmt/include/base.h	/^  auto out() -> OutputIt {$/;"	f	class:detail::iterator_buffer	typeref:typename:OutputIt
out	./vendor/fmt/include/base.h	/^  auto out() -> T* { return &*this->end(); }$/;"	f	class:detail::iterator_buffer	typeref:typename:T *
out	./vendor/fmt/include/base.h	/^  auto out() -> T* {$/;"	f	class:detail::iterator_buffer	typeref:typename:T *
out	./vendor/fmt/include/chrono.h	/^  OutputIt out;$/;"	m	struct:detail::chrono_formatter	typeref:typename:OutputIt
out	./vendor/fmt/include/chrono.h	/^  auto out() const -> OutputIt { return out_; }$/;"	f	class:detail::tm_writer	typeref:typename:OutputIt
out	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR auto out() -> iterator { return out_; }$/;"	f	class:generic_context	typeref:typename:iterator
out	./vendor/fmt/include/format.h	/^  basic_appender<Char> out;$/;"	m	struct:detail::loc_writer	typeref:typename:basic_appender<Char>
out	./vendor/fmt/include/format.h	/^  iterator out;$/;"	m	struct:detail::arg_formatter	typeref:typename:iterator
out	./vendor/fmt/include/format.h	/^  iterator out;$/;"	m	struct:detail::default_arg_formatter	typeref:typename:iterator
out	./vendor/fmt/include/printf.h	/^  auto out() -> basic_appender<Char> { return out_; }$/;"	f	class:basic_printf_context	typeref:typename:basic_appender<Char>
out_	./vendor/fmt/include/base.h	/^  OutputIt out_;$/;"	m	class:detail::iterator_buffer	typeref:typename:OutputIt
out_	./vendor/fmt/include/base.h	/^  T* out_;$/;"	m	class:detail::iterator_buffer	typeref:typename:T *
out_	./vendor/fmt/include/base.h	/^  appender out_;$/;"	m	class:context	typeref:typename:appender
out_	./vendor/fmt/include/chrono.h	/^  OutputIt out_;$/;"	m	class:detail::tm_writer	typeref:typename:OutputIt
out_	./vendor/fmt/include/format.h	/^  OutputIt out_;$/;"	m	class:generic_context	typeref:typename:OutputIt
out_	./vendor/fmt/include/printf.h	/^  basic_appender<Char> out_;$/;"	m	class:basic_printf_context	typeref:typename:basic_appender<Char>
output_file	./vendor/fmt/include/os.h	/^inline auto output_file(cstring_view path, T... params) -> ostream {$/;"	f	typeref:typename:ostream
outstanding_alloc_count	./src/flecs.h	/^        ecs_metric_t outstanding_alloc_count; \/**< Difference between allocs & frees *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1608	typeref:typename:ecs_metric_t
over	./src/flecs.h	/^    ecs_entity_t over;   \/**< Over unit (e.g. "per second") *\/$/;"	m	struct:EcsUnit	typeref:typename:ecs_entity_t
over	./src/flecs.h	/^    ecs_entity_t over;$/;"	m	struct:ecs_unit_desc_t	typeref:typename:ecs_entity_t
overflow	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    virtual int overflow(int c) override { return c; }$/;"	f	class:picobench::null_streambuf	typeref:typename:int
overflow	./vendor/fmt/include/chrono.h	/^  auto overflow(int_type ch) -> int_type override {$/;"	f	class:detail::formatbuf	typeref:typename:int_type override
overflow_error	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    enum class InsertionState { overflow_error, key_found, new_node, overwrite_node };$/;"	e	enum:robin_hood::detail::Table::InsertionState
override	./src/flecs.h	/^    Self& override() {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
override	./src/flecs.h	/^    Self& override(flecs::entity_t first, flecs::entity_t second) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
override	./src/flecs.h	/^    Self& override(flecs::entity_t second) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
override	./src/flecs.h	/^    Self& override(flecs::id_t id) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
overshoot	./src/flecs.h	/^    ecs_ftime_t overshoot;       \/**< Used to correct returned interval time *\/$/;"	m	struct:EcsTimer	typeref:typename:ecs_ftime_t
overwrite	./vendor/STC/include/c11/fmt.h	/^    _Bool overwrite;$/;"	m	struct:__anon6f5400bc0108	typeref:typename:_Bool
overwrite_node	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    enum class InsertionState { overflow_error, key_found, new_node, overwrite_node };$/;"	e	enum:robin_hood::detail::Table::InsertionState
owned	./src/flecs.c	/^    bool owned;$/;"	m	struct:__anon7d4a41771808	typeref:typename:bool	file:
owned	./src/flecs.h	/^    bool owned; \/* Set to false if ecs_vars_t should not take ownership of var *\/$/;"	m	struct:ecs_expr_var_t	typeref:typename:bool
owner	./src/flecs.h	/^    struct ecs_stack_t *owner;$/;"	m	struct:ecs_stack_cursor_t	typeref:struct:ecs_stack_t *
owns	./src/flecs.h	/^    bool owns() const {$/;"	f	struct:flecs::entity_view	typeref:typename:bool
owns	./src/flecs.h	/^    bool owns(flecs::id_t e) const {$/;"	f	struct:flecs::entity_view	typeref:typename:bool
owns	./src/flecs.h	/^    bool owns(flecs::id_t first, flecs::id_t second) const {$/;"	f	struct:flecs::entity_view	typeref:typename:bool
owns	./src/flecs.h	/^    bool owns(flecs::id_t second) const {$/;"	f	struct:flecs::entity_view	typeref:typename:bool
p	./src/flecs.c	/^        FARPROC p;$/;"	m	union:win_enable_high_timer_resolution::__anon7d4a4177210a	typeref:typename:FARPROC	file:
p	./vendor/STC/misc/examples/algorithms/shape.c	/^    Point p[3];$/;"	m	struct:__anon6b1a6e6c0208	typeref:typename:Point[3]	file:
p	./vendor/STC/misc/examples/algorithms/shape.cpp	/^    private: Point p[3];$/;"	m	struct:Triangle	typeref:typename:Point[3]	file:
packed_arg_bits	./vendor/fmt/include/base.h	/^enum { packed_arg_bits = 4 };$/;"	e	enum:detail::__anonea363bd90903
pad_type	./vendor/fmt/include/chrono.h	/^enum class pad_type {$/;"	g	namespace:detail
padding	./vendor/STC/misc/tests/ctest.h	/^    uint32_t magic0, padding;$/;"	m	struct:ctest	typeref:typename:uint32_t
padding	./vendor/fmt/include/format.h	/^  size_t padding;$/;"	m	struct:detail::write_int_data	typeref:typename:size_t
page	./src/flecs.h	/^        ecs_page_iter_t page;$/;"	m	union:ecs_iter_private_t::__anon7d4a417c020a	typeref:typename:ecs_page_iter_t
page	./src/flecs.h	/^    struct ecs_stack_page_t *page;$/;"	m	struct:ecs_stack_cursor_t	typeref:struct:ecs_stack_page_t *
page	./src/flecs.h	/^page_iterable<Components...> iterable<Components...>::page($/;"	f	class:flecs::iterable	typeref:typename:page_iterable<Components...>
page_allocator	./src/flecs.c	/^    ecs_block_allocator_t page_allocator;$/;"	m	struct:ecs_entity_index_t	typeref:typename:ecs_block_allocator_t	file:
page_allocator	./src/flecs.h	/^    struct ecs_block_allocator_t *page_allocator;$/;"	m	struct:ecs_sparse_t	typeref:struct:ecs_block_allocator_t *
page_iterable	./src/flecs.h	/^    page_iterable(int32_t offset, int32_t limit, Iterable *it) $/;"	f	struct:flecs::page_iterable
page_iterable	./src/flecs.h	/^struct page_iterable final : iterable<Components...> {$/;"	s	namespace:flecs
pages	./src/flecs.c	/^    ecs_vec_t pages;$/;"	m	struct:ecs_entity_index_t	typeref:typename:ecs_vec_t	file:
pages	./src/flecs.h	/^    ecs_vec_t pages;         \/* Chunks with sparse arrays & data *\/$/;"	m	struct:ecs_sparse_t	typeref:typename:ecs_vec_t
pair	./src/flecs.h	/^    pair(const type& v) : ref_(const_cast<type&>(v)) { }$/;"	f	struct:flecs::pair
pair	./src/flecs.h	/^    pair(type& v) : ref_(v) { }$/;"	f	struct:flecs::pair
pair	./src/flecs.h	/^inline flecs::id iter::pair(int32_t index) const {$/;"	f	class:flecs::iter	typeref:typename:flecs::id
pair	./src/flecs.h	/^inline flecs::id world::pair() const {$/;"	f	class:flecs::world	typeref:typename:flecs::id
pair	./src/flecs.h	/^inline flecs::id world::pair(entity_t o) const {$/;"	f	class:flecs::world	typeref:typename:flecs::id
pair	./src/flecs.h	/^inline flecs::id world::pair(entity_t r, entity_t o) const {$/;"	f	class:flecs::world	typeref:typename:flecs::id
pair	./src/flecs.h	/^struct pair : _::pair_base {$/;"	s	namespace:flecs
pair	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        pair(std::piecewise_construct_t \/*unused*\/, std::tuple<U1...> a,$/;"	f	struct:robin_hood::pair
pair	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    constexpr pair() noexcept(noexcept(U1()) && noexcept(U2()))$/;"	f	struct:robin_hood::pair
pair	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    constexpr pair(T1&& a, T2&& b) noexcept(noexcept($/;"	f	struct:robin_hood::pair
pair	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    constexpr pair(U1&& a, U2&& b) noexcept(noexcept(T1(std::forward<U1>($/;"	f	struct:robin_hood::pair
pair	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    explicit constexpr pair(std::pair<T1, T2> const& o) noexcept($/;"	f	struct:robin_hood::pair
pair	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    explicit constexpr pair(std::pair<T1, T2>&& o) noexcept(noexcept($/;"	f	struct:robin_hood::pair
pair	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    pair(std::tuple<U1...>& a, std::tuple<U2...>& b, ROBIN_HOOD_STD::index_sequence<I1...> \/*un/;"	f	struct:robin_hood::pair
pair	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^struct pair {$/;"	s	namespace:robin_hood
pair	./vendor/STC/misc/examples/sortedmaps/listmap.c	/^    typedef struct {int a; const char* b;} pair;$/;"	t	function:main	typeref:struct:main::__anon4bd0e05d0108	file:
pair	./vendor/STC/misc/examples/sortedmaps/smap_find.c	/^    typedef vec_istr_value pair;$/;"	t	function:main	typeref:typename:vec_istr_value	file:
pair_base	./src/flecs.h	/^    struct pair_base { };$/;"	s	namespace:flecs::_
pair_count	./src/flecs.h	/^        ecs_metric_t pair_count;          \/**< Number of pair ids *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1008	typeref:typename:ecs_metric_t
pair_first_t	./src/flecs.h	/^using pair_first_t = transcribe_cv_t<remove_reference_t<P>, typename raw_type_t<P>::first>;$/;"	t	namespace:flecs	typeref:typename:transcribe_cv_t<remove_reference_t<P>,typename raw_type_t<P>::first>
pair_id_count	./src/flecs.h	/^    int32_t pair_id_count;            \/**< Number of pair ids in the world *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int32_t
pair_object	./src/flecs.h	/^using pair_object = pair<First, Second>;$/;"	t	namespace:flecs	typeref:typename:pair<First,Second>
pair_second_t	./src/flecs.h	/^using pair_second_t = transcribe_cv_t<remove_reference_t<P>, typename raw_type_t<P>::second>;$/;"	t	namespace:flecs	typeref:typename:transcribe_cv_t<remove_reference_t<P>,typename raw_type_t<P>::second>
pair_type_t	./src/flecs.h	/^using pair_type_t = transcribe_cvp_t<remove_reference_t<P>, typename raw_type_t<P>::type>;$/;"	t	namespace:flecs	typeref:typename:transcribe_cvp_t<remove_reference_t<P>,typename raw_type_t<P>::type>
pale_golden_rod	./vendor/fmt/include/color.h	/^  pale_golden_rod = 0xEEE8AA,          \/\/ rgb(238,232,170)$/;"	e	enum:color
pale_green	./vendor/fmt/include/color.h	/^  pale_green = 0x98FB98,               \/\/ rgb(152,251,152)$/;"	e	enum:color
pale_turquoise	./vendor/fmt/include/color.h	/^  pale_turquoise = 0xAFEEEE,           \/\/ rgb(175,238,238)$/;"	e	enum:color
pale_violet_red	./vendor/fmt/include/color.h	/^  pale_violet_red = 0xDB7093,          \/\/ rgb(219,112,147)$/;"	e	enum:color
papaya_whip	./vendor/fmt/include/color.h	/^  papaya_whip = 0xFFEFD5,              \/\/ rgb(255,239,213)$/;"	e	enum:color
param	./src/flecs.h	/^    T* param() {$/;"	f	struct:flecs::iter	typeref:typename:T *
param	./src/flecs.h	/^    void *param;                  \/* Param passed to ecs_run *\/$/;"	m	struct:ecs_iter_t	typeref:typename:void *
param	./src/flecs.h	/^    void *param;$/;"	m	struct:ecs_event_desc_t	typeref:typename:void *
param	./src/flecs.h	/^    void* param() {$/;"	f	struct:flecs::iter	typeref:typename:void *
param_count	./src/flecs.c	/^    int32_t param_count;$/;"	m	struct:__anon7d4a41770708	typeref:typename:int32_t	file:
param_count	./src/flecs.h	/^    int32_t param_count;$/;"	m	struct:__anon7d4a417c0b08	typeref:typename:int32_t
param_offsets	./src/flecs.c	/^    int32_t param_offsets[ECS_HTTP_QUERY_PARAM_COUNT_MAX];$/;"	m	struct:__anon7d4a41770708	typeref:typename:int32_t[]	file:
param_value_offsets	./src/flecs.c	/^    int32_t param_value_offsets[ECS_HTTP_QUERY_PARAM_COUNT_MAX];$/;"	m	struct:__anon7d4a41770708	typeref:typename:int32_t[]	file:
params	./src/flecs.c	/^    ecs_meta_token_t params;$/;"	m	struct:meta_type_t	typeref:typename:ecs_meta_token_t	file:
params	./src/flecs.h	/^    ecs_http_key_value_t params[ECS_HTTP_HEADER_COUNT_MAX];$/;"	m	struct:__anon7d4a417c0b08	typeref:typename:ecs_http_key_value_t[]
params	./vendor/raylib5/include/raylib.h	/^    float params[4];        \/\/ Material generic parameters (if required)$/;"	m	struct:Material	typeref:typename:float[4]
params	./vendor/raylib5/include/raylib.h	/^    int params[4];                  \/\/ Event parameters (if required)$/;"	m	struct:AutomationEvent	typeref:typename:int[4]
parent	./src/flecs.c	/^    ecs_id_record_t *parent;$/;"	m	struct:ecs_id_record_t	typeref:typename:ecs_id_record_t *	file:
parent	./src/flecs.c	/^    ecs_query_t *parent;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_query_t *	file:
parent	./src/flecs.h	/^    Base& parent() {$/;"	f	struct:flecs::term_id_builder_i	typeref:typename:Base &
parent	./src/flecs.h	/^    ecs_query_t *parent;$/;"	m	struct:ecs_query_desc_t	typeref:typename:ecs_query_t *
parent	./src/flecs.h	/^    struct ecs_expr_var_scope_t *parent;$/;"	m	struct:ecs_expr_var_scope_t	typeref:struct:ecs_expr_var_scope_t *
parent	./src/flecs.h	/^inline flecs::entity entity_view::parent() const {$/;"	f	class:flecs::entity_view	typeref:typename:flecs::entity
parent	./vendor/raylib5/include/raylib.h	/^    int parent;             \/\/ Bone parent$/;"	m	struct:BoneInfo	typeref:typename:int
parent_query	./src/flecs.c	/^    ecs_query_t *parent_query;$/;"	m	struct:ecs_query_event_t	typeref:typename:ecs_query_t *	file:
parity	./vendor/fmt/include/format-inl.h	/^    bool parity;$/;"	m	struct:detail::dragonbox::cache_accessor::compute_mul_parity_result	typeref:typename:bool
parse	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR auto parse(ParseContext& ctx) -> const Char* {$/;"	f	struct:detail::native_formatter	typeref:typename:const Char *
parse	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR auto parse(basic_format_parse_context<Char>& ctx)$/;"	f	struct:formatter	typeref:typename:decltype(ctx.begin ())
parse	./vendor/fmt/include/format-inl.h	/^  FMT_CONSTEXPR auto parse(format_parse_context& ctx)$/;"	f	struct:formatter	typeref:typename:format_parse_context::iterator
parse	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR auto parse(ParseContext& ctx) -> const char* {$/;"	f	struct:formatter	typeref:typename:const char *
parse	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR auto parse(ParseContext& ctx) -> decltype(ctx.begin()) {$/;"	f	struct:formatter	typeref:typename:decltype(ctx.begin ())
parse	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR auto parse(basic_format_parse_context<Char>& ctx)$/;"	f	struct:nested_formatter	typeref:typename:decltype(ctx.begin ())
parse	./vendor/fmt/include/ranges.h	/^  FMT_CONSTEXPR auto parse(ParseContext& ctx) -> const Char* {$/;"	f	struct:formatter	typeref:typename:const Char *
parse	./vendor/fmt/include/ranges.h	/^  FMT_CONSTEXPR auto parse(ParseContext& ctx) -> decltype(ctx.begin()) {$/;"	f	struct:formatter	typeref:typename:decltype(ctx.begin ())
parse	./vendor/fmt/include/ranges.h	/^  FMT_CONSTEXPR auto parse(ParseContext& ctx) -> decltype(ctx.begin()) {$/;"	f	struct:range_formatter	typeref:typename:decltype(ctx.begin ())
parse	./vendor/fmt/include/std.h	/^  FMT_CONSTEXPR auto parse(ParseContext& ctx) -> decltype(ctx.begin()) {$/;"	f	struct:formatter	typeref:typename:decltype(ctx.begin ())
parse	./vendor/fmt/include/std.h	/^  FMT_CONSTEXPR auto parse(basic_format_parse_context<Char>& ctx)$/;"	f	struct:formatter	typeref:typename:decltype(ctx.begin ())
parse	./vendor/fmt/include/std.h	/^  template <typename ParseContext> FMT_CONSTEXPR auto parse(ParseContext& ctx) {$/;"	f	struct:formatter	typeref:typename:FMT_CONSTEXPR auto
parse_align	./vendor/fmt/include/base.h	/^FMT_CONSTEXPR inline auto parse_align(char c) -> align_t {$/;"	f	namespace:detail	typeref:typename:align_t
parse_align	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto parse_align(const Char* begin, const Char* end,$/;"	f	namespace:detail	typeref:typename:const Char *
parse_arg_id	./vendor/fmt/include/base.h	/^FMT_CONSTEXPR auto parse_arg_id(const Char* begin, const Char* end,$/;"	f	namespace:detail	typeref:typename:const Char *
parse_arg_id	./vendor/fmt/include/compile.h	/^constexpr auto parse_arg_id(const Char* begin, const Char* end) {$/;"	f	namespace:detail	typeref:typename:auto
parse_arg_id_result	./vendor/fmt/include/compile.h	/^template <typename Char> struct parse_arg_id_result {$/;"	s	namespace:detail
parse_c_digit	./src/flecs.c	/^const char* parse_c_digit($/;"	f	typeref:typename:const char *	file:
parse_c_identifier	./src/flecs.c	/^const char* parse_c_identifier($/;"	f	typeref:typename:const char *	file:
parse_chrono_format	./vendor/fmt/include/chrono.h	/^FMT_CONSTEXPR auto parse_chrono_format(const Char* begin, const Char* end,$/;"	f	namespace:detail	typeref:typename:const Char *
parse_cmd_line	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    bool parse_cmd_line(int argc, const char* const argv[], const char* cmd_prefix = "-")$/;"	f	class:picobench::runner	typeref:typename:bool
parse_content_length	./src/flecs.c	/^    bool parse_content_length;$/;"	m	struct:__anon7d4a41770708	typeref:typename:bool	file:
parse_context	./vendor/fmt/include/base.h	/^  using parse_context = typename Context::parse_context_type;$/;"	t	struct:detail::custom_value	typeref:typename:Context::parse_context_type
parse_context	./vendor/fmt/include/format.h	/^    basic_format_parse_context<Char> parse_context;$/;"	m	struct:detail::vformat_to::format_handler	typeref:typename:basic_format_parse_context<Char>
parse_context_type	./vendor/fmt/include/base.h	/^  using parse_context_type = basic_format_parse_context<char>;$/;"	t	class:context	typeref:typename:basic_format_parse_context<char>
parse_context_type	./vendor/fmt/include/base.h	/^  using parse_context_type = compile_parse_context<Char>;$/;"	t	class:detail::format_string_checker	typeref:typename:compile_parse_context<Char>
parse_context_type	./vendor/fmt/include/format.h	/^  using parse_context_type = basic_format_parse_context<Char>;$/;"	t	class:generic_context	typeref:typename:basic_format_parse_context<Char>
parse_context_type	./vendor/fmt/include/printf.h	/^  using parse_context_type = basic_format_parse_context<Char>;$/;"	t	class:basic_printf_context	typeref:typename:basic_format_parse_context<Char>
parse_dynamic_spec	./vendor/fmt/include/base.h	/^FMT_CONSTEXPR auto parse_dynamic_spec(const Char* begin, const Char* end,$/;"	f	namespace:detail	typeref:typename:const Char *
parse_empty_specs	./vendor/fmt/include/ranges.h	/^template <typename ParseContext> struct parse_empty_specs {$/;"	s	namespace:detail
parse_flags	./vendor/fmt/include/printf.h	/^void parse_flags(format_specs& specs, const Char*& it, const Char* end) {$/;"	f	namespace:detail	typeref:typename:void
parse_float_type_spec	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR inline auto parse_float_type_spec(const format_specs& specs)$/;"	f	namespace:detail	typeref:typename:float_specs
parse_format_specs	./vendor/fmt/include/base.h	/^FMT_CONSTEXPR auto parse_format_specs(ParseContext& ctx)$/;"	f	namespace:detail	typeref:typename:decltype(ctx.begin ())
parse_format_specs	./vendor/fmt/include/base.h	/^FMT_CONSTEXPR auto parse_format_specs(const Char* begin, const Char* end,$/;"	f	namespace:detail	typeref:typename:const Char *
parse_format_string	./vendor/fmt/include/base.h	/^FMT_CONSTEXPR void parse_format_string(basic_string_view<Char> format_str,$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR void
parse_func	./vendor/fmt/include/base.h	/^  using parse_func = const Char* (*)(parse_context_type&);$/;"	t	class:detail::format_string_checker
parse_funcs_	./vendor/fmt/include/base.h	/^  parse_func parse_funcs_[num_args > 0 ? static_cast<size_t>(num_args) : 1];$/;"	m	class:detail::format_string_checker	typeref:typename:parse_func[]
parse_header	./vendor/fmt/include/printf.h	/^auto parse_header(const Char*& it, const Char* end, format_specs& specs,$/;"	f	namespace:detail	typeref:typename:int
parse_nonnegative_int	./vendor/fmt/include/base.h	/^FMT_CONSTEXPR auto parse_nonnegative_int(const Char*& begin, const Char* end,$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR auto
parse_precision	./vendor/fmt/include/base.h	/^FMT_CONSTEXPR auto parse_precision(const Char* begin, const Char* end,$/;"	f	namespace:detail	typeref:typename:const Char *
parse_printf_presentation_type	./vendor/fmt/include/printf.h	/^inline auto parse_printf_presentation_type(char c, type t, bool& upper)$/;"	f	namespace:detail	typeref:typename:presentation_type
parse_replacement_field	./vendor/fmt/include/base.h	/^FMT_CONSTEXPR FMT_INLINE auto parse_replacement_field(const Char* begin,$/;"	f	namespace:detail	typeref:typename:const Char *
parse_replacement_field_then_tail	./vendor/fmt/include/compile.h	/^constexpr auto parse_replacement_field_then_tail(S fmt) {$/;"	f	namespace:detail	typeref:typename:auto
parse_specs	./vendor/fmt/include/compile.h	/^constexpr parse_specs_result<T, Char> parse_specs(basic_string_view<Char> str,$/;"	f	namespace:detail	typeref:typename:parse_specs_result<T,Char>
parse_specs_result	./vendor/fmt/include/compile.h	/^template <typename T, typename Char> struct parse_specs_result {$/;"	s	namespace:detail
parse_tail	./vendor/fmt/include/compile.h	/^constexpr auto parse_tail(T head, S fmt) {$/;"	f	namespace:detail	typeref:typename:auto
parse_text	./vendor/fmt/include/compile.h	/^constexpr size_t parse_text(basic_string_view<Char> str, size_t pos) {$/;"	f	namespace:detail	typeref:typename:size_t
partial	./src/flecs.h	/^    bool partial;          \/**< Is the reflection data a partial type description *\/$/;"	m	struct:EcsMetaType	typeref:typename:bool
partition	./vendor/STC/misc/examples/spans/matmult.c	/^Partition partition(Mat2 A)$/;"	f	typeref:typename:Partition
path	./src/flecs.h	/^    char *path;$/;"	m	struct:__anon7d4a417c0b08	typeref:typename:char *
path	./src/flecs.h	/^    flecs::string path(const char *sep = "::", const char *init_sep = "::") const {$/;"	f	struct:flecs::entity_view	typeref:typename:flecs::string
path	./vendor/fmt/include/std.h	/^class path : public std::filesystem::path {$/;"	c
path_from	./src/flecs.h	/^    flecs::string path_from(const char *sep = "::", const char *init_sep = "::") const {$/;"	f	struct:flecs::entity_view	typeref:typename:flecs::string
path_from	./src/flecs.h	/^    flecs::string path_from(flecs::entity_t parent, const char *sep = "::", const char *init_sep/;"	f	struct:flecs::entity_view	typeref:typename:flecs::string
path_join	./vendor/STC/src/singleheader.py	/^from os.path import dirname, join as path_join, abspath, basename, exists$/;"	Y	nameref:unknown:join
path_type_	./vendor/fmt/include/std.h	/^  char path_type_ = 0;$/;"	m	struct:formatter	typeref:typename:char
paths	./vendor/raylib5/include/raylib.h	/^    char **paths;                   \/\/ Filepaths entries$/;"	m	struct:FilePathList	typeref:typename:char **
pattern	./vendor/STC/misc/examples/regularexpressions/regex2.c	/^    struct { const char *pattern, *input; } s[] = {$/;"	m	struct:main::__anon5aa815230108	typeref:typename:const char *	file:
pcg32	./vendor/STC/misc/benchmarks/various/prng_bench.cpp	/^uint32_t pcg32(uint32_t s[2]) {$/;"	f	typeref:typename:uint32_t
pd	./vendor/STC/misc/benchmarks/plotbench/plot.py	/^import pandas as pd$/;"	I	nameref:module:pandas
pd	./vendor/STC/src/utf8_tab.py	/^import pandas as pd$/;"	I	nameref:module:pandas
peach_puff	./vendor/fmt/include/color.h	/^  peach_puff = 0xFFDAB9,               \/\/ rgb(255,218,185)$/;"	e	enum:color
pending_buffer	./src/flecs.c	/^    ecs_sparse_t *pending_buffer;    \/* sparse<table_id, ecs_table_t*> *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_sparse_t *	file:
pending_tables	./src/flecs.c	/^    ecs_sparse_t *pending_tables;    \/* sparse<table_id, ecs_table_t*> *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_sparse_t *	file:
perf_trace	./src/flecs.h	/^    bool perf_trace;                \/**< Is this a perf tracing build *\/$/;"	m	struct:ecs_build_info_t	typeref:typename:bool
performance	./src/flecs.h	/^    } performance;$/;"	m	struct:ecs_world_stats_t	typeref:struct:ecs_world_stats_t::__anon7d4a417c1508
period	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    typedef std::nano period;$/;"	t	struct:picobench::high_res_clock	typeref:typename:std::nano
period	./vendor/fmt/include/chrono.h	/^    using period = typename Duration::period;$/;"	t	function:formatter::format	typeref:typename:Duration::period
peru	./vendor/fmt/include/color.h	/^  peru = 0xCD853F,                     \/\/ rgb(205,133,63)$/;"	e	enum:color
ph	./vendor/STC/misc/examples/coroutines/dining_philosophers.c	/^    struct Philosopher ph[num_philosophers];$/;"	m	struct:Dining	typeref:struct:Philosopher[]	file:
philosopher	./vendor/STC/misc/examples/coroutines/dining_philosophers.c	/^int philosopher(struct Philosopher* p)$/;"	f	typeref:typename:int
physics_update	./src/main.c	/^void physics_update(double delta)$/;"	f	typeref:typename:void
picobench	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^namespace picobench$/;"	n
picostring	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    explicit picostring(const char* text)$/;"	f	class:picobench::picostring
picostring	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^class picostring$/;"	c	namespace:picobench
pink	./vendor/fmt/include/color.h	/^  pink = 0xFFC0CB,                     \/\/ rgb(255,192,203)$/;"	e	enum:color
pipe	./vendor/fmt/include/os.h	/^struct FMT_API pipe {$/;"	s
pipeline	./src/flecs.c	/^    ecs_entity_t pipeline;           \/* Current pipeline *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_entity_t	file:
pipeline	./src/flecs.h	/^    pipeline(world_t *world, ecs_pipeline_desc_t *desc) $/;"	f	struct:flecs::pipeline
pipeline	./src/flecs.h	/^inline flecs::pipeline_builder<> world::pipeline() const {$/;"	f	class:flecs::world	typeref:typename:flecs::pipeline_builder<>
pipeline	./src/flecs.h	/^struct pipeline : entity {$/;"	s	namespace:flecs
pipeline_build_count	./src/flecs.h	/^        ecs_metric_t pipeline_build_count; \/**< Number of system pipeline rebuilds (occurs when/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1408	typeref:typename:ecs_metric_t
pipeline_build_count_total	./src/flecs.h	/^    int64_t pipeline_build_count_total; \/**< Total number of pipeline builds *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int64_t
pipeline_builder	./src/flecs.h	/^    pipeline_builder(flecs::world_t* world, flecs::entity_t id = 0)$/;"	f	struct:flecs::pipeline_builder
pipeline_builder	./src/flecs.h	/^struct pipeline_builder final : _::pipeline_builder_base<Components...> {$/;"	s	namespace:flecs
pipeline_builder_base	./src/flecs.h	/^    using pipeline_builder_base = builder<$/;"	t	namespace:flecs::_	typeref:typename:builder<pipeline,ecs_pipeline_desc_t,pipeline_builder<Components...>,pipeline_builder_i,Components...>
pipeline_builder_i	./src/flecs.h	/^    pipeline_builder_i(ecs_pipeline_desc_t *desc, int32_t term_index = 0) $/;"	f	struct:flecs::pipeline_builder_i
pipeline_builder_i	./src/flecs.h	/^struct pipeline_builder_i : query_builder_i<Base> {$/;"	s	namespace:flecs
pivot_term	./src/flecs.h	/^    int32_t pivot_term;$/;"	m	struct:ecs_filter_iter_t	typeref:typename:int32_t
place_and_shift_up	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    void place_and_shift_up(Bucket bucket, value_idx_type place) {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:void
placement_new_tag	./src/flecs.h	/^constexpr placement_new_tag_t placement_new_tag{};$/;"	v	namespace:flecs::_	typeref:typename:placement_new_tag_t
placement_new_tag_t	./src/flecs.h	/^struct placement_new_tag_t{};$/;"	s	namespace:flecs::_
player_glyph	./src/main.c	/^Glyph player_glyph;$/;"	v	typeref:typename:Glyph
plecs_apply_annotations	./src/flecs.c	/^void plecs_apply_annotations($/;"	f	typeref:typename:void	file:
plecs_apply_with_frame	./src/flecs.c	/^void plecs_apply_with_frame($/;"	f	typeref:typename:void	file:
plecs_clear_annotations	./src/flecs.c	/^void plecs_clear_annotations($/;"	f	typeref:typename:void	file:
plecs_create_term	./src/flecs.c	/^int plecs_create_term($/;"	f	typeref:typename:int	file:
plecs_ensure_entity	./src/flecs.c	/^ecs_entity_t plecs_ensure_entity($/;"	f	typeref:typename:ecs_entity_t	file:
plecs_ensure_term_id	./src/flecs.c	/^ecs_entity_t plecs_ensure_term_id($/;"	f	typeref:typename:ecs_entity_t	file:
plecs_free_all_with_frames	./src/flecs.c	/^void plecs_free_all_with_frames($/;"	f	typeref:typename:void	file:
plecs_free_with_frame	./src/flecs.c	/^void plecs_free_with_frame($/;"	f	typeref:typename:void	file:
plecs_from_file	./src/flecs.h	/^int plecs_from_file(const char *filename) const {$/;"	f	struct:flecs::world	typeref:typename:int
plecs_from_str	./src/flecs.h	/^int plecs_from_str(const char *name, const char *str) const {$/;"	f	struct:flecs::world	typeref:typename:int
plecs_is_newline_comment	./src/flecs.c	/^bool plecs_is_newline_comment($/;"	f	typeref:typename:bool	file:
plecs_lookup	./src/flecs.c	/^ecs_entity_t plecs_lookup($/;"	f	typeref:typename:ecs_entity_t	file:
plecs_lookup_action	./src/flecs.c	/^ecs_entity_t plecs_lookup_action($/;"	f	typeref:typename:ecs_entity_t	file:
plecs_parse_annotation	./src/flecs.c	/^const char* plecs_parse_annotation($/;"	f	typeref:typename:const char *	file:
plecs_parse_assembly_stmt	./src/flecs.c	/^const char* plecs_parse_assembly_stmt($/;"	f	typeref:typename:const char *	file:
plecs_parse_assign_expr	./src/flecs.c	/^const char* plecs_parse_assign_expr($/;"	f	typeref:typename:const char *	file:
plecs_parse_assign_stmt	./src/flecs.c	/^const char* plecs_parse_assign_stmt($/;"	f	typeref:typename:const char *	file:
plecs_parse_assign_var_expr	./src/flecs.c	/^const char* plecs_parse_assign_var_expr($/;"	f	typeref:typename:const char *	file:
plecs_parse_assign_with_stmt	./src/flecs.c	/^const char* plecs_parse_assign_with_stmt($/;"	f	typeref:typename:const char *	file:
plecs_parse_assign_with_var	./src/flecs.c	/^const char* plecs_parse_assign_with_var($/;"	f	typeref:typename:const char *	file:
plecs_parse_const_stmt	./src/flecs.c	/^const char* plecs_parse_const_stmt($/;"	f	typeref:typename:const char *	file:
plecs_parse_fluff	./src/flecs.c	/^const char* plecs_parse_fluff($/;"	f	typeref:typename:const char *	file:
plecs_parse_inherit_stmt	./src/flecs.c	/^const char* plecs_parse_inherit_stmt($/;"	f	typeref:typename:const char *	file:
plecs_parse_module_stmt	./src/flecs.c	/^const char* plecs_parse_module_stmt($/;"	f	typeref:typename:const char *	file:
plecs_parse_plecs_term	./src/flecs.c	/^const char *plecs_parse_plecs_term($/;"	f	typeref:typename:const char *	file:
plecs_parse_prop_stmt	./src/flecs.c	/^const char* plecs_parse_prop_stmt($/;"	f	typeref:typename:const char *	file:
plecs_parse_scope_close	./src/flecs.c	/^const char* plecs_parse_scope_close($/;"	f	typeref:typename:const char *	file:
plecs_parse_scope_open	./src/flecs.c	/^const char* plecs_parse_scope_open($/;"	f	typeref:typename:const char *	file:
plecs_parse_stmt	./src/flecs.c	/^const char* plecs_parse_stmt($/;"	f	typeref:typename:const char *	file:
plecs_parse_using_stmt	./src/flecs.c	/^const char* plecs_parse_using_stmt($/;"	f	typeref:typename:const char *	file:
plecs_parse_var_as_component	./src/flecs.c	/^const char* plecs_parse_var_as_component($/;"	f	typeref:typename:const char *	file:
plecs_parse_var_type	./src/flecs.c	/^const char* plecs_parse_var_type($/;"	f	typeref:typename:const char *	file:
plecs_parse_with_stmt	./src/flecs.c	/^const char* plecs_parse_with_stmt($/;"	f	typeref:typename:const char *	file:
plecs_pred_is_subj	./src/flecs.c	/^bool plecs_pred_is_subj($/;"	f	typeref:typename:bool	file:
plecs_push_using	./src/flecs.c	/^void plecs_push_using($/;"	f	typeref:typename:void	file:
plecs_set_mask_to_name	./src/flecs.c	/^const char* plecs_set_mask_to_name($/;"	f	typeref:typename:const char *	file:
plecs_state_t	./src/flecs.c	/^} plecs_state_t;$/;"	t	typeref:struct:__anon7d4a41771908	file:
plecs_trim_annot	./src/flecs.c	/^char* plecs_trim_annot($/;"	f	typeref:typename:char *	file:
plecs_with_value_t	./src/flecs.c	/^} plecs_with_value_t;$/;"	t	typeref:struct:__anon7d4a41771808	file:
plt	./vendor/STC/misc/benchmarks/plotbench/plot.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plum	./vendor/fmt/include/color.h	/^  plum = 0xDDA0DD,                     \/\/ rgb(221,160,221)$/;"	e	enum:color
pmr	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^namespace pmr {$/;"	n	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE
pntlist	./vendor/STC/misc/examples/linkedlists/new_list.c	/^    list_pnt pntlist;$/;"	m	struct:__anonb8bcd80c0108	typeref:typename:list_pnt	file:
pntmap	./vendor/STC/misc/examples/hashmaps/new_map.c	/^    hmap_pnt pntmap;$/;"	m	struct:MyStruct	typeref:typename:hmap_pnt	file:
pntmap	./vendor/STC/misc/examples/sortedmaps/new_smap.c	/^    PMap pntmap;$/;"	m	struct:__anon6b61945d0108	typeref:typename:PMap	file:
pntvec	./vendor/STC/misc/examples/vectors/new_vec.c	/^    vec_pnt pntvec;$/;"	m	struct:MyStruct	typeref:typename:vec_pnt	file:
point	./vendor/STC/misc/examples/mixed/astar.c	/^point;$/;"	t	typeref:struct:__anon14ad28530108	file:
point	./vendor/raylib5/include/raylib.h	/^    Vector3 point;          \/\/ Point of the nearest hit$/;"	m	struct:RayCollision	typeref:typename:Vector3
point_cmp	./vendor/STC/misc/examples/linkedlists/new_list.c	/^int point_cmp(const Point* a, const Point* b) {$/;"	f	typeref:typename:int
point_cmp	./vendor/STC/misc/examples/sortedmaps/new_smap.c	/^int point_cmp(const Point* a, const Point* b) {$/;"	f	typeref:typename:int
point_cmp_priority	./vendor/STC/misc/examples/mixed/astar.c	/^point_cmp_priority(const point* a, const point* b)$/;"	f	typeref:typename:int
point_equal	./vendor/STC/misc/examples/mixed/astar.c	/^point_equal(const point* a, const point* b)$/;"	f	typeref:typename:int
point_from	./vendor/STC/misc/examples/mixed/astar.c	/^point_from(const cstr* maze, const char* c, int width)$/;"	f	typeref:typename:point
point_index	./vendor/STC/misc/examples/mixed/astar.c	/^point_index(const point* p)$/;"	f	typeref:typename:int
point_init	./vendor/STC/misc/examples/mixed/astar.c	/^point_init(int x, int y, int width)$/;"	f	typeref:typename:point
point_key_cmp	./vendor/STC/misc/examples/mixed/astar.c	/^point_key_cmp(const point* a, const point* b)$/;"	f	typeref:typename:int
pointer	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        using pointer = typename std::conditional<IsConst, value_type const*, value_type*>::type/;"	t	class:robin_hood::detail::Table::Iter	typeref:typename:std::conditional<IsConst,value_type const *,value_type * >::type
pointer	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^        using pointer = typename std::conditional_t<IsConst, segmented_vector::const_pointer, se/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector::iter_t	typeref:typename:std::conditional_t<IsConst,segmented_vector::const_pointer,segmented_vector::pointer>
pointer	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using pointer = typename std::allocator_traits<allocator_type>::pointer;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:std::allocator_traits<allocator_type>::pointer
pointer	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using pointer = typename value_container_type::pointer;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:value_container_type::pointer
pointer	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        typedef const value_pair*          pointer;$/;"	t	class:emhash7::HashMap::const_iterator	typeref:typename:const value_pair *
pointer	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        typedef value_pair*               pointer;$/;"	t	class:emhash7::HashMap::iterator	typeref:typename:value_pair *
pointer	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^        using pointer = ValueType *;$/;"	t	struct:ska::detailv3::sherwood_v3_table::templated_iterator	typeref:typename:ValueType *
pointer	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    using pointer = value_type *;$/;"	t	class:ska::detailv3::sherwood_v3_table	typeref:typename:value_type *
pointer	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^    using pointer = value_type*;$/;"	t	class:tsl::detail_robin_hash::robin_hash::robin_iterator	typeref:typename:value_type *
pointer	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  using pointer = value_type*;$/;"	t	class:tsl::detail_robin_hash::robin_hash	typeref:typename:value_type *
pointer	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  using pointer = typename ht::pointer;$/;"	t	class:tsl::robin_map	typeref:typename:ht::pointer
pointer	./vendor/fmt/include/base.h	/^    const void* pointer;$/;"	m	union:detail::value::__anonea363bd9060a	typeref:typename:const void *
pointer	./vendor/fmt/include/base.h	/^  pointer = 3,  \/\/ 'p'$/;"	e	enum:presentation_type
pointer	./vendor/fmt/include/base.h	/^  using pointer = T*;$/;"	t	class:basic_appender	typeref:typename:T *
pointer_set	./vendor/fmt/include/base.h	/^  pointer_set = set(type::pointer_type)$/;"	e	enum:detail::__anonea363bd90103
pointer_type	./vendor/fmt/include/base.h	/^  pointer_type,$/;"	e	enum:detail::type
points	./vendor/STC/misc/examples/algorithms/shape.c	/^    PointVec points;$/;"	m	struct:__anon6b1a6e6c0308	typeref:typename:PointVec	file:
points	./vendor/STC/misc/examples/algorithms/shape.cpp	/^    private: std::vector<Point> points;$/;"	m	struct:Polygon	typeref:typename:std::vector<Point>	file:
poly	./src/flecs.h	/^    ecs_poly_t *poly;          \/**< Pointer to poly object *\/$/;"	m	struct:EcsPoly	typeref:typename:ecs_poly_t *
pop	./src/flecs.h	/^    int pop() {$/;"	f	struct:flecs::cursor	typeref:typename:int
pop	./src/flecs.h	/^inline void pop() {$/;"	f	namespace:flecs::log	typeref:typename:void
pop_back	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    void pop_back() {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:void
populate	./src/flecs.h	/^        void populate(const Builder& b) {$/;"	f	struct:flecs::_::sig	typeref:typename:void
populate	./src/flecs.h	/^    bool populate(const ecs_iter_t *iter) {$/;"	f	struct:flecs::_::term_ptrs	typeref:typename:bool
populate	./src/flecs.h	/^    bool populate(const ecs_iter_t *iter, size_t index, T, Targs... comps) {$/;"	f	struct:flecs::_::term_ptrs	typeref:typename:bool
populate	./src/flecs.h	/^    bool populate(const ecs_iter_t*, size_t) { return false; }$/;"	f	struct:flecs::_::term_ptrs	typeref:typename:bool
port	./src/flecs.c	/^    uint16_t port;$/;"	m	struct:ecs_http_server_t	typeref:typename:uint16_t	file:
port	./src/flecs.h	/^    char port[16];$/;"	m	struct:__anon7d4a417c0808	typeref:typename:char[16]
port	./src/flecs.h	/^    uint16_t port;                    \/**< HTTP port *\/$/;"	m	struct:__anon7d4a417c0d08	typeref:typename:uint16_t
port	./src/flecs.h	/^    uint16_t port;            \/**< HTTP port used by REST API *\/$/;"	m	struct:ecs_app_desc_t	typeref:typename:uint16_t
port	./src/flecs.h	/^    uint16_t port;      \/**< Port of server (optional, default = 27750) *\/$/;"	m	struct:__anon7d4a417c0e08	typeref:typename:uint16_t
pos	./vendor/STC/misc/examples/coroutines/coroutines.c	/^    long long result, pos;$/;"	m	struct:prime	typeref:typename:long long	file:
pos	./vendor/fmt/include/format.h	/^    int pos;$/;"	m	struct:detail::digit_grouping::next_state	typeref:typename:int
pos_x	./src/grid.h	/^	int pos_x; \/\/ TOP LEFT corner$/;"	m	struct:Tile	typeref:typename:int
pos_y	./src/grid.h	/^	int pos_y; \/\/ TOP LEFT corner$/;"	m	struct:Tile	typeref:typename:int
position	./vendor/raylib5/include/raylib.h	/^    Vector3 position;       \/\/ Camera position$/;"	m	struct:Camera3D	typeref:typename:Vector3
position	./vendor/raylib5/include/raylib.h	/^    Vector3 position;       \/\/ Ray position (origin)$/;"	m	struct:Ray	typeref:typename:Vector3
posix_adec	./src/flecs.c	/^int32_t posix_adec($/;"	f	typeref:typename:int32_t	file:
posix_ainc	./src/flecs.c	/^int32_t posix_ainc($/;"	f	typeref:typename:int32_t	file:
posix_cond_broadcast	./src/flecs.c	/^void posix_cond_broadcast($/;"	f	typeref:typename:void	file:
posix_cond_free	./src/flecs.c	/^void posix_cond_free($/;"	f	typeref:typename:void	file:
posix_cond_new	./src/flecs.c	/^ecs_os_cond_t posix_cond_new(void) {$/;"	f	typeref:typename:ecs_os_cond_t	file:
posix_cond_signal	./src/flecs.c	/^void posix_cond_signal($/;"	f	typeref:typename:void	file:
posix_cond_wait	./src/flecs.c	/^void posix_cond_wait($/;"	f	typeref:typename:void	file:
posix_int64_muldiv	./src/flecs.c	/^int64_t posix_int64_muldiv(int64_t value, int64_t numer, int64_t denom) {$/;"	f	typeref:typename:int64_t	file:
posix_ladec	./src/flecs.c	/^int64_t posix_ladec($/;"	f	typeref:typename:int64_t	file:
posix_lainc	./src/flecs.c	/^int64_t posix_lainc($/;"	f	typeref:typename:int64_t	file:
posix_mutex_free	./src/flecs.c	/^void posix_mutex_free($/;"	f	typeref:typename:void	file:
posix_mutex_lock	./src/flecs.c	/^void posix_mutex_lock($/;"	f	typeref:typename:void	file:
posix_mutex_new	./src/flecs.c	/^ecs_os_mutex_t posix_mutex_new(void) {$/;"	f	typeref:typename:ecs_os_mutex_t	file:
posix_mutex_unlock	./src/flecs.c	/^void posix_mutex_unlock($/;"	f	typeref:typename:void	file:
posix_osx_timebase	./src/flecs.c	/^static mach_timebase_info_data_t posix_osx_timebase;$/;"	v	typeref:typename:mach_timebase_info_data_t	file:
posix_sleep	./src/flecs.c	/^void posix_sleep($/;"	f	typeref:typename:void	file:
posix_thread_join	./src/flecs.c	/^void* posix_thread_join($/;"	f	typeref:typename:void *	file:
posix_thread_new	./src/flecs.c	/^ecs_os_thread_t posix_thread_new($/;"	f	typeref:typename:ecs_os_thread_t	file:
posix_thread_self	./src/flecs.c	/^ecs_os_thread_id_t posix_thread_self(void)$/;"	f	typeref:typename:ecs_os_thread_id_t	file:
posix_time_initialized	./src/flecs.c	/^static bool posix_time_initialized;$/;"	v	typeref:typename:bool	file:
posix_time_now	./src/flecs.c	/^uint64_t posix_time_now(void) {$/;"	f	typeref:typename:uint64_t	file:
posix_time_setup	./src/flecs.c	/^void posix_time_setup(void) {$/;"	f	typeref:typename:void	file:
posix_time_start	./src/flecs.c	/^static uint64_t posix_time_start;$/;"	v	typeref:typename:uint64_t	file:
post_frame_actions	./src/flecs.c	/^    ecs_vec_t post_frame_actions;$/;"	m	struct:ecs_stage_t	typeref:typename:ecs_vec_t	file:
pow10	./vendor/fmt/include/chrono.h	/^constexpr auto pow10(std::uint32_t n) -> long long {$/;"	f	namespace:detail	typeref:typename:long long
powder_blue	./vendor/fmt/include/color.h	/^  powder_blue = 0xB0E0E6,              \/\/ rgb(176,224,230)$/;"	e	enum:color
power	./src/flecs.h	/^    int32_t power;  \/**< Power to apply to factor (e.g. "1", "3", "-9") *\/$/;"	m	struct:ecs_unit_translation_t	typeref:typename:int32_t
power_of_two_growth_policy	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^  explicit power_of_two_growth_policy(std::size_t& min_bucket_count_in_out) {$/;"	f	class:tsl::rh::power_of_two_growth_policy
power_of_two_growth_policy	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^class power_of_two_growth_policy {$/;"	c	namespace:tsl::rh
power_of_two_hash_policy	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^struct power_of_two_hash_policy$/;"	s	namespace:ska
power_of_two_std_hash	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^struct power_of_two_std_hash : std::hash<T>$/;"	s	namespace:ska
pq	./src/flecs.c	/^    ecs_pipeline_state_t* pq;        \/* Pointer to the pipeline for the workers to execute *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_pipeline_state_t *	file:
precision	./vendor/fmt/include/base.h	/^  int precision;$/;"	m	struct:format_specs	typeref:typename:int
precision	./vendor/fmt/include/base.h	/^enum class state { start, align, sign, hash, zero, width, precision, locale };$/;"	e	enum:detail::state
precision	./vendor/fmt/include/chrono.h	/^  int precision;$/;"	m	struct:detail::chrono_formatter	typeref:typename:int
precision	./vendor/fmt/include/format.h	/^  int precision;$/;"	m	struct:detail::float_specs	typeref:typename:int
precision_checker	./vendor/fmt/include/format.h	/^struct precision_checker {$/;"	s	namespace:detail
precision_ref	./vendor/fmt/include/base.h	/^  arg_ref<Char> precision_ref;$/;"	m	struct:detail::dynamic_format_specs	typeref:typename:arg_ref<Char>
precision_ref_	./vendor/fmt/include/chrono.h	/^  detail::arg_ref<Char> precision_ref_;$/;"	m	struct:formatter	typeref:typename:detail::arg_ref<Char>
predecessor_closer	./vendor/fmt/include/format.h	/^  predecessor_closer = 1,$/;"	e	enum:detail::dragon
prefab	./src/flecs.h	/^inline flecs::entity world::prefab(Args &&... args) const {$/;"	f	class:flecs::world	typeref:typename:flecs::entity
prefab	./src/flecs.h	/^inline flecs::entity world::prefab(const char *name) const {$/;"	f	class:flecs::world	typeref:typename:flecs::entity
preferred_output_filename	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    const char* preferred_output_filename() const { return _output_file; }$/;"	f	class:picobench::runner	typeref:typename:const char *
preferred_output_format	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    report_output_format preferred_output_format() const { return _output_format; }$/;"	f	class:picobench::runner	typeref:typename:report_output_format
prefix	./src/flecs.h	/^    ecs_entity_t prefix; \/**< Order of magnitude prefix relative to derived *\/$/;"	m	struct:EcsUnit	typeref:typename:ecs_entity_t
prefix	./src/flecs.h	/^    ecs_entity_t prefix;$/;"	m	struct:ecs_unit_desc_t	typeref:typename:ecs_entity_t
prefix	./vendor/fmt/include/format.h	/^  unsigned prefix;$/;"	m	struct:detail::write_int_arg	typeref:typename:unsigned
prefix_append	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR inline void prefix_append(unsigned& prefix, unsigned value) {$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR void
pres	./vendor/fmt/include/base.h	/^  using pres = presentation_type;$/;"	t	function:detail::parse_format_specs	typeref:typename:presentation_type
presentation_type	./vendor/fmt/include/base.h	/^enum class presentation_type : unsigned char {$/;"	g	typeref:typename:unsigned char
pressure	./src/flecs.h	/^struct pressure {$/;"	s	struct:flecs::units
prev	./src/flecs.c	/^    ecs_query_table_match_t *next, *prev;$/;"	m	struct:ecs_query_table_match_t	typeref:typename:ecs_query_table_match_t *	file:
prev	./src/flecs.c	/^    ecs_rule_lbl_t prev;       \/* Backtracking label (no data) *\/$/;"	m	struct:ecs_rule_op_t	typeref:typename:ecs_rule_lbl_t	file:
prev	./src/flecs.c	/^    ecs_table_t *prev;$/;"	m	struct:ecs_entity_filter_iter_t	typeref:typename:ecs_table_t *	file:
prev	./src/flecs.c	/^    int32_t prev;       \/* Prev node in list *\/$/;"	m	struct:ecs_switch_node_t	typeref:typename:int32_t	file:
prev	./src/flecs.c	/^    struct ecs_graph_edge_hdr_t *prev;$/;"	m	struct:ecs_graph_edge_hdr_t	typeref:struct:ecs_graph_edge_hdr_t *	file:
prev	./src/flecs.c	/^    struct ecs_id_record_t *prev, *next;$/;"	m	struct:ecs_id_record_elem_t	typeref:struct:ecs_id_record_t *	file:
prev	./src/flecs.c	/^    struct ecs_table_cache_hdr_t *prev, *next;$/;"	m	struct:ecs_table_cache_hdr_t	typeref:struct:ecs_table_cache_hdr_t *	file:
prev	./src/flecs.h	/^    ecs_query_table_match_t *node, *prev, *last;$/;"	m	struct:ecs_query_iter_t	typeref:typename:ecs_query_table_match_t *
prev	./src/flecs.h	/^    struct ecs_stack_cursor_t *prev;$/;"	m	struct:ecs_stack_cursor_t	typeref:struct:ecs_stack_cursor_t *
prev	./vendor/cjson/include/cJSON.h	/^    struct cJSON *prev;$/;"	m	struct:cJSON	typeref:struct:cJSON *
prev_depth	./src/flecs.h	/^    int32_t prev_depth;       \/**< Depth to restore, in case dotmember was used *\/$/;"	m	struct:ecs_meta_scope_t	typeref:typename:int32_t
prev_match_count	./src/flecs.c	/^    int32_t prev_match_count;        \/* Track if sorting is needed *\/$/;"	m	struct:ecs_query_t	typeref:typename:int32_t	file:
previous_target_entity	./src/components.h	/^	ecs_entity_t previous_target_entity;$/;"	m	struct:CameraComponent	typeref:typename:ecs_entity_t
prime	./vendor/STC/misc/examples/coroutines/coroutines.c	/^int prime(struct prime* g) {$/;"	f	typeref:typename:int
prime	./vendor/STC/misc/examples/coroutines/coroutines.c	/^struct prime {$/;"	s	file:
prime_growth_policy	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^  explicit prime_growth_policy(std::size_t& min_bucket_count_in_out) {$/;"	f	class:tsl::rh::prime_growth_policy
prime_growth_policy	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^class prime_growth_policy {$/;"	c	namespace:tsl::rh
prime_number_hash_policy	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^struct prime_number_hash_policy$/;"	s	namespace:ska
primitive	./src/flecs.h	/^inline flecs::entity world::primitive(flecs::meta::primitive_kind_t kind) {$/;"	f	class:flecs::world	typeref:typename:flecs::entity
primitive_kind_t	./src/flecs.h	/^using primitive_kind_t = ecs_primitive_kind_t;$/;"	t	namespace:flecs::meta	typeref:typename:ecs_primitive_kind_t
print	./vendor/STC/misc/examples/sortedmaps/listmap.c	/^void print(const char* lbl, const Multimap mmap)$/;"	f	typeref:typename:void
print	./vendor/fmt/include/base.h	/^FMT_INLINE void print(FILE* f, format_string<T...> fmt, T&&... args) {$/;"	f	typeref:typename:FMT_INLINE void
print	./vendor/fmt/include/base.h	/^FMT_INLINE void print(format_string<T...> fmt, T&&... args) {$/;"	f	typeref:typename:FMT_INLINE void
print	./vendor/fmt/include/color.h	/^void print(FILE* f, const text_style& ts, format_string<T...> fmt,$/;"	f	typeref:typename:void
print	./vendor/fmt/include/color.h	/^void print(const text_style& ts, format_string<T...> fmt, T&&... args) {$/;"	f	typeref:typename:void
print	./vendor/fmt/include/compile.h	/^void print(const S& fmt, const Args&... args) {$/;"	f	typeref:typename:void
print	./vendor/fmt/include/compile.h	/^void print(std::FILE* f, const S& fmt, const Args&... args) {$/;"	f	typeref:typename:void
print	./vendor/fmt/include/format-inl.h	/^FMT_FUNC void print(std::FILE* f, string_view text) {$/;"	f	namespace:detail	typeref:typename:FMT_FUNC void
print	./vendor/fmt/include/os.h	/^  inline void print(string_view fmt, const T&... args) {$/;"	f	class:buffered_file	typeref:typename:void
print	./vendor/fmt/include/os.h	/^  template <typename... T> void print(format_string<T...> fmt, T&&... args) {$/;"	f	class:ostream	typeref:typename:void
print	./vendor/fmt/include/ostream.h	/^void print(std::ostream& os, format_string<T...> fmt, T&&... args) {$/;"	f	typeref:typename:FMT_EXPORT void
print	./vendor/fmt/include/ostream.h	/^void print(std::wostream& os,$/;"	f	typeref:typename:FMT_EXPORT void
print	./vendor/fmt/include/xchar.h	/^FMT_DEPRECATED void print(const text_style& ts, wformat_string<T...> fmt,$/;"	f	typeref:typename:FMT_DEPRECATED void
print	./vendor/fmt/include/xchar.h	/^FMT_DEPRECATED void print(std::FILE* f, const text_style& ts,$/;"	f	typeref:typename:FMT_DEPRECATED void
print	./vendor/fmt/include/xchar.h	/^template <typename... T> void print(wformat_string<T...> fmt, T&&... args) {$/;"	f	typeref:typename:void
print	./vendor/fmt/include/xchar.h	/^void print(std::FILE* f, wformat_string<T...> fmt, T&&... args) {$/;"	f	typeref:typename:void
print2d	./vendor/STC/misc/examples/spans/multidim.c	/^void print2d(ispan2 ms2) {$/;"	f	typeref:typename:void
print3d	./vendor/STC/misc/examples/spans/multidim.c	/^void print3d(ispan3 ms3) {$/;"	f	typeref:typename:void
printList	./vendor/STC/misc/examples/linkedlists/intrusive.c	/^void printList(List list) {$/;"	f	typeref:typename:void
printMe	./vendor/STC/misc/examples/spans/printspan.c	/^void printMe(intspan container) {$/;"	f	typeref:typename:void
print_IList	./vendor/STC/misc/examples/linkedlists/list_splice.c	/^void print_IList(const char* s, IList list)$/;"	f	typeref:typename:void
print_elem	./vendor/STC/misc/examples/sortedmaps/smap_find.c	/^void print_elem(smap_istr_raw p) {$/;"	f	typeref:typename:void
print_errormsg	./vendor/STC/misc/tests/ctest.h	/^static void print_errormsg(const char* const fmt, ...) {$/;"	f	typeref:typename:void
print_ii	./vendor/STC/misc/examples/sortedmaps/smap_insert.c	/^void print_ii(smap_ii map) {$/;"	f	typeref:typename:void
print_index_table	./vendor/STC/src/utf8_tab.py	/^def print_index_table(name, indtab):$/;"	f
print_istr	./vendor/STC/misc/examples/sortedmaps/smap_insert.c	/^void print_istr(smap_istr map) {$/;"	f	typeref:typename:void
print_phone_book	./vendor/STC/misc/examples/hashmaps/phonebook.c	/^void print_phone_book(hmap_str phone_book)$/;"	f	typeref:typename:void
print_queue	./vendor/STC/misc/examples/priorityqueues/functor.c	/^void print_queue(const char* name, IPQue_ext q) {$/;"	f	typeref:typename:void
print_table	./vendor/STC/src/utf8_tab.py	/^def print_table(name, table, style=1, bitrange=16):$/;"	f
print_time	./vendor/STC/misc/examples/coroutines/cotasks1.c	/^void print_time(void)$/;"	f	typeref:typename:void
print_time	./vendor/STC/misc/examples/coroutines/cotasks2.c	/^void print_time(void)$/;"	f	typeref:typename:void
printf	./vendor/fmt/include/printf.h	/^FMT_DEPRECATED inline auto printf(basic_string_view<wchar_t> fmt,$/;"	f	typeref:typename:int
printf	./vendor/fmt/include/printf.h	/^inline auto printf(string_view fmt, const T&... args) -> int {$/;"	f	typeref:typename:int
printf_arg_formatter	./vendor/fmt/include/printf.h	/^  printf_arg_formatter(basic_appender<Char> iter, format_specs& s,$/;"	f	class:detail::printf_arg_formatter
printf_arg_formatter	./vendor/fmt/include/printf.h	/^class printf_arg_formatter : public arg_formatter<Char> {$/;"	c	namespace:detail
printf_args	./vendor/fmt/include/printf.h	/^using printf_args = basic_format_args<printf_context>;$/;"	t	typeref:typename:basic_format_args<printf_context>
printf_context	./vendor/fmt/include/printf.h	/^using printf_context = basic_printf_context<char>;$/;"	t	typeref:typename:basic_printf_context<char>
printf_formatter	./vendor/fmt/include/printf.h	/^template <typename T> struct printf_formatter {$/;"	s
printf_precision_handler	./vendor/fmt/include/printf.h	/^struct printf_precision_handler {$/;"	s	namespace:detail
printf_width_handler	./vendor/fmt/include/printf.h	/^  explicit printf_width_handler(format_specs& specs) : specs_(specs) {}$/;"	f	class:detail::printf_width_handler
printf_width_handler	./vendor/fmt/include/printf.h	/^class printf_width_handler {$/;"	c	namespace:detail
println	./vendor/fmt/include/base.h	/^FMT_INLINE void println(FILE* f, format_string<T...> fmt, T&&... args) {$/;"	f	typeref:typename:FMT_INLINE void
println	./vendor/fmt/include/base.h	/^FMT_INLINE void println(format_string<T...> fmt, T&&... args) {$/;"	f	typeref:typename:FMT_INLINE void
println	./vendor/fmt/include/ostream.h	/^void println(std::ostream& os, format_string<T...> fmt, T&&... args) {$/;"	f	typeref:typename:FMT_EXPORT void
println	./vendor/fmt/include/ostream.h	/^void println(std::wostream& os,$/;"	f	typeref:typename:FMT_EXPORT void
println	./vendor/fmt/include/xchar.h	/^template <typename... T> void println(wformat_string<T...> fmt, T&&... args) {$/;"	f	typeref:typename:void
println	./vendor/fmt/include/xchar.h	/^void println(std::FILE* f, wformat_string<T...> fmt, T&&... args) {$/;"	f	typeref:typename:void
printmap	./vendor/STC/misc/examples/sortedmaps/smap_erase.c	/^void printmap(mymap m)$/;"	f	typeref:typename:void
priorty	./vendor/STC/misc/examples/mixed/astar.c	/^    int priorty;$/;"	m	struct:__anon14ad28530108	typeref:typename:int	file:
priv	./src/flecs.h	/^    ecs_iter_private_t priv;      \/* Private data *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_iter_private_t
prm	./vendor/STC/misc/examples/coroutines/coroutines.c	/^    struct prime prm;$/;"	m	struct:combined	typeref:struct:prime	file:
problem_space_benchmark	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    struct problem_space_benchmark$/;"	s	class:picobench::report
problem_space_view_map	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    using problem_space_view_map = std::map<std::pair<size_t, udata_t>,$/;"	t	class:picobench::report	typeref:typename:std::map<std::pair<size_t,udata_t>,std::vector<problem_space_benchmark>>
process_file	./vendor/STC/src/singleheader.py	/^def process_file($/;"	f
processor	./vendor/raylib5/include/raylib.h	/^    rAudioProcessor *processor; \/\/ Pointer to internal data processor, useful for audio effect/;"	m	struct:AudioStream	typeref:typename:rAudioProcessor *
produce_items	./vendor/STC/misc/examples/coroutines/cotasks1.c	/^int produce_items(struct produce_items* p)$/;"	f	typeref:typename:int
produce_items	./vendor/STC/misc/examples/coroutines/cotasks1.c	/^struct produce_items {$/;"	s	file:
produce_items	./vendor/STC/misc/examples/coroutines/cotasks2.c	/^int produce_items(struct produce_items* p, cco_runtime* rt)$/;"	f	typeref:typename:int
profile	./src/flecs.h	/^    ecs_rule_op_profile_t *profile;$/;"	m	struct:ecs_rule_iter_t	typeref:typename:ecs_rule_op_profile_t *
prog	./vendor/STC/include/stc/cregex.h	/^    struct _Reprog* prog;$/;"	m	struct:__anon7cecd9d80308	typeref:struct:_Reprog *
progress	./src/flecs.h	/^inline bool world::progress(ecs_ftime_t delta_time) const {$/;"	f	class:flecs::world	typeref:typename:bool
projection	./vendor/raylib5/include/raylib.h	/^    Matrix projection[2];           \/\/ VR projection matrices (per eye)$/;"	m	struct:VrStereoConfig	typeref:typename:Matrix[2]
projection	./vendor/raylib5/include/raylib.h	/^    int projection;         \/\/ Camera projection: CAMERA_PERSPECTIVE or CAMERA_ORTHOGRAPHIC$/;"	m	struct:Camera3D	typeref:typename:int
prop_defaults	./src/flecs.h	/^    ecs_vec_t prop_defaults;$/;"	m	struct:EcsScript	typeref:typename:ecs_vec_t
propertyId	./vendor/raylib5/include/raygui.h	/^    unsigned short propertyId;  \/\/ Property identifier$/;"	m	struct:GuiStyleProp	typeref:typename:unsigned short
propertyValue	./vendor/raylib5/include/raygui.h	/^    int propertyValue;          \/\/ Property value$/;"	m	struct:GuiStyleProp	typeref:typename:int
pt	./vendor/fmt/include/printf.h	/^  using pt = presentation_type;$/;"	t	function:detail::parse_printf_presentation_type	typeref:typename:presentation_type
ptr	./src/flecs.c	/^    const void *ptr;$/;"	m	struct:sort_helper_t	typeref:typename:const void *	file:
ptr	./src/flecs.c	/^    ecs_map_params_t ptr;$/;"	m	struct:ecs_world_allocators_t	typeref:typename:ecs_map_params_t	file:
ptr	./src/flecs.c	/^    void *ptr;$/;"	m	struct:__anon7d4a41770208	typeref:typename:void *	file:
ptr	./src/flecs.c	/^    void *ptr;$/;"	m	struct:ecs_expr_value_t	typeref:typename:void *	file:
ptr	./src/flecs.h	/^    T* ptr() {$/;"	f	struct:flecs::array	typeref:typename:T *
ptr	./src/flecs.h	/^    void *ptr;                \/**< Pointer to the value being iterated *\/$/;"	m	struct:ecs_meta_scope_t	typeref:typename:void *
ptr	./src/flecs.h	/^    void *ptr;$/;"	m	struct:ecs_term_iter_t	typeref:typename:void *
ptr	./src/flecs.h	/^    void *ptr;$/;"	m	struct:ecs_value_t	typeref:typename:void *
ptr	./src/flecs.h	/^    void *ptr;$/;"	m	struct:flecs::_::term_ptr	typeref:typename:void *
ptr	./vendor/fmt/include/format.h	/^template <typename T> auto ptr(T p) -> const void* {$/;"	f	typeref:typename:const void *
ptr	./vendor/fmt/include/std.h	/^auto ptr(const std::unique_ptr<T, Deleter>& p) -> const void* {$/;"	f	typeref:typename:const void *
ptr	./vendor/fmt/include/std.h	/^template <typename T> auto ptr(const std::shared_ptr<T>& p) -> const void* {$/;"	f	typeref:typename:const void *
ptr_	./vendor/fmt/include/base.h	/^  T* ptr_;$/;"	m	class:detail::buffer	typeref:typename:T *
ptr_from_helper	./src/flecs.c	/^const void* ptr_from_helper($/;"	f	typeref:typename:const void *	file:
ptr_t	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^        using ptr_t = typename std::conditional_t<IsConst, segmented_vector::const_pointer const/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector::iter_t	typeref:typename:std::conditional_t<IsConst,segmented_vector::const_pointer const *,segmented_vector::pointer * >
ptrs	./src/flecs.h	/^    void **ptrs;                  \/* Pointers to components. Array if from this, pointer if not/;"	m	struct:ecs_iter_t	typeref:typename:void **
pub	./src/flecs.c	/^    ecs_http_connection_t pub;$/;"	m	struct:__anon7d4a41770808	typeref:typename:ecs_http_connection_t	file:
pub	./src/flecs.c	/^    ecs_http_request_t pub;$/;"	m	struct:__anon7d4a41770908	typeref:typename:ecs_http_request_t	file:
purple	./vendor/fmt/include/color.h	/^  purple = 0x800080,                   \/\/ rgb(128,0,128)$/;"	e	enum:color
push	./src/flecs.h	/^    int push() {$/;"	f	struct:flecs::cursor	typeref:typename:int
push	./src/flecs.h	/^inline void push() {$/;"	f	namespace:flecs::log	typeref:typename:void
push	./src/flecs.h	/^inline void push(const char *fmt, ...) {$/;"	f	namespace:flecs::log	typeref:typename:void
push	./vendor/fmt/include/args.h	/^  template <typename T, typename Arg> auto push(const Arg& arg) -> const T& {$/;"	f	class:detail::dynamic_arg_list	typeref:typename:const T &
push_back	./vendor/fmt/include/args.h	/^  template <typename T> void push_back(const T& arg) {$/;"	f	class:dynamic_format_arg_store	typeref:typename:void
push_back	./vendor/fmt/include/args.h	/^  template <typename T> void push_back(std::reference_wrapper<T> arg) {$/;"	f	class:dynamic_format_arg_store	typeref:typename:void
push_back	./vendor/fmt/include/args.h	/^  void push_back(const detail::named_arg<char_type, T>& arg) {$/;"	f	class:dynamic_format_arg_store	typeref:typename:void
push_back	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR void push_back(const T& value) {$/;"	f	class:detail::buffer	typeref:typename:FMT_CONSTEXPR void
put	./vendor/fmt/include/format.h	/^  auto put(appender out, loc_value val, const format_specs& specs) const$/;"	f	class:format_facet	typeref:typename:bool
qualified_type	./vendor/fmt/include/base.h	/^    using qualified_type =$/;"	t	function:detail::value::format_custom_arg
quantity	./src/flecs.h	/^    ecs_entity_t quantity;$/;"	m	struct:ecs_unit_desc_t	typeref:typename:ecs_entity_t
quantity	./src/flecs.h	/^Self& quantity() {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
quantity	./src/flecs.h	/^Self& quantity(flecs::entity_t quantity) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
queries	./src/flecs.c	/^    ecs_vec_t queries;               \/* vector<ecs_query_t*> *\/$/;"	m	struct:ecs_monitor_t	typeref:typename:ecs_vec_t	file:
queries	./src/flecs.h	/^    } queries;$/;"	m	struct:ecs_world_stats_t	typeref:struct:ecs_world_stats_t::__anon7d4a417c1208
query	./src/flecs.c	/^    ecs_query_t *query;             \/* System query *\/$/;"	m	struct:ecs_system_t	typeref:typename:ecs_query_t *	file:
query	./src/flecs.c	/^    ecs_query_t *query;         \/* Pipeline query *\/$/;"	m	struct:ecs_pipeline_state_t	typeref:typename:ecs_query_t *	file:
query	./src/flecs.c	/^    ecs_query_t *query;$/;"	m	struct:ecs_table_event_t	typeref:typename:ecs_query_t *	file:
query	./src/flecs.h	/^        ecs_query_iter_t query;$/;"	m	union:ecs_iter_private_t::__anon7d4a417c020a	typeref:typename:ecs_query_iter_t
query	./src/flecs.h	/^    const ecs_filter_t *query;    \/* Query being evaluated *\/$/;"	m	struct:ecs_iter_t	typeref:typename:const ecs_filter_t *
query	./src/flecs.h	/^    ecs_poly_t *query;              \/**< Query object (required for serialize_query_[plan|profi/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:ecs_poly_t *
query	./src/flecs.h	/^    ecs_query_desc_t query;$/;"	m	struct:ecs_pipeline_desc_t	typeref:typename:ecs_query_desc_t
query	./src/flecs.h	/^    ecs_query_desc_t query;$/;"	m	struct:ecs_system_desc_t	typeref:typename:ecs_query_desc_t
query	./src/flecs.h	/^    ecs_query_stats_t query;$/;"	m	struct:ecs_system_stats_t	typeref:typename:ecs_query_stats_t
query	./src/flecs.h	/^    ecs_query_t *query;$/;"	m	struct:ecs_query_iter_t	typeref:typename:ecs_query_t *
query	./src/flecs.h	/^    flecs::filter<> query() const {$/;"	f	struct:flecs::observer	typeref:typename:flecs::filter<>
query	./src/flecs.h	/^    flecs::query<> query() const {$/;"	f	struct:flecs::system	typeref:typename:flecs::query<>
query	./src/flecs.h	/^inline flecs::query<Comps...> world::query(Args &&... args) const {$/;"	f	class:flecs::world	typeref:typename:flecs::query<Comps...>
query	./src/flecs.h	/^struct query final : query_base, iterable<Components...> {$/;"	s	namespace:flecs
query_base	./src/flecs.h	/^    query_base()$/;"	f	struct:flecs::query_base
query_base	./src/flecs.h	/^    query_base(world_t *world, ecs_query_desc_t *desc) $/;"	f	struct:flecs::query_base
query_base	./src/flecs.h	/^    query_base(world_t *world, query_t *query = nullptr)$/;"	f	struct:flecs::query_base
query_base	./src/flecs.h	/^struct query_base {$/;"	s	namespace:flecs
query_builder	./src/flecs.h	/^    query_builder(flecs::world_t* world, const char *name = nullptr)$/;"	f	struct:flecs::query_builder
query_builder	./src/flecs.h	/^inline flecs::query_builder<Comps...> world::query_builder(Args &&... args) const {$/;"	f	class:flecs::world	typeref:typename:flecs::query_builder<Comps...>
query_builder	./src/flecs.h	/^struct query_builder final : _::query_builder_base<Components...> {$/;"	s	namespace:flecs
query_builder_base	./src/flecs.h	/^    using query_builder_base = builder<$/;"	t	namespace:flecs::_	typeref:typename:builder<query,ecs_query_desc_t,query_builder<Components...>,query_builder_i,Components...>
query_builder_i	./src/flecs.h	/^    query_builder_i()$/;"	f	struct:flecs::query_builder_i
query_builder_i	./src/flecs.h	/^    query_builder_i(ecs_query_desc_t *desc, int32_t term_index = 0) $/;"	f	struct:flecs::query_builder_i
query_builder_i	./src/flecs.h	/^struct query_builder_i : filter_builder_i<Base, Components ...> {$/;"	s	namespace:flecs
query_count	./src/flecs.h	/^        ecs_metric_t query_count;          \/**< Number of queries *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1208	typeref:typename:ecs_metric_t
query_entity	./src/flecs.c	/^    ecs_entity_t query_entity;      \/* Entity associated with query *\/$/;"	m	struct:ecs_system_t	typeref:typename:ecs_entity_t	file:
query_group_info_t	./src/flecs.h	/^using query_group_info_t = ecs_query_group_info_t;$/;"	t	namespace:flecs	typeref:typename:ecs_query_group_info_t
query_offset	./src/flecs.c	/^    int32_t query_offset;$/;"	m	struct:__anon7d4a41770708	typeref:typename:int32_t	file:
query_t	./src/flecs.h	/^using query_t = ecs_query_t;$/;"	t	namespace:flecs	typeref:typename:ecs_query_t
query_table	./src/flecs.c	/^    ecs_block_allocator_t query_table;$/;"	m	struct:ecs_world_allocators_t	typeref:typename:ecs_block_allocator_t	file:
query_table_list	./src/flecs.c	/^    ecs_map_params_t query_table_list;$/;"	m	struct:ecs_world_allocators_t	typeref:typename:ecs_map_params_t	file:
query_table_match	./src/flecs.c	/^    ecs_block_allocator_t query_table_match;$/;"	m	struct:ecs_world_allocators_t	typeref:typename:ecs_block_allocator_t	file:
queue	./src/flecs.c	/^    ecs_vec_t queue;$/;"	m	struct:ecs_commands_t	typeref:typename:ecs_vec_t	file:
quicksort, binary_search, lower_bound - 2X faster qsort on arrays	./vendor/STC/docs/algorithm_api.md	/^### quicksort, binary_search, lower_bound - 2X faster qsort on arrays$/;"	S	section:STC Algorithms""Generic algorithms
quiet	./src/log.c	/^  bool quiet;$/;"	m	struct:__anon6383736c0208	typeref:typename:bool	file:
quit	./src/flecs.h	/^    void quit() const {$/;"	f	struct:flecs::world	typeref:typename:void
quit	./src/main.c	/^void quit()$/;"	f	typeref:typename:void
r	./src/flecs.c	/^    ecs_record_t *r;$/;"	m	struct:__anon7d4a41771608	typeref:typename:ecs_record_t *	file:
r	./src/flecs.c	/^    ecs_record_t *r;$/;"	m	struct:__anon7d4a41771708	typeref:typename:ecs_record_t *	file:
r	./vendor/STC/include/stc/priv/cregex_prv.c	/^    static struct { const char* c; int n, r; } cls[] = {$/;"	m	struct:_lexasciiclass::__anon4ce7005a0608	typeref:typename:int	file:
r	./vendor/STC/include/stc/priv/cregex_prv.c	/^    static struct { const char* c; uint32_t n, r; } cls[] = {$/;"	m	struct:_lexutfclass::__anon4ce7005a0708	typeref:typename:uint32_t	file:
r	./vendor/STC/include/stc/priv/cregex_prv.c	/^    } r;$/;"	m	struct:_Reinst	typeref:union:_Reinst::__anon4ce7005a020a	file:
r	./vendor/fmt/include/color.h	/^  uint8_t r;$/;"	m	struct:rgb	typeref:typename:uint8_t
r	./vendor/raylib5/include/raygui.h	/^        unsigned char r;$/;"	m	struct:Color	typeref:typename:unsigned char
r	./vendor/raylib5/include/raylib.h	/^    unsigned char r;        \/\/ Color red value$/;"	m	struct:Color	typeref:typename:unsigned char
r16	./vendor/STC/include/stc/priv/utf8_prv.c	/^  const URange16 *r16;$/;"	m	struct:__anon57216ba30208	typeref:typename:const URange16 *	file:
r3	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^[[nodiscard]] static inline auto r3(const uint8_t* p, size_t k) -> uint64_t {$/;"	f	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::wyhash	typeref:typename:uint64_t
r4	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^[[nodiscard]] static inline auto r4(const uint8_t* p) -> uint64_t {$/;"	f	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::wyhash	typeref:typename:uint64_t
r8	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^[[nodiscard]] static inline auto r8(const uint8_t* p) -> uint64_t {$/;"	f	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::wyhash	typeref:typename:uint64_t
rAudioBuffer	./vendor/raylib5/include/raylib.h	/^typedef struct rAudioBuffer rAudioBuffer;$/;"	t	typeref:struct:rAudioBuffer
rAudioProcessor	./vendor/raylib5/include/raylib.h	/^typedef struct rAudioProcessor rAudioProcessor;$/;"	t	typeref:struct:rAudioProcessor
ran_since_merge	./src/flecs.c	/^    int32_t ran_since_merge;    \/* Index in current op *\/$/;"	m	struct:ecs_pipeline_state_t	typeref:typename:int32_t	file:
randomString	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^static inline const char* randomString(int strsize) {$/;"	f	typeref:typename:const char *	file:
randomize	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^static void randomize(char* str, size_t len) {$/;"	f	typeref:typename:void	file:
randomize	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^static void randomize(char* str, int len) {$/;"	f	typeref:typename:void	file:
randomize_timers	./src/flecs.h	/^inline void world::randomize_timers() const {$/;"	f	class:flecs::world	typeref:typename:void
range	./src/flecs.c	/^    ecs_table_range_t range;$/;"	m	struct:__anon7d4a41772e08	typeref:typename:ecs_table_range_t	file:
range	./src/flecs.c	/^    ecs_table_range_t range;$/;"	m	struct:__anon7d4a41773008	typeref:typename:ecs_table_range_t	file:
range	./src/flecs.c	/^    ecs_table_range_t range;$/;"	m	struct:ecs_entity_filter_iter_t	typeref:typename:ecs_table_range_t	file:
range	./src/flecs.h	/^    ecs_member_value_range_t range;$/;"	m	struct:ecs_member_t	typeref:typename:ecs_member_value_range_t
range	./src/flecs.h	/^    ecs_table_range_t range; \/* Set when variable stores a range of entities *\/$/;"	m	struct:ecs_var_t	typeref:typename:ecs_table_range_t
range	./src/flecs.h	/^inline flecs::table_range entity_view::range() const {$/;"	f	class:flecs::entity_view	typeref:typename:flecs::table_range
range	./src/flecs.h	/^inline flecs::table_range iter::range() const {$/;"	f	class:flecs::iter	typeref:typename:flecs::table_range
range	./src/flecs.h	/^untyped_component& range(double min, double max) {$/;"	f	struct:flecs::untyped_component	typeref:typename:untyped_component &
range	./vendor/STC/include/stc/crand.h	/^typedef struct crand_uniform { int64_t lower; uint64_t range, threshold; } crand_uniform_t;$/;"	m	struct:crand_uniform	typeref:typename:uint64_t
range_begin	./vendor/fmt/include/ranges.h	/^auto range_begin(T&& rng)$/;"	f	namespace:detail	typeref:typename:enable_if_t<!has_member_fn_begin_end_t<T &&>::value,decltype(begin (static_cast<T &&> (rng))) >
range_begin	./vendor/fmt/include/ranges.h	/^auto range_begin(const T (&arr)[N]) -> const T* {$/;"	f	namespace:detail	typeref:typename:const T *
range_check_enabled	./src/flecs.c	/^    bool range_check_enabled;$/;"	m	struct:ecs_world_t	typeref:typename:bool	file:
range_end	./vendor/fmt/include/ranges.h	/^auto range_end(T&& rng) -> enable_if_t<!has_member_fn_begin_end_t<T&&>::value,$/;"	f	namespace:detail	typeref:typename:enable_if_t<!has_member_fn_begin_end_t<T &&>::value,decltype(end (static_cast<T &&> (rng))) >
range_end	./vendor/fmt/include/ranges.h	/^auto range_end(const T (&arr)[N]) -> const T* {$/;"	f	namespace:detail	typeref:typename:const T *
range_format	./vendor/fmt/include/ranges.h	/^enum class range_format { disabled, map, set, sequence, string, debug_string };$/;"	g
range_format_constant	./vendor/fmt/include/ranges.h	/^using range_format_constant = std::integral_constant<range_format, K>;$/;"	t	namespace:detail	typeref:typename:std::integral_constant<range_format,K>
range_format_kind	./vendor/fmt/include/ranges.h	/^struct range_format_kind$/;"	s
range_format_kind_	./vendor/fmt/include/ranges.h	/^struct range_format_kind_$/;"	s	namespace:detail
range_formatter	./vendor/fmt/include/ranges.h	/^  FMT_CONSTEXPR range_formatter() {}$/;"	f	struct:range_formatter	typeref:typename:FMT_CONSTEXPR
range_formatter	./vendor/fmt/include/ranges.h	/^struct range_formatter<$/;"	s
range_formatter_	./vendor/fmt/include/ranges.h	/^  range_formatter<detail::uncvref_type<range_type>, Char> range_formatter_;$/;"	m	struct:formatter	typeref:typename:range_formatter<detail::uncvref_type<range_type>,Char>
range_formatter_type	./vendor/fmt/include/ranges.h	/^using range_formatter_type =$/;"	t	namespace:detail
range_iterator	./src/flecs.h	/^    explicit range_iterator(T value)$/;"	f	struct:flecs::_::range_iterator
range_iterator	./src/flecs.h	/^struct range_iterator$/;"	s	namespace:flecs::_
range_mapper	./vendor/fmt/include/ranges.h	/^template <typename Context> struct range_mapper {$/;"	s	namespace:detail
range_reference_type	./vendor/fmt/include/ranges.h	/^using range_reference_type = typename range_reference_type_impl<T>::type;$/;"	t	namespace:detail	typeref:typename:range_reference_type_impl<T>::type
range_reference_type	./vendor/fmt/include/ranges.h	/^using range_reference_type =$/;"	t	namespace:detail
range_reference_type_impl	./vendor/fmt/include/ranges.h	/^template <typename R> struct range_reference_type_impl {$/;"	s	namespace:detail
range_reference_type_impl	./vendor/fmt/include/ranges.h	/^template <typename T, std::size_t N> struct range_reference_type_impl<T[N]> {$/;"	s	namespace:detail
range_type	./vendor/fmt/include/ranges.h	/^  using range_type = detail::maybe_const_range<R>;$/;"	t	struct:formatter	typeref:typename:detail::maybe_const_range<R>
ranges	./src/flecs.c	/^    ecs_ref_t ranges;           \/* Reference to ranges component *\/$/;"	m	struct:EcsAlert	typeref:typename:ecs_ref_t	file:
rate	./src/flecs.h	/^    Base& rate(const entity_t tick_source, int32_t rate) {$/;"	f	struct:flecs::system_builder_i	typeref:typename:Base &
rate	./src/flecs.h	/^    Base& rate(int32_t rate) {$/;"	f	struct:flecs::system_builder_i	typeref:typename:Base &
rate	./src/flecs.h	/^    ecs_gauge_t rate;                     \/**< Keep track of deltas too *\/$/;"	m	struct:ecs_counter_t	typeref:typename:ecs_gauge_t
rate	./src/flecs.h	/^    int32_t rate;                \/**< Rate of the rate filter *\/$/;"	m	struct:EcsRateFilter	typeref:typename:int32_t
rate	./src/flecs.h	/^    int32_t rate;$/;"	m	struct:ecs_system_desc_t	typeref:typename:int32_t
rate	./src/flecs.h	/^    timer& rate(int32_t rate, flecs::entity_t tick_source = 0) {$/;"	f	struct:flecs::timer	typeref:typename:timer &
rate	./src/flecs.h	/^inline void system::rate(int32_t rate) {$/;"	f	class:flecs::system	typeref:typename:void
raw_id	./src/flecs.h	/^    flecs::id_t raw_id() const {$/;"	f	struct:flecs::id	typeref:typename:flecs::id_t
raw_type_t	./src/flecs.h	/^using raw_type_t = remove_pointer_t<remove_reference_t<T>>;$/;"	t	namespace:flecs	typeref:typename:remove_pointer_t<remove_reference_t<T>>
rc	./src/flecs.c	/^    int32_t rc;$/;"	m	struct:__anon7d4a41771a08	typeref:typename:int32_t	file:
re	./vendor/STC/include/stc/cregex.h	/^    const cregex* re;$/;"	m	struct:__anon7cecd9d80408	typeref:typename:const cregex *
reachable	./src/flecs.c	/^    ecs_reachable_cache_t reachable;$/;"	m	struct:ecs_id_record_t	typeref:typename:ecs_reachable_cache_t	file:
read	./src/flecs.h	/^    Base& read() {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
read	./src/flecs.h	/^    Base& read() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
read	./src/flecs.h	/^    Base& read(Args&&... args) {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
read_casefold	./vendor/STC/src/utf8_tab.py	/^def read_casefold(bitrange):$/;"	f
read_end	./vendor/fmt/include/os.h	/^  file read_end;$/;"	m	struct:pipe	typeref:typename:file
read_file	./vendor/STC/misc/benchmarks/various/string_bench_STC.cpp	/^vec_str read_file(const char* name)$/;"	f	typeref:typename:vec_str
read_file	./vendor/STC/misc/benchmarks/various/string_bench_STD.cpp	/^std::vector<std::string> read_file(const char* name)$/;"	f	typeref:typename:std::vector<std::string>
read_file	./vendor/STC/misc/examples/mixed/read.c	/^vec_str read_file(const char* name)$/;"	f	typeref:typename:vec_str
read_unidata	./vendor/STC/src/utf8_tab.py	/^def read_unidata(casetype='lowcase', category='Lu', bitrange=16):$/;"	f
read_write	./src/flecs.h	/^    Base& read_write() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
readonly_begin	./src/flecs.h	/^    bool readonly_begin(bool multi_threaded = false) const {$/;"	f	struct:flecs::world	typeref:typename:bool
readonly_end	./src/flecs.h	/^    void readonly_end() const {$/;"	f	struct:flecs::world	typeref:typename:void
ready	./src/flecs.c	/^    bool ready;$/;"	m	struct:__anon7d4a41772708	typeref:typename:bool	file:
ready	./src/flecs.c	/^    bool ready;$/;"	m	struct:__anon7d4a41772808	typeref:typename:bool	file:
ready	./src/main.c	/^void ready()$/;"	f	typeref:typename:void
real_world	./src/flecs.h	/^    ecs_world_t *real_world;      \/* Actual world. This differs from world when in readonly mod/;"	m	struct:ecs_iter_t	typeref:typename:ecs_world_t *
realloc_	./src/flecs.h	/^    ecs_os_api_realloc_t realloc_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_realloc_t
realloc_count	./src/flecs.h	/^        ecs_metric_t realloc_count;        \/**< Reallocs per frame *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1608	typeref:typename:ecs_metric_t
reallocate	./src/memory.c	/^void* reallocate(void* pointer, size_t oldSize, size_t newSize)$/;"	f	typeref:typename:void *
rebecca_purple	./vendor/fmt/include/color.h	/^  rebecca_purple = 0x663399,           \/\/ rgb(102,51,153)$/;"	e	enum:color
rebuild	./Makefile	/^rebuild: clean all$/;"	t
rebuild_count	./src/flecs.c	/^    int32_t rebuild_count;      \/* Number of pipeline rebuilds *\/$/;"	m	struct:ecs_pipeline_state_t	typeref:typename:int32_t	file:
rebuild_count	./src/flecs.h	/^    int32_t rebuild_count;       \/**< Number of times pipeline has rebuilt *\/$/;"	m	struct:ecs_pipeline_stats_t	typeref:typename:int32_t
record	./src/flecs.c	/^    ecs_record_t *record;$/;"	m	struct:ecs_reachable_elem_t	typeref:typename:ecs_record_t *	file:
record	./src/flecs.h	/^    ecs_record_t *record;   \/* Entity index record *\/$/;"	m	struct:ecs_ref_t	typeref:typename:ecs_record_t *
record_count	./src/flecs.c	/^    int16_t record_count;            \/* Table record count including wildcards *\/$/;"	m	struct:ecs_table__t	typeref:typename:int16_t	file:
records	./src/flecs.c	/^    ecs_record_t records[FLECS_ENTITY_PAGE_SIZE];$/;"	m	struct:ecs_entity_index_page_t	typeref:typename:ecs_record_t[]	file:
records	./src/flecs.c	/^    ecs_vec_t records;$/;"	m	struct:__anon7d4a41771d08	typeref:typename:ecs_vec_t	file:
records	./src/flecs.c	/^    ecs_vec_t records;$/;"	m	struct:ecs_store_t	typeref:typename:ecs_vec_t	file:
records	./src/flecs.c	/^    struct ecs_table_record_t *records; \/* Array with table records *\/$/;"	m	struct:ecs_table__t	typeref:struct:ecs_table_record_t *	file:
recs	./vendor/raylib5/include/raygui.h	/^        Rectangle *recs;        \/\/ Rectangles in texture for the glyphs$/;"	m	struct:Font	typeref:typename:Rectangle *
recs	./vendor/raylib5/include/raylib.h	/^    Rectangle *recs;        \/\/ Rectangles in texture for the glyphs$/;"	m	struct:Font	typeref:typename:Rectangle *
recursion_threshold	./vendor/STC/misc/examples/spans/matmult.c	/^  enum {recursion_threshold = 16};$/;"	e	enum:recursive_matrix_product::__anonc4048f0a0203	file:
recursive_matrix_product	./vendor/STC/misc/examples/spans/matmult.c	/^void recursive_matrix_product(Mat2 A, Mat2 B, OutMat C)$/;"	f	typeref:typename:void
red	./vendor/fmt/include/color.h	/^  red = 0xFF0000,                      \/\/ rgb(255,0,0)$/;"	e	enum:color
red	./vendor/fmt/include/color.h	/^  red,$/;"	e	enum:terminal_color
redo	./src/flecs.c	/^    bool redo;$/;"	m	struct:__anon7d4a41772e08	typeref:typename:bool	file:
reduce_count	./src/flecs.h	/^    int32_t reduce_count;$/;"	m	struct:__anon7d4a417c1808	typeref:typename:int32_t
ref	./src/flecs.c	/^    ecs_ref_t ref;$/;"	m	struct:__anon7d4a41771508	typeref:typename:ecs_ref_t	file:
ref	./src/flecs.h	/^    ref() : m_world(nullptr), m_ref{} { }$/;"	f	struct:flecs::ref
ref	./src/flecs.h	/^    ref(world_t *world, entity_t entity, flecs::id_t id = 0)$/;"	f	struct:flecs::ref
ref	./src/flecs.h	/^struct ref {$/;"	s	namespace:flecs
ref	./vendor/STC/include/stc/algo/crange.h	/^typedef struct { crange_value *ref, end, step; } crange_iter;$/;"	m	struct:__anon74d0e1bc0208	typeref:typename:crange_value *
ref	./vendor/STC/include/stc/types.h	/^    cstr_value* ref;$/;"	m	union:__anon0ab7b7af070a	typeref:typename:cstr_value *
ref	./vendor/STC/include/stc/types.h	/^    csview_value* ref;$/;"	m	union:__anon0ab7b7af010a	typeref:typename:csview_value *
ref	./vendor/STC/include/stc/types.h	/^    czview_value* ref;$/;"	m	union:__anon0ab7b7af030a	typeref:typename:czview_value *
ref	./vendor/fmt/include/base.h	/^  arg_ref<Char>& ref;$/;"	m	struct:detail::dynamic_spec_id_handler	typeref:typename:arg_ref<Char> &
ref_	./src/flecs.h	/^    type& ref_;$/;"	m	struct:flecs::pair	typeref:typename:type &
ref_t	./src/flecs.h	/^using ref_t = ecs_ref_t;$/;"	t	namespace:flecs	typeref:typename:ecs_ref_t
refcount	./src/flecs.c	/^    int32_t refcount;$/;"	m	struct:ecs_id_record_t	typeref:typename:int32_t	file:
reference	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        using reference = typename std::conditional<IsConst, value_type const&, value_type&>::ty/;"	t	class:robin_hood::detail::Table::Iter	typeref:typename:std::conditional<IsConst,value_type const &,value_type &>::type
reference	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^        using reference = typename std::conditional_t<IsConst, value_type const&, value_type&>;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector::iter_t	typeref:typename:std::conditional_t<IsConst,value_type const &,value_type &>
reference	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using reference = T&;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:T &
reference	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using reference = typename value_container_type::reference;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:value_container_type::reference
reference	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        typedef const value_pair&          reference;$/;"	t	class:emhash7::HashMap::const_iterator	typeref:typename:const value_pair &
reference	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        typedef value_pair&               reference;$/;"	t	class:emhash7::HashMap::iterator	typeref:typename:value_pair &
reference	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    typedef PairT&       reference;$/;"	t	class:emhash7::HashMap	typeref:typename:PairT &
reference	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^        using reference = ValueType &;$/;"	t	struct:ska::detailv3::sherwood_v3_table::templated_iterator	typeref:typename:ValueType &
reference	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    using reference = value_type &;$/;"	t	class:ska::detailv3::sherwood_v3_table	typeref:typename:value_type &
reference	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^    using reference = value_type&;$/;"	t	class:tsl::detail_robin_hash::robin_hash::robin_iterator	typeref:typename:value_type &
reference	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  using reference = value_type&;$/;"	t	class:tsl::detail_robin_hash::robin_hash	typeref:typename:value_type &
reference	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  using reference = typename ht::reference;$/;"	t	class:tsl::robin_map	typeref:typename:ht::reference
reference	./vendor/fmt/include/base.h	/^  using reference = T&;$/;"	t	class:basic_appender	typeref:typename:T &
references	./src/flecs.h	/^    ecs_ref_t *references;        \/* Cached refs to components (if iterating a cache) *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_ref_t *
reflection_count	./src/flecs.h	/^    struct reflection_count {$/;"	s	struct:flecs::_::enum_data_impl
reflection_init	./src/flecs.h	/^    struct reflection_init {$/;"	s	struct:flecs::_::enum_type
refs	./src/flecs.c	/^    ecs_graph_edge_hdr_t refs;$/;"	m	struct:ecs_graph_node_t	typeref:typename:ecs_graph_edge_hdr_t	file:
refs	./src/flecs.c	/^    ecs_vec_t refs;                  \/* Cached components for non-this terms *\/$/;"	m	struct:ecs_query_table_match_t	typeref:typename:ecs_vec_t	file:
register_id	./src/flecs.h	/^    ecs_id_t register_id;       \/**< Id observer is registered with (single term observers only/;"	m	struct:ecs_observer_t	typeref:typename:ecs_id_t
register_lifecycle_actions	./src/flecs.h	/^void register_lifecycle_actions($/;"	f	namespace:flecs::_	typeref:typename:void
register_lifecycle_actions	./src/flecs.h	/^void register_lifecycle_actions(ecs_world_t*, ecs_entity_t) { }$/;"	f	namespace:flecs::_	typeref:typename:void
registered	./src/flecs.h	/^    static bool registered(flecs::world_t *world) {$/;"	f	struct:flecs::_::cpp_type_impl	typeref:typename:bool
registry	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^class registry$/;"	c	namespace:picobench
regkaboom	./vendor/STC/include/stc/priv/cregex_prv.c	/^    jmp_buf regkaboom;$/;"	m	struct:_Parser	typeref:typename:jmp_buf	file:
rehash	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void rehash(size_t c) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:void
rehash	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    void rehash(size_t count) {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:void
rehash	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    void rehash(uint64_t required_buckets)$/;"	f	class:emhash7::HashMap	typeref:typename:void
rehash	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    void rehash(size_t num_buckets)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:void
rehash	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  void rehash(size_type count_) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:void
rehash	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  void rehash(size_type count_) { m_ht.rehash(count_); }$/;"	f	class:tsl::robin_map	typeref:typename:void
rehashPowerOfTwo	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void rehashPowerOfTwo(size_t numBuckets, bool forceFree) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:void
rehash_for_other_container	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    void rehash_for_other_container(const sherwood_v3_table & other)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:void
rehash_impl	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  void rehash_impl(size_type count_) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:void
rehash_on_extreme_load	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  bool rehash_on_extreme_load(distance_type curr_dist_from_ideal_bucket) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:bool
reinterpret_cast_no_cast_align_warning	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^inline T reinterpret_cast_no_cast_align_warning(void const* ptr) noexcept {$/;"	f	namespace:robin_hood::detail	typeref:typename:T
reinterpret_cast_no_cast_align_warning	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^inline T reinterpret_cast_no_cast_align_warning(void* ptr) noexcept {$/;"	f	namespace:robin_hood::detail	typeref:typename:T
release	./Makefile	/^release: $(TARGET)$/;"	t
relist	./vendor/STC/include/stc/priv/cregex_prv.c	/^    _Relist*    relist[2];$/;"	m	struct:_Reljunk	typeref:typename:_Relist * [2]	file:
reliste	./vendor/STC/include/stc/priv/cregex_prv.c	/^    _Relist*    reliste[2];$/;"	m	struct:_Reljunk	typeref:typename:_Relist * [2]	file:
remaining	./src/flecs.c	/^    int16_t remaining;$/;"	m	struct:__anon7d4a41772508	typeref:typename:int16_t	file:
remaining	./src/flecs.h	/^    int32_t remaining;$/;"	m	struct:ecs_page_iter_t	typeref:typename:int32_t
rematch_count	./src/flecs.c	/^    int32_t rematch_count;           \/* Track whether table was rematched *\/$/;"	m	struct:ecs_query_table_t	typeref:typename:int32_t	file:
rematch_count	./src/flecs.c	/^    int32_t rematch_count;           \/* Track which tables were added during rematch *\/$/;"	m	struct:ecs_query_t	typeref:typename:int32_t	file:
rematch_count	./src/flecs.h	/^        ecs_metric_t rematch_count;        \/**< Number of query rematches *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1408	typeref:typename:ecs_metric_t
rematch_count_total	./src/flecs.h	/^    int64_t rematch_count_total;      \/**< Total number of rematches *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int64_t
rematch_time	./src/flecs.h	/^        ecs_metric_t rematch_time;         \/**< Time spent on rematching. *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1508	typeref:typename:ecs_metric_t
rematch_time_total	./src/flecs.h	/^    ecs_ftime_t rematch_time_total;   \/**< Time spent on query rematching *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:ecs_ftime_t
remove	./src/flecs.c	/^    ecs_graph_edges_t remove; $/;"	m	struct:ecs_graph_node_t	typeref:typename:ecs_graph_edges_t	file:
remove	./src/flecs.h	/^    Self& remove() {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
remove	./src/flecs.h	/^    Self& remove(Second constant) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
remove	./src/flecs.h	/^    Self& remove(Second second) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
remove	./src/flecs.h	/^    Self& remove(entity_t entity) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
remove	./src/flecs.h	/^    Self& remove(entity_t first, entity_t second) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
remove	./src/flecs.h	/^inline void world::remove() const {$/;"	f	class:flecs::world	typeref:typename:void
remove	./src/flecs.h	/^inline void world::remove(flecs::entity_t first, flecs::entity_t second) const {$/;"	f	class:flecs::world	typeref:typename:void
remove	./src/flecs.h	/^inline void world::remove(flecs::entity_t second) const {$/;"	f	class:flecs::world	typeref:typename:void
remove_all	./src/flecs.h	/^    void remove_all() const {$/;"	f	struct:flecs::world	typeref:typename:void
remove_all	./src/flecs.h	/^    void remove_all(entity_t first, entity_t second) const {$/;"	f	struct:flecs::world	typeref:typename:void
remove_all	./src/flecs.h	/^    void remove_all(entity_t second) const {$/;"	f	struct:flecs::world	typeref:typename:void
remove_all	./src/flecs.h	/^    void remove_all(id_t the_id) const {$/;"	f	struct:flecs::world	typeref:typename:void
remove_const_t	./vendor/fmt/include/base.h	/^using remove_const_t = typename std::remove_const<T>::type;$/;"	t	typeref:typename:std::remove_const<T>::type
remove_count	./src/flecs.h	/^        ecs_metric_t remove_count;$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1308	typeref:typename:ecs_metric_t
remove_count	./src/flecs.h	/^        int64_t remove_count;          \/**< Remove commands processed *\/$/;"	m	struct:ecs_world_info_t::__anon7d4a417c0708	typeref:typename:int64_t
remove_cvref_t	./vendor/fmt/include/base.h	/^using remove_cvref_t = typename std::remove_cv<remove_reference_t<T>>::type;$/;"	t	typeref:typename:std::remove_cv<remove_reference_t<T>>::type
remove_flags	./src/flecs.h	/^inline flecs::entity id::remove_flags() const {$/;"	f	class:flecs::id	typeref:typename:flecs::entity
remove_flags	./src/flecs.h	/^inline flecs::entity id::remove_flags(flecs::id_t flags) const {$/;"	f	class:flecs::id	typeref:typename:flecs::entity
remove_generation	./src/flecs.h	/^inline flecs::entity id::remove_generation() const {$/;"	f	class:flecs::id	typeref:typename:flecs::entity
remove_leading_zeros	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 void remove_leading_zeros() {$/;"	f	class:detail::bigint	typeref:typename:FMT_CONSTEXPR20 void
remove_pointer_t	./src/flecs.h	/^using remove_pointer_t = typename std::remove_pointer<T>::type;$/;"	t	namespace:flecs	typeref:typename:std::remove_pointer<T>::type
remove_prefix	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR void remove_prefix(size_t n) noexcept {$/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR void
remove_reference_t	./src/flecs.h	/^using remove_reference_t = typename std::remove_reference<T>::type;$/;"	t	namespace:flecs	typeref:typename:std::remove_reference<T>::type
remove_reference_t	./vendor/fmt/include/base.h	/^using remove_reference_t = typename std::remove_reference<T>::type;$/;"	t	typeref:typename:std::remove_reference<T>::type
remove_second	./src/flecs.h	/^    Self& remove_second(flecs::entity_t first) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
remove_trailing_zeros	./vendor/fmt/include/format-inl.h	/^FMT_INLINE int remove_trailing_zeros(uint32_t& n, int s = 0) noexcept {$/;"	f	namespace:detail::dragonbox	typeref:typename:FMT_INLINE int
remove_trailing_zeros	./vendor/fmt/include/format-inl.h	/^FMT_INLINE int remove_trailing_zeros(uint64_t& n) noexcept {$/;"	f	namespace:detail::dragonbox	typeref:typename:FMT_INLINE int
removed	./src/flecs.c	/^    ecs_type_t removed;              \/* Components removed between tables *\/$/;"	m	struct:ecs_table_diff_t	typeref:typename:ecs_type_t	file:
removed	./src/flecs.c	/^    ecs_vec_t removed;$/;"	m	struct:ecs_table_diff_builder_t	typeref:typename:ecs_vec_t	file:
rep	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    typedef long long rep;$/;"	t	struct:picobench::high_res_clock	typeref:typename:long long
rep	./vendor/fmt/include/chrono.h	/^  using rep = typename Duration::rep;$/;"	t	function:detail::write_floating_seconds	typeref:typename:Duration::rep
replace	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto replace(value_container_type&& container) {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:auto
replace	./vendor/fmt/include/format.h	/^enum class to_utf8_error_policy { abort, replace };$/;"	e	enum:detail::to_utf8_error_policy
report	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^class report$/;"	c	namespace:picobench
report_error	./vendor/fmt/include/format-inl.h	/^FMT_FUNC void report_error(const char* message) {$/;"	f	typeref:typename:FMT_FUNC void
report_error	./vendor/fmt/include/format-inl.h	/^FMT_FUNC void report_error(format_func func, int error_code,$/;"	f	namespace:detail	typeref:typename:FMT_FUNC void
report_output_format	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^enum class report_output_format$/;"	g	namespace:picobench
report_system_error	./vendor/fmt/include/format-inl.h	/^FMT_FUNC void report_system_error(int error_code,$/;"	f	typeref:typename:FMT_FUNC void
report_truncation	./vendor/fmt/include/base.h	/^inline void report_truncation(bool truncated) {$/;"	f	namespace:detail	typeref:typename:void
req_len	./src/flecs.c	/^    int32_t req_len;$/;"	m	struct:__anon7d4a41770908	typeref:typename:int32_t	file:
request_cache	./src/flecs.c	/^    ecs_hashmap_t request_cache;$/;"	m	struct:ecs_http_server_t	typeref:typename:ecs_hashmap_t	file:
request_handled_error_count	./src/flecs.h	/^        ecs_metric_t request_handled_error_count;$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1708	typeref:typename:ecs_metric_t
request_handled_ok_count	./src/flecs.h	/^        ecs_metric_t request_handled_ok_count;$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1708	typeref:typename:ecs_metric_t
request_invalid_count	./src/flecs.h	/^        ecs_metric_t request_invalid_count;$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1708	typeref:typename:ecs_metric_t
request_not_handled_count	./src/flecs.h	/^        ecs_metric_t request_not_handled_count;$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1708	typeref:typename:ecs_metric_t
request_preflight_count	./src/flecs.h	/^        ecs_metric_t request_preflight_count;$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1708	typeref:typename:ecs_metric_t
request_received_count	./src/flecs.h	/^        ecs_metric_t request_received_count;$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1708	typeref:typename:ecs_metric_t
request_time	./src/flecs.c	/^    double request_time; \/* time spent on requests in last stats interval *\/$/;"	m	struct:ecs_http_server_t	typeref:typename:double	file:
request_time_total	./src/flecs.c	/^    double request_time_total; \/* total time spent on requests *\/$/;"	m	struct:ecs_http_server_t	typeref:typename:double	file:
requests	./src/flecs.c	/^    ecs_http_send_request_t requests[ECS_HTTP_SEND_QUEUE_MAX];$/;"	m	struct:ecs_http_send_queue_t	typeref:typename:ecs_http_send_request_t[]	file:
requests	./src/flecs.c	/^    ecs_sparse_t requests; \/* sparse<http_request_t> *\/$/;"	m	struct:ecs_http_server_t	typeref:typename:ecs_sparse_t	file:
requests_processed	./src/flecs.c	/^    int32_t requests_processed; \/* requests processed in last stats interval *\/$/;"	m	struct:ecs_http_server_t	typeref:typename:int32_t	file:
requests_processed_total	./src/flecs.c	/^    int32_t requests_processed_total; \/* total requests processed *\/$/;"	m	struct:ecs_http_server_t	typeref:typename:int32_t	file:
res	./src/flecs.c	/^    char *res;$/;"	m	struct:__anon7d4a41770908	typeref:typename:char *	file:
res	./src/flecs.h	/^    ecs_map_data_t *res;$/;"	m	struct:ecs_map_iter_t	typeref:typename:ecs_map_data_t *
reserve	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void reserve(size_t c) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:void
reserve	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void reserve(size_t c, bool forceRehash) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:void
reserve	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    void reserve(size_t capa) {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:void
reserve	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    void reserve(size_t new_capacity) {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:void
reserve	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    bool reserve(uint64_t num_elems)$/;"	f	class:emhash7::HashMap	typeref:typename:bool
reserve	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    void reserve(size_t num_elements)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:void
reserve	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  void reserve(size_type count_) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:void
reserve	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  void reserve(size_type count_) { m_ht.reserve(count_); }$/;"	f	class:tsl::robin_map	typeref:typename:void
reserve	./vendor/fmt/include/args.h	/^  void reserve(size_t new_cap, size_t new_cap_named) {$/;"	f	class:dynamic_format_arg_store	typeref:typename:void
reserve	./vendor/fmt/include/format.h	/^  void reserve(size_t new_capacity) { this->try_reserve(new_capacity); }$/;"	f	class:basic_memory_buffer	typeref:typename:void
reserve	./vendor/fmt/include/format.h	/^constexpr auto reserve(Iterator& it, size_t) -> Iterator& {$/;"	f	namespace:detail	typeref:typename:Iterator &
reserve	./vendor/fmt/include/format.h	/^inline auto reserve(basic_appender<T> it, size_t n) -> basic_appender<T> {$/;"	f	namespace:detail	typeref:typename:basic_appender<T>
reserve	./vendor/fmt/include/format.h	/^reserve(OutputIt it, size_t n) -> typename OutputIt::value_type* {$/;"	f	namespace:detail	typeref:typename:OutputIt::value_type *
reserve_iterator	./vendor/fmt/include/format.h	/^using reserve_iterator =$/;"	t	namespace:detail
reset	./src/flecs.h	/^    static void reset() {$/;"	f	struct:flecs::_::cpp_type_impl	typeref:typename:void
reset	./src/flecs.h	/^    void reset() {$/;"	f	struct:flecs::term	typeref:typename:void
reset	./src/flecs.h	/^    void reset() {$/;"	f	struct:flecs::world	typeref:typename:void
reset	./src/flecs.h	/^inline void reset() {$/;"	f	namespace:flecs	typeref:typename:void
reset	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void reset() noexcept {$/;"	f	class:robin_hood::detail::BulkPoolAllocator	typeref:typename:void
reset	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    void reset()$/;"	f	struct:ska::fibonacci_hash_policy	typeref:typename:void
reset	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    void reset()$/;"	f	struct:ska::power_of_two_hash_policy	typeref:typename:void
reset	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    void reset()$/;"	f	struct:ska::prime_number_hash_policy	typeref:typename:void
reset_clock	./src/flecs.h	/^inline void world::reset_clock() const {$/;"	f	class:flecs::world	typeref:typename:void
reset_color	./vendor/fmt/include/color.h	/^template <typename Char> inline void reset_color(buffer<Char>& buffer) {$/;"	f	namespace:detail	typeref:typename:void
reset_to_empty_state	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    void reset_to_empty_state()$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:void
resize	./src/flecs.h	/^    opaque& resize(void (*func)(T *dst, size_t count)) {$/;"	f	struct:flecs::opaque	typeref:typename:opaque &
resize	./src/flecs.h	/^    void (*resize)($/;"	m	struct:EcsOpaque	typeref:typename:void (*)(void * dst,size_t count)
resize	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 void resize(size_t count) { this->try_resize(count); }$/;"	f	class:basic_memory_buffer	typeref:typename:FMT_CONSTEXPR20 void
rest	./src/flecs.h	/^namespace rest {$/;"	n	namespace:flecs
rest_prev_log	./src/flecs.c	/^static ecs_os_api_log_t rest_prev_log;$/;"	v	typeref:typename:ecs_os_api_log_t	file:
restore	./src/flecs.h	/^    void restore() {$/;"	f	struct:flecs::snapshot	typeref:typename:void
restore_filtered	./src/flecs.c	/^void restore_filtered($/;"	f	typeref:typename:void	file:
restore_unfiltered	./src/flecs.c	/^void restore_unfiltered($/;"	f	typeref:typename:void	file:
result	./vendor/STC/include/stc/coroutine.h	/^    int result, top; cco_task* stack[];$/;"	m	struct:cco_runtime	typeref:typename:int
result	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        result_t result; \/\/ result of fastest sample$/;"	m	struct:picobench::report::benchmark_problem_space	typeref:typename:result_t
result	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        result_t result; \/\/ result of fastest sample$/;"	m	struct:picobench::report::problem_space_benchmark	typeref:typename:result_t
result	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    result_t result() const { return _result; }$/;"	f	class:picobench::state	typeref:typename:result_t
result	./vendor/STC/misc/examples/coroutines/coroutines.c	/^    long long result, b;$/;"	m	struct:fibonacci	typeref:typename:long long	file:
result	./vendor/STC/misc/examples/coroutines/coroutines.c	/^    long long result, pos;$/;"	m	struct:prime	typeref:typename:long long	file:
result	./vendor/fmt/include/format-inl.h	/^    carrier_uint result;$/;"	m	struct:detail::dragonbox::cache_accessor::compute_mul_result	typeref:typename:carrier_uint
result_ids	./src/flecs.c	/^    ecs_vec_t result_ids;$/;"	m	struct:__anon7d4a41771d08	typeref:typename:ecs_vec_t	file:
result_t	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^using result_t = intptr_t;$/;"	t	namespace:picobench	typeref:typename:intptr_t
result_t	./vendor/fmt/include/ranges.h	/^using result_t = std::tuple<formatter<remove_cvref_t<T>, Char>...>;$/;"	t	namespace:detail::tuple	typeref:typename:std::tuple<formatter<remove_cvref_t<T>,Char>...>
retain_period	./src/flecs.c	/^    ecs_ftime_t retain_period;  \/* How long to retain the alert *\/$/;"	m	struct:EcsAlert	typeref:typename:ecs_ftime_t	file:
retain_period	./src/flecs.h	/^    Base& retain_period(ecs_ftime_t period) {$/;"	f	struct:flecs::alert_builder_i	typeref:typename:Base &
retain_period	./src/flecs.h	/^    ecs_ftime_t retain_period;$/;"	m	struct:ecs_alert_desc_t	typeref:typename:ecs_ftime_t
return_type	./src/flecs.h	/^    using return_type = ReturnType;$/;"	t	struct:flecs::_::function_traits_defs	typeref:typename:ReturnType
return_type_t	./src/flecs.h	/^using return_type_t = typename _::function_traits<T>::return_type;$/;"	t	namespace:flecs	typeref:typename:_::function_traits<T>::return_type
reverse	./vendor/fmt/include/color.h	/^  reverse = 1 << 5,$/;"	e	enum:emphasis
rgb	./vendor/fmt/include/color.h	/^  FMT_CONSTEXPR rgb() : r(0), g(0), b(0) {}$/;"	f	struct:rgb	typeref:typename:FMT_CONSTEXPR
rgb	./vendor/fmt/include/color.h	/^  FMT_CONSTEXPR rgb(color hex)$/;"	f	struct:rgb	typeref:typename:FMT_CONSTEXPR
rgb	./vendor/fmt/include/color.h	/^  FMT_CONSTEXPR rgb(uint32_t hex)$/;"	f	struct:rgb	typeref:typename:FMT_CONSTEXPR
rgb	./vendor/fmt/include/color.h	/^  FMT_CONSTEXPR rgb(uint8_t r_, uint8_t g_, uint8_t b_) : r(r_), g(g_), b(b_) {}$/;"	f	struct:rgb	typeref:typename:FMT_CONSTEXPR
rgb	./vendor/fmt/include/color.h	/^struct rgb {$/;"	s
rgb_color	./vendor/fmt/include/color.h	/^    uint32_t rgb_color;$/;"	m	union:detail::color_type::color_union	typeref:typename:uint32_t
rh	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^namespace rh {$/;"	n	namespace:tsl
rhs	./vendor/fmt/include/compile.h	/^  R rhs;$/;"	m	struct:detail::concat	typeref:typename:R
right	./vendor/STC/include/stc/priv/cregex_prv.c	/^        struct _Reinst *right;   \/* right child of TOK_OR *\/$/;"	m	union:_Reinst::__anon4ce7005a020a	typeref:struct:_Reinst *	file:
right	./vendor/raylib5/include/raylib.h	/^    int right;              \/\/ Right border offset$/;"	m	struct:NPatchInfo	typeref:typename:int
rightLensCenter	./vendor/raylib5/include/raylib.h	/^    float rightLensCenter[2];       \/\/ VR right lens center$/;"	m	struct:VrStereoConfig	typeref:typename:float[2]
rightScreenCenter	./vendor/raylib5/include/raylib.h	/^    float rightScreenCenter[2];     \/\/ VR right screen center$/;"	m	struct:VrStereoConfig	typeref:typename:float[2]
right_fork	./vendor/STC/misc/examples/coroutines/dining_philosophers.c	/^    cco_sem* right_fork;$/;"	m	struct:Philosopher	typeref:typename:cco_sem *	file:
rit	./src/flecs.c	/^    ecs_rule_iter_t *rit;$/;"	m	struct:__anon7d4a41773708	typeref:typename:ecs_rule_iter_t *	file:
robin_hash	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  robin_hash(const robin_hash& other)$/;"	f	class:tsl::detail_robin_hash::robin_hash
robin_hash	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  robin_hash(robin_hash&& other) noexcept($/;"	f	class:tsl::detail_robin_hash::robin_hash
robin_hash	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  robin_hash(size_type bucket_count, const Hash& hash, const KeyEqual& equal,$/;"	f	class:tsl::detail_robin_hash::robin_hash
robin_hash	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^class robin_hash : private Hash, private KeyEqual, private GrowthPolicy {$/;"	c	namespace:tsl::detail_robin_hash
robin_hood	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^namespace robin_hood {$/;"	n
robin_hood_flat_map	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^template <class K, class V> using robin_hood_flat_map = robin_hood::unordered_flat_map<$/;"	t	typeref:typename:robin_hood::unordered_flat_map<K,V,robin_hood::hash<K>,std::equal_to<K>,MAX_LOAD_FACTOR>	file:
robin_iterator	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^    robin_iterator() noexcept {}$/;"	f	class:tsl::detail_robin_hash::robin_hash::robin_iterator
robin_iterator	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^    robin_iterator(bucket_entry_ptr bucket) noexcept : m_bucket(bucket) {}$/;"	f	class:tsl::detail_robin_hash::robin_hash::robin_iterator
robin_iterator	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^    robin_iterator(const robin_iterator<!TIsConst>& other) noexcept$/;"	f	class:tsl::detail_robin_hash::robin_hash::robin_iterator
robin_iterator	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  class robin_iterator {$/;"	c	class:tsl::detail_robin_hash::robin_hash
robin_map	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  explicit robin_map(const Allocator& alloc)$/;"	f	class:tsl::robin_map
robin_map	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  explicit robin_map(size_type bucket_count, const Hash& hash = Hash(),$/;"	f	class:tsl::robin_map
robin_map	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  robin_map() : robin_map(ht::DEFAULT_INIT_BUCKETS_SIZE) {}$/;"	f	class:tsl::robin_map
robin_map	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  robin_map(InputIt first, InputIt last, size_type bucket_count,$/;"	f	class:tsl::robin_map
robin_map	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  robin_map(InputIt first, InputIt last,$/;"	f	class:tsl::robin_map
robin_map	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  robin_map(size_type bucket_count, const Allocator& alloc)$/;"	f	class:tsl::robin_map
robin_map	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  robin_map(size_type bucket_count, const Hash& hash, const Allocator& alloc)$/;"	f	class:tsl::robin_map
robin_map	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  robin_map(std::initializer_list<value_type> init, size_type bucket_count,$/;"	f	class:tsl::robin_map
robin_map	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  robin_map(std::initializer_list<value_type> init,$/;"	f	class:tsl::robin_map
robin_map	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^class robin_map {$/;"	c	namespace:tsl
robin_pg_map	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^using robin_pg_map = robin_map<Key, T, Hash, KeyEqual, Allocator, StoreHash,$/;"	t	namespace:tsl	typeref:typename:robin_map<Key,T,Hash,KeyEqual,Allocator,StoreHash,tsl::rh::prime_growth_policy>
role	./src/flecs.h	/^    Base& role(id_t role) {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
romu_rotl	./vendor/STC/misc/benchmarks/various/rust_hmap.c	/^uint64_t romu_rotl(uint64_t val, uint32_t r) {$/;"	f	typeref:typename:uint64_t
romu_trio	./vendor/STC/misc/benchmarks/various/prng_bench.cpp	/^uint64_t romu_trio(uint64_t s[3]) {$/;"	f	typeref:typename:uint64_t
romu_trio	./vendor/STC/misc/benchmarks/various/rust_hashmap.rs	/^fn romu_trio(s: &mut [u64]) -> u64 {$/;"	f
romu_trio	./vendor/STC/misc/benchmarks/various/rust_hmap.c	/^uint64_t romu_trio(uint64_t s[3]) {$/;"	f	typeref:typename:uint64_t
romutrio	./vendor/STC/misc/benchmarks/various/quicksort_bench.c	/^uint64_t romutrio(uint64_t s[3]) {$/;"	f	typeref:typename:uint64_t
root	./src/flecs.c	/^    ecs_table_t root;$/;"	m	struct:ecs_store_t	typeref:typename:ecs_table_t	file:
root	./src/flecs.h	/^    ecs_expr_var_scope_t root;$/;"	m	struct:ecs_vars_t	typeref:typename:ecs_expr_var_scope_t
root_sep	./src/flecs.h	/^    const char *root_sep; \/**< Optional, used for identifiers relative to root *\/$/;"	m	struct:ecs_entity_desc_t	typeref:typename:const char *
rosy_brown	./vendor/fmt/include/color.h	/^  rosy_brown = 0xBC8F8F,               \/\/ rgb(188,143,143)$/;"	e	enum:color
rotation	./vendor/raylib5/include/raylib.h	/^    Quaternion rotation;    \/\/ Rotation$/;"	m	struct:Transform	typeref:typename:Quaternion
rotation	./vendor/raylib5/include/raylib.h	/^    float rotation;         \/\/ Camera rotation in degrees$/;"	m	struct:Camera2D	typeref:typename:float
rotl64	./vendor/STC/misc/benchmarks/various/prng_bench.cpp	/^static inline uint64_t rotl64(const uint64_t x, const int k)$/;"	f	typeref:typename:uint64_t	file:
rotr	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^T rotr(T x, unsigned k) {$/;"	f	namespace:robin_hood::detail	typeref:typename:T
rotr	./vendor/fmt/include/format-inl.h	/^FMT_CONSTEXPR inline auto rotr(uint32_t n, uint32_t r) noexcept -> uint32_t {$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR auto
rotr	./vendor/fmt/include/format-inl.h	/^FMT_CONSTEXPR inline auto rotr(uint64_t n, uint32_t r) noexcept -> uint64_t {$/;"	f	namespace:detail	typeref:typename:FMT_CONSTEXPR auto
round_up_to_power_of_two	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^  static std::size_t round_up_to_power_of_two(std::size_t value) {$/;"	f	class:tsl::rh::power_of_two_growth_policy	typeref:typename:std::size_t
rounders	./src/flecs.c	/^static const double rounders[MAX_PRECISION + 1] =$/;"	v	typeref:typename:const double[]	file:
row	./src/flecs.c	/^    int32_t row;$/;"	m	struct:__anon7d4a41772a08	typeref:typename:int32_t	file:
row	./src/flecs.c	/^    int32_t row;$/;"	m	struct:__anon7d4a41772f08	typeref:typename:int32_t	file:
row	./src/flecs.c	/^    int32_t row;$/;"	m	struct:sort_helper_t	typeref:typename:int32_t	file:
row	./src/flecs.h	/^    uint32_t row;         \/* Table row of the entity *\/$/;"	m	struct:ecs_record_t	typeref:typename:uint32_t
row_iterator	./src/flecs.h	/^    using row_iterator = _::range_iterator<size_t>;$/;"	t	struct:flecs::iter	typeref:typename:_::range_iterator<size_t>
royal_blue	./vendor/fmt/include/color.h	/^  royal_blue = 0x4169E1,               \/\/ rgb(65,105,225)$/;"	e	enum:color
rsuite	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^struct rsuite$/;"	s	namespace:picobench
rule	./src/flecs.c	/^    const ecs_rule_t *rule;       \/* Reference to rule *\/$/;"	m	struct:__anon7d4a41773708	typeref:typename:const ecs_rule_t *	file:
rule	./src/flecs.h	/^        ecs_rule_iter_t rule;$/;"	m	union:ecs_iter_private_t::__anon7d4a417c020a	typeref:typename:ecs_rule_iter_t
rule	./src/flecs.h	/^    const ecs_rule_t *rule;$/;"	m	struct:ecs_rule_iter_t	typeref:typename:const ecs_rule_t *
rule	./src/flecs.h	/^inline flecs::rule<Comps...> world::rule(Args &&... args) const {$/;"	f	class:flecs::world	typeref:typename:flecs::rule<Comps...>
rule	./src/flecs.h	/^struct rule final : rule_base, iterable<Components...> {$/;"	s	namespace:flecs
rule_base	./src/flecs.h	/^    rule_base()$/;"	f	struct:flecs::rule_base
rule_base	./src/flecs.h	/^    rule_base(world_t *world, ecs_filter_desc_t *desc) $/;"	f	struct:flecs::rule_base
rule_base	./src/flecs.h	/^    rule_base(world_t *world, rule_t *rule = nullptr)$/;"	f	struct:flecs::rule_base
rule_base	./src/flecs.h	/^struct rule_base {$/;"	s	namespace:flecs
rule_builder	./src/flecs.h	/^    rule_builder(flecs::world_t* world, const char *name = nullptr)$/;"	f	struct:flecs::rule_builder
rule_builder	./src/flecs.h	/^inline flecs::rule_builder<Comps...> world::rule_builder(Args &&... args) const {$/;"	f	class:flecs::world	typeref:typename:flecs::rule_builder<Comps...>
rule_builder	./src/flecs.h	/^struct rule_builder final : _::rule_builder_base<Components...> {$/;"	s	namespace:flecs
rule_builder_base	./src/flecs.h	/^    using rule_builder_base = builder<$/;"	t	namespace:flecs::_	typeref:typename:builder<rule,ecs_filter_desc_t,rule_builder<Components...>,filter_builder_i,Components...>
rule_str	./src/flecs.h	/^    flecs::string rule_str() const {$/;"	f	struct:flecs::rule_base	typeref:typename:flecs::string
rule_t	./src/flecs.h	/^using rule_t = ecs_rule_t;$/;"	t	namespace:flecs	typeref:typename:ecs_rule_t
rule_vars	./src/flecs.c	/^    const ecs_rule_var_t *rule_vars; \/* Reference to rule variable array *\/$/;"	m	struct:__anon7d4a41773708	typeref:typename:const ecs_rule_var_t *	file:
rule_vars	./src/flecs.h	/^    const struct ecs_rule_var_t *rule_vars;$/;"	m	struct:ecs_rule_iter_t	typeref:typename:const struct ecs_rule_var_t *
run	./Makefile	/^run: $(TARGET)  # Target to run the C executable$/;"	t
run	./src/flecs.c	/^    ecs_run_action_t run;           \/* See ecs_system_desc_t *\/$/;"	m	struct:ecs_system_t	typeref:typename:ecs_run_action_t	file:
run	./src/flecs.h	/^    Base& run(ecs_iter_action_t action) {$/;"	f	struct:flecs::observer_builder_i	typeref:typename:Base &
run	./src/flecs.h	/^    Base& run(ecs_iter_action_t action) {$/;"	f	struct:flecs::system_builder_i	typeref:typename:Base &
run	./src/flecs.h	/^    ecs_run_action_t run;       \/**< See ecs_observer_desc_t::run *\/$/;"	m	struct:ecs_observer_t	typeref:typename:ecs_run_action_t
run	./src/flecs.h	/^    ecs_run_action_t run;$/;"	m	struct:ecs_observer_desc_t	typeref:typename:ecs_run_action_t
run	./src/flecs.h	/^    ecs_run_action_t run;$/;"	m	struct:ecs_system_desc_t	typeref:typename:ecs_run_action_t
run	./src/flecs.h	/^    int run() {$/;"	f	struct:flecs::app_builder	typeref:typename:int
run	./src/flecs.h	/^    static void run(ecs_iter_t *iter) {$/;"	f	struct:flecs::_::each_delegate	typeref:typename:void
run	./src/flecs.h	/^    static void run(ecs_iter_t *iter) {$/;"	f	struct:flecs::_::entity_observer_delegate	typeref:typename:void
run	./src/flecs.h	/^    static void run(ecs_iter_t *iter) {$/;"	f	struct:flecs::_::entity_payload_observer_delegate	typeref:typename:void
run	./src/flecs.h	/^    static void run(ecs_iter_t *iter) {$/;"	f	struct:flecs::_::iter_delegate	typeref:typename:void
run	./src/flecs.h	/^    system_runner_fluent run(ecs_ftime_t delta_time = 0.0f, void *param = nullptr) const {$/;"	f	struct:flecs::system	typeref:typename:system_runner_fluent
run	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    int run(int benchmark_random_seed = -1)$/;"	f	class:picobench::runner	typeref:typename:int
run	./vendor/STC/misc/tests/ctest.h	/^    union ctest_run_func_union run;$/;"	m	struct:ctest	typeref:union:ctest_run_func_union
run	./vendor/fmt/include/chrono.h	/^    auto run() -> bool {$/;"	f	struct:gmtime::dispatcher	typeref:typename:bool
run	./vendor/fmt/include/chrono.h	/^    auto run() -> bool {$/;"	f	struct:localtime::dispatcher	typeref:typename:bool
run_action	./src/flecs.c	/^static ecs_app_run_action_t run_action = flecs_default_run_action;$/;"	v	typeref:typename:ecs_app_run_action_t	file:
run_add	./src/flecs.h	/^    static void run_add(ecs_iter_t *iter) {$/;"	f	struct:flecs::_::each_delegate	typeref:typename:void
run_benchmarks	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    void run_benchmarks(int random_seed = -1)$/;"	f	class:picobench::runner	typeref:typename:void
run_pipeline	./src/flecs.h	/^inline void world::run_pipeline(const flecs::entity_t pip, ecs_ftime_t delta_time) const {$/;"	f	class:flecs::world	typeref:typename:void
run_pipeline	./src/flecs.h	/^inline void world::run_pipeline(ecs_ftime_t delta_time) const {$/;"	f	class:flecs::world	typeref:typename:void
run_post_frame	./src/flecs.h	/^    void run_post_frame(ecs_fini_action_t action, void *ctx) const {$/;"	f	struct:flecs::world	typeref:typename:void
run_remove	./src/flecs.h	/^    static void run_remove(ecs_iter_t *iter) {$/;"	f	struct:flecs::_::each_delegate	typeref:typename:void
run_set	./src/flecs.h	/^    static void run_set(ecs_iter_t *iter) {$/;"	f	struct:flecs::_::each_delegate	typeref:typename:void
run_worker	./src/flecs.h	/^    system_runner_fluent run_worker($/;"	f	struct:flecs::system	typeref:typename:system_runner_fluent
rune	./vendor/STC/include/stc/priv/cregex_prv.c	/^        _Rune    rune;           \/* character *\/$/;"	m	union:_Reinst::__anon4ce7005a020a	typeref:typename:_Rune	file:
rune_type	./vendor/STC/include/stc/priv/cregex_prv.c	/^    int rune_type;$/;"	m	struct:_Parser	typeref:typename:int	file:
runner	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    runner(bool local = false)$/;"	f	class:picobench::runner
runner	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^class runner : public registry$/;"	c	namespace:picobench
running	./src/flecs.c	/^    bool running;$/;"	m	struct:ecs_http_server_t	typeref:typename:bool	file:
runtime	./vendor/fmt/include/base.h	/^inline auto runtime(string_view s) -> runtime_format_string<> { return {{s}}; }$/;"	f	typeref:typename:runtime_format_string<>
runtime	./vendor/fmt/include/base.h	/^inline auto runtime(string_view s) -> string_view { return s; }$/;"	f	typeref:typename:string_view
runtime	./vendor/fmt/include/xchar.h	/^inline auto runtime(wstring_view s) -> runtime_format_string<wchar_t> {$/;"	f	typeref:typename:runtime_format_string<wchar_t>
runtime	./vendor/fmt/include/xchar.h	/^inline auto runtime(wstring_view s) -> wstring_view { return s; }$/;"	f	typeref:typename:wstring_view
runtime_format_string	./vendor/fmt/include/base.h	/^template <typename Char = char> struct runtime_format_string {$/;"	s
runtime_named_field	./vendor/fmt/include/compile.h	/^template <typename Char> struct runtime_named_field {$/;"	s	namespace:detail
s	./src/flecs.c	/^        int64_t s;$/;"	m	union:flecs_ito_::__anon7d4a4177040a	typeref:typename:int64_t	file:
s	./vendor/fmt/include/chrono.h	/^  seconds s;$/;"	m	struct:detail::chrono_formatter	typeref:typename:seconds
s_alignment	./src/flecs.h	/^    static size_t s_alignment;$/;"	m	struct:flecs::_::cpp_type_impl	typeref:typename:size_t
s_alignment	./src/flecs.h	/^template <typename T> size_t        cpp_type_impl<T>::s_alignment;$/;"	m	class:flecs::_::cpp_type_impl<T>	typeref:typename:size_t
s_allow_tag	./src/flecs.h	/^    static bool s_allow_tag;$/;"	m	struct:flecs::_::cpp_type_impl	typeref:typename:bool
s_id	./src/flecs.h	/^    static entity_t s_id;$/;"	m	struct:flecs::_::cpp_type_impl	typeref:typename:entity_t
s_id	./src/flecs.h	/^template <typename T> entity_t      cpp_type_impl<T>::s_id;$/;"	m	class:flecs::_::cpp_type_impl<T>	typeref:typename:entity_t
s_reset_count	./src/flecs.h	/^    static int32_t s_reset_count;$/;"	m	struct:flecs::_::cpp_type_impl	typeref:typename:int32_t
s_reset_count	./src/flecs.h	/^template <typename T> int32_t       cpp_type_impl<T>::s_reset_count;$/;"	m	class:flecs::_::cpp_type_impl<T>	typeref:typename:int32_t
s_size	./src/flecs.h	/^    static size_t s_size;$/;"	m	struct:flecs::_::cpp_type_impl	typeref:typename:size_t
s_size	./src/flecs.h	/^template <typename T> size_t        cpp_type_impl<T>::s_size;$/;"	m	class:flecs::_::cpp_type_impl<T>	typeref:typename:size_t
saddle_brown	./vendor/fmt/include/color.h	/^  saddle_brown = 0x8B4513,             \/\/ rgb(139,69,19)$/;"	e	enum:color
safe_duration_cast	./vendor/fmt/include/chrono.h	/^auto safe_duration_cast(std::chrono::duration<FromRep, FromPeriod> from,$/;"	f	namespace:safe_duration_cast	typeref:typename:To
safe_duration_cast	./vendor/fmt/include/chrono.h	/^namespace safe_duration_cast {$/;"	n
safe_float_conversion	./vendor/fmt/include/chrono.h	/^FMT_CONSTEXPR auto safe_float_conversion(const From from, int& ec) -> To {$/;"	f	namespace:safe_duration_cast	typeref:typename:To
salmon	./vendor/fmt/include/color.h	/^  salmon = 0xFA8072,                   \/\/ rgb(250,128,114)$/;"	e	enum:color
sampleRate	./vendor/raylib5/include/raylib.h	/^    unsigned int sampleRate;    \/\/ Frequency (samples per second)$/;"	m	struct:AudioStream	typeref:typename:unsigned int
sampleRate	./vendor/raylib5/include/raylib.h	/^    unsigned int sampleRate;    \/\/ Frequency (samples per second)$/;"	m	struct:Wave	typeref:typename:unsigned int
sampleSize	./vendor/raylib5/include/raylib.h	/^    unsigned int sampleSize;    \/\/ Bit depth (bits per sample): 8, 16, 32 (24 not supported)$/;"	m	struct:AudioStream	typeref:typename:unsigned int
sampleSize	./vendor/raylib5/include/raylib.h	/^    unsigned int sampleSize;    \/\/ Bit depth (bits per sample): 8, 16, 32 (24 not supported)$/;"	m	struct:Wave	typeref:typename:unsigned int
samples	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        int samples; \/\/ number of samples taken$/;"	m	struct:picobench::report::benchmark_problem_space	typeref:typename:int
samples	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    benchmark& samples(int n) { _samples = n; return *this; }$/;"	f	class:picobench::benchmark	typeref:typename:benchmark &
sandy_brown	./vendor/fmt/include/color.h	/^  sandy_brown = 0xF4A460,              \/\/ rgb(244,164,96)$/;"	e	enum:color
sanitize	./src/flecs.h	/^    bool sanitize;                  \/**< Is this a sanitize build *\/$/;"	m	struct:ecs_build_info_t	typeref:typename:bool
say	./vendor/fmt/include/os.h	/^void say(const S& format_str, Args&&... args) {$/;"	f	typeref:typename:void
sb	./vendor/STC/include/stc/algo/filter.h	/^    bool done, sb[c_NFILTERS];$/;"	m	struct:_flt_base	typeref:typename:bool[]
sb_top	./vendor/STC/include/stc/algo/filter.h	/^    uint8_t sn_top, sb_top;$/;"	m	struct:_flt_base	typeref:typename:uint8_t
scale	./vendor/raylib5/include/raylib.h	/^    Vector3 scale;          \/\/ Scale$/;"	m	struct:Transform	typeref:typename:Vector3
scale	./vendor/raylib5/include/raylib.h	/^    float scale[2];                 \/\/ VR distortion scale$/;"	m	struct:VrStereoConfig	typeref:typename:float[2]
scaleIn	./vendor/raylib5/include/raylib.h	/^    float scaleIn[2];               \/\/ VR distortion scale in$/;"	m	struct:VrStereoConfig	typeref:typename:float[2]
scope	./src/flecs.c	/^    ecs_entity_t scope;              \/* Entity of current scope *\/$/;"	m	struct:ecs_stage_t	typeref:typename:ecs_entity_t	file:
scope	./src/flecs.c	/^    ecs_entity_t scope;$/;"	m	struct:ecs_suspend_readonly_state_t	typeref:typename:ecs_entity_t	file:
scope	./src/flecs.c	/^    ecs_entity_t scope[STACK_MAX_SIZE];$/;"	m	struct:__anon7d4a41771908	typeref:typename:ecs_entity_t[]	file:
scope	./src/flecs.c	/^    int32_t scope; \/* Nesting level of query scopes *\/$/;"	m	struct:__anon7d4a41773608	typeref:typename:int32_t	file:
scope	./src/flecs.h	/^    Self& scope(const Func& func) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
scope	./src/flecs.h	/^    ecs_meta_scope_t scope[ECS_META_MAX_SCOPE_DEPTH];$/;"	m	struct:ecs_meta_cursor_t	typeref:typename:ecs_meta_scope_t[]
scope	./src/flecs.h	/^    scoped_world scope() const {$/;"	f	struct:flecs::entity_builder	typeref:typename:scoped_world
scope	./src/flecs.h	/^    void scope(const Func& func) const {$/;"	f	struct:flecs::world	typeref:typename:void
scope	./src/flecs.h	/^    void scope(id_t parent, const Func& func) const {$/;"	f	struct:flecs::world	typeref:typename:void
scope	./src/flecs.h	/^inline flecs::scoped_world world::scope() const {$/;"	f	class:flecs::world	typeref:typename:flecs::scoped_world
scope	./src/flecs.h	/^inline flecs::scoped_world world::scope(const char* name) const {$/;"	f	class:flecs::world	typeref:typename:flecs::scoped_world
scope	./src/flecs.h	/^inline flecs::scoped_world world::scope(id_t parent) const {$/;"	f	class:flecs::world	typeref:typename:flecs::scoped_world
scope	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    scope(state& s)$/;"	f	class:picobench::scope	typeref:typename:PICOBENCH_INLINE
scope	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^class scope$/;"	c	namespace:picobench
scope_assign_stmt	./src/flecs.c	/^    bool scope_assign_stmt;$/;"	m	struct:__anon7d4a41771908	typeref:typename:bool	file:
scope_close	./src/flecs.h	/^    Base& scope_close() {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
scope_is_not	./src/flecs.c	/^    ecs_flags32_t scope_is_not; \/* Whether scope is prefixed with not *\/$/;"	m	struct:__anon7d4a41773608	typeref:typename:ecs_flags32_t	file:
scope_open	./src/flecs.h	/^    Base& scope_open() {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
scoped_world	./src/flecs.h	/^    scoped_world($/;"	f	struct:flecs::scoped_world
scoped_world	./src/flecs.h	/^    scoped_world(const scoped_world& obj) : world(nullptr) {$/;"	f	struct:flecs::scoped_world
scoped_world	./src/flecs.h	/^struct scoped_world : world {$/;"	s	namespace:flecs
script	./src/flecs.h	/^    char *script;$/;"	m	struct:EcsScript	typeref:typename:char *
se	./vendor/STC/include/stc/priv/cregex_prv.c	/^    _Resublist  se;         \/* matched subexpressions in this thread *\/$/;"	m	struct:_Relist	typeref:typename:_Resublist	file:
sea_green	./vendor/fmt/include/color.h	/^  sea_green = 0x2E8B57,                \/\/ rgb(46,139,87)$/;"	e	enum:color
sea_shell	./vendor/fmt/include/color.h	/^  sea_shell = 0xFFF5EE,                \/\/ rgb(255,245,238)$/;"	e	enum:color
sec	./src/flecs.h	/^    uint32_t sec;$/;"	m	struct:ecs_time_t	typeref:typename:uint32_t
second	./src/flecs.c	/^    ecs_id_record_elem_t second;  \/* (*, O) *\/$/;"	m	struct:ecs_id_record_t	typeref:typename:ecs_id_record_elem_t	file:
second	./src/flecs.c	/^    ecs_rule_ref_t second;$/;"	m	struct:ecs_rule_op_t	typeref:typename:ecs_rule_ref_t	file:
second	./src/flecs.h	/^    Base& second() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
second	./src/flecs.h	/^    Base& second(const char *name) {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
second	./src/flecs.h	/^    Base& second(flecs::entity_t id) {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
second	./src/flecs.h	/^    ecs_term_id_t second;       \/**< Second element of pair *\/$/;"	m	struct:ecs_term_t	typeref:typename:ecs_term_id_t
second	./src/flecs.h	/^    using second = Second;$/;"	t	struct:flecs::pair	typeref:typename:Second
second	./src/flecs.h	/^inline flecs::entity id::second() const {$/;"	f	class:flecs::id	typeref:typename:flecs::entity
second	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    T2 second; \/\/ NOLINT(misc-non-private-member-variables-in-classes)$/;"	m	struct:robin_hood::pair	typeref:typename:T2
second	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    Second second;$/;"	m	struct:emhash7::entry	typeref:typename:Second
second	./vendor/fmt/include/chrono.h	/^  auto second() const -> Rep { return static_cast<Rep>(mod(s.count(), 60)); }$/;"	f	struct:detail::chrono_formatter	typeref:typename:Rep
second_arg	./src/flecs.h	/^struct second_arg {$/;"	s	namespace:flecs
second_arg_impl	./src/flecs.h	/^struct second_arg_impl<Func, _::arg_list<First, T, Args ...> > {$/;"	s	namespace:flecs
second_arg_t	./src/flecs.h	/^using second_arg_t = typename second_arg<Func>::type;$/;"	t	namespace:flecs	typeref:typename:second_arg<Func>::type
second_type	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    using second_type = T2;$/;"	t	struct:robin_hood::pair	typeref:typename:T2
second_type	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    using second_type = Second;$/;"	t	struct:emhash7::entry	typeref:typename:Second
seconds	./vendor/fmt/include/chrono.h	/^  using seconds = std::chrono::duration<rep>;$/;"	t	struct:detail::chrono_formatter	typeref:typename:std::chrono::duration<rep>
secs	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^static float secs(Range s) { return (float)(s.t2 - s.t1) \/ CLOCKS_PER_SEC; }$/;"	f	typeref:typename:float	file:
secs	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^static float secs(Range s) { return (float)(s.t2 - s.t1) \/ CLOCKS_PER_SEC; }$/;"	f	typeref:typename:float	file:
secs	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^static float secs(Range s) { return (float)(s.t2 - s.t1) \/ CLOCKS_PER_SEC; }$/;"	f	typeref:typename:float	file:
secs	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^static float secs(Range s) { return (float)(s.t2 - s.t1) \/ CLOCKS_PER_SEC; }$/;"	f	typeref:typename:float	file:
secs	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^static float secs(Range s) { return (float)(s.t2 - s.t1) \/ CLOCKS_PER_SEC; }$/;"	f	typeref:typename:float	file:
seed	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^uint64_t seed = time(NULL);$/;"	v	typeref:typename:uint64_t
seed	./vendor/STC/misc/benchmarks/picobench/picobench_smap.cpp	/^uint64_t seed = time(NULL); \/\/ 18237129837891;$/;"	v	typeref:typename:uint64_t
seed	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^uint64_t seed = 1, mask1 = 0xfffffff, mask2 = 0xffff;$/;"	v	typeref:typename:uint64_t
seed	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^uint64_t seed = 1, mask1 = 0xffffffff;$/;"	v	typeref:typename:uint64_t
seed	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^uint64_t seed = 1, mask1 = 0xfffffff, mask2 = 0xffff;$/;"	v	typeref:typename:uint64_t
seed	./vendor/STC/misc/benchmarks/plotbench/pque_benchmark.cpp	/^static const uint32_t seed = 1234;$/;"	v	typeref:typename:const uint32_t	file:
seed	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^uint64_t seed = 1, mask1 = 0xfffffff;$/;"	v	typeref:typename:uint64_t
seed	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^uint64_t seed = 1, mask1 = 0xfffffff, mask2 = 0xffff;$/;"	v	typeref:typename:uint64_t
seed	./vendor/STC/misc/benchmarks/various/rust_hashmap.rs	/^    seed: u64,$/;"	m	struct:MyHasher
seed	./vendor/STC/misc/examples/hashmaps/birthday.c	/^static uint64_t seed = 12345;$/;"	v	typeref:typename:uint64_t	file:
segmented_map	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^using segmented_map = detail::table<Key, T, Hash, KeyEqual, AllocatorOrContainer, Bucket, true>;$/;"	t	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE	typeref:typename:detail::table<Key,T,Hash,KeyEqual,AllocatorOrContainer,Bucket,true>
segmented_map	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^using segmented_map =$/;"	t	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::pmr	typeref:typename:detail::table<Key,T,Hash,KeyEqual,ANKERL_UNORDERED_DENSE_PMR::polymorphic_allocator<std::pair<Key,T>>,Bucket,true>
segmented_set	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^using segmented_set = detail::table<Key, void, Hash, KeyEqual, AllocatorOrContainer, Bucket, tru/;"	t	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE	typeref:typename:detail::table<Key,void,Hash,KeyEqual,AllocatorOrContainer,Bucket,true>
segmented_set	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^using segmented_set =$/;"	t	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::pmr	typeref:typename:detail::table<Key,void,Hash,KeyEqual,ANKERL_UNORDERED_DENSE_PMR::polymorphic_allocator<Key>,Bucket,true>
segmented_vector	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    segmented_vector(Allocator alloc)$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector
segmented_vector	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    segmented_vector(segmented_vector const& other) {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector
segmented_vector	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    segmented_vector(segmented_vector const& other, Allocator alloc)$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector
segmented_vector	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    segmented_vector(segmented_vector&& other) noexcept$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector
segmented_vector	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    segmented_vector(segmented_vector&& other, Allocator alloc)$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector
segmented_vector	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^class segmented_vector {$/;"	c	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE
self	./src/flecs.c	/^    ecs_map_t self;                  \/* map<trigger_id, trigger_t> *\/$/;"	m	struct:ecs_event_id_record_t	typeref:typename:ecs_map_t	file:
self	./src/flecs.c	/^    ecs_world_t *self;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_world_t *	file:
self	./src/flecs.h	/^    Base& self() {$/;"	f	struct:flecs::term_id_builder_i	typeref:typename:Base &
self_index	./src/flecs.h	/^    ecs_id_record_t *self_index;$/;"	m	struct:ecs_term_iter_t	typeref:typename:ecs_id_record_t *
self_t	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using self_t = segmented_vector<T, Allocator, MaxSegmentSizeBytes>;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:segmented_vector<T,Allocator,MaxSegmentSizeBytes>
self_up	./src/flecs.c	/^    ecs_map_t self_up;               \/* map<trigger_id, trigger_t> *\/$/;"	m	struct:ecs_event_id_record_t	typeref:typename:ecs_map_t	file:
send_error_count	./src/flecs.h	/^        ecs_metric_t send_error_count;$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1708	typeref:typename:ecs_metric_t
send_ok_count	./src/flecs.h	/^        ecs_metric_t send_ok_count;$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1708	typeref:typename:ecs_metric_t
send_queue	./src/flecs.c	/^    ecs_http_send_queue_t send_queue;$/;"	m	struct:ecs_http_server_t	typeref:typename:ecs_http_send_queue_t	file:
send_queue_wait_ms	./src/flecs.h	/^    int32_t send_queue_wait_ms;       \/**< Send queue wait time when empty *\/$/;"	m	struct:__anon7d4a417c0d08	typeref:typename:int32_t
sentinel_t	./vendor/fmt/include/format.h	/^template <typename T> using sentinel_t = decltype(std::end(std::declval<T&>()));$/;"	t	namespace:detail
sep	./src/flecs.h	/^    const char *sep;      \/**< Optional custom separator for hierarchical names.$/;"	m	struct:ecs_entity_desc_t	typeref:typename:const char *
sep	./vendor/fmt/include/format.h	/^  std::basic_string<Char> sep;$/;"	m	struct:detail::loc_writer	typeref:typename:std::basic_string<Char>
sep	./vendor/fmt/include/ranges.h	/^  basic_string_view<Char> sep;$/;"	m	struct:join_view	typeref:typename:basic_string_view<Char>
sep	./vendor/fmt/include/ranges.h	/^  basic_string_view<Char> sep;$/;"	m	struct:tuple_join_view	typeref:typename:basic_string_view<Char>
separator	./src/flecs.h	/^    const char *separator;$/;"	m	struct:ecs_strbuf_list_elem	typeref:typename:const char *
separator	./vendor/fmt/include/ranges.h	/^  basic_string_view<char_type> separator;$/;"	m	struct:detail::format_tuple_element	typeref:typename:basic_string_view<char_type>
separator_	./vendor/fmt/include/format.h	/^  std::string separator_;$/;"	m	class:format_facet	typeref:typename:std::string
sequence	./vendor/fmt/include/ranges.h	/^enum class range_format { disabled, map, set, sequence, string, debug_string };$/;"	e	enum:range_format
ser	./src/flecs.c	/^    const EcsMetaTypeSerialized *ser;$/;"	m	struct:ecs_json_value_ser_ctx_t	typeref:typename:const EcsMetaTypeSerialized *	file:
serialize	./src/flecs.h	/^    ecs_meta_serialize_t serialize;    \/**< Serialize action *\/$/;"	m	struct:EcsOpaque	typeref:typename:ecs_meta_serialize_t
serialize	./src/flecs.h	/^    opaque& serialize(flecs::serialize<T> func) {$/;"	f	struct:flecs::opaque	typeref:typename:opaque &
serialize	./src/flecs.h	/^using serialize = int(*)(const serializer *, const T*);$/;"	t	namespace:flecs
serialize	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  void serialize(Serializer& serializer) const {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:void
serialize	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  void serialize(Serializer& serializer) const {$/;"	f	class:tsl::robin_map	typeref:typename:void
serialize_alerts	./src/flecs.h	/^    bool serialize_alerts;     \/**< Serialize active alerts for entity *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_base	./src/flecs.h	/^    bool serialize_base;       \/**< Serialize base components *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_brief	./src/flecs.h	/^    bool serialize_brief;      \/**< Serialize brief doc description *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_builtin	./src/flecs.h	/^    bool serialize_builtin;    \/**< Exclude flecs modules & contents *\/$/;"	m	struct:ecs_world_to_json_desc_t	typeref:typename:bool
serialize_color	./src/flecs.h	/^    bool serialize_color;      \/**< Serialize doc color *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_colors	./src/flecs.h	/^    bool serialize_colors;          \/**< Serialize doc color for entities *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_entities	./src/flecs.h	/^    bool serialize_entities;        \/**< Serialize entities (for This terms) *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_entity_ids	./src/flecs.h	/^    bool serialize_entity_ids;      \/**< Serialize numerical ids for entities *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_entity_labels	./src/flecs.h	/^    bool serialize_entity_labels;   \/**< Serialize doc name for entities *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_entity_names	./src/flecs.h	/^    bool serialize_entity_names;    \/**< Serialize names (not paths) for entities *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_field_info	./src/flecs.h	/^    bool serialize_field_info;      \/**< Serialize metadata for fields returned by query *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_hidden	./src/flecs.h	/^    bool serialize_hidden;     \/**< Serialize ids hidden by override *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_id_labels	./src/flecs.h	/^    bool serialize_id_labels;       \/**< Serialize actual (matched) component id labels *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_id_labels	./src/flecs.h	/^    bool serialize_id_labels;  \/**< Serialize labels of (component) ids *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_ids	./src/flecs.h	/^    bool serialize_ids;             \/**< Serialize actual (matched) component ids *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_ids	./src/flecs.h	/^    bool serialize_ids;        \/**< Serialize (component) ids *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_impl	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  void serialize_impl(Serializer& serializer) const {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:void
serialize_is_set	./src/flecs.h	/^    bool serialize_is_set;          \/**< Serialize is_set (for optional terms) *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_label	./src/flecs.h	/^    bool serialize_label;      \/**< Serialize doc name *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_link	./src/flecs.h	/^    bool serialize_link;       \/**< Serialize doc link (URL) *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_matches	./src/flecs.h	/^    bool serialize_matches;    \/**< Serialize which queries entity matches with *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_modules	./src/flecs.h	/^    bool serialize_modules;    \/**< Exclude modules & contents *\/$/;"	m	struct:ecs_world_to_json_desc_t	typeref:typename:bool
serialize_path	./src/flecs.h	/^    bool serialize_path;       \/**< Serialize full pathname *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_private	./src/flecs.h	/^    bool serialize_private;         \/**< Serialize component values *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_private	./src/flecs.h	/^    bool serialize_private;    \/**< Serialize private components *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_query_info	./src/flecs.h	/^    bool serialize_query_info;      \/**< Serialize query terms *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_query_plan	./src/flecs.h	/^    bool serialize_query_plan;      \/**< Serialize query plan *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_query_profile	./src/flecs.h	/^    bool serialize_query_profile;   \/**< Profile query performance *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_refs	./src/flecs.h	/^    ecs_entity_t serialize_refs; \/**< Serialize references (incoming edges) for relationship *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:ecs_entity_t
serialize_rows	./src/flecs.h	/^    bool serialize_rows;            \/**< Use row-based serialization, with entities in separate/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_sources	./src/flecs.h	/^    bool serialize_sources;         \/**< Serialize sources *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_t	./src/flecs.h	/^using serialize_t = ecs_meta_serialize_t;$/;"	t	namespace:flecs	typeref:typename:ecs_meta_serialize_t
serialize_table	./src/flecs.h	/^    bool serialize_table;           \/**< Serialize entire table vs. matched components *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_term_ids	./src/flecs.h	/^    bool serialize_term_ids;        \/**< Serialize query term component ids *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_term_labels	./src/flecs.h	/^    bool serialize_term_labels;     \/**< Serialize query term component id labels *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_type_info	./src/flecs.h	/^    bool serialize_type_info;       \/**< Serialize type information *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_type_info	./src/flecs.h	/^    bool serialize_type_info;  \/**< Serialize type info (requires serialize_values) *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_values	./src/flecs.h	/^    bool serialize_values;          \/**< Serialize component values *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_values	./src/flecs.h	/^    bool serialize_values;     \/**< Serialize component values *\/$/;"	m	struct:ecs_entity_to_json_desc_t	typeref:typename:bool
serialize_variable_ids	./src/flecs.h	/^    bool serialize_variable_ids;    \/**< Serialize numerical ids for variables *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_variable_labels	./src/flecs.h	/^    bool serialize_variable_labels; \/**< Serialize doc name for variables *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serialize_variables	./src/flecs.h	/^    bool serialize_variables;       \/**< Serialize variables *\/$/;"	m	struct:ecs_iter_to_json_desc_t	typeref:typename:bool
serializer	./src/flecs.h	/^using serializer = ecs_serializer_t;$/;"	t	namespace:flecs	typeref:typename:ecs_serializer_t
server	./src/flecs.h	/^    ecs_http_server_t *server;$/;"	m	struct:__anon7d4a417c0808	typeref:typename:ecs_http_server_t *
set	./src/flecs.h	/^    Self& set(A&& value) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set	./src/flecs.h	/^    Self& set(Second constant, const First& value) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set	./src/flecs.h	/^    Self& set(Second second, First&& value) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set	./src/flecs.h	/^    Self& set(Second second, const First& value) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set	./src/flecs.h	/^    Self& set(T&& value) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set	./src/flecs.h	/^    Self& set(const A& value) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set	./src/flecs.h	/^    Self& set(const T& value) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set	./src/flecs.h	/^    void set(A&& value) const {$/;"	f	struct:flecs::world	typeref:typename:void
set	./src/flecs.h	/^    void set(T&& value) const {$/;"	f	struct:flecs::world	typeref:typename:void
set	./src/flecs.h	/^    void set(const A& value) const {$/;"	f	struct:flecs::world	typeref:typename:void
set	./src/flecs.h	/^    void set(const T& value) const {$/;"	f	struct:flecs::world	typeref:typename:void
set	./src/flecs.h	/^inline Self& entity_builder<Self>::set(const Func& func) {$/;"	f	class:flecs::entity_builder	typeref:typename:Self &
set	./src/flecs.h	/^inline void set(world_t *world, entity_t entity, A&& value) {$/;"	f	namespace:flecs	typeref:typename:void
set	./src/flecs.h	/^inline void set(world_t *world, entity_t entity, const A& value) {$/;"	f	namespace:flecs	typeref:typename:void
set	./src/flecs.h	/^inline void set(world_t *world, flecs::entity_t entity, T&& value, flecs::id_t id) {$/;"	f	namespace:flecs	typeref:typename:void
set	./src/flecs.h	/^inline void set(world_t *world, flecs::entity_t entity, const T& value, flecs::id_t id) {$/;"	f	namespace:flecs	typeref:typename:void
set	./src/flecs.h	/^inline void world::set(Second second, First&& value) const {$/;"	f	class:flecs::world	typeref:typename:void
set	./src/flecs.h	/^inline void world::set(Second second, const First& value) const {$/;"	f	class:flecs::world	typeref:typename:void
set	./src/flecs.h	/^inline void world::set(const Func& func) const {$/;"	f	class:flecs::world	typeref:typename:void
set	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^using set = detail::table<Key, void, Hash, KeyEqual, ANKERL_UNORDERED_DENSE_PMR::polymorphic_all/;"	t	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::pmr	typeref:typename:detail::table<Key,void,Hash,KeyEqual,ANKERL_UNORDERED_DENSE_PMR::polymorphic_allocator<Key>,Bucket,false>
set	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^using set = detail::table<Key, void, Hash, KeyEqual, AllocatorOrContainer, Bucket, false>;$/;"	t	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE	typeref:typename:detail::table<Key,void,Hash,KeyEqual,AllocatorOrContainer,Bucket,false>
set	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR void set(T* buf_data, size_t buf_capacity) noexcept {$/;"	f	class:detail::buffer	typeref:typename:FMT_CONSTEXPR void
set	./vendor/fmt/include/base.h	/^constexpr auto set(type rhs) -> int { return 1 << static_cast<int>(rhs); }$/;"	f	namespace:detail	typeref:typename:int
set	./vendor/fmt/include/ranges.h	/^enum class range_format { disabled, map, set, sequence, string, debug_string };$/;"	e	enum:range_format
set_T	./src/flecs.c	/^#define set_T(/;"	d	file:
set_alias	./src/flecs.h	/^    Self& set_alias(const char *name) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set_as_last_bucket	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  void set_as_last_bucket() noexcept { m_last_bucket = true; }$/;"	f	class:tsl::detail_robin_hash::bucket_entry	typeref:typename:void
set_automerge	./src/flecs.h	/^    void set_automerge(bool automerge) const {$/;"	f	struct:flecs::world	typeref:typename:void
set_background_color	./vendor/fmt/include/color.h	/^  bool set_background_color;$/;"	m	class:text_style	typeref:typename:bool
set_bench_suite	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^int global_registry::set_bench_suite(const char* name)$/;"	f	class:picobench::global_registry	typeref:typename:int
set_binding_ctx	./src/flecs.h	/^    void set_binding_ctx(void* ctx, ecs_ctx_free_t ctx_free = nullptr) const {$/;"	f	struct:flecs::world	typeref:typename:void
set_bool	./src/flecs.h	/^    int set_bool(bool value) {$/;"	f	struct:flecs::cursor	typeref:typename:int
set_brackets	./vendor/fmt/include/ranges.h	/^  FMT_CONSTEXPR void set_brackets(basic_string_view<Char> open,$/;"	f	struct:formatter	typeref:typename:FMT_CONSTEXPR void
set_brackets	./vendor/fmt/include/ranges.h	/^  FMT_CONSTEXPR void set_brackets(basic_string_view<Char> open,$/;"	f	struct:range_formatter	typeref:typename:FMT_CONSTEXPR void
set_brief	./src/flecs.h	/^inline void set_brief(flecs::entity& e, const char *description) {$/;"	f	namespace:flecs::doc	typeref:typename:void
set_char	./src/flecs.h	/^    int set_char(char value) {$/;"	f	struct:flecs::cursor	typeref:typename:int
set_color	./src/flecs.h	/^inline void set_color(flecs::entity& e, const char *color) {$/;"	f	namespace:flecs::doc	typeref:typename:void
set_compare_results_across_benchmarks	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    void set_compare_results_across_benchmarks(bool b) { _compare_results_across_benchmarks = b;/;"	f	class:picobench::runner	typeref:typename:void
set_compare_results_across_samples	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    void set_compare_results_across_samples(bool b) { _compare_results_across_samples = b; }$/;"	f	class:picobench::runner	typeref:typename:void
set_count	./src/flecs.h	/^        ecs_metric_t set_count;$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1308	typeref:typename:ecs_metric_t
set_count	./src/flecs.h	/^        int64_t set_count;             \/**< Set commands processed *\/$/;"	m	struct:ecs_world_info_t::__anon7d4a417c0708	typeref:typename:int64_t
set_ctx	./src/flecs.h	/^    void set_ctx(void* ctx, ecs_ctx_free_t ctx_free = nullptr) const {$/;"	f	struct:flecs::world	typeref:typename:void
set_debug_format	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR void set_debug_format(bool set = true) {$/;"	f	struct:detail::native_formatter	typeref:typename:FMT_CONSTEXPR void
set_debug_format	./vendor/fmt/include/std.h	/^  FMT_CONSTEXPR void set_debug_format(bool set = true) { debug_ = set; }$/;"	f	struct:formatter	typeref:typename:FMT_CONSTEXPR void
set_default_samples	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    void set_default_samples(int n)$/;"	f	class:picobench::runner	typeref:typename:void
set_default_state_iterations	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    void set_default_state_iterations(const std::vector<size_t>& data)$/;"	f	class:picobench::runner	typeref:typename:void
set_detail	./src/flecs.h	/^inline void set_detail(flecs::entity& e, const char *description) {$/;"	f	namespace:flecs::doc	typeref:typename:void
set_doc_brief	./src/flecs.h	/^Self& set_doc_brief(const char *brief) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set_doc_color	./src/flecs.h	/^Self& set_doc_color(const char *link) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set_doc_detail	./src/flecs.h	/^Self& set_doc_detail(const char *detail) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set_doc_link	./src/flecs.h	/^Self& set_doc_link(const char *link) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set_doc_name	./src/flecs.h	/^Self& set_doc_name(const char *name) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set_entity	./src/flecs.h	/^    int set_entity(flecs::entity_t value) {$/;"	f	struct:flecs::cursor	typeref:typename:int
set_entity_range	./src/flecs.h	/^    void set_entity_range(entity_t min, entity_t max) const {$/;"	f	struct:flecs::world	typeref:typename:void
set_error	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    void set_error(error_t e) { _error = e; }$/;"	f	class:picobench::runner	typeref:typename:void
set_float	./src/flecs.h	/^    int set_float(double value) {$/;"	f	struct:flecs::cursor	typeref:typename:int
set_foreground_color	./vendor/fmt/include/color.h	/^  bool set_foreground_color;$/;"	m	class:text_style	typeref:typename:bool
set_group	./src/flecs.h	/^    iter_iterable<Components...>& set_group() {$/;"	f	struct:flecs::iter_iterable	typeref:typename:iter_iterable<Components...> &
set_group	./src/flecs.h	/^    iter_iterable<Components...>& set_group(uint64_t group_id) {$/;"	f	struct:flecs::iter_iterable	typeref:typename:iter_iterable<Components...> &
set_hash	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  void set_hash(truncated_hash_type \/*hash*\/) noexcept {}$/;"	f	class:tsl::detail_robin_hash::bucket_entry_hash	typeref:typename:void
set_hash	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  void set_hash(truncated_hash_type hash) noexcept {$/;"	f	class:tsl::detail_robin_hash::bucket_entry_hash	typeref:typename:void
set_id	./src/flecs.h	/^    int set_id(flecs::id_t value) {$/;"	f	struct:flecs::cursor	typeref:typename:int
set_index	./src/flecs.h	/^    ecs_id_record_t *set_index;$/;"	m	struct:ecs_term_iter_t	typeref:typename:ecs_id_record_t *
set_int	./src/flecs.h	/^    int set_int(int64_t value) {$/;"	f	struct:flecs::cursor	typeref:typename:int
set_json	./src/flecs.h	/^Self& set_json($/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set_json_second	./src/flecs.h	/^Self& set_json_second($/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set_level	./src/flecs.h	/^inline void set_level(int level) {$/;"	f	namespace:flecs::log	typeref:typename:void
set_link	./src/flecs.h	/^inline void set_link(flecs::entity& e, const char *link) {$/;"	f	namespace:flecs::doc	typeref:typename:void
set_lookup_path	./src/flecs.h	/^    flecs::entity_t* set_lookup_path(const flecs::entity_t *search_path) const {$/;"	f	struct:flecs::world	typeref:typename:flecs::entity_t *
set_name	./src/flecs.h	/^    Self& set_name(const char *name) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set_name	./src/flecs.h	/^inline void set_name(flecs::entity& e, const char *name) {$/;"	f	namespace:flecs::doc	typeref:typename:void
set_null	./src/flecs.h	/^    int set_null() {$/;"	f	struct:flecs::cursor	typeref:typename:int
set_observers	./src/flecs.c	/^    ecs_map_t set_observers;         \/* map<trigger_id, trigger_t> *\/$/;"	m	struct:ecs_event_id_record_t	typeref:typename:ecs_map_t	file:
set_output_streams	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    void set_output_streams(std::ostream& out, std::ostream& err)$/;"	f	class:picobench::runner	typeref:typename:void
set_override	./src/flecs.h	/^    Self& set_override(A&& val) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set_override	./src/flecs.h	/^    Self& set_override(T&& val) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set_override	./src/flecs.h	/^    Self& set_override(const A& val) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set_override	./src/flecs.h	/^    Self& set_override(const T& val) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set_override	./src/flecs.h	/^    Self& set_override(flecs::entity_t second, First&& val) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set_override	./src/flecs.h	/^    Self& set_override(flecs::entity_t second, const First& val) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set_pipeline	./src/flecs.h	/^inline void world::set_pipeline() const {$/;"	f	class:flecs::world	typeref:typename:void
set_pipeline	./src/flecs.h	/^inline void world::set_pipeline(const flecs::entity pip) const {$/;"	f	class:flecs::world	typeref:typename:void
set_preferred_output_filename	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    void set_preferred_output_filename(const char* path) { _output_file = path; }$/;"	f	class:picobench::runner	typeref:typename:void
set_preferred_output_format	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    void set_preferred_output_format(report_output_format fmt) { _output_format = fmt; }$/;"	f	class:picobench::runner	typeref:typename:void
set_ptr	./src/flecs.h	/^    Self& set_ptr(entity_t comp, const void *ptr) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set_ptr	./src/flecs.h	/^    Self& set_ptr(entity_t comp, size_t size, const void *ptr) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set_result	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    void set_result(uintptr_t data) { _result = data; }$/;"	f	class:picobench::state	typeref:typename:void
set_scope	./src/flecs.h	/^inline flecs::entity world::set_scope() const {$/;"	f	class:flecs::world	typeref:typename:flecs::entity
set_scope	./src/flecs.h	/^inline flecs::entity world::set_scope(const flecs::entity_t s) const {$/;"	f	class:flecs::world	typeref:typename:flecs::entity
set_second	./src/flecs.h	/^    Self& set_second(const Second& value) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set_second	./src/flecs.h	/^    Self& set_second(entity_t first, Second&& value) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set_second	./src/flecs.h	/^    Self& set_second(entity_t first, const Second& value) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
set_separator	./vendor/fmt/include/ranges.h	/^  FMT_CONSTEXPR void set_separator(basic_string_view<Char> sep) {$/;"	f	struct:formatter	typeref:typename:FMT_CONSTEXPR void
set_separator	./vendor/fmt/include/ranges.h	/^  FMT_CONSTEXPR void set_separator(basic_string_view<Char> sep) {$/;"	f	struct:range_formatter	typeref:typename:FMT_CONSTEXPR void
set_should_run	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    void set_should_run(bool set) { _should_run = set; }$/;"	f	class:picobench::runner	typeref:typename:void
set_stage	./src/flecs.h	/^inline flecs::entity entity_view::set_stage(world_t *stage) {$/;"	f	class:flecs::entity_view	typeref:typename:flecs::entity
set_stage_count	./src/flecs.h	/^    void set_stage_count(int32_t stages) const {$/;"	f	struct:flecs::world	typeref:typename:void
set_string	./src/flecs.h	/^    int set_string(const char *value) {$/;"	f	struct:flecs::cursor	typeref:typename:int
set_string_literal	./src/flecs.h	/^    int set_string_literal(const char *value) {$/;"	f	struct:flecs::cursor	typeref:typename:int
set_suite	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    void set_suite(const char* name)$/;"	f	class:picobench::registry	typeref:typename:void
set_target_fps	./src/flecs.h	/^inline void world::set_target_fps(ecs_ftime_t target_fps) const {$/;"	f	class:flecs::world	typeref:typename:void
set_task_threads	./src/flecs.h	/^inline void world::set_task_threads(int32_t task_threads) const {$/;"	f	class:flecs::world	typeref:typename:void
set_term	./src/flecs.h	/^    void set_term(ecs_term_t *term) {$/;"	f	struct:flecs::term_builder_i	typeref:typename:void
set_threads	./src/flecs.h	/^inline void world::set_threads(int32_t threads) const {$/;"	f	class:flecs::world	typeref:typename:void
set_tick_source	./src/flecs.h	/^inline void system::set_tick_source() {$/;"	f	class:flecs::system	typeref:typename:void
set_tick_source	./src/flecs.h	/^inline void system::set_tick_source(flecs::entity e) {$/;"	f	class:flecs::system	typeref:typename:void
set_time_scale	./src/flecs.h	/^inline void world::set_time_scale(ecs_ftime_t mul) const {$/;"	f	class:flecs::world	typeref:typename:void
set_uint	./src/flecs.h	/^    int set_uint(uint64_t value) {$/;"	f	struct:flecs::cursor	typeref:typename:int
set_value_of_empty_bucket	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  void set_value_of_empty_bucket(distance_type dist_from_ideal_bucket,$/;"	f	class:tsl::detail_robin_hash::bucket_entry	typeref:typename:void
set_var	./src/flecs.h	/^    ecs_iter_action_t set_var;    \/* Invoked after setting variable (optionally set) *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_iter_action_t
set_var	./src/flecs.h	/^    iter_iterable<Components...>& set_var(int var_id, flecs::entity_t value) {$/;"	f	struct:flecs::iter_iterable	typeref:typename:iter_iterable<Components...> &
set_var	./src/flecs.h	/^iter_iterable<Components...>& set_var(const char *name, flecs::entity_t value) {$/;"	f	struct:flecs::iter_iterable	typeref:typename:iter_iterable<Components...> &
setdemo1	./vendor/STC/misc/examples/mixed/demos.c	/^void setdemo1(void)$/;"	f	typeref:typename:void
setthis	./src/flecs.c	/^        ecs_rule_setthis_ctx_t setthis;$/;"	m	union:ecs_rule_op_ctx_t::__anon7d4a4177340a	typeref:typename:ecs_rule_setthis_ctx_t	file:
setup	./vendor/STC/misc/tests/ctest.h	/^    ctest_setup_func* setup;$/;"	m	struct:ctest	typeref:typename:ctest_setup_func *
severity	./src/flecs.h	/^    Base& severity() {$/;"	f	struct:flecs::alert_builder_i	typeref:typename:Base &
severity	./src/flecs.h	/^    Base& severity(flecs::entity_t kind) {$/;"	f	struct:flecs::alert_builder_i	typeref:typename:Base &
severity	./src/flecs.h	/^    ecs_entity_t severity; \/* Severity kind *\/$/;"	m	struct:ecs_alert_severity_filter_t	typeref:typename:ecs_entity_t
severity	./src/flecs.h	/^    ecs_entity_t severity;$/;"	m	struct:ecs_alert_desc_t	typeref:typename:ecs_entity_t
severity_filter	./src/flecs.h	/^    Base& severity_filter(T with, const char *var = nullptr) {$/;"	f	struct:flecs::alert_builder_i	typeref:typename:Base &
severity_filter	./src/flecs.h	/^    Base& severity_filter(const char *var = nullptr) {$/;"	f	struct:flecs::alert_builder_i	typeref:typename:Base &
severity_filter	./src/flecs.h	/^    Base& severity_filter(flecs::entity_t kind, flecs::id_t with, const char *var = nullptr) {$/;"	f	struct:flecs::alert_builder_i	typeref:typename:Base &
severity_filter	./src/flecs.h	/^    Base& severity_filter(flecs::id_t with, const char *var = nullptr) {$/;"	f	struct:flecs::alert_builder_i	typeref:typename:Base &
severity_filter_count	./src/flecs.h	/^    int32_t severity_filter_count = 0;$/;"	m	struct:flecs::alert_builder_i	typeref:typename:int32_t
severity_filters	./src/flecs.c	/^    ecs_vec_t severity_filters; \/* Severity filters *\/$/;"	m	struct:EcsAlert	typeref:typename:ecs_vec_t	file:
severity_filters	./src/flecs.h	/^    ecs_alert_severity_filter_t severity_filters[ECS_ALERT_MAX_SEVERITY_FILTERS];$/;"	m	struct:ecs_alert_desc_t	typeref:typename:ecs_alert_severity_filter_t[]
sfc32	./vendor/STC/misc/benchmarks/various/prng_bench.cpp	/^uint32_t sfc32(uint32_t s[4]) {$/;"	f	typeref:typename:uint32_t
sfc64	./vendor/STC/misc/benchmarks/various/prng_bench.cpp	/^static inline uint64_t sfc64(uint64_t s[4]) {$/;"	f	typeref:typename:uint64_t	file:
shader	./vendor/raylib5/include/raylib.h	/^    Shader shader;          \/\/ Material shader$/;"	m	struct:Material	typeref:typename:Shader
shape	./vendor/STC/misc/examples/algorithms/shape.c	/^    Shape shape;$/;"	m	struct:__anon6b1a6e6c0208	typeref:typename:Shape	file:
shape	./vendor/STC/misc/examples/algorithms/shape.c	/^    Shape shape;$/;"	m	struct:__anon6b1a6e6c0308	typeref:typename:Shape	file:
shared	./src/flecs.c	/^    bool shared;$/;"	m	struct:sort_helper_t	typeref:typename:bool	file:
shared_allocator	./src/flecs.h	/^    bool shared_allocator;$/;"	m	struct:ecs_map_t	typeref:typename:bool
sherwood_v3_entry	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    sherwood_v3_entry()$/;"	f	struct:ska::detailv3::sherwood_v3_entry
sherwood_v3_entry	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    sherwood_v3_entry(int8_t distance_from_desired)$/;"	f	struct:ska::detailv3::sherwood_v3_entry
sherwood_v3_entry	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^struct sherwood_v3_entry$/;"	s	namespace:ska::detailv3
sherwood_v3_table	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    explicit sherwood_v3_table(const ArgumentAlloc & alloc)$/;"	f	class:ska::detailv3::sherwood_v3_table
sherwood_v3_table	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    explicit sherwood_v3_table(size_type bucket_count, const ArgumentHash & hash = ArgumentHash(/;"	f	class:ska::detailv3::sherwood_v3_table
sherwood_v3_table	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    sherwood_v3_table()$/;"	f	class:ska::detailv3::sherwood_v3_table
sherwood_v3_table	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    sherwood_v3_table(It first, It last, size_type bucket_count = 0, const ArgumentHash & hash =/;"	f	class:ska::detailv3::sherwood_v3_table
sherwood_v3_table	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    sherwood_v3_table(It first, It last, size_type bucket_count, const ArgumentAlloc & alloc)$/;"	f	class:ska::detailv3::sherwood_v3_table
sherwood_v3_table	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    sherwood_v3_table(It first, It last, size_type bucket_count, const ArgumentHash & hash, cons/;"	f	class:ska::detailv3::sherwood_v3_table
sherwood_v3_table	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    sherwood_v3_table(const sherwood_v3_table & other)$/;"	f	class:ska::detailv3::sherwood_v3_table
sherwood_v3_table	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    sherwood_v3_table(const sherwood_v3_table & other, const ArgumentAlloc & alloc)$/;"	f	class:ska::detailv3::sherwood_v3_table
sherwood_v3_table	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    sherwood_v3_table(sherwood_v3_table && other) noexcept$/;"	f	class:ska::detailv3::sherwood_v3_table
sherwood_v3_table	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    sherwood_v3_table(sherwood_v3_table && other, const ArgumentAlloc & alloc) noexcept$/;"	f	class:ska::detailv3::sherwood_v3_table
sherwood_v3_table	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    sherwood_v3_table(size_type bucket_count, const ArgumentAlloc & alloc)$/;"	f	class:ska::detailv3::sherwood_v3_table
sherwood_v3_table	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    sherwood_v3_table(size_type bucket_count, const ArgumentHash & hash, const ArgumentAlloc & a/;"	f	class:ska::detailv3::sherwood_v3_table
sherwood_v3_table	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    sherwood_v3_table(std::initializer_list<T> il, size_type bucket_count = 0, const ArgumentHas/;"	f	class:ska::detailv3::sherwood_v3_table
sherwood_v3_table	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    sherwood_v3_table(std::initializer_list<T> il, size_type bucket_count, const ArgumentAlloc &/;"	f	class:ska::detailv3::sherwood_v3_table
sherwood_v3_table	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    sherwood_v3_table(std::initializer_list<T> il, size_type bucket_count, const ArgumentHash & /;"	f	class:ska::detailv3::sherwood_v3_table
sherwood_v3_table	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^class sherwood_v3_table : private EntryAlloc, private Hasher, private Equal$/;"	c	namespace:ska::detailv3
shift	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    int8_t shift = 63;$/;"	m	struct:ska::fibonacci_hash_policy	typeref:typename:int8_t
shiftDown	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    uint64_t shiftDown{};$/;"	m	struct:robin_hood::Counts	typeref:typename:uint64_t
shiftDown	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void shiftDown(size_t idx) noexcept(std::is_nothrow_move_assignable<Node>::value) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:void
shiftUp	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    shiftUp(size_t startIdx,$/;"	f	class:robin_hood::detail::Table	typeref:typename:void
shiftUp	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    uint64_t shiftUp{};$/;"	m	struct:robin_hood::Counts	typeref:typename:uint64_t
shift_amount	./vendor/fmt/include/format-inl.h	/^  int shift_amount;$/;"	m	struct:detail::dragonbox::__anonf306e7170108	typeref:typename:int
shorter_interval_case	./vendor/fmt/include/format-inl.h	/^FMT_INLINE decimal_fp<T> shorter_interval_case(int exponent) noexcept {$/;"	f	namespace:detail::dragonbox	typeref:typename:FMT_INLINE decimal_fp<T>
shorter_interval_tie_lower_threshold	./vendor/fmt/include/format.h	/^  static const int shorter_interval_tie_lower_threshold = -35;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
shorter_interval_tie_lower_threshold	./vendor/fmt/include/format.h	/^  static const int shorter_interval_tie_lower_threshold = -77;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
shorter_interval_tie_upper_threshold	./vendor/fmt/include/format.h	/^  static const int shorter_interval_tie_upper_threshold = -35;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
shorter_interval_tie_upper_threshold	./vendor/fmt/include/format.h	/^  static const int shorter_interval_tie_upper_threshold = -77;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
should_quit	./src/flecs.h	/^    bool should_quit() const {$/;"	f	struct:flecs::world	typeref:typename:bool
should_run	./src/flecs.c	/^    bool should_run;$/;"	m	struct:ecs_http_server_t	typeref:typename:bool	file:
should_run	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    bool should_run() const { return _error == no_error && _should_run; }$/;"	f	class:picobench::runner	typeref:typename:bool
show_drop	./vendor/STC/misc/examples/smartpointers/arcvec_erase.c	/^void show_drop(int* x) { printf("drop: %d\\n", *x); }$/;"	f	typeref:typename:void
showpoint	./vendor/fmt/include/format.h	/^  bool showpoint : 1;$/;"	m	struct:detail::float_specs	typeref:typename:bool:1
shrink_to_fit	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    void shrink_to_fit() {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:void
shrink_to_fit	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    void shrink_to_fit()$/;"	f	class:emhash7::HashMap	typeref:typename:void
shrink_to_fit	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    void shrink_to_fit()$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:void
sienna	./vendor/fmt/include/color.h	/^  sienna = 0xA0522D,                   \/\/ rgb(160,82,45)$/;"	e	enum:color
sieveOfEratosthenes	./vendor/STC/misc/examples/bitsets/prime.c	/^cbits sieveOfEratosthenes(intptr_t n)$/;"	f	typeref:typename:cbits
sig	./src/flecs.h	/^        sig(flecs::world_t *world) $/;"	f	struct:flecs::_::sig
sig	./src/flecs.h	/^    struct sig {$/;"	s	namespace:flecs::_
sighandler	./vendor/STC/misc/tests/ctest.h	/^static void sighandler(int signum)$/;"	f	typeref:typename:void
sign	./vendor/fmt/include/base.h	/^  sign_t sign : 3;$/;"	m	struct:format_specs	typeref:typename:sign_t:3
sign	./vendor/fmt/include/base.h	/^enum class state { start, align, sign, hash, zero, width, precision, locale };$/;"	e	enum:detail::state
sign	./vendor/fmt/include/base.h	/^namespace sign {$/;"	n
sign	./vendor/fmt/include/format.h	/^  sign_t sign : 8;$/;"	m	struct:detail::float_specs	typeref:typename:sign_t:8
sign	./vendor/fmt/include/format.h	/^template <typename Char, typename Sign> constexpr auto sign(Sign s) -> Char {$/;"	f	namespace:detail	typeref:typename:Char
sign_t	./vendor/fmt/include/base.h	/^using sign_t = sign::type;$/;"	t	typeref:typename:sign::type
signature_column_index	./src/flecs.c	/^    int32_t signature_column_index;$/;"	m	struct:flecs_switch_term_t	typeref:typename:int32_t	file:
signbit	./vendor/fmt/include/format.h	/^FMT_INLINE FMT_CONSTEXPR bool signbit(T value) {$/;"	f	namespace:detail	typeref:typename:FMT_INLINE FMT_CONSTEXPR bool
significand	./vendor/fmt/include/format.h	/^  const char* significand;$/;"	m	struct:detail::big_decimal_fp	typeref:typename:const char *
significand	./vendor/fmt/include/format.h	/^  significand_type significand;$/;"	m	struct:detail::dragonbox::decimal_fp	typeref:typename:significand_type
significand_size	./vendor/fmt/include/format.h	/^  int significand_size;$/;"	m	struct:detail::big_decimal_fp	typeref:typename:int
significand_type	./vendor/fmt/include/format.h	/^  using significand_type = typename float_info<T>::carrier_uint;$/;"	t	struct:detail::dragonbox::decimal_fp	typeref:typename:float_info<T>::carrier_uint
silver	./vendor/fmt/include/color.h	/^  silver = 0xC0C0C0,                   \/\/ rgb(192,192,192)$/;"	e	enum:color
single_shot	./src/flecs.h	/^    bool single_shot;            \/**< Is this a single shot timer *\/$/;"	m	struct:EcsTimer	typeref:typename:bool
singleton	./src/flecs.h	/^    Base& singleton() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
singleton	./src/flecs.h	/^inline flecs::entity world::singleton() const {$/;"	f	class:flecs::world	typeref:typename:flecs::entity
singleton	./vendor/fmt/include/format-inl.h	/^struct singleton {$/;"	s	namespace:detail
sint_set	./vendor/fmt/include/base.h	/^  sint_set =$/;"	e	enum:detail::__anonea363bd90103
size	./src/flecs.c	/^    ecs_size_t size;                 \/* Component size *\/$/;"	m	struct:ecs_column_t	typeref:typename:ecs_size_t	file:
size	./src/flecs.c	/^    ecs_size_t size;                 \/* Size of value *\/$/;"	m	struct:ecs_cmd_1_t	typeref:typename:ecs_size_t	file:
size	./src/flecs.c	/^    ecs_size_t size;                 \/**< Size of metric type *\/$/;"	m	struct:__anon7d4a41770e08	typeref:typename:ecs_size_t	file:
size	./src/flecs.c	/^    ecs_size_t size;$/;"	m	struct:ecs_bitset_t	typeref:typename:ecs_size_t	file:
size	./src/flecs.c	/^    int32_t size;               \/* Size of component *\/$/;"	m	struct:EcsAlert	typeref:typename:int32_t	file:
size	./src/flecs.h	/^    ecs_size_t size;           \/**< Component size *\/$/;"	m	struct:EcsComponent	typeref:typename:ecs_size_t
size	./src/flecs.h	/^    ecs_size_t size;         \/* Element size *\/$/;"	m	struct:ecs_sparse_t	typeref:typename:ecs_size_t
size	./src/flecs.h	/^    ecs_size_t size;         \/**< Size of type *\/$/;"	m	struct:ecs_type_info_t	typeref:typename:ecs_size_t
size	./src/flecs.h	/^    ecs_size_t size;        \/**< Size of type of operation *\/$/;"	m	struct:ecs_meta_type_op_t	typeref:typename:ecs_size_t
size	./src/flecs.h	/^    ecs_size_t size;$/;"	m	struct:ecs_member_t	typeref:typename:ecs_size_t
size	./src/flecs.h	/^    ecs_size_t size;$/;"	m	struct:ecs_strbuf_t	typeref:typename:ecs_size_t
size	./src/flecs.h	/^    ecs_size_t size;$/;"	m	struct:ecs_term_iter_t	typeref:typename:ecs_size_t
size	./src/flecs.h	/^    int32_t size;$/;"	m	struct:ecs_vec_t	typeref:typename:int32_t
size	./src/flecs.h	/^    size_t size() {$/;"	f	struct:flecs::array	typeref:typename:size_t
size	./src/flecs.h	/^    size_t size(int32_t index) const {$/;"	f	struct:flecs::iter	typeref:typename:size_t
size	./src/flecs.h	/^    static size_t size() {$/;"	f	struct:flecs::_::cpp_type_impl	typeref:typename:size_t
size	./src/flecs.h	/^    std::size_t size() const {$/;"	f	struct:flecs::string	typeref:typename:std::size_t
size	./vendor/STC/include/stc/types.h	/^    intptr_t size;$/;"	m	struct:csview	typeref:typename:intptr_t
size	./vendor/STC/include/stc/types.h	/^    intptr_t size;$/;"	m	struct:czview	typeref:typename:intptr_t
size	./vendor/STC/include/stc/types.h	/^    struct { cstr_value* data; size_t size, ncap; } lon;$/;"	m	struct:cstr::__anon0ab7b7af0608	typeref:typename:size_t
size	./vendor/STC/include/stc/types.h	/^typedef struct { cstr_value* data; intptr_t size, cap; } cstr_buf;$/;"	m	struct:__anon0ab7b7af0408	typeref:typename:intptr_t
size	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    size_type size() const noexcept { \/\/ NOLINT(modernize-use-nodiscard)$/;"	f	class:robin_hood::detail::Table	typeref:typename:size_type
size	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] auto size() const noexcept -> size_t {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:auto
size	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] constexpr auto size() const -> size_t {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:size_t
size	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    inline size_type size() const { return _num_filled; }$/;"	f	class:emhash7::HashMap	typeref:typename:size_type
size	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    size_t size() const$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:size_t
size	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  size_type size() const noexcept { return m_nb_elements; }$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:size_type
size	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  size_type size() const noexcept { return m_ht.size(); }$/;"	f	class:tsl::robin_map	typeref:typename:size_type
size	./vendor/fmt/include/base.h	/^  constexpr auto size() const -> size_t { return size_; }$/;"	f	struct:detail::fill_t	typeref:typename:size_t
size	./vendor/fmt/include/base.h	/^  constexpr auto size() const noexcept -> size_t { return size_; }$/;"	f	class:basic_string_view	typeref:typename:auto
size	./vendor/fmt/include/base.h	/^  constexpr auto size() const noexcept -> size_t { return size_; }$/;"	f	class:detail::buffer	typeref:typename:auto
size	./vendor/fmt/include/base.h	/^  size_t size;$/;"	m	struct:detail::named_arg_value	typeref:typename:size_t
size	./vendor/fmt/include/base.h	/^  size_t size;$/;"	m	struct:detail::string_value	typeref:typename:size_t
size	./vendor/fmt/include/base.h	/^  size_t size;$/;"	m	struct:format_to_n_result	typeref:typename:size_t
size	./vendor/fmt/include/format-inl.h	/^  size_t size;$/;"	m	struct:detail::span	typeref:typename:size_t
size	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 auto size() const -> size_t {$/;"	f	class:format_int	typeref:typename:size_t
size	./vendor/fmt/include/format.h	/^  auto size() const -> size_t { return buffer_.size() - 1; }$/;"	f	class:detail::to_utf8	typeref:typename:size_t
size	./vendor/fmt/include/format.h	/^  auto size() const -> size_t { return buffer_.size() - 1; }$/;"	f	class:detail::utf8_to_utf16	typeref:typename:size_t
size	./vendor/fmt/include/format.h	/^  size_t size;$/;"	m	struct:detail::write_int_data	typeref:typename:size_t
size	./vendor/fmt/include/ranges.h	/^  static FMT_CONSTEXPR auto size() -> size_t { return sizeof...(N); }$/;"	f	struct:detail::integer_sequence	typeref:typename:size_t
size_	./vendor/fmt/include/base.h	/^  size_t size_;$/;"	m	class:basic_string_view	typeref:typename:size_t
size_	./vendor/fmt/include/base.h	/^  size_t size_;$/;"	m	class:detail::buffer	typeref:typename:size_t
size_	./vendor/fmt/include/base.h	/^  unsigned char size_ = 1;$/;"	m	struct:detail::fill_t	typeref:typename:unsigned char
size_type	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    using size_type = size_t;$/;"	t	class:robin_hood::detail::Table	typeref:typename:size_t
size_type	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using size_type = std::size_t;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:std::size_t
size_type	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using size_type = typename value_container_type::size_type;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:value_container_type::size_type
size_type	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    typedef uint16_t size_type;$/;"	t	namespace:emhash7	typeref:typename:uint16_t
size_type	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    using size_type = size_t;$/;"	t	class:ska::detailv3::sherwood_v3_table	typeref:typename:size_t
size_type	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  using size_type = std::size_t;$/;"	t	class:tsl::detail_robin_hash::robin_hash	typeref:typename:std::size_t
size_type	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  using size_type = typename ht::size_type;$/;"	t	class:tsl::robin_map	typeref:typename:ht::size_type
size_type	./vendor/fmt/include/base.h	/^  using size_type = int;$/;"	t	class:basic_format_args	typeref:typename:int
sizes	./src/flecs.h	/^    ecs_size_t *sizes;            \/* Component sizes *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_size_t *
sizes	./src/flecs.h	/^    int32_t *sizes;            \/**< Field size (same for each result) *\/$/;"	m	struct:ecs_filter_t	typeref:typename:int32_t *
sizes	./src/flecs.h	/^    struct ecs_sparse_t sizes; \/* <size, block_allocator_t> *\/$/;"	m	struct:ecs_allocator_t	typeref:struct:ecs_sparse_t
ska	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^namespace ska$/;"	n
skip	./src/flecs.h	/^    void skip() {$/;"	f	struct:flecs::iter	typeref:typename:void
skip	./vendor/STC/misc/tests/ctest.h	/^    int32_t skip;$/;"	m	struct:ctest	typeref:typename:int32_t
skip_count	./src/flecs.h	/^    int32_t skip_count;$/;"	m	struct:ecs_query_iter_t	typeref:typename:int32_t
skip_scope	./src/flecs.c	/^const char* skip_scope(const char *ptr, meta_parse_ctx_t *ctx) {$/;"	f	typeref:typename:const char *	file:
sky_blue	./vendor/fmt/include/color.h	/^  sky_blue = 0x87CEEB,                 \/\/ rgb(135,206,235)$/;"	e	enum:color
slate_blue	./vendor/fmt/include/color.h	/^  slate_blue = 0x6A5ACD,               \/\/ rgb(106,90,205)$/;"	e	enum:color
slate_gray	./vendor/fmt/include/color.h	/^  slate_gray = 0x708090,               \/\/ rgb(112,128,144)$/;"	e	enum:color
sleep_	./src/flecs.h	/^    ecs_os_api_sleep_t sleep_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_sleep_t
slot	./src/flecs.h	/^    Self& slot() {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
slot_of	./src/flecs.h	/^    Self& slot_of() {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
slot_of	./src/flecs.h	/^    Self& slot_of(entity_t second) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
slz_size_type	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^using slz_size_type = std::uint64_t;$/;"	t	namespace:tsl::detail_robin_hash	typeref:typename:std::uint64_t
small_division_by_pow10	./vendor/fmt/include/format-inl.h	/^template <int N> auto small_division_by_pow10(uint32_t n) noexcept -> uint32_t {$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
small_divisor	./vendor/fmt/include/format.h	/^  static const int small_divisor = 100;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
small_divisor	./vendor/fmt/include/format.h	/^  static const int small_divisor = 10;$/;"	m	struct:detail::dragonbox::float_info	typeref:typename:const int
small_string	./src/flecs.h	/^    char small_string[ECS_STRBUF_SMALL_STRING_SIZE];$/;"	m	struct:ecs_strbuf_t	typeref:typename:char[]
sml	./vendor/STC/include/stc/types.h	/^    struct { cstr_value data[ sizeof(cstr_buf) ]; } sml;$/;"	m	union:cstr	typeref:struct:cstr::__anon0ab7b7af0508
sn	./vendor/STC/include/stc/algo/filter.h	/^    uint32_t sn[c_NFILTERS];$/;"	m	struct:_flt_base	typeref:typename:uint32_t[]
sn_top	./vendor/STC/include/stc/algo/filter.h	/^    uint8_t sn_top, sb_top;$/;"	m	struct:_flt_base	typeref:typename:uint8_t
snapshot	./src/flecs.h	/^        ecs_snapshot_iter_t snapshot;$/;"	m	union:ecs_iter_private_t::__anon7d4a417c020a	typeref:typename:ecs_snapshot_iter_t
snapshot	./src/flecs.h	/^    explicit snapshot(const world& world)$/;"	f	struct:flecs::snapshot
snapshot	./src/flecs.h	/^    snapshot(const snapshot& obj) $/;"	f	struct:flecs::snapshot
snapshot	./src/flecs.h	/^    snapshot(snapshot&& obj) noexcept$/;"	f	struct:flecs::snapshot
snapshot	./src/flecs.h	/^inline flecs::snapshot world::snapshot(Args &&... args) const {$/;"	f	class:flecs::world	typeref:typename:flecs::snapshot
snapshot	./src/flecs.h	/^struct snapshot final {$/;"	s	namespace:flecs
snapshot_create	./src/flecs.c	/^ecs_snapshot_t* snapshot_create($/;"	f	typeref:typename:ecs_snapshot_t *	file:
snapshot_t	./src/flecs.h	/^using snapshot_t = ecs_snapshot_t;$/;"	t	namespace:flecs	typeref:typename:ecs_snapshot_t
snapshot_table	./src/flecs.c	/^void snapshot_table($/;"	f	typeref:typename:void	file:
snow	./vendor/fmt/include/color.h	/^  snow = 0xFFFAFA,                     \/\/ rgb(255,250,250)$/;"	e	enum:color
sns	./vendor/STC/misc/benchmarks/plotbench/plot.py	/^import seaborn as sns$/;"	I	nameref:module:seaborn
sock	./src/flecs.c	/^    ecs_http_socket_t sock;$/;"	m	struct:__anon7d4a41770808	typeref:typename:ecs_http_socket_t	file:
sock	./src/flecs.c	/^    ecs_http_socket_t sock;$/;"	m	struct:ecs_http_send_request_t	typeref:typename:ecs_http_socket_t	file:
sock	./src/flecs.c	/^    ecs_http_socket_t sock;$/;"	m	struct:ecs_http_server_t	typeref:typename:ecs_http_socket_t	file:
sort_helper_t	./src/flecs.c	/^typedef struct sort_helper_t {$/;"	s	file:
sort_helper_t	./src/flecs.c	/^} sort_helper_t;$/;"	t	typeref:struct:sort_helper_t	file:
sort_table	./src/flecs.c	/^    ecs_sort_table_action_t sort_table;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_sort_table_action_t	file:
sort_table	./src/flecs.h	/^    ecs_sort_table_action_t sort_table;$/;"	m	struct:ecs_query_desc_t	typeref:typename:ecs_sort_table_action_t
source	./vendor/raylib5/include/raylib.h	/^    Rectangle source;       \/\/ Texture source rectangle$/;"	m	struct:NPatchInfo	typeref:typename:Rectangle
source_set	./src/flecs.c	/^    ecs_flags32_t *source_set;    \/* Whether ecs_iter_t::sources is written by instruction *\/$/;"	m	struct:__anon7d4a41773708	typeref:typename:ecs_flags32_t *	file:
source_set	./src/flecs.h	/^    ecs_flags32_t source_set;$/;"	m	struct:ecs_rule_iter_t	typeref:typename:ecs_flags32_t
source_tile_height	./src/glyph.h	/^	int source_tile_height;$/;"	m	struct:Tileset	typeref:typename:int
source_tile_width	./src/glyph.h	/^	int source_tile_width;$/;"	m	struct:Tileset	typeref:typename:int
source_tile_x	./src/glyph.h	/^    int source_tile_x; \/\/ x position in the tileset$/;"	m	struct:Glyph	typeref:typename:int
source_tile_y	./src/glyph.h	/^    int source_tile_y; \/\/ y position in the tileset$/;"	m	struct:Glyph	typeref:typename:int
sources	./src/flecs.c	/^    ecs_block_allocator_t sources;$/;"	m	struct:ecs_query_allocators_t	typeref:typename:ecs_block_allocator_t	file:
sources	./src/flecs.c	/^    ecs_entity_t *sources;           \/* Subjects (sources) of ids *\/$/;"	m	struct:ecs_query_table_match_t	typeref:typename:ecs_entity_t *	file:
sources	./src/flecs.h	/^    ecs_entity_t *sources;        \/* Entity on which the id was matched (0 if same as entities)/;"	m	struct:ecs_iter_t	typeref:typename:ecs_entity_t *
sp	./src/flecs.c	/^    int16_t sp;$/;"	m	struct:ecs_stack_page_t	typeref:typename:int16_t	file:
sp	./src/flecs.c	/^    int32_t sp;$/;"	m	struct:__anon7d4a41771908	typeref:typename:int32_t	file:
sp	./src/flecs.h	/^    int16_t sp;$/;"	m	struct:ecs_rule_iter_t	typeref:typename:int16_t
sp	./src/flecs.h	/^    int16_t sp;$/;"	m	struct:ecs_stack_cursor_t	typeref:typename:int16_t
space	./vendor/fmt/include/chrono.h	/^  space,$/;"	e	enum:detail::pad_type
span	./vendor/fmt/include/format-inl.h	/^template <typename T> struct span {$/;"	s	namespace:detail
spans	./vendor/STC/include/stc/priv/cregex_prv.c	/^    _Rune spans[_NCCRUNE];$/;"	m	struct:__anon4ce7005a0108	typeref:typename:_Rune[]	file:
sparse	./src/flecs.c	/^    int32_t *sparse;            \/* Sparse array with indices to dense array *\/$/;"	m	struct:ecs_page_t	typeref:typename:int32_t *	file:
sparse_chunk	./src/flecs.c	/^    ecs_block_allocator_t sparse_chunk;$/;"	m	struct:ecs_world_allocators_t	typeref:typename:ecs_block_allocator_t	file:
sparse_first	./src/flecs.h	/^    int32_t sparse_first;$/;"	m	struct:ecs_query_iter_t	typeref:typename:int32_t
sparse_smallest	./src/flecs.h	/^    int32_t sparse_smallest;$/;"	m	struct:ecs_query_iter_t	typeref:typename:int32_t
spec_field	./vendor/fmt/include/compile.h	/^template <typename Char, typename T, int N> struct spec_field {$/;"	s	namespace:detail
special_end_value	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    static constexpr int8_t special_end_value = 0;$/;"	m	struct:ska::detailv3::sherwood_v3_entry	typeref:typename:int8_t
specs	./vendor/fmt/include/base.h	/^    dynamic_format_specs<Char>& specs;$/;"	m	struct:detail::parse_format_specs::__anonea363bd91308	typeref:typename:dynamic_format_specs<Char> &
specs	./vendor/fmt/include/format.h	/^  const format_specs& specs;$/;"	m	struct:detail::arg_formatter	typeref:typename:const format_specs &
specs	./vendor/fmt/include/format.h	/^  const format_specs& specs;$/;"	m	struct:detail::loc_writer	typeref:typename:const format_specs &
specs_	./vendor/fmt/include/base.h	/^  dynamic_format_specs<Char> specs_;$/;"	m	struct:detail::native_formatter	typeref:typename:dynamic_format_specs<Char>
specs_	./vendor/fmt/include/chrono.h	/^  format_specs specs_;$/;"	m	struct:formatter	typeref:typename:format_specs
specs_	./vendor/fmt/include/format.h	/^  detail::dynamic_format_specs<> specs_;$/;"	m	struct:formatter	typeref:typename:detail::dynamic_format_specs<>
specs_	./vendor/fmt/include/printf.h	/^  format_specs& specs_;$/;"	m	class:detail::printf_width_handler	typeref:typename:format_specs &
specs_	./vendor/fmt/include/std.h	/^  detail::dynamic_format_specs<Char> specs_;$/;"	m	struct:formatter	typeref:typename:detail::dynamic_format_specs<Char>
specs_	./vendor/fmt/include/std.h	/^  format_specs specs_;$/;"	m	struct:formatter	typeref:typename:format_specs
speed	./src/flecs.h	/^struct speed {$/;"	s	struct:flecs::units
split_year_lower	./vendor/fmt/include/chrono.h	/^  auto split_year_lower(long long year) const noexcept -> int {$/;"	f	class:detail::tm_writer	typeref:typename:auto
splitmix64	./vendor/STC/misc/benchmarks/various/prng_bench.cpp	/^uint64_t splitmix64(void) {$/;"	f	typeref:typename:uint64_t
splitmix64_x	./vendor/STC/misc/benchmarks/various/prng_bench.cpp	/^static uint64_t splitmix64_x = 87213627321ull; \/* The state can be seeded with any value. *\/$/;"	v	typeref:typename:uint64_t	file:
spring_green	./vendor/fmt/include/color.h	/^  spring_green = 0x00FF7F,             \/\/ rgb(0,255,127)$/;"	e	enum:color
sprintf	./vendor/fmt/include/printf.h	/^inline auto sprintf(const S& fmt, const T&... args) -> std::basic_string<Char> {$/;"	f	typeref:typename:std::basic_string<Char>
square	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 void square() {$/;"	f	class:detail::bigint	typeref:typename:FMT_CONSTEXPR20 void
src	./src/flecs.c	/^    ecs_entity_t src;$/;"	m	struct:__anon7d4a41772808	typeref:typename:ecs_entity_t	file:
src	./src/flecs.c	/^    ecs_entity_t src;$/;"	m	struct:ecs_reachable_elem_t	typeref:typename:ecs_entity_t	file:
src	./src/flecs.c	/^    ecs_map_t src;        \/* map<entity, trav_down_t> or map<table_id, trav_up_t> *\/$/;"	m	struct:__anon7d4a41772908	typeref:typename:ecs_map_t	file:
src	./src/flecs.c	/^    ecs_rule_ref_t src;$/;"	m	struct:ecs_rule_op_t	typeref:typename:ecs_rule_ref_t	file:
src	./src/flecs.h	/^    Base& src() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
src	./src/flecs.h	/^    Base& src(const char *name) {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
src	./src/flecs.h	/^    Base& src(flecs::entity_t id) {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
src	./src/flecs.h	/^    ecs_entity_t src;            \/**< Source of the rate filter *\/$/;"	m	struct:EcsRateFilter	typeref:typename:ecs_entity_t
src	./src/flecs.h	/^    ecs_term_id_t src;          \/**< Source of term *\/$/;"	m	struct:ecs_term_t	typeref:typename:ecs_term_id_t
src	./src/flecs.h	/^inline flecs::entity iter::src(int32_t index) const {$/;"	f	class:flecs::iter	typeref:typename:flecs::entity
src_vars	./src/flecs.c	/^    ecs_var_id_t *src_vars;       \/* Array with ids to source variables for fields *\/$/;"	m	struct:ecs_rule_t	typeref:typename:ecs_var_id_t *	file:
srv	./src/flecs.c	/^    ecs_http_server_t *srv;$/;"	m	struct:__anon7d4a41771a08	typeref:typename:ecs_http_server_t *	file:
ssname	./vendor/STC/misc/tests/ctest.h	/^    const char* ssname;  \/\/ suite name$/;"	m	struct:ctest	typeref:typename:const char *
stack	./src/flecs.c	/^    ecs_stack_t *stack;$/;"	m	struct:ecs_value_stack_t	typeref:typename:ecs_stack_t *	file:
stack	./src/flecs.c	/^    ecs_stack_t stack;          \/* Temp memory used by deferred commands *\/$/;"	m	struct:ecs_commands_t	typeref:typename:ecs_stack_t	file:
stack	./vendor/STC/include/stc/coroutine.h	/^    int result, top; cco_task* stack[];$/;"	m	struct:cco_runtime	typeref:typename:cco_task * []
stack_alloc_count	./src/flecs.h	/^        ecs_metric_t stack_alloc_count;    \/**< Page allocations per frame *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1608	typeref:typename:ecs_metric_t
stack_cursor	./src/flecs.h	/^    ecs_stack_cursor_t *stack_cursor; \/* Stack cursor to restore to *\/$/;"	m	struct:ecs_iter_cache_t	typeref:typename:ecs_stack_cursor_t *
stack_free_count	./src/flecs.h	/^        ecs_metric_t stack_free_count;     \/**< Page frees per frame *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1608	typeref:typename:ecs_metric_t
stack_outstanding_alloc_count	./src/flecs.h	/^        ecs_metric_t stack_outstanding_alloc_count; \/**< Difference between allocs & frees *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1608	typeref:typename:ecs_metric_t
stage	./src/flecs.c	/^    ecs_stage_t *stage;$/;"	m	struct:ecs_suspend_readonly_state_t	typeref:typename:ecs_stage_t *	file:
stage	./src/flecs.c	/^    ecs_stage_t *stage;$/;"	m	struct:ecs_value_stack_t	typeref:typename:ecs_stage_t *	file:
stage	./src/flecs.h	/^    system_runner_fluent& stage(flecs::world& stage) {$/;"	f	struct:flecs::system_runner_fluent	typeref:typename:system_runner_fluent &
stage_count	./src/flecs.c	/^    int32_t stage_count;             \/* Number of stages *\/$/;"	m	struct:ecs_world_t	typeref:typename:int32_t	file:
stages	./src/flecs.c	/^    ecs_stage_t *stages;             \/* Stages *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_stage_t *	file:
standard	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^struct standard {$/;"	s	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::bucket_type
standard	./vendor/fmt/include/chrono.h	/^  standard,$/;"	e	enum:detail::numeric_system
start	./src/flecs.h	/^    void start() {$/;"	f	struct:flecs::timer	typeref:typename:void
start	./src/flecs.h	/^inline void system::start() {$/;"	f	class:flecs::system	typeref:typename:void
start	./vendor/STC/include/stc/algo/crange.h	/^typedef struct { crange_value start, end, step, value; } crange;$/;"	m	struct:__anon74d0e1bc0108	typeref:typename:crange_value
start	./vendor/STC/include/stc/coroutine.h	/^typedef struct { double interval, start; } cco_timer;$/;"	m	struct:__anone7a129120408	typeref:typename:double
start	./vendor/STC/misc/benchmarks/various/string_bench_STC.cpp	/^    void start(const std::string& text_)$/;"	f	class:timer	typeref:typename:void	file:
start	./vendor/STC/misc/benchmarks/various/string_bench_STD.cpp	/^    void start(const std::string& text_)$/;"	f	class:timer	typeref:typename:void	file:
start	./vendor/fmt/include/base.h	/^enum class state { start, align, sign, hash, zero, width, precision, locale };$/;"	e	enum:detail::state
start_time	./src/flecs.c	/^    ecs_time_t start_time;$/;"	m	struct:__anon7d4a41771b08	typeref:typename:ecs_time_t	file:
start_timer	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    void start_timer()$/;"	f	class:picobench::state	typeref:typename:PICOBENCH_INLINE void
startchar	./vendor/STC/include/stc/priv/cregex_prv.c	/^    _Rune       startchar;$/;"	m	struct:_Reljunk	typeref:typename:_Rune	file:
startinst	./vendor/STC/include/stc/priv/cregex_prv.c	/^    _Reinst  *startinst;     \/* start pc *\/$/;"	m	struct:_Reprog	typeref:typename:_Reinst *	file:
starts	./vendor/STC/include/stc/priv/cregex_prv.c	/^    const char* starts;$/;"	m	struct:_Reljunk	typeref:typename:const char *	file:
starts_with	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR auto starts_with(Char c) const noexcept -> bool {$/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR auto
starts_with	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR auto starts_with(basic_string_view<Char> sv) const noexcept$/;"	f	class:basic_string_view	typeref:typename:FMT_CONSTEXPR auto
starts_with	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR auto starts_with(const Char* s) const -> bool {$/;"	f	class:basic_string_view	typeref:typename:bool
starttype	./vendor/STC/include/stc/priv/cregex_prv.c	/^    int         starttype;$/;"	m	struct:_Reljunk	typeref:typename:int	file:
state	./src/flecs.c	/^    HttpFragState state;$/;"	m	struct:__anon7d4a41770708	typeref:typename:HttpFragState	file:
state	./src/flecs.c	/^    ecs_pipeline_state_t *state;$/;"	m	struct:EcsPipeline	typeref:typename:ecs_pipeline_state_t *	file:
state	./vendor/STC/include/stc/crand.h	/^typedef struct crand { uint64_t state[5]; } crand_t;$/;"	m	struct:crand	typeref:typename:uint64_t[5]
state	./vendor/STC/include/stc/priv/utf8_prv.h	/^typedef struct { uint32_t state, codep; } utf8_decode_t;$/;"	m	struct:__anon57216ba80208	typeref:typename:uint32_t
state	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    explicit state(size_t num_iterations, udata_t user_data = 0, udata_t arg = 0)$/;"	f	class:picobench::state
state	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^class state$/;"	c	namespace:picobench
state	./vendor/fmt/include/base.h	/^enum class state { start, align, sign, hash, zero, width, precision, locale };$/;"	g	namespace:detail
static_empty_bucket_ptr	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  bucket_entry* static_empty_bucket_ptr() noexcept {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:bucket_entry *
statically_named_arg	./vendor/fmt/include/format.h	/^  statically_named_arg(const T& v) : value(v) {}$/;"	f	struct:detail::statically_named_arg
statically_named_arg	./vendor/fmt/include/format.h	/^struct statically_named_arg : view {$/;"	s	namespace:detail
stats	./src/flecs.h	/^    ecs_pipeline_stats_t stats;$/;"	m	struct:__anon7d4a417c1a08	typeref:typename:ecs_pipeline_stats_t
stats	./src/flecs.h	/^    ecs_world_stats_t stats;$/;"	m	struct:__anon7d4a417c1908	typeref:typename:ecs_world_stats_t
stats_timeout	./src/flecs.c	/^    double stats_timeout; \/* used for periodic reporting of statistics *\/$/;"	m	struct:ecs_http_server_t	typeref:typename:double	file:
status	./src/flecs.h	/^    const char* status;         \/**< default = OK *\/$/;"	m	struct:__anon7d4a417c0c08	typeref:typename:const char *
stc	./vendor/STC/CMakeLists.txt	/^add_library(stc INTERFACE)$/;"	t
stc	./vendor/STC/CMakeLists.txt	/^project(stc)$/;"	p
stc32	./vendor/STC/misc/benchmarks/various/prng_bench.cpp	/^uint32_t stc32(uint32_t s[5]) {$/;"	f	typeref:typename:uint32_t
stc_test	./vendor/STC/misc/benchmarks/plotbench/pque_benchmark.cpp	/^void stc_test()$/;"	f	typeref:typename:void
stctest	./vendor/STC/CMakeLists.txt	/^	add_executable(stctest ${test_files} misc\/tests\/main.c)$/;"	t
std	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^namespace std { \/\/ NOLINT(cert-dcl58-cpp)$/;"	n
std	./vendor/fmt/include/format.h	/^namespace std {$/;"	n
std_destroy	./vendor/STC/misc/benchmarks/shootout_hashmaps.cpp	/^template<typename C> inline void std_destroy(C& c) { C().swap(c); }$/;"	f	typeref:typename:void
std_string_view	./vendor/fmt/include/format.h	/^template <typename Char> using std_string_view = std::basic_string_view<Char>;$/;"	t	namespace:detail	typeref:typename:std::basic_string_view<Char>
std_string_view	./vendor/fmt/include/format.h	/^template <typename T> struct std_string_view {};$/;"	s	namespace:detail
std_test	./vendor/STC/misc/benchmarks/plotbench/pque_benchmark.cpp	/^void std_test()$/;"	f	typeref:typename:void
stddev	./vendor/STC/include/stc/crand.h	/^typedef struct crand_normal { double mean, stddev, next; int has_next; } crand_normal_t;$/;"	m	struct:crand_normal	typeref:typename:double
stdout_callback	./src/log.c	/^static void stdout_callback(log_Event *ev) {$/;"	f	typeref:typename:void	file:
steel_blue	./vendor/fmt/include/color.h	/^  steel_blue = 0x4682B4,               \/\/ rgb(70,130,180)$/;"	e	enum:color
step	./vendor/STC/include/stc/algo/crange.h	/^typedef struct { crange_value *ref, end, step; } crange_iter;$/;"	m	struct:__anon74d0e1bc0208	typeref:typename:crange_value
step	./vendor/STC/include/stc/algo/crange.h	/^typedef struct { crange_value start, end, step, value; } crange;$/;"	m	struct:__anon74d0e1bc0108	typeref:typename:crange_value
stop	./src/flecs.h	/^    void stop() {$/;"	f	struct:flecs::timer	typeref:typename:void
stop	./src/flecs.h	/^inline void system::stop() {$/;"	f	class:flecs::system	typeref:typename:void
stop	./vendor/STC/misc/benchmarks/various/string_bench_STC.cpp	/^    void stop()$/;"	f	class:timer	typeref:typename:void	file:
stop	./vendor/STC/misc/benchmarks/various/string_bench_STD.cpp	/^    void stop()$/;"	f	class:timer	typeref:typename:void	file:
stop_timer	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    void stop_timer()$/;"	f	class:picobench::state	typeref:typename:PICOBENCH_INLINE void
storage	./src/flecs.h	/^    ecs_filter_t *storage;$/;"	m	struct:ecs_filter_desc_t	typeref:typename:ecs_filter_t *
storage_columns	./src/flecs.c	/^    int32_t *storage_columns;        \/* Mapping from query fields to storage columns *\/$/;"	m	struct:ecs_query_table_match_t	typeref:typename:int32_t *	file:
store	./src/flecs.c	/^    ecs_store_t store;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_store_t	file:
store_	./vendor/fmt/include/format.h	/^  T store_[SIZE];$/;"	m	class:basic_memory_buffer	typeref:typename:T[]
store_added	./src/flecs.h	/^    static size_t store_added(IdArray& added, size_t elem, ecs_table_t *prev, $/;"	f	struct:flecs::_::entity_with_delegate_impl	typeref:typename:size_t
stored_type	./vendor/fmt/include/args.h	/^  using stored_type = conditional_t<$/;"	t	class:dynamic_format_arg_store
str	./src/flecs.c	/^    ecs_strbuf_t *str;$/;"	m	struct:json_serializer_ctx_t	typeref:typename:ecs_strbuf_t *	file:
str	./src/flecs.h	/^    const char *str;          \/* Set to parse script from string *\/$/;"	m	struct:ecs_script_desc_t	typeref:typename:const char *
str	./src/flecs.h	/^    flecs::string str() const {$/;"	f	struct:flecs::id	typeref:typename:flecs::string
str	./src/flecs.h	/^    flecs::string str() const {$/;"	f	struct:flecs::iter	typeref:typename:flecs::string
str	./src/flecs.h	/^    flecs::string str() const {$/;"	f	struct:flecs::query_base	typeref:typename:flecs::string
str	./src/flecs.h	/^    flecs::string str() const {$/;"	f	struct:flecs::rule_base	typeref:typename:flecs::string
str	./src/flecs.h	/^    flecs::string str() const {$/;"	f	struct:flecs::table	typeref:typename:flecs::string
str	./src/flecs.h	/^    flecs::string str() const {$/;"	f	struct:flecs::type	typeref:typename:flecs::string
str	./src/flecs.h	/^    flecs::string str() {$/;"	f	struct:flecs::filter_base	typeref:typename:flecs::string
str	./src/flecs.h	/^    flecs::string str() {$/;"	f	struct:flecs::stringstream	typeref:typename:flecs::string
str	./vendor/STC/include/stc/types.h	/^    czview_value* str;$/;"	m	struct:czview	typeref:typename:czview_value *
str	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    const char* str;$/;"	m	class:picobench::picostring	typeref:typename:const char *
str	./vendor/fmt/include/base.h	/^  basic_string_view<Char> str;$/;"	m	struct:runtime_format_string	typeref:typename:basic_string_view<Char>
str	./vendor/fmt/include/format.h	/^  auto str() const -> std::string { return std::string(&buffer_[0], size()); }$/;"	f	class:detail::to_utf8	typeref:typename:std::string
str	./vendor/fmt/include/format.h	/^  auto str() const -> std::string { return std::string(str_, size()); }$/;"	f	class:format_int	typeref:typename:std::string
str	./vendor/fmt/include/format.h	/^  auto str() const -> std::wstring { return {&buffer_[0], size()}; }$/;"	f	class:detail::utf8_to_utf16	typeref:typename:std::wstring
str	./vendor/fmt/include/format.h	/^  const Char* str;$/;"	m	struct:detail::udl_arg	typeref:typename:const Char *
str_	./vendor/fmt/include/base.h	/^  basic_string_view<Char> str_;$/;"	m	class:basic_format_string	typeref:typename:basic_string_view<Char>
str_	./vendor/fmt/include/format.h	/^  char* str_;$/;"	m	class:format_int	typeref:typename:char *
strdup_	./src/flecs.h	/^    ecs_os_api_strdup_t strdup_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_strdup_t
stream	./vendor/raylib5/include/raylib.h	/^    AudioStream stream;         \/\/ Audio stream$/;"	m	struct:Music	typeref:typename:AudioStream
stream	./vendor/raylib5/include/raylib.h	/^    AudioStream stream;         \/\/ Audio stream$/;"	m	struct:Sound	typeref:typename:AudioStream
streamed	./vendor/fmt/include/ostream.h	/^constexpr auto streamed(const T& value) -> detail::streamed_view<T> {$/;"	f	typeref:typename:detail::streamed_view<T>
streamed_view	./vendor/fmt/include/ostream.h	/^template <typename T> struct streamed_view {$/;"	s	namespace:detail
streamsize	./vendor/fmt/include/chrono.h	/^  using streamsize = decltype(std::declval<Streambuf>().sputn(nullptr, 0));$/;"	t	class:detail::formatbuf
strict	./src/flecs.h	/^    bool strict;$/;"	m	struct:ecs_from_json_desc_t	typeref:typename:bool
strikethrough	./vendor/fmt/include/color.h	/^  strikethrough = 1 << 7,$/;"	e	enum:emphasis
string	./src/flecs.h	/^    explicit string() $/;"	f	struct:flecs::string
string	./src/flecs.h	/^    explicit string(char *str) $/;"	f	struct:flecs::string
string	./src/flecs.h	/^    string(const char *str)$/;"	f	struct:flecs::string
string	./src/flecs.h	/^    string(string&& str) noexcept {$/;"	f	struct:flecs::string
string	./src/flecs.h	/^struct string {$/;"	s	namespace:flecs
string	./vendor/cjson/include/cJSON.h	/^    char *string;$/;"	m	struct:cJSON	typeref:typename:char *
string	./vendor/fmt/include/base.h	/^    string_value<char_type> string;$/;"	m	union:detail::value::__anonea363bd9060a	typeref:typename:string_value<char_type>
string	./vendor/fmt/include/base.h	/^  string = 2,  \/\/ 's' (string, bool)$/;"	e	enum:presentation_type
string	./vendor/fmt/include/ranges.h	/^enum class range_format { disabled, map, set, sequence, string, debug_string };$/;"	e	enum:range_format
string_hash	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^struct string_hash {$/;"	s	file:
string_hash	./vendor/STC/misc/benchmarks/various/string_bench_STD.cpp	/^struct string_hash {$/;"	s	file:
string_literal	./vendor/fmt/include/base.h	/^template <typename Char, Char... C> struct string_literal {$/;"	s	namespace:detail
string_set	./vendor/fmt/include/base.h	/^  string_set = set(type::string_type),$/;"	e	enum:detail::__anonea363bd90103
string_type	./vendor/fmt/include/base.h	/^  string_type,$/;"	e	enum:detail::type
string_type	./vendor/fmt/include/ranges.h	/^  using string_type =$/;"	t	struct:formatter
string_value	./vendor/fmt/include/base.h	/^template <typename Char> struct string_value {$/;"	s	namespace:detail
string_view	./src/flecs.h	/^    explicit string_view(const char *str)$/;"	f	struct:flecs::string_view
string_view	./src/flecs.h	/^struct string_view : string {$/;"	s	namespace:flecs
string_view	./vendor/fmt/include/base.h	/^using string_view = basic_string_view<char>;$/;"	t	typeref:typename:basic_string_view<char>
stringdemo1	./vendor/STC/misc/examples/mixed/demos.c	/^void stringdemo1(void)$/;"	f	typeref:typename:void
stringstream	./src/flecs.h	/^    explicit stringstream() $/;"	f	struct:flecs::stringstream
stringstream	./src/flecs.h	/^    stringstream(stringstream&& str) noexcept {$/;"	f	struct:flecs::stringstream
stringstream	./src/flecs.h	/^struct stringstream {$/;"	s	namespace:flecs
strip_generation	./src/flecs.h	/^inline flecs::id_t strip_generation(flecs::entity_t e) {$/;"	f	namespace:flecs	typeref:typename:flecs::id_t
strip_named_arg	./vendor/fmt/include/base.h	/^template <typename T, bool = is_named_arg<T>::value> struct strip_named_arg {$/;"	s	namespace:detail
strip_named_arg	./vendor/fmt/include/base.h	/^template <typename T> struct strip_named_arg<T, true> {$/;"	s	namespace:detail
style	./vendor/STC/misc/examples/algorithms/shape.c	/^    uint16_t style;$/;"	m	struct:Shape	typeref:typename:uint16_t	file:
style	./vendor/STC/misc/examples/algorithms/shape.cpp	/^    uint16_t style;$/;"	m	struct:Shape	typeref:typename:uint16_t	file:
style	./vendor/fmt/include/color.h	/^  text_style style;$/;"	m	struct:detail::styled_arg	typeref:typename:text_style
styled	./vendor/fmt/include/color.h	/^FMT_CONSTEXPR auto styled(const T& value, text_style ts)$/;"	f	typeref:typename:detail::styled_arg<remove_cvref_t<T>>
styled_arg	./vendor/fmt/include/color.h	/^  styled_arg(const T& v, text_style s) : value(v), style(s) {}$/;"	f	struct:detail::styled_arg
styled_arg	./vendor/fmt/include/color.h	/^template <typename T> struct styled_arg : detail::view {$/;"	s	namespace:detail
subid	./vendor/STC/include/stc/priv/cregex_prv.c	/^        int     subid;           \/* sub-expression id for TOK_RBRA and TOK_LBRA *\/$/;"	m	union:_Reinst::__anon4ce7005a020a	typeref:typename:int	file:
subidp	./vendor/STC/include/stc/priv/cregex_prv.c	/^    short* subidp;$/;"	m	struct:_Parser	typeref:typename:short *	file:
subidstack	./vendor/STC/include/stc/priv/cregex_prv.c	/^    short subidstack[_NSTACK]; \/* parallel to atorstack *\/$/;"	m	struct:_Parser	typeref:typename:short[]	file:
subject	./src/flecs.h	/^    ecs_entity_t subject;$/;"	m	struct:ecs_term_iter_t	typeref:typename:ecs_entity_t
subqueries	./src/flecs.c	/^    ecs_vec_t subqueries;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_vec_t	file:
subsecond_precision	./vendor/fmt/include/chrono.h	/^  using subsecond_precision = std::chrono::duration<$/;"	t	function:detail::write_fractional_seconds
subsecs_	./vendor/fmt/include/chrono.h	/^  const Duration* subsecs_;$/;"	m	class:detail::tm_writer	typeref:typename:const Duration *
subtract_aligned	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 void subtract_aligned(const bigint& other) {$/;"	f	class:detail::bigint	typeref:typename:FMT_CONSTEXPR20 void
subtract_bigits	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 void subtract_bigits(int index, bigit other, bigit& borrow) {$/;"	f	class:detail::bigint	typeref:typename:FMT_CONSTEXPR20 void
suite	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    struct suite$/;"	s	class:picobench::report
suite_all	./vendor/STC/misc/tests/ctest.h	/^static int suite_all(struct ctest* t) {$/;"	f	typeref:typename:int
suite_filter	./vendor/STC/misc/tests/ctest.h	/^static int suite_filter(struct ctest* t) {$/;"	f	typeref:typename:int
suite_name	./vendor/STC/misc/tests/ctest.h	/^static const char* suite_name;$/;"	v	typeref:typename:const char *
suites	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    std::vector<suite> suites;$/;"	m	class:picobench::report	typeref:typename:std::vector<suite>
sum	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	m	struct:__anonfac950030208	typeref:typename:uint64_t	file:
sum	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	m	struct:__anonca721fef0208	typeref:typename:uint64_t	file:
sum	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	m	struct:__anona03d81450208	typeref:typename:uint64_t	file:
sum	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	m	struct:__anon0565975a0208	typeref:typename:uint64_t	file:
sum	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	m	struct:__anon603333870208	typeref:typename:uint64_t	file:
sv	./vendor/fmt/include/base.h	/^      using sv = basic_string_view<typename Context::char_type>;$/;"	t	function:basic_format_arg::visit	typeref:typename:basic_string_view<typename Context::char_type>
sw_case	./src/flecs.c	/^    ecs_entity_t sw_case; $/;"	m	struct:flecs_switch_term_t	typeref:typename:ecs_entity_t	file:
sw_column	./src/flecs.c	/^    ecs_switch_t *sw_column;$/;"	m	struct:flecs_switch_term_t	typeref:typename:ecs_switch_t *	file:
sw_columns	./src/flecs.c	/^    ecs_switch_t *sw_columns;        \/* Switch columns *\/$/;"	m	struct:ecs_table__t	typeref:typename:ecs_switch_t *	file:
sw_count	./src/flecs.c	/^    int16_t sw_count;$/;"	m	struct:ecs_table__t	typeref:typename:int16_t	file:
sw_offset	./src/flecs.c	/^    int16_t sw_offset;$/;"	m	struct:ecs_table__t	typeref:typename:int16_t	file:
sw_offset	./src/flecs.c	/^    int32_t sw_offset;$/;"	m	struct:ecs_entity_filter_iter_t	typeref:typename:int32_t	file:
sw_smallest	./src/flecs.c	/^    int32_t sw_smallest;$/;"	m	struct:ecs_entity_filter_iter_t	typeref:typename:int32_t	file:
sw_terms	./src/flecs.c	/^    ecs_vec_t sw_terms;              \/* Terms with switch (union) entity filter *\/$/;"	m	struct:ecs_entity_filter_t	typeref:typename:ecs_vec_t	file:
swap	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        void swap(DataNode<M, false>& o) noexcept {$/;"	f	class:robin_hood::detail::Table::DataNode	typeref:typename:void
swap	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        void swap(DataNode<M, true>& o) noexcept($/;"	f	class:robin_hood::detail::Table::DataNode	typeref:typename:void
swap	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void swap(BulkPoolAllocator<T, MinNumAllocs, MaxNumAllocs>& other) noexcept {$/;"	f	class:robin_hood::detail::BulkPoolAllocator	typeref:typename:void
swap	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void swap(Table& o) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:void
swap	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    void swap(pair<T1, T2>& o) noexcept((detail::swappable::nothrow<T1>::value) &&$/;"	f	struct:robin_hood::pair	typeref:typename:void
swap	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^inline void swap(pair<A, B>& a, pair<A, B>& b) noexcept($/;"	f	namespace:robin_hood	typeref:typename:void
swap	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    void swap(table& other) noexcept(noexcept(std::is_nothrow_swappable_v<value_container_type>&/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:void
swap	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    void swap(HashMap& rhs)$/;"	f	class:emhash7::HashMap	typeref:typename:void
swap	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    void swap(entry<First, Second>& o)$/;"	f	struct:emhash7::entry	typeref:typename:void
swap	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    void swap(sherwood_v3_table & other)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:void
swap	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  void swap(robin_hash& other) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:void
swap	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  friend void swap(robin_map& lhs, robin_map& rhs) { lhs.swap(rhs); }$/;"	f	namespace:tsl	typeref:typename:void
swap	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  void swap(robin_map& other) { other.m_ht.swap(m_ht); }$/;"	f	class:tsl::robin_map	typeref:typename:void
swap_pointers	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    void swap_pointers(sherwood_v3_table & other)$/;"	f	class:ska::detailv3::sherwood_v3_table	typeref:typename:void
swap_with_value_in_bucket	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  void swap_with_value_in_bucket(distance_type& dist_from_ideal_bucket,$/;"	f	class:tsl::detail_robin_hash::bucket_entry	typeref:typename:void
swappable	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^namespace swappable {$/;"	n	namespace:robin_hood::detail
symbol	./src/flecs.h	/^    char *symbol;        \/**< Symbol of prefix (e.g. "K", "M", "Ki") *\/$/;"	m	struct:EcsUnitPrefix	typeref:typename:char *
symbol	./src/flecs.h	/^    char *symbol;$/;"	m	struct:EcsUnit	typeref:typename:char *
symbol	./src/flecs.h	/^    const char *symbol;   \/**< Optional entity symbol. A symbol is an unscoped$/;"	m	struct:ecs_entity_desc_t	typeref:typename:const char *
symbol	./src/flecs.h	/^    const char *symbol;$/;"	m	struct:ecs_unit_desc_t	typeref:typename:const char *
symbol	./src/flecs.h	/^    const char *symbol;$/;"	m	struct:ecs_unit_prefix_desc_t	typeref:typename:const char *
symbol	./src/flecs.h	/^    flecs::string_view symbol() const {$/;"	f	struct:flecs::entity_view	typeref:typename:flecs::string_view
symbol_name	./src/flecs.h	/^inline const char* symbol_name() {$/;"	f	namespace:flecs::_	typeref:typename:const char *
symbol_name	./src/flecs.h	/^template <> inline const char* symbol_name<double>() {$/;"	f	namespace:flecs::_	typeref:typename:const char *
symbol_name	./src/flecs.h	/^template <> inline const char* symbol_name<float>() {$/;"	f	namespace:flecs::_	typeref:typename:const char *
symbol_name	./src/flecs.h	/^template <> inline const char* symbol_name<int16_t>() {$/;"	f	namespace:flecs::_	typeref:typename:const char *
symbol_name	./src/flecs.h	/^template <> inline const char* symbol_name<int32_t>() {$/;"	f	namespace:flecs::_	typeref:typename:const char *
symbol_name	./src/flecs.h	/^template <> inline const char* symbol_name<int64_t>() {$/;"	f	namespace:flecs::_	typeref:typename:const char *
symbol_name	./src/flecs.h	/^template <> inline const char* symbol_name<int8_t>() {$/;"	f	namespace:flecs::_	typeref:typename:const char *
symbol_name	./src/flecs.h	/^template <> inline const char* symbol_name<uint16_t>() {$/;"	f	namespace:flecs::_	typeref:typename:const char *
symbol_name	./src/flecs.h	/^template <> inline const char* symbol_name<uint32_t>() {$/;"	f	namespace:flecs::_	typeref:typename:const char *
symbol_name	./src/flecs.h	/^template <> inline const char* symbol_name<uint64_t>() {$/;"	f	namespace:flecs::_	typeref:typename:const char *
symbol_name	./src/flecs.h	/^template <> inline const char* symbol_name<uint8_t>() {$/;"	f	namespace:flecs::_	typeref:typename:const char *
symbols	./src/flecs.c	/^    ecs_hashmap_t symbols;$/;"	m	struct:ecs_world_t	typeref:typename:ecs_hashmap_t	file:
sync_cond	./src/flecs.c	/^    ecs_os_cond_t sync_cond;         \/* Signal that worker thread job is done *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_os_cond_t	file:
sync_mutex	./src/flecs.c	/^    ecs_os_mutex_t sync_mutex;       \/* Mutex for job_cond *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_os_mutex_t	file:
sync_points	./src/flecs.h	/^    ecs_vec_t sync_points;$/;"	m	struct:ecs_pipeline_stats_t	typeref:typename:ecs_vec_t
syncs	./src/flecs.c	/^    ecs_vec_t syncs;$/;"	m	struct:__anon7d4a41771c08	typeref:typename:ecs_vec_t	file:
system	./src/flecs.c	/^    ecs_entity_t system;             \/* System that enqueued the command *\/$/;"	m	struct:ecs_cmd_t	typeref:typename:ecs_entity_t	file:
system	./src/flecs.c	/^    ecs_entity_t system;$/;"	m	struct:ecs_stage_t	typeref:typename:ecs_entity_t	file:
system	./src/flecs.h	/^    ecs_entity_t system;          \/* The system (if applicable) *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_entity_t
system	./src/flecs.h	/^    explicit system() {$/;"	f	struct:flecs::system
system	./src/flecs.h	/^    explicit system(flecs::world_t *world, ecs_system_desc_t *desc, bool instanced) $/;"	f	struct:flecs::system
system	./src/flecs.h	/^inline flecs::entity iter::system() const {$/;"	f	class:flecs::iter	typeref:typename:flecs::entity
system	./src/flecs.h	/^inline system world::system(flecs::entity e) const {$/;"	f	class:flecs::world	typeref:typename:system
system	./src/flecs.h	/^inline system_builder<Comps...> world::system(Args &&... args) const {$/;"	f	class:flecs::world	typeref:typename:system_builder<Comps...>
system	./src/flecs.h	/^struct system final : entity$/;"	s	namespace:flecs
system_builder	./src/flecs.h	/^    system_builder(flecs::world_t* world, const char *name = nullptr)$/;"	f	struct:flecs::system_builder
system_builder	./src/flecs.h	/^struct system_builder final : _::system_builder_base<Components...> {$/;"	s	namespace:flecs
system_builder_base	./src/flecs.h	/^    using system_builder_base = node_builder<$/;"	t	namespace:flecs::_	typeref:typename:node_builder<system,ecs_system_desc_t,system_builder<Components...>,system_builder_i,Components...>
system_builder_i	./src/flecs.h	/^    system_builder_i(ecs_system_desc_t *desc) $/;"	f	struct:flecs::system_builder_i
system_builder_i	./src/flecs.h	/^struct system_builder_i : query_builder_i<Base, Components ...> {$/;"	s	namespace:flecs
system_category	./vendor/fmt/include/os.h	/^inline auto system_category() noexcept -> const std::error_category& {$/;"	f	typeref:typename:auto
system_count	./src/flecs.h	/^        ecs_metric_t system_count;         \/**< Number of systems *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1208	typeref:typename:ecs_metric_t
system_count	./src/flecs.h	/^    int32_t system_count;        \/**< Number of systems in pipeline *\/$/;"	m	struct:ecs_pipeline_stats_t	typeref:typename:int32_t
system_count	./src/flecs.h	/^    int32_t system_count;$/;"	m	struct:ecs_sync_stats_t	typeref:typename:int32_t
system_error	./vendor/fmt/include/format.h	/^auto system_error(int error_code, format_string<T...> fmt, T&&... args)$/;"	f	typeref:typename:std::system_error
system_init	./src/flecs.h	/^inline void system_init(flecs::world& world) {$/;"	f	namespace:flecs::_	typeref:typename:void
system_runner_fluent	./src/flecs.h	/^    system_runner_fluent($/;"	f	struct:flecs::system_runner_fluent
system_runner_fluent	./src/flecs.h	/^struct system_runner_fluent {$/;"	s	namespace:flecs
system_stats	./src/flecs.h	/^    ecs_map_t system_stats;$/;"	m	struct:ecs_pipeline_stats_t	typeref:typename:ecs_map_t
system_string	./vendor/fmt/include/std.h	/^  auto system_string() const -> std::string { return string(); }$/;"	f	class:path	typeref:typename:std::string
system_time	./src/flecs.h	/^        ecs_metric_t system_time;          \/**< Time spent on running systems. *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1508	typeref:typename:ecs_metric_t
system_time_last	./src/flecs.h	/^    double system_time_last;    \/**< Time spent in systems *\/$/;"	m	struct:__anon7d4a417c1b08	typeref:typename:double
system_time_total	./src/flecs.h	/^    double system_time_total;   \/**< Total time spent in systems *\/$/;"	m	struct:__anon7d4a417c1b08	typeref:typename:double
system_time_total	./src/flecs.h	/^    ecs_ftime_t system_time_total;    \/**< Total time spent in systems *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:ecs_ftime_t
systems	./src/flecs.c	/^    ecs_vec_t systems;          \/* Vector with system ids *\/$/;"	m	struct:ecs_pipeline_state_t	typeref:typename:ecs_vec_t	file:
systems	./src/flecs.h	/^    ecs_vec_t systems;$/;"	m	struct:ecs_pipeline_stats_t	typeref:typename:ecs_vec_t
systems_ran	./src/flecs.h	/^        ecs_metric_t systems_ran;          \/**< Number of systems ran. *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1408	typeref:typename:ecs_metric_t
systems_ran_frame	./src/flecs.h	/^    int64_t systems_ran_frame;        \/**< Total number of systems ran in last frame *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int64_t
t	./src/flecs.h	/^    int32_t t;$/;"	m	struct:ecs_pipeline_stats_t	typeref:typename:int32_t
t	./src/flecs.h	/^    int32_t t;$/;"	m	struct:ecs_query_stats_t	typeref:typename:int32_t
t	./src/flecs.h	/^    int32_t t;$/;"	m	struct:ecs_world_stats_t	typeref:typename:int32_t
t1	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	m	struct:__anonfac950030208	typeref:typename:time_t	file:
t1	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	m	struct:__anonca721fef0208	typeref:typename:time_t	file:
t1	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	m	struct:__anona03d81450208	typeref:typename:time_t	file:
t1	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	m	struct:__anon0565975a0208	typeref:typename:time_t	file:
t1	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	m	struct:__anon603333870208	typeref:typename:time_t	file:
t2	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	m	struct:__anonfac950030208	typeref:typename:time_t	file:
t2	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	m	struct:__anonca721fef0208	typeref:typename:time_t	file:
t2	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	m	struct:__anona03d81450208	typeref:typename:time_t	file:
t2	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	m	struct:__anon0565975a0208	typeref:typename:time_t	file:
t2	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^typedef struct { time_t t1, t2; uint64_t sum; float fac; } Range;$/;"	m	struct:__anon603333870208	typeref:typename:time_t	file:
t_next	./src/flecs.c	/^int32_t t_next($/;"	f	typeref:typename:int32_t	file:
t_prev	./src/flecs.c	/^int32_t t_prev($/;"	f	typeref:typename:int32_t	file:
table	./src/flecs.c	/^    ecs_table_t *table;              \/* The current table. *\/$/;"	m	struct:ecs_query_table_match_t	typeref:typename:ecs_table_t *	file:
table	./src/flecs.c	/^    ecs_table_t *table;$/;"	m	struct:__anon7d4a41770508	typeref:typename:ecs_table_t *	file:
table	./src/flecs.c	/^    ecs_table_t *table;$/;"	m	struct:__anon7d4a41772608	typeref:typename:ecs_table_t *	file:
table	./src/flecs.c	/^    ecs_table_t *table;$/;"	m	struct:__anon7d4a41772a08	typeref:typename:ecs_table_t *	file:
table	./src/flecs.c	/^    ecs_table_t *table;$/;"	m	struct:ecs_query_event_t	typeref:typename:ecs_table_t *	file:
table	./src/flecs.c	/^    ecs_table_t *table;$/;"	m	struct:ecs_reachable_elem_t	typeref:typename:ecs_table_t *	file:
table	./src/flecs.c	/^    ecs_table_t *table;$/;"	m	struct:ecs_table_cache_hdr_t	typeref:typename:ecs_table_t *	file:
table	./src/flecs.c	/^    ecs_table_t *table;$/;"	m	struct:ecs_table_leaf_t	typeref:typename:ecs_table_t *	file:
table	./src/flecs.h	/^    Base& table(flecs::table_t *t, int32_t offset = 0, int32_t count = 0) {$/;"	f	struct:flecs::event_builder_base	typeref:typename:Base &
table	./src/flecs.h	/^    ecs_table_t *table;           \/* Current table *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_table_t *
table	./src/flecs.h	/^    ecs_table_t *table;   \/* Identifies a type (and table) in world *\/$/;"	m	struct:ecs_record_t	typeref:typename:ecs_table_t *
table	./src/flecs.h	/^    ecs_table_t *table; \/**< Table to insert the entities into. Should not be set$/;"	m	struct:ecs_bulk_desc_t	typeref:typename:ecs_table_t *
table	./src/flecs.h	/^    ecs_table_t *table;$/;"	m	struct:ecs_event_desc_t	typeref:typename:ecs_table_t *
table	./src/flecs.h	/^    ecs_table_t *table;$/;"	m	struct:ecs_table_range_t	typeref:typename:ecs_table_t *
table	./src/flecs.h	/^    ecs_table_t *table;$/;"	m	struct:ecs_term_iter_t	typeref:typename:ecs_table_t *
table	./src/flecs.h	/^    table() : m_world(nullptr), m_table(nullptr) { }$/;"	f	struct:flecs::table
table	./src/flecs.h	/^    table(world_t *world, table_t *t)$/;"	f	struct:flecs::table
table	./src/flecs.h	/^inline flecs::table entity_view::table() const {$/;"	f	class:flecs::entity_view	typeref:typename:flecs::table
table	./src/flecs.h	/^inline flecs::table iter::table() const {$/;"	f	class:flecs::iter	typeref:typename:flecs::table
table	./src/flecs.h	/^struct table {$/;"	s	namespace:flecs
table	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    explicit table(allocator_type const& alloc)$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table
table	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    explicit table(size_t bucket_count,$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table
table	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    table()$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table
table	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    table(InputIt first, InputIt last, size_type bucket_count, Hash const& hash, allocator_type /;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table
table	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    table(InputIt first, InputIt last, size_type bucket_count, allocator_type const& alloc)$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table
table	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    table(InputIt first,$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table
table	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    table(size_t bucket_count, Hash const& hash, allocator_type const& alloc)$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table
table	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    table(size_t bucket_count, allocator_type const& alloc)$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table
table	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    table(std::initializer_list<value_type> ilist, size_type bucket_count, allocator_type const&/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table
table	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    table(std::initializer_list<value_type> ilist,$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table
table	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    table(std::initializer_list<value_type> init, size_type bucket_count, Hash const& hash, allo/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table
table	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    table(table const& other)$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table
table	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    table(table const& other, allocator_type const& alloc)$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table
table	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    table(table&& other) noexcept$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table
table	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    table(table&& other, allocator_type const& alloc) noexcept$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table
table	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^class table : public std::conditional_t<is_map_v<T>, base_table_type_map<T>, base_table_type_set/;"	c	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail
table_count	./src/flecs.h	/^    int32_t table_count() const {$/;"	f	struct:flecs::iter	typeref:typename:int32_t
table_count	./src/flecs.h	/^    int32_t table_count;              \/**< Number of tables *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int32_t
table_count	./src/flecs.h	/^    int32_t table_count;          \/* Active table count for query *\/$/;"	m	struct:ecs_iter_t	typeref:typename:int32_t
table_count	./src/flecs.h	/^    int32_t table_count;  \/**< Number of tables in group *\/$/;"	m	struct:ecs_query_group_info_t	typeref:typename:int32_t
table_create_total	./src/flecs.h	/^    int64_t table_create_total;       \/**< Total number of times a table was created *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int64_t
table_delete_total	./src/flecs.h	/^    int64_t table_delete_total;       \/**< Total number of times a table was deleted *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int64_t
table_diff	./src/flecs.c	/^    ecs_block_allocator_t table_diff;$/;"	m	struct:ecs_world_allocators_t	typeref:typename:ecs_block_allocator_t	file:
table_id	./src/flecs.c	/^    ecs_var_id_t table_id; \/* id to table variable, if any *\/$/;"	m	struct:ecs_rule_var_t	typeref:typename:ecs_var_id_t	file:
table_id	./src/flecs.c	/^    uint64_t table_id;$/;"	m	struct:ecs_query_table_t	typeref:typename:uint64_t	file:
table_id	./src/flecs.h	/^    uint64_t table_id;      \/* Table id for detecting ABA issues *\/$/;"	m	struct:ecs_ref_t	typeref:typename:uint64_t
table_map	./src/flecs.c	/^    ecs_hashmap_t table_map;         \/* hashmap<ecs_type_t, ecs_table_t*> *\/$/;"	m	struct:ecs_store_t	typeref:typename:ecs_hashmap_t	file:
table_range	./src/flecs.h	/^    table_range()$/;"	f	struct:flecs::table_range
table_range	./src/flecs.h	/^    table_range(world_t *world, table_t *t, int32_t offset, int32_t count)$/;"	f	struct:flecs::table_range
table_range	./src/flecs.h	/^struct table_range : table {$/;"	s	namespace:flecs
table_slices	./src/flecs.c	/^    ecs_vec_t table_slices;$/;"	m	struct:ecs_query_t	typeref:typename:ecs_vec_t	file:
table_state	./src/flecs.c	/^    int32_t table_state;$/;"	m	struct:flecs_flat_monitor_t	typeref:typename:int32_t	file:
table_t	./src/flecs.h	/^using table_t = ecs_table_t;$/;"	t	namespace:flecs	typeref:typename:ecs_table_t
tables	./src/flecs.c	/^    ecs_sparse_t tables;             \/* sparse<table_id, ecs_table_t> *\/$/;"	m	struct:ecs_store_t	typeref:typename:ecs_sparse_t	file:
tables	./src/flecs.c	/^    ecs_table_cache_list_t tables;$/;"	m	struct:ecs_table_cache_t	typeref:typename:ecs_table_cache_list_t	file:
tables	./src/flecs.c	/^    ecs_vec_t tables;$/;"	m	struct:ecs_snapshot_t	typeref:typename:ecs_vec_t	file:
tables	./src/flecs.h	/^    ecs_vec_t tables; \/* ecs_table_leaf_t *\/$/;"	m	struct:ecs_snapshot_iter_t	typeref:typename:ecs_vec_t
tables	./src/flecs.h	/^    } tables;$/;"	m	struct:ecs_world_stats_t	typeref:struct:ecs_world_stats_t::__anon7d4a417c1108
tag_count	./src/flecs.h	/^        ecs_metric_t tag_count;           \/**< Number of tag ids (ids without data) *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1008	typeref:typename:ecs_metric_t
tag_id_count	./src/flecs.h	/^    int32_t tag_id_count;             \/**< Number of tag (no data) ids in the world *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:int32_t
tail	./src/flecs.c	/^    int32_t tail;$/;"	m	struct:ecs_http_send_queue_t	typeref:typename:int32_t	file:
tail_cursor	./src/flecs.c	/^    ecs_stack_cursor_t *tail_cursor;$/;"	m	struct:ecs_stack_t	typeref:typename:ecs_stack_cursor_t *	file:
tail_page	./src/flecs.c	/^    ecs_stack_page_t *tail_page;$/;"	m	struct:ecs_stack_t	typeref:typename:ecs_stack_page_t *	file:
take	./src/flecs.h	/^    void take() {$/;"	f	struct:flecs::snapshot	typeref:typename:void
take	./src/flecs.h	/^    void take(const F& f) {$/;"	f	struct:flecs::snapshot	typeref:typename:void
tan	./vendor/fmt/include/color.h	/^  tan = 0xD2B48C,                      \/\/ rgb(210,180,140)$/;"	e	enum:color
tangents	./vendor/raylib5/include/raylib.h	/^    float *tangents;        \/\/ Vertex tangents (XYZW - 4 components per vertex) (shader-locati/;"	m	struct:Mesh	typeref:typename:float *
target	./src/flecs.h	/^    ecs_record_t *target;$/;"	m	struct:EcsFlattenTarget	typeref:typename:ecs_record_t *
target	./src/flecs.h	/^inline flecs::entity entity_view::target($/;"	f	class:flecs::entity_view	typeref:typename:flecs::entity
target	./src/flecs.h	/^inline flecs::entity entity_view::target(int32_t index) const $/;"	f	class:flecs::entity_view	typeref:typename:flecs::entity
target	./src/flecs.h	/^inline flecs::entity world::target($/;"	f	class:flecs::world	typeref:typename:flecs::entity
target	./src/flecs.h	/^inline flecs::entity world::target(int32_t index) const$/;"	f	class:flecs::world	typeref:typename:flecs::entity
target	./vendor/raylib5/include/raylib.h	/^    Vector2 target;         \/\/ Camera target (rotation and zoom origin)$/;"	m	struct:Camera2D	typeref:typename:Vector2
target	./vendor/raylib5/include/raylib.h	/^    Vector3 target;         \/\/ Camera target it looks-at$/;"	m	struct:Camera3D	typeref:typename:Vector3
target_count	./src/flecs.c	/^    int32_t target_count;$/;"	m	struct:ecs_entity_filter_iter_t	typeref:typename:int32_t	file:
target_entity	./src/components.h	/^	ecs_entity_t target_entity;$/;"	m	struct:CameraComponent	typeref:typename:ecs_entity_t
target_for	./src/flecs.h	/^inline flecs::entity entity_view::target_for($/;"	f	class:flecs::entity_view	typeref:typename:flecs::entity
target_for	./src/flecs.h	/^inline flecs::entity entity_view::target_for(flecs::entity_t relationship) const {$/;"	f	class:flecs::entity_view	typeref:typename:flecs::entity
target_fps	./src/flecs.h	/^    app_builder& target_fps(ecs_ftime_t value) {$/;"	f	struct:flecs::app_builder	typeref:typename:app_builder &
target_fps	./src/flecs.h	/^    double target_fps;          \/**< Target FPS *\/$/;"	m	struct:__anon7d4a417c1b08	typeref:typename:double
target_fps	./src/flecs.h	/^    ecs_ftime_t target_fps;           \/**< Target fps *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:ecs_ftime_t
target_fps	./src/flecs.h	/^    ecs_ftime_t target_fps;   \/**< Target FPS. *\/$/;"	m	struct:ecs_app_desc_t	typeref:typename:ecs_ftime_t
target_offset	./src/flecs.c	/^    ecs_map_t target_offset;         \/**< Pair target to metric type offset *\/$/;"	m	struct:__anon7d4a41770e08	typeref:typename:ecs_map_t	file:
target_tile_height	./src/glyph.h	/^	int target_tile_height;$/;"	m	struct:Tileset	typeref:typename:int
target_tile_width	./src/glyph.h	/^	int target_tile_width;$/;"	m	struct:Tileset	typeref:typename:int
target_type	./vendor/fmt/include/printf.h	/^    using target_type = conditional_t<std::is_same<T, void>::value, U, T>;$/;"	t	function:detail::arg_converter::operator ()	typeref:typename:conditional_t<std::is_same<T,void>::value,U,T>
targets	./src/flecs.c	/^    ecs_map_t targets;               \/**< Map of counters for each target *\/$/;"	m	struct:__anon7d4a41770f08	typeref:typename:ecs_map_t	file:
targets	./src/flecs.h	/^    bool targets;$/;"	m	struct:ecs_metric_desc_t	typeref:typename:bool
targets	./src/flecs.h	/^    metric_builder& targets(bool value = true) {$/;"	f	struct:flecs::metric_builder	typeref:typename:metric_builder &
task	./src/flecs.h	/^    bool task;                     \/**< Is system a task *\/$/;"	m	struct:ecs_system_stats_t	typeref:typename:bool
taskA	./vendor/STC/misc/examples/coroutines/scheduler.c	/^static int taskA(cco_task* task, cco_runtime* rt) {$/;"	f	typeref:typename:int	file:
taskB	./vendor/STC/misc/examples/coroutines/scheduler.c	/^static int taskB(cco_task* task, cco_runtime* rt) {$/;"	f	typeref:typename:int	file:
task_join_	./src/flecs.h	/^    ecs_os_api_thread_join_t task_join_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_thread_join_t
task_new_	./src/flecs.h	/^    ecs_os_api_thread_new_t task_new_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_thread_new_t
tasks	./vendor/STC/misc/examples/coroutines/scheduler.c	/^    cco_tasks tasks;$/;"	m	struct:__anonaf51d64b0108	typeref:typename:cco_tasks	file:
tc_d	./src/turnbasedsystem.h	/^	TurnComponentData *tc_d;$/;"	m	struct:TurnComponent	typeref:typename:TurnComponentData *
tc_datas	./src/turnbasedsystem.h	/^	CVecVoid tc_datas; \/\/ CVecVoid<TurnComponentData *>$/;"	m	struct:TurnManager	typeref:typename:CVecVoid
tc_ref	./src/turnbasedsystem.h	/^	ecs_ref_t *tc_ref;$/;"	m	struct:TurnComponentData	typeref:typename:ecs_ref_t *
tc_refs	./src/turnbasedsystem.h	/^	CVecVoid tc_refs; \/\/ CVecVoid<ecs_ref_t *<TurnComponent *>>$/;"	m	struct:TurnManager	typeref:typename:CVecVoid
teal	./vendor/fmt/include/color.h	/^  teal = 0x008080,                     \/\/ rgb(0,128,128)$/;"	e	enum:color
teardown	./vendor/STC/misc/tests/ctest.h	/^    ctest_teardown_func* teardown;$/;"	m	struct:ctest	typeref:typename:ctest_teardown_func *
temperature	./src/flecs.h	/^struct temperature {$/;"	s	struct:flecs::units
templated_iterator	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^        templated_iterator(EntryPointer current)$/;"	f	struct:ska::detailv3::sherwood_v3_table::templated_iterator
templated_iterator	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    struct templated_iterator$/;"	s	class:ska::detailv3::sherwood_v3_table
term	./src/flecs.c	/^    ecs_term_t *term;$/;"	m	struct:__anon7d4a41770308	typeref:typename:ecs_term_t *	file:
term	./src/flecs.c	/^    ecs_term_t *term;$/;"	m	struct:flecs_flat_table_term_t	typeref:typename:ecs_term_t *	file:
term	./src/flecs.h	/^        ecs_term_iter_t term;$/;"	m	union:ecs_iter_private_t::__anon7d4a417c020a	typeref:typename:ecs_term_iter_t
term	./src/flecs.h	/^    Base& term() {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
term	./src/flecs.h	/^    Base& term(E value) {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
term	./src/flecs.h	/^    Base& term(const char *first, const char *second) {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
term	./src/flecs.h	/^    Base& term(const char *name) {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
term	./src/flecs.h	/^    Base& term(const char *second) {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
term	./src/flecs.h	/^    Base& term(entity_t r, const char *o) {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
term	./src/flecs.h	/^    Base& term(entity_t r, entity_t o) {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
term	./src/flecs.h	/^    Base& term(flecs::term& term) {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
term	./src/flecs.h	/^    Base& term(flecs::term&& term) {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
term	./src/flecs.h	/^    Base& term(id_t id) {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
term	./src/flecs.h	/^    Base& term(id_t id) {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
term	./src/flecs.h	/^    Base& term(id_t o) {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
term	./src/flecs.h	/^    ecs_term_t term;$/;"	m	struct:ecs_term_iter_t	typeref:typename:ecs_term_t
term	./src/flecs.h	/^    flecs::term term(int32_t index) const {$/;"	f	struct:flecs::query_base	typeref:typename:flecs::term
term	./src/flecs.h	/^    flecs::term term(int32_t index) {$/;"	f	struct:flecs::filter_base	typeref:typename:flecs::term
term	./src/flecs.h	/^    term()$/;"	f	struct:flecs::term
term	./src/flecs.h	/^    term(const term& t) : term_builder_i<term>(&value) {$/;"	f	struct:flecs::term
term	./src/flecs.h	/^    term(flecs::world_t *world_ptr) $/;"	f	struct:flecs::term
term	./src/flecs.h	/^    term(flecs::world_t *world_ptr, ecs_term_t t)$/;"	f	struct:flecs::term
term	./src/flecs.h	/^    term(flecs::world_t *world_ptr, entity_t r, entity_t o)$/;"	f	struct:flecs::term
term	./src/flecs.h	/^    term(flecs::world_t *world_ptr, id_t id)$/;"	f	struct:flecs::term
term	./src/flecs.h	/^    term(id_t id) $/;"	f	struct:flecs::term
term	./src/flecs.h	/^    term(id_t r, id_t o) $/;"	f	struct:flecs::term
term	./src/flecs.h	/^    term(term&& t) noexcept : term_builder_i<term>(&value) {$/;"	f	struct:flecs::term
term	./src/flecs.h	/^inline flecs::term world::term() const {$/;"	f	class:flecs::world	typeref:typename:flecs::term
term	./src/flecs.h	/^inline flecs::term world::term(Args &&... args) const {$/;"	f	class:flecs::world	typeref:typename:flecs::term
term	./src/flecs.h	/^struct term final : term_builder_i<term> {$/;"	s	namespace:flecs
term_at	./src/flecs.h	/^    Base& term_at(int32_t term_index) {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
term_builder_i	./src/flecs.h	/^    term_builder_i() : m_term(nullptr) { }$/;"	f	struct:flecs::term_builder_i
term_builder_i	./src/flecs.h	/^    term_builder_i(ecs_term_t *term_ptr) { $/;"	f	struct:flecs::term_builder_i
term_builder_i	./src/flecs.h	/^struct term_builder_i : term_id_builder_i<Base> {$/;"	s	namespace:flecs
term_color	./vendor/fmt/include/color.h	/^    uint8_t term_color;$/;"	m	union:detail::color_type::color_union	typeref:typename:uint8_t
term_count	./src/flecs.h	/^    int8_t term_count;        \/**< Number of elements in terms array *\/$/;"	m	struct:ecs_filter_t	typeref:typename:int8_t
term_id_builder_i	./src/flecs.h	/^    term_id_builder_i() : m_term_id(nullptr) { }$/;"	f	struct:flecs::term_id_builder_i
term_id_builder_i	./src/flecs.h	/^struct term_id_builder_i {$/;"	s	namespace:flecs
term_index	./src/flecs.c	/^    int32_t term_index;$/;"	m	struct:__anon7d4a41770308	typeref:typename:int32_t	file:
term_index	./src/flecs.c	/^    int8_t term_index;         \/* Query term corresponding with operation *\/$/;"	m	struct:ecs_rule_op_t	typeref:typename:int8_t	file:
term_index	./src/flecs.h	/^    int32_t term_index() const {$/;"	f	struct:flecs::iter	typeref:typename:int32_t
term_index	./src/flecs.h	/^    int32_t term_index;           \/* Index of term that emitted an event.$/;"	m	struct:ecs_iter_t	typeref:typename:int32_t
term_index	./src/flecs.h	/^    int32_t term_index;         \/**< Index of the term in parent observer (single term observer/;"	m	struct:ecs_observer_t	typeref:typename:int32_t
term_index	./src/flecs.h	/^    int32_t term_index;$/;"	m	struct:ecs_observer_desc_t	typeref:typename:int32_t
term_iter	./src/flecs.h	/^    ecs_term_iter_t term_iter;$/;"	m	struct:ecs_filter_iter_t	typeref:typename:ecs_term_iter_t
term_iter_init	./src/flecs.c	/^void term_iter_init($/;"	f	typeref:typename:void	file:
term_iter_init_no_data	./src/flecs.c	/^void term_iter_init_no_data($/;"	f	typeref:typename:void	file:
term_iter_init_w_idr	./src/flecs.c	/^void term_iter_init_w_idr($/;"	f	typeref:typename:void	file:
term_iter_init_wildcard	./src/flecs.c	/^void term_iter_init_wildcard($/;"	f	typeref:typename:void	file:
term_ptr	./src/flecs.h	/^struct term_ptr {$/;"	s	namespace:flecs::_
term_ptrs	./src/flecs.h	/^struct term_ptrs {$/;"	s	namespace:flecs::_
terminal_color	./vendor/fmt/include/color.h	/^enum class terminal_color : uint8_t {$/;"	g	typeref:typename:uint8_t
terms	./src/flecs.h	/^    ecs_term_t *terms;            \/* Term array of query being evaluated *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_term_t *
terms	./src/flecs.h	/^    ecs_term_t *terms;         \/**< Array containing terms for filter *\/$/;"	m	struct:ecs_filter_t	typeref:typename:ecs_term_t *
terms	./src/flecs.h	/^    ecs_term_t terms[FLECS_TERM_DESC_MAX];$/;"	m	struct:ecs_filter_desc_t	typeref:typename:ecs_term_t[]
terms_buffer	./src/flecs.h	/^    ecs_term_t *terms_buffer;$/;"	m	struct:ecs_filter_desc_t	typeref:typename:ecs_term_t *
terms_buffer_count	./src/flecs.h	/^    int32_t terms_buffer_count;$/;"	m	struct:ecs_filter_desc_t	typeref:typename:int32_t
test	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^typedef struct { const char* name; Range test[N_TESTS]; } Sample;$/;"	m	struct:__anonfac950030308	typeref:typename:Range[]	file:
test	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^typedef struct { const char* name; Range test[N_TESTS]; } Sample;$/;"	m	struct:__anonca721fef0308	typeref:typename:Range[]	file:
test	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^typedef struct { const char* name; Range test[N_TESTS]; } Sample;$/;"	m	struct:__anona03d81450308	typeref:typename:Range[]	file:
test	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^typedef struct { const char* name; Range test[N_TESTS]; } Sample;$/;"	m	struct:__anon0565975a0308	typeref:typename:Range[]	file:
test	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^typedef struct { const char* name; Range test[N_TESTS]; } Sample;$/;"	m	struct:__anon603333870308	typeref:typename:Range[]	file:
testShape	./vendor/STC/misc/examples/algorithms/shape.c	/^void testShape(const Shape* shape)$/;"	f	typeref:typename:void
testShape	./vendor/STC/misc/examples/algorithms/shape.cpp	/^void testShape(const Shape* shape)$/;"	f	typeref:typename:void
test_distribution	./vendor/STC/misc/examples/hashmaps/birthday.c	/^void test_distribution(void)$/;"	f	typeref:typename:void
test_repeats	./vendor/STC/misc/examples/hashmaps/birthday.c	/^static void test_repeats(void)$/;"	f	typeref:typename:void	file:
test_stc_deque	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^Sample test_stc_deque() {$/;"	f	typeref:typename:Sample
test_stc_forward_list	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^Sample test_stc_forward_list() {$/;"	f	typeref:typename:Sample
test_stc_map	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^Sample test_stc_map() {$/;"	f	typeref:typename:Sample
test_stc_unordered_map	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^Sample test_stc_unordered_map() {$/;"	f	typeref:typename:Sample
test_stc_vector	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^Sample test_stc_vector() {$/;"	f	typeref:typename:Sample
test_std_deque	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^Sample test_std_deque() { Sample s = {"std-deque"}; return s;}$/;"	f	typeref:typename:Sample
test_std_deque	./vendor/STC/misc/benchmarks/plotbench/deq_benchmark.cpp	/^Sample test_std_deque() {$/;"	f	typeref:typename:Sample
test_std_forward_list	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^Sample test_std_forward_list() { Sample s = {"std-forward_list"}; return s;}$/;"	f	typeref:typename:Sample
test_std_forward_list	./vendor/STC/misc/benchmarks/plotbench/list_benchmark.cpp	/^Sample test_std_forward_list() {$/;"	f	typeref:typename:Sample
test_std_map	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^Sample test_std_map() { Sample s = {"std-map"}; return s;}$/;"	f	typeref:typename:Sample
test_std_map	./vendor/STC/misc/benchmarks/plotbench/smap_benchmark.cpp	/^Sample test_std_map() {$/;"	f	typeref:typename:Sample
test_std_unordered_map	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^Sample test_std_unordered_map() { Sample s = {"std-unordered_map"}; return s;}$/;"	f	typeref:typename:Sample
test_std_unordered_map	./vendor/STC/misc/benchmarks/plotbench/hmap_benchmark.cpp	/^Sample test_std_unordered_map() {$/;"	f	typeref:typename:Sample
test_std_vector	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^Sample test_std_vector() { Sample s = {"std-vector"}; return s;}$/;"	f	typeref:typename:Sample
test_std_vector	./vendor/STC/misc/benchmarks/plotbench/vec_benchmark.cpp	/^Sample test_std_vector() {$/;"	f	typeref:typename:Sample
testsort	./vendor/STC/misc/benchmarks/various/quicksort_bench.c	/^void testsort(Ints *a, int size, const char *desc) {$/;"	f	typeref:typename:void
texcoords	./vendor/raylib5/include/raylib.h	/^    float *texcoords;       \/\/ Vertex texture coordinates (UV - 2 components per vertex) (shad/;"	m	struct:Mesh	typeref:typename:float *
texcoords2	./vendor/raylib5/include/raylib.h	/^    float *texcoords2;      \/\/ Vertex texture second coordinates (UV - 2 components per vertex/;"	m	struct:Mesh	typeref:typename:float *
text	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    text,$/;"	e	enum:picobench::report_output_format
text	./vendor/STC/misc/benchmarks/various/string_bench_STC.cpp	/^    std::string text;$/;"	m	class:timer	typeref:typename:std::string	file:
text	./vendor/STC/misc/benchmarks/various/string_bench_STD.cpp	/^    std::string text;$/;"	m	class:timer	typeref:typename:std::string	file:
text	./vendor/STC/misc/examples/coroutines/cotasks1.c	/^    cstr text;$/;"	m	struct:produce_items	typeref:typename:cstr	file:
text	./vendor/fmt/include/compile.h	/^template <typename Char> struct text {$/;"	s	namespace:detail
textBoxCursorIndex	./vendor/raylib5/include/raygui.h	/^static int textBoxCursorIndex = 0;              \/\/ Cursor index, shared by all GuiTextBox*()$/;"	v	typeref:typename:int
text_style	./vendor/fmt/include/color.h	/^  FMT_CONSTEXPR text_style(bool is_foreground,$/;"	f	class:text_style	typeref:typename:FMT_CONSTEXPR
text_style	./vendor/fmt/include/color.h	/^  FMT_CONSTEXPR text_style(emphasis em = emphasis()) noexcept$/;"	f	class:text_style	typeref:typename:FMT_CONSTEXPR
text_style	./vendor/fmt/include/color.h	/^class text_style {$/;"	c
texture	./src/glyph.h	/^	Texture texture;$/;"	m	struct:Tileset	typeref:typename:Texture
texture	./vendor/raylib5/include/raygui.h	/^        Texture2D texture;      \/\/ Texture atlas containing the glyphs$/;"	m	struct:Font	typeref:typename:Texture2D
texture	./vendor/raylib5/include/raylib.h	/^    Texture texture;        \/\/ Color buffer attachment texture$/;"	m	struct:RenderTexture	typeref:typename:Texture
texture	./vendor/raylib5/include/raylib.h	/^    Texture2D texture;      \/\/ Material map texture$/;"	m	struct:MaterialMap	typeref:typename:Texture2D
texture	./vendor/raylib5/include/raylib.h	/^    Texture2D texture;      \/\/ Texture atlas containing the glyphs$/;"	m	struct:Font	typeref:typename:Texture2D
the_time	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^} the_time;$/;"	v	namespace:picobench	typeref:struct:picobench::fake_time
thickness	./vendor/STC/misc/examples/algorithms/shape.c	/^    uint8_t thickness;$/;"	m	struct:Shape	typeref:typename:uint8_t	file:
thickness	./vendor/STC/misc/examples/algorithms/shape.cpp	/^    uint8_t thickness;$/;"	m	struct:Shape	typeref:typename:uint8_t	file:
this_thread_sleep_for	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^void this_thread_sleep_for(const std::chrono::duration<Rep, Period>& duration)$/;"	f	namespace:picobench	typeref:typename:void
this_thread_sleep_for_ns	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^void this_thread_sleep_for_ns(uint64_t ns)$/;"	f	namespace:picobench	typeref:typename:void
thistle	./vendor/fmt/include/color.h	/^  thistle = 0xD8BFD8,                  \/\/ rgb(216,191,216)$/;"	e	enum:color
thousands_sep	./vendor/fmt/include/format.h	/^  Char thousands_sep;$/;"	m	struct:detail::thousands_sep_result	typeref:typename:Char
thousands_sep	./vendor/fmt/include/format.h	/^inline auto thousands_sep(locale_ref loc) -> thousands_sep_result<Char> {$/;"	f	namespace:detail	typeref:typename:thousands_sep_result<Char>
thousands_sep	./vendor/fmt/include/format.h	/^inline auto thousands_sep(locale_ref loc) -> thousands_sep_result<wchar_t> {$/;"	f	namespace:detail	typeref:typename:thousands_sep_result<wchar_t>
thousands_sep_	./vendor/fmt/include/format.h	/^  std::basic_string<Char> thousands_sep_;$/;"	m	class:detail::digit_grouping	typeref:typename:std::basic_string<Char>
thousands_sep_impl	./vendor/fmt/include/format-inl.h	/^FMT_FUNC auto thousands_sep_impl(locale_ref loc) -> thousands_sep_result<Char> {$/;"	f	namespace:detail	typeref:typename:thousands_sep_result<Char>
thousands_sep_impl	./vendor/fmt/include/format-inl.h	/^FMT_FUNC auto thousands_sep_impl(locale_ref) -> thousands_sep_result<Char> {$/;"	f	namespace:detail	typeref:typename:thousands_sep_result<Char>
thousands_sep_result	./vendor/fmt/include/format.h	/^template <typename Char> struct thousands_sep_result {$/;"	s	namespace:detail
thread	./src/flecs.c	/^    HANDLE thread;$/;"	m	struct:ecs_win_thread_t	typeref:typename:HANDLE	file:
thread	./src/flecs.c	/^    ecs_os_thread_t thread;          \/* Thread handle (0 if no threading is used) *\/$/;"	m	struct:ecs_stage_t	typeref:typename:ecs_os_thread_t	file:
thread	./src/flecs.c	/^    ecs_os_thread_t thread;$/;"	m	struct:ecs_http_send_queue_t	typeref:typename:ecs_os_thread_t	file:
thread	./src/flecs.c	/^    ecs_os_thread_t thread;$/;"	m	struct:ecs_http_server_t	typeref:typename:ecs_os_thread_t	file:
thread_ctx	./src/flecs.c	/^    ecs_world_t *thread_ctx;         \/* Points to stage when a thread stage *\/$/;"	m	struct:ecs_stage_t	typeref:typename:ecs_world_t *	file:
thread_join_	./src/flecs.h	/^    ecs_os_api_thread_join_t thread_join_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_thread_join_t
thread_new_	./src/flecs.h	/^    ecs_os_api_thread_new_t thread_new_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_thread_new_t
thread_self_	./src/flecs.h	/^    ecs_os_api_thread_self_t thread_self_;$/;"	m	struct:ecs_os_api_t	typeref:typename:ecs_os_api_thread_self_t
threads	./src/flecs.h	/^    app_builder& threads(int32_t value) {$/;"	f	struct:flecs::app_builder	typeref:typename:app_builder &
threads	./src/flecs.h	/^    int32_t threads;          \/**< Number of threads. *\/$/;"	m	struct:ecs_app_desc_t	typeref:typename:int32_t
threshold	./vendor/STC/include/stc/crand.h	/^typedef struct crand_uniform { int64_t lower; uint64_t range, threshold; } crand_uniform_t;$/;"	m	struct:crand_uniform	typeref:typename:uint64_t
throw_format_error	./vendor/fmt/include/base.h	/^FMT_DEPRECATED FMT_NORETURN inline void throw_format_error($/;"	f	typeref:typename:FMT_DEPRECATED FMT_NORETURN void
ti	./src/flecs.c	/^    const ecs_type_info_t *ti;$/;"	m	struct:__anon7d4a41770208	typeref:typename:const ecs_type_info_t *	file:
ti	./src/flecs.c	/^    const ecs_type_info_t *ti;$/;"	m	struct:ecs_expr_value_t	typeref:typename:const ecs_type_info_t *	file:
ti	./src/flecs.c	/^    ecs_type_info_t *ti;             \/* Component type info *\/$/;"	m	struct:ecs_column_t	typeref:typename:ecs_type_info_t *	file:
tick	./src/flecs.h	/^    bool tick;                 \/**< True if providing tick *\/$/;"	m	struct:EcsTickSource	typeref:typename:bool
tick_count	./src/flecs.h	/^    int32_t tick_count;          \/**< Number of times the rate filter ticked *\/$/;"	m	struct:EcsRateFilter	typeref:typename:int32_t
tick_source	./src/flecs.c	/^    ecs_entity_t tick_source;       \/* Tick source associated with system *\/$/;"	m	struct:ecs_system_t	typeref:typename:ecs_entity_t	file:
tick_source	./src/flecs.h	/^    Base& tick_source() {$/;"	f	struct:flecs::system_builder_i	typeref:typename:Base &
tick_source	./src/flecs.h	/^    Base& tick_source(flecs::entity_t tick_source) {$/;"	f	struct:flecs::system_builder_i	typeref:typename:Base &
tick_source	./src/flecs.h	/^    ecs_entity_t tick_source;$/;"	m	struct:ecs_system_desc_t	typeref:typename:ecs_entity_t
tile	./src/grid.h	/^    Tile *tile;$/;"	m	struct:GridComponentData	typeref:typename:Tile *
tile_add_gc	./src/grid.c	/^void tile_add_gc(Tile *tile, ecs_ref_t *gc_ref)$/;"	f	typeref:typename:void
tile_draw	./src/grid.c	/^void tile_draw(Tile *tile)$/;"	f	typeref:typename:void
tile_free	./src/grid.c	/^void tile_free(Tile *tile)$/;"	f	typeref:typename:void
tile_height	./src/grid.h	/^	int tile_height;$/;"	m	struct:Grid	typeref:typename:int
tile_initialize	./src/grid.c	/^void tile_initialize($/;"	f	typeref:typename:void
tile_remove_gc	./src/grid.c	/^void tile_remove_gc(Tile *tile, ecs_ref_t *gc_ref)$/;"	f	typeref:typename:void
tile_test_for_collision	./src/grid.c	/^int tile_test_for_collision(Tile *tile, ecs_ref_t *gc_ref)$/;"	f	typeref:typename:int
tile_width	./src/grid.h	/^	int tile_width;$/;"	m	struct:Grid	typeref:typename:int
tiles	./src/grid.h	/^	Tile ***tiles;$/;"	m	struct:Grid	typeref:typename:Tile ***
tileset	./src/glyph.h	/^	Tileset *tileset;$/;"	m	struct:Glyph	typeref:typename:Tileset *
tileset	./src/main.c	/^Tileset tileset;$/;"	v	typeref:typename:Tileset
tileset_free	./src/glyph.c	/^void tileset_free(Tileset *tileset)$/;"	f	typeref:typename:void
tileset_initialize	./src/glyph.c	/^void tileset_initialize($/;"	f	typeref:typename:void
time	./src/flecs.c	/^    double time;$/;"	m	struct:ecs_http_request_entry_t	typeref:typename:double	file:
time	./src/flecs.h	/^    ecs_ftime_t time;            \/**< Incrementing time value *\/$/;"	m	struct:EcsTimer	typeref:typename:ecs_ftime_t
time	./src/flecs.h	/^struct time {$/;"	s	struct:flecs::units
time	./src/log.h	/^  struct tm *time;$/;"	m	struct:__anon638373710108	typeref:struct:tm *
time	./vendor/fmt/include/chrono.h	/^  auto time() const -> std::tm {$/;"	f	struct:detail::chrono_formatter	typeref:typename:std::tm
time_	./vendor/fmt/include/chrono.h	/^    std::time_t time_;$/;"	m	struct:gmtime::dispatcher	typeref:typename:std::time_t
time_	./vendor/fmt/include/chrono.h	/^    std::time_t time_;$/;"	m	struct:localtime::dispatcher	typeref:typename:std::time_t
time_elapsed	./src/flecs.h	/^    ecs_ftime_t time_elapsed;    \/**< Time elapsed since last tick *\/$/;"	m	struct:EcsRateFilter	typeref:typename:ecs_ftime_t
time_elapsed	./src/flecs.h	/^    ecs_ftime_t time_elapsed;  \/**< Time elapsed since last tick *\/$/;"	m	struct:EcsTickSource	typeref:typename:ecs_ftime_t
time_passed	./src/flecs.c	/^    ecs_ftime_t time_passed;        \/* Time passed since last invocation *\/$/;"	m	struct:ecs_system_t	typeref:typename:ecs_ftime_t	file:
time_point	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    typedef std::chrono::time_point<high_res_clock> time_point;$/;"	t	struct:picobench::high_res_clock	typeref:typename:std::chrono::time_point<high_res_clock>
time_point	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^using time_point = std::chrono::high_resolution_clock::time_point;$/;"	t	typeref:typename:std::chrono::high_resolution_clock::time_point	file:
time_scale	./src/flecs.h	/^    ecs_ftime_t time_scale;           \/**< Time scale applied to delta_time *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:ecs_ftime_t
time_spent	./src/flecs.c	/^    double time_spent;          \/* Time spent merging commands for sync point *\/$/;"	m	struct:ecs_pipeline_op_t	typeref:typename:double	file:
time_spent	./src/flecs.c	/^    ecs_ftime_t time_spent;         \/* Time spent on running system *\/$/;"	m	struct:ecs_system_t	typeref:typename:ecs_ftime_t	file:
time_spent	./src/flecs.h	/^    ecs_metric_t time_spent;       \/**< Time spent processing a system *\/$/;"	m	struct:ecs_system_stats_t	typeref:typename:ecs_metric_t
time_spent	./src/flecs.h	/^    ecs_metric_t time_spent;$/;"	m	struct:ecs_sync_stats_t	typeref:typename:ecs_metric_t
timeout	./src/flecs.h	/^    ecs_ftime_t timeout() {$/;"	f	struct:flecs::timer	typeref:typename:ecs_ftime_t
timeout	./src/flecs.h	/^    ecs_ftime_t timeout;         \/**< Timer timeout period *\/$/;"	m	struct:EcsTimer	typeref:typename:ecs_ftime_t
timeout	./src/flecs.h	/^    timer& timeout(ecs_ftime_t timeout) {$/;"	f	struct:flecs::timer	typeref:typename:timer &
timeout	./src/flecs.h	/^inline ecs_ftime_t system::timeout() {$/;"	f	class:flecs::system	typeref:typename:ecs_ftime_t
timeout	./src/flecs.h	/^inline void system::timeout(ecs_ftime_t timeout) {$/;"	f	class:flecs::system	typeref:typename:void
timer	./src/flecs.h	/^inline flecs::timer world::timer() const {$/;"	f	class:flecs::world	typeref:typename:flecs::timer
timer	./src/flecs.h	/^inline flecs::timer world::timer(Args &&... args) const {$/;"	f	class:flecs::world	typeref:typename:flecs::timer
timer	./src/flecs.h	/^struct timer final : entity {$/;"	s	namespace:flecs
timer	./vendor/STC/misc/benchmarks/various/string_bench_STC.cpp	/^class timer$/;"	c	file:
timer	./vendor/STC/misc/benchmarks/various/string_bench_STD.cpp	/^class timer$/;"	c	file:
timer_init	./src/flecs.h	/^inline void timer_init(flecs::world& world) {$/;"	f	namespace:flecs::_	typeref:typename:void
title	./vendor/STC/misc/examples/smartpointers/music_arc.c	/^    cstr title;$/;"	m	struct:__anond709dd120108	typeref:typename:cstr	file:
tm	./vendor/STC/misc/examples/coroutines/cotasks1.c	/^    cco_timer tm;$/;"	m	struct:next_value	typeref:typename:cco_timer	file:
tm	./vendor/STC/misc/examples/coroutines/dining_philosophers.c	/^    cco_timer tm;$/;"	m	struct:Philosopher	typeref:typename:cco_timer	file:
tm_	./vendor/fmt/include/chrono.h	/^    std::tm tm_;$/;"	m	struct:gmtime::dispatcher	typeref:typename:std::tm
tm_	./vendor/fmt/include/chrono.h	/^    std::tm tm_;$/;"	m	struct:localtime::dispatcher	typeref:typename:std::tm
tm_	./vendor/fmt/include/chrono.h	/^  const std::tm& tm_;$/;"	m	class:detail::tm_writer	typeref:typename:const std::tm &
tm_format_checker	./vendor/fmt/include/chrono.h	/^struct tm_format_checker : null_chrono_spec_handler<tm_format_checker> {$/;"	s	namespace:detail
tm_hour	./vendor/fmt/include/chrono.h	/^  auto tm_hour() const noexcept -> int {$/;"	f	class:detail::tm_writer	typeref:typename:auto
tm_hour12	./vendor/fmt/include/chrono.h	/^  auto tm_hour12() const noexcept -> int {$/;"	f	class:detail::tm_writer	typeref:typename:auto
tm_iso_week_of_year	./vendor/fmt/include/chrono.h	/^  auto tm_iso_week_of_year() const noexcept -> int {$/;"	f	class:detail::tm_writer	typeref:typename:auto
tm_iso_week_year	./vendor/fmt/include/chrono.h	/^  auto tm_iso_week_year() const noexcept -> long long {$/;"	f	class:detail::tm_writer	typeref:typename:auto
tm_mday	./vendor/fmt/include/chrono.h	/^  auto tm_mday() const noexcept -> int {$/;"	f	class:detail::tm_writer	typeref:typename:auto
tm_min	./vendor/fmt/include/chrono.h	/^  auto tm_min() const noexcept -> int {$/;"	f	class:detail::tm_writer	typeref:typename:auto
tm_mon	./vendor/fmt/include/chrono.h	/^  auto tm_mon() const noexcept -> int {$/;"	f	class:detail::tm_writer	typeref:typename:auto
tm_mon_full_name	./vendor/fmt/include/chrono.h	/^inline auto tm_mon_full_name(int mon) -> const char* {$/;"	f	namespace:detail	typeref:typename:const char *
tm_mon_short_name	./vendor/fmt/include/chrono.h	/^inline auto tm_mon_short_name(int mon) -> const char* {$/;"	f	namespace:detail	typeref:typename:const char *
tm_sec	./vendor/fmt/include/chrono.h	/^  auto tm_sec() const noexcept -> int {$/;"	f	class:detail::tm_writer	typeref:typename:auto
tm_wday	./vendor/fmt/include/chrono.h	/^  auto tm_wday() const noexcept -> int {$/;"	f	class:detail::tm_writer	typeref:typename:auto
tm_wday_full_name	./vendor/fmt/include/chrono.h	/^inline auto tm_wday_full_name(int wday) -> const char* {$/;"	f	namespace:detail	typeref:typename:const char *
tm_wday_short_name	./vendor/fmt/include/chrono.h	/^inline auto tm_wday_short_name(int wday) -> const char* {$/;"	f	namespace:detail	typeref:typename:const char *
tm_writer	./vendor/fmt/include/chrono.h	/^  tm_writer(const std::locale& loc, OutputIt out, const std::tm& tm,$/;"	f	class:detail::tm_writer
tm_writer	./vendor/fmt/include/chrono.h	/^class tm_writer {$/;"	c	namespace:detail
tm_writer_type	./vendor/fmt/include/chrono.h	/^  using tm_writer_type = tm_writer<OutputIt, char_type>;$/;"	t	struct:detail::chrono_formatter	typeref:typename:tm_writer<OutputIt,char_type>
tm_yday	./vendor/fmt/include/chrono.h	/^  auto tm_yday() const noexcept -> int {$/;"	f	class:detail::tm_writer	typeref:typename:auto
tm_year	./vendor/fmt/include/chrono.h	/^  auto tm_year() const noexcept -> long long { return 1900ll + tm_.tm_year; }$/;"	f	class:detail::tm_writer	typeref:typename:auto
tmap	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^template <class K, class V> using tmap = tsl::robin_map<K, V>;$/;"	t	typeref:typename:tsl::robin_map<K,V>	file:
to	./src/flecs.c	/^    ecs_table_t *to;                 \/* Edge destination table *\/$/;"	m	struct:ecs_graph_edge_t	typeref:typename:ecs_table_t *	file:
to_array	./src/flecs.h	/^array<T, Size> to_array(const T (&elems)[Size]) {$/;"	f	namespace:flecs	typeref:typename:array<T,Size>
to_ascii	./vendor/fmt/include/base.h	/^constexpr auto to_ascii(Char c) -> char {$/;"	f	namespace:detail	typeref:typename:char
to_base	./src/flecs.h	/^    Self& to_base() {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
to_constant	./src/flecs.h	/^inline E entity_view::to_constant() const {$/;"	f	class:flecs::entity_view	typeref:typename:E
to_constant	./src/flecs.h	/^struct to_constant {$/;"	s	namespace:flecs::_
to_csv	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    void to_csv(std::ostream& out) const$/;"	f	class:picobench::report	typeref:typename:void
to_decimal	./vendor/fmt/include/format-inl.h	/^template <typename T> auto to_decimal(T x) noexcept -> decimal_fp<T> {$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
to_entity	./src/flecs.h	/^inline flecs::entity world::to_entity(E constant) const {$/;"	f	class:flecs::world	typeref:typename:flecs::entity
to_esc	./vendor/fmt/include/color.h	/^  static FMT_CONSTEXPR void to_esc(uint8_t c, Char* out,$/;"	f	struct:detail::ansi_color_escape	typeref:typename:FMT_CONSTEXPR void
to_expr	./src/flecs.h	/^flecs::string to_expr(const T* value) {$/;"	f	struct:flecs::world	typeref:typename:flecs::string
to_expr	./src/flecs.h	/^flecs::string to_expr(flecs::entity_t tid, const void* value) {$/;"	f	struct:flecs::world	typeref:typename:flecs::string
to_int	./src/flecs.h	/^    static constexpr underlying_type_t<E> to_int() {$/;"	f	struct:flecs::_::enum_reflection	typeref:typename:underlying_type_t<E>
to_json	./src/flecs.h	/^flecs::string to_json() {$/;"	f	struct:flecs::world	typeref:typename:flecs::string
to_json	./src/flecs.h	/^flecs::string to_json(const T* value) {$/;"	f	struct:flecs::world	typeref:typename:flecs::string
to_json	./src/flecs.h	/^flecs::string to_json(const flecs::entity_to_json_desc_t *desc = nullptr) const {$/;"	f	struct:flecs::entity_view	typeref:typename:flecs::string
to_json	./src/flecs.h	/^flecs::string to_json(flecs::entity_t tid, const void* value) {$/;"	f	struct:flecs::world	typeref:typename:flecs::string
to_json	./src/flecs.h	/^flecs::string to_json(flecs::iter_to_json_desc_t *desc = nullptr) {$/;"	f	struct:flecs::iter_iterable	typeref:typename:flecs::string
to_nonnegative_int	./vendor/fmt/include/chrono.h	/^inline auto to_nonnegative_int(T value, Int upper) -> Int {$/;"	f	namespace:detail	typeref:typename:Int
to_pointer	./vendor/fmt/include/format.h	/^constexpr auto to_pointer(OutputIt, size_t) -> T* {$/;"	f	namespace:detail	typeref:typename:T *
to_pointer	./vendor/fmt/include/format.h	/^template <typename T> auto to_pointer(basic_appender<T> it, size_t n) -> T* {$/;"	f	namespace:detail	typeref:typename:T *
to_string	./vendor/fmt/include/format.h	/^FMT_NODISCARD auto to_string(const basic_memory_buffer<Char, SIZE>& buf)$/;"	f	typeref:typename:std::basic_string<Char>
to_string	./vendor/fmt/include/format.h	/^FMT_NODISCARD inline auto to_string(T value) -> std::string {$/;"	f	typeref:typename:std::string
to_string	./vendor/fmt/include/format.h	/^inline auto to_string(const T& value) -> std::string {$/;"	f	typeref:typename:std::string
to_string_view	./vendor/fmt/include/base.h	/^constexpr auto to_string_view(basic_string_view<Char> s)$/;"	f	namespace:detail	typeref:typename:basic_string_view<Char>
to_string_view	./vendor/fmt/include/base.h	/^constexpr auto to_string_view(const Char* s) -> basic_string_view<Char> {$/;"	f	namespace:detail	typeref:typename:basic_string_view<Char>
to_string_view	./vendor/fmt/include/base.h	/^constexpr auto to_string_view(const T& s)$/;"	f	namespace:detail	typeref:typename:basic_string_view<typename T::value_type>
to_text	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    void to_text(std::ostream& out) const$/;"	f	class:picobench::report	typeref:typename:void
to_text_concise	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    void to_text_concise(std::ostream& out)$/;"	f	class:picobench::report	typeref:typename:void
to_time_t	./vendor/fmt/include/chrono.h	/^auto to_time_t($/;"	f	namespace:detail	typeref:typename:std::time_t
to_unsigned	./vendor/fmt/include/base.h	/^FMT_CONSTEXPR auto to_unsigned(Int value) -> make_unsigned_t<Int> {$/;"	f	namespace:detail	typeref:typename:make_unsigned_t<Int>
to_utf8	./vendor/fmt/include/format.h	/^  explicit to_utf8(basic_string_view<WChar> s,$/;"	f	class:detail::to_utf8
to_utf8	./vendor/fmt/include/format.h	/^  to_utf8() {}$/;"	f	class:detail::to_utf8
to_utf8	./vendor/fmt/include/format.h	/^template <typename WChar, typename Buffer = memory_buffer> class to_utf8 {$/;"	c	namespace:detail
to_utf8_error_policy	./vendor/fmt/include/format.h	/^enum class to_utf8_error_policy { abort, replace };$/;"	g	namespace:detail
to_wstring	./vendor/fmt/include/xchar.h	/^template <typename T> inline auto to_wstring(const T& value) -> std::wstring {$/;"	f	typeref:typename:std::wstring
tomato	./vendor/fmt/include/color.h	/^  tomato = 0xFF6347,                   \/\/ rgb(255,99,71)$/;"	e	enum:color
top	./vendor/STC/include/stc/coroutine.h	/^    int result, top; cco_task* stack[];$/;"	m	struct:cco_runtime	typeref:typename:int
top	./vendor/raylib5/include/raylib.h	/^    int top;                \/\/ Top border offset$/;"	m	struct:NPatchInfo	typeref:typename:int
top_dir	./vendor/STC/src/singleheader.py	/^top_dir = dirname(abspath(__file__))$/;"	v
top_left	./vendor/STC/misc/examples/smartpointers/box2.c	/^    Point top_left;$/;"	m	struct:__anon9bc77dd70208	typeref:typename:Point	file:
total_time_ns	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        uint64_t total_time_ns; \/\/ fastest sample!!!$/;"	m	struct:picobench::report::benchmark_problem_space	typeref:typename:uint64_t
total_time_ns	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        uint64_t total_time_ns; \/\/ fastest sample!!!$/;"	m	struct:picobench::report::problem_space_benchmark	typeref:typename:uint64_t
tr	./src/flecs.c	/^    const ecs_table_record_t *tr;$/;"	m	struct:__anon7d4a41773308	typeref:typename:const ecs_table_record_t *	file:
tr	./src/flecs.c	/^    const ecs_table_record_t *tr;$/;"	m	struct:ecs_reachable_elem_t	typeref:typename:const ecs_table_record_t *	file:
tr	./src/flecs.h	/^    struct ecs_table_record_t *tr; \/* Table record for component *\/$/;"	m	struct:ecs_ref_t	typeref:struct:ecs_table_record_t *
trace	./src/flecs.h	/^inline void trace(const char *fmt, ...) {$/;"	f	namespace:flecs::log	typeref:typename:void
tracked_tc_count	./src/turnbasedsystem.h	/^	int tracked_tc_count;$/;"	m	struct:TurnManager	typeref:typename:int
traits	./vendor/fmt/include/base.h	/^  using traits = detail::fixed_buffer_traits;$/;"	t	function:vformat_to_n	typeref:typename:detail::fixed_buffer_traits
traits	./vendor/fmt/include/compile.h	/^  using traits = detail::fixed_buffer_traits;$/;"	t	function:format_to_n	typeref:typename:detail::fixed_buffer_traits
traits	./vendor/fmt/include/xchar.h	/^  using traits = detail::fixed_buffer_traits;$/;"	t	function:vformat_to_n	typeref:typename:detail::fixed_buffer_traits
traits_type	./vendor/fmt/include/chrono.h	/^  using traits_type = typename Streambuf::traits_type;$/;"	t	class:detail::formatbuf	typeref:typename:Streambuf::traits_type
transcribe_const_t	./src/flecs.h	/^using transcribe_const_t = conditional_t<is_const<Src>::value, Dst const, Dst>;$/;"	t	namespace:flecs	typeref:typename:conditional_t<is_const<Src>::value,Dst const,Dst>
transcribe_cv_t	./src/flecs.h	/^using transcribe_cv_t = transcribe_const_t< Src, transcribe_volatile_t< Src, Dst> >;$/;"	t	namespace:flecs	typeref:typename:transcribe_const_t<Src,transcribe_volatile_t<Src,Dst>>
transcribe_cvp_t	./src/flecs.h	/^using transcribe_cvp_t = transcribe_cv_t< Src, transcribe_pointer_t< Src, Dst> >;$/;"	t	namespace:flecs	typeref:typename:transcribe_cv_t<Src,transcribe_pointer_t<Src,Dst>>
transcribe_pointer_t	./src/flecs.h	/^using transcribe_pointer_t = conditional_t<is_pointer<Src>::value, Dst*, Dst>;$/;"	t	namespace:flecs	typeref:typename:conditional_t<is_pointer<Src>::value,Dst *,Dst>
transcribe_volatile_t	./src/flecs.h	/^using transcribe_volatile_t = conditional_t<is_volatile<Src>::value, Dst volatile, Dst>;$/;"	t	namespace:flecs	typeref:typename:conditional_t<is_volatile<Src>::value,Dst volatile,Dst>
transform	./vendor/raylib5/include/raylib.h	/^    Matrix transform;       \/\/ Local transform matrix$/;"	m	struct:Model	typeref:typename:Matrix
translation	./src/flecs.h	/^    ecs_unit_translation_t translation; \/**< Translation for derived unit *\/$/;"	m	struct:EcsUnit	typeref:typename:ecs_unit_translation_t
translation	./src/flecs.h	/^    ecs_unit_translation_t translation; \/**< Translation of prefix *\/$/;"	m	struct:EcsUnitPrefix	typeref:typename:ecs_unit_translation_t
translation	./src/flecs.h	/^    ecs_unit_translation_t translation;$/;"	m	struct:ecs_unit_desc_t	typeref:typename:ecs_unit_translation_t
translation	./src/flecs.h	/^    ecs_unit_translation_t translation;$/;"	m	struct:ecs_unit_prefix_desc_t	typeref:typename:ecs_unit_translation_t
translation	./vendor/raylib5/include/raylib.h	/^    Vector3 translation;    \/\/ Translation$/;"	m	struct:Transform	typeref:typename:Vector3
trav	./src/flecs.c	/^        ecs_rule_trav_ctx_t trav;$/;"	m	union:ecs_rule_op_ctx_t::__anon7d4a4177340a	typeref:typename:ecs_rule_trav_ctx_t	file:
trav	./src/flecs.c	/^    ecs_entity_t trav;$/;"	m	struct:__anon7d4a41772a08	typeref:typename:ecs_entity_t	file:
trav	./src/flecs.c	/^    ecs_id_record_elem_t trav;    \/* (*, O) with only traversable relationships *\/$/;"	m	struct:ecs_id_record_t	typeref:typename:ecs_id_record_elem_t	file:
trav	./src/flecs.h	/^    Base& trav(flecs::entity_t trav, flecs::flags32_t flags = 0) {$/;"	f	struct:flecs::term_id_builder_i	typeref:typename:Base &
trav	./src/flecs.h	/^    ecs_entity_t trav;          \/**< Relationship to traverse when looking for the$/;"	m	struct:ecs_term_id_t	typeref:typename:ecs_entity_t
traversable_count	./src/flecs.c	/^    int32_t traversable_count;       \/* Traversable relationship targets in table *\/$/;"	m	struct:ecs_table__t	typeref:typename:int32_t	file:
triangleCount	./vendor/raylib5/include/raylib.h	/^    int triangleCount;      \/\/ Number of triangles stored (indexed or not)$/;"	m	struct:Mesh	typeref:typename:int
triples	./vendor/STC/misc/examples/coroutines/triples.c	/^struct triples {$/;"	s	file:
triples_coro	./vendor/STC/misc/examples/coroutines/triples.c	/^int triples_coro(struct triples* t) {$/;"	f	typeref:typename:int
triples_vanilla	./vendor/STC/misc/examples/coroutines/triples.c	/^void triples_vanilla(int max_c) {$/;"	f	typeref:typename:void
trivial	./src/flecs.c	/^        ecs_rule_trivial_ctx_t trivial;$/;"	m	union:ecs_rule_op_ctx_t::__anon7d4a4177340a	typeref:typename:ecs_rule_trivial_ctx_t	file:
true	./src/flecs.h	/^#define true /;"	d
truncate_hash	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  static truncated_hash_type truncate_hash(std::size_t hash) noexcept {$/;"	f	class:tsl::detail_robin_hash::bucket_entry	typeref:typename:truncated_hash_type
truncated	./vendor/fmt/include/base.h	/^  bool truncated;$/;"	m	struct:format_to_result	typeref:typename:bool
truncated_hash	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  truncated_hash_type truncated_hash() const noexcept { return 0; }$/;"	f	class:tsl::detail_robin_hash::bucket_entry_hash	typeref:typename:truncated_hash_type
truncated_hash	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  truncated_hash_type truncated_hash() const noexcept { return m_hash; }$/;"	f	class:tsl::detail_robin_hash::bucket_entry_hash	typeref:typename:truncated_hash_type
truncated_hash_type	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^using truncated_hash_type = std::uint32_t;$/;"	t	namespace:tsl::detail_robin_hash	typeref:typename:std::uint32_t
try_emplace	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    iterator try_emplace(const_iterator hint, const key_type& key, Args&&... args) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:iterator
try_emplace	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    iterator try_emplace(const_iterator hint, key_type&& key, Args&&... args) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:iterator
try_emplace	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    std::pair<iterator, bool> try_emplace(const key_type& key, Args&&... args) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:std::pair<iterator,bool>
try_emplace	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    std::pair<iterator, bool> try_emplace(key_type&& key, Args&&... args) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:std::pair<iterator,bool>
try_emplace	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto try_emplace(K&& key, Args&&... args) -> std::pair<iterator, bool> {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:std::pair<iterator,bool>
try_emplace	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto try_emplace(Key const& key, Args&&... args) -> std::pair<iterator, bool> {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:std::pair<iterator,bool>
try_emplace	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto try_emplace(Key&& key, Args&&... args) -> std::pair<iterator, bool> {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:std::pair<iterator,bool>
try_emplace	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto try_emplace(const_iterator \/*hint*\/, K&& key, Args&&... args) -> iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:iterator
try_emplace	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto try_emplace(const_iterator \/*hint*\/, Key const& key, Args&&... args) -> iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:iterator
try_emplace	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    auto try_emplace(const_iterator \/*hint*\/, Key&& key, Args&&... args) -> iterator {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:iterator
try_emplace	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    std::pair<iterator, bool> try_emplace(KeyT&& key, Args&&... args)$/;"	f	class:emhash7::HashMap	typeref:typename:std::pair<iterator,bool>
try_emplace	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    std::pair<iterator, bool> try_emplace(const KeyT& key, Args&&... args)$/;"	f	class:emhash7::HashMap	typeref:typename:std::pair<iterator,bool>
try_emplace	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  std::pair<iterator, bool> try_emplace(K&& key, Args&&... args) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:std::pair<iterator,bool>
try_emplace	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  iterator try_emplace(const_iterator hint, const key_type& k, Args&&... args) {$/;"	f	class:tsl::robin_map	typeref:typename:iterator
try_emplace	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  iterator try_emplace(const_iterator hint, key_type&& k, Args&&... args) {$/;"	f	class:tsl::robin_map	typeref:typename:iterator
try_emplace	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  std::pair<iterator, bool> try_emplace(const key_type& k, Args&&... args) {$/;"	f	class:tsl::robin_map	typeref:typename:std::pair<iterator,bool>
try_emplace	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  std::pair<iterator, bool> try_emplace(key_type&& k, Args&&... args) {$/;"	f	class:tsl::robin_map	typeref:typename:std::pair<iterator,bool>
try_emplace_hint	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  iterator try_emplace_hint(const_iterator hint, K&& key, Args&&... args) {$/;"	f	class:tsl::detail_robin_hash::robin_hash	typeref:typename:iterator
try_emplace_impl	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    std::pair<iterator, bool> try_emplace_impl(OtherKey&& key, Args&&... args) {$/;"	f	class:robin_hood::detail::Table	typeref:typename:std::pair<iterator,bool>
try_format_argument	./vendor/fmt/include/compile.h	/^  constexpr static bool try_format_argument($/;"	f	struct:detail::runtime_named_field	typeref:typename:bool
try_get	./src/flecs.h	/^    T* try_get() {$/;"	f	struct:flecs::ref	typeref:typename:T *
try_get	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    ValueT* try_get(const KeyT& key) const noexcept$/;"	f	class:emhash7::HashMap	typeref:typename:ValueT *
try_get	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    ValueT* try_get(const KeyT& key) noexcept$/;"	f	class:emhash7::HashMap	typeref:typename:ValueT *
try_get	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    bool try_get(const KeyT& key, ValueT& val) const noexcept$/;"	f	class:emhash7::HashMap	typeref:typename:bool
try_increase_info	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    bool try_increase_info() {$/;"	f	class:robin_hood::detail::Table	typeref:typename:bool
try_reserve	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR void try_reserve(size_t new_capacity) {$/;"	f	class:detail::buffer	typeref:typename:FMT_CONSTEXPR void
try_resize	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR void try_resize(size_t count) {$/;"	f	class:detail::buffer	typeref:typename:FMT_CONSTEXPR void
tsl	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^namespace tsl {$/;"	n
tsl	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^namespace tsl {$/;"	n
tsl	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^namespace tsl {$/;"	n
tsl_rh_assert	./vendor/STC/misc/benchmarks/external/tsl/robin_growth_policy.h	/^#define tsl_rh_assert(/;"	d
ttname	./vendor/STC/misc/tests/ctest.h	/^    const char* ttname;  \/\/ test name$/;"	m	struct:ctest	typeref:typename:const char *
tuple	./vendor/fmt/include/ranges.h	/^  const std::tuple<T...>& tuple;$/;"	m	struct:tuple_join_view	typeref:typename:const std::tuple<T...> &
tuple	./vendor/fmt/include/ranges.h	/^namespace tuple {$/;"	n	namespace:detail
tuple_index_sequence	./vendor/fmt/include/ranges.h	/^using tuple_index_sequence = make_index_sequence<std::tuple_size<T>::value>;$/;"	t	namespace:detail	typeref:typename:make_index_sequence<std::tuple_size<T>::value>
tuple_join_view	./vendor/fmt/include/ranges.h	/^  tuple_join_view(const std::tuple<T...>& t, basic_string_view<Char> s)$/;"	f	struct:tuple_join_view
tuple_join_view	./vendor/fmt/include/ranges.h	/^template <typename Char, typename... T> struct tuple_join_view : detail::view {$/;"	s
turn_counter	./src/turnbasedsystem.h	/^	ecs_entity_t turn_counter;$/;"	m	struct:TurnManager	typeref:typename:ecs_entity_t
turn_counter_ref	./src/turnbasedsystem.h	/^	ecs_ref_t *turn_counter_ref;$/;"	m	struct:TurnManager	typeref:typename:ecs_ref_t *
turn_manager	./src/turnbasedsystem.h	/^	struct TurnManager *turn_manager;$/;"	m	struct:TurnComponentData	typeref:struct:TurnManager *
turncomponentdata_change_state	./src/turnbasedsystem.c	/^void turncomponentdata_change_state(TurnComponentData *tc_d, enum TurnState new_state)$/;"	f	typeref:typename:void
turncomponentdata_compare_initiatives	./src/turnbasedsystem.c	/^int turncomponentdata_compare_initiatives(TurnComponentData *tc_d_a, TurnComponentData *tc_d_b)$/;"	f	typeref:typename:int
turncomponentdata_disable	./src/turnbasedsystem.c	/^void turncomponentdata_disable(TurnComponentData *tc_d)$/;"	f	typeref:typename:void
turncomponentdata_enable	./src/turnbasedsystem.c	/^void turncomponentdata_enable(TurnComponentData *tc_d)$/;"	f	typeref:typename:void
turncomponentdata_end_turn	./src/turnbasedsystem.c	/^void turncomponentdata_end_turn(TurnComponentData *tc_d, int inc)$/;"	f	typeref:typename:void
turncomponentdata_free	./src/turnbasedsystem.c	/^void turncomponentdata_free(TurnComponentData *tc_d)$/;"	f	typeref:typename:void
turncomponentdata_inc_initiative	./src/turnbasedsystem.c	/^void turncomponentdata_inc_initiative(TurnComponentData *tc_d, int inc)$/;"	f	typeref:typename:void
turncomponentdata_initialize	./src/turnbasedsystem.c	/^void turncomponentdata_initialize($/;"	f	typeref:typename:void
turncomponentdata_start_turn	./src/turnbasedsystem.c	/^void turncomponentdata_start_turn(TurnComponentData *tc_d)$/;"	f	typeref:typename:void
turncounter_create	./src/turnbasedsystem.c	/^void turncounter_create(TurnManager *tm, ecs_world_t *world)$/;"	f	typeref:typename:void
turnmanager	./src/main.c	/^TurnManager turnmanager;$/;"	v	typeref:typename:TurnManager
turnmanager_create_turncomponent	./src/turnbasedsystem.c	/^TurnComponentData* turnmanager_create_turncomponent(TurnManager *tm, ecs_entity_t entity)$/;"	f	typeref:typename:TurnComponentData *
turnmanager_disable_tc	./src/turnbasedsystem.c	/^void turnmanager_disable_tc(TurnManager *tm, ecs_entity_t entity)$/;"	f	typeref:typename:void
turnmanager_enable_tc	./src/turnbasedsystem.c	/^void turnmanager_enable_tc(TurnManager *tm, ecs_entity_t entity)$/;"	f	typeref:typename:void
turnmanager_end_turn	./src/turnbasedsystem.c	/^void turnmanager_end_turn(TurnManager *tm, int inc)$/;"	f	typeref:typename:void
turnmanager_initialize	./src/turnbasedsystem.c	/^void turnmanager_initialize(TurnManager *tm, ecs_world_t *world)$/;"	f	typeref:typename:void
turnmanager_print_turn_queue	./src/turnbasedsystem.c	/^void turnmanager_print_turn_queue(TurnManager *tm)$/;"	f	typeref:typename:void
turquoise	./vendor/fmt/include/color.h	/^  turquoise = 0x40E0D0,                \/\/ rgb(64,224,208)$/;"	e	enum:color
tvar_index	./src/flecs.c	/^    ecs_hashmap_t tvar_index;     \/* Name index for table variables *\/$/;"	m	struct:ecs_rule_t	typeref:typename:ecs_hashmap_t	file:
type	./src/flecs.c	/^    ecs_entity_t type;$/;"	m	struct:ecs_json_value_ser_ctx_t	typeref:typename:ecs_entity_t	file:
type	./src/flecs.c	/^    ecs_meta_token_t type;$/;"	m	struct:meta_type_t	typeref:typename:ecs_meta_token_t	file:
type	./src/flecs.c	/^    ecs_type_t type;                 \/* Vector with component ids *\/$/;"	m	struct:ecs_table_t	typeref:typename:ecs_type_t	file:
type	./src/flecs.c	/^    ecs_type_t type;$/;"	m	struct:ecs_table_leaf_t	typeref:typename:ecs_type_t	file:
type	./src/flecs.c	/^    meta_type_t type;$/;"	m	struct:meta_member_t	typeref:typename:meta_type_t	file:
type	./src/flecs.c	/^    meta_type_t type;$/;"	m	struct:meta_params_t	typeref:typename:meta_type_t	file:
type	./src/flecs.h	/^    EcsOpaque type;$/;"	m	struct:ecs_opaque_desc_t	typeref:typename:EcsOpaque
type	./src/flecs.h	/^    ecs_entity_t type;        \/**< The type being iterated *\/$/;"	m	struct:ecs_meta_scope_t	typeref:typename:ecs_entity_t
type	./src/flecs.h	/^    ecs_entity_t type;      \/**< Type entity *\/$/;"	m	struct:ecs_meta_type_op_t	typeref:typename:ecs_entity_t
type	./src/flecs.h	/^    ecs_entity_t type; \/**< Element type *\/$/;"	m	struct:EcsArray	typeref:typename:ecs_entity_t
type	./src/flecs.h	/^    ecs_entity_t type; \/**< Element type *\/$/;"	m	struct:EcsVector	typeref:typename:ecs_entity_t
type	./src/flecs.h	/^    ecs_entity_t type;$/;"	m	struct:EcsMember	typeref:typename:ecs_entity_t
type	./src/flecs.h	/^    ecs_entity_t type;$/;"	m	struct:ecs_array_desc_t	typeref:typename:ecs_entity_t
type	./src/flecs.h	/^    ecs_entity_t type;$/;"	m	struct:ecs_member_t	typeref:typename:ecs_entity_t
type	./src/flecs.h	/^    ecs_entity_t type;$/;"	m	struct:ecs_value_t	typeref:typename:ecs_entity_t
type	./src/flecs.h	/^    ecs_entity_t type;$/;"	m	struct:ecs_vector_desc_t	typeref:typename:ecs_entity_t
type	./src/flecs.h	/^    ecs_type_info_t type;$/;"	m	struct:ecs_component_desc_t	typeref:typename:ecs_type_info_t
type	./src/flecs.h	/^    flecs::type type() const {$/;"	f	struct:flecs::table	typeref:typename:flecs::type
type	./src/flecs.h	/^    int32_t type;  \/* Magic number indicating which type of flecs object *\/$/;"	m	struct:ecs_header_t	typeref:typename:int32_t
type	./src/flecs.h	/^    type() : m_world(nullptr), m_type(nullptr) { }$/;"	f	struct:flecs::type
type	./src/flecs.h	/^    type(world_t *world, const type_t *t)$/;"	f	struct:flecs::type
type	./src/flecs.h	/^    using type = T;$/;"	t	struct:flecs::actual_type	typeref:typename:T
type	./src/flecs.h	/^    using type = T;$/;"	t	struct:flecs::first_arg_impl	typeref:typename:T
type	./src/flecs.h	/^    using type = T;$/;"	t	struct:flecs::second_arg_impl	typeref:typename:T
type	./src/flecs.h	/^    using type = conditional_t<!is_empty<First>::value || is_empty<Second>::value, First, Second/;"	t	struct:flecs::pair	typeref:typename:conditional_t<!is_empty<First>::value||is_empty<Second>::value,First,Second>
type	./src/flecs.h	/^    using type = decay_t< actual_type_t<T> >;$/;"	t	struct:flecs::base_type	typeref:typename:decay_t<actual_type_t<T>>
type	./src/flecs.h	/^    using type = decay_t<first_arg_t<Func>>;$/;"	t	struct:flecs::_::event_from_func	typeref:typename:decay_t<first_arg_t<Func>>
type	./src/flecs.h	/^    using type = decay_t<second_arg_t<Func>>;$/;"	t	struct:flecs::_::event_from_func	typeref:typename:decay_t<second_arg_t<Func>>
type	./src/flecs.h	/^    using type = pair_type_t<T>;$/;"	t	struct:flecs::actual_type	typeref:typename:pair_type_t<T>
type	./src/flecs.h	/^    using type = remove_pointer_t< remove_reference_t< actual_type_t<T> > >;$/;"	t	struct:flecs::base_arg_type	typeref:typename:remove_pointer_t<remove_reference_t<actual_type_t<T>>>
type	./src/flecs.h	/^    using type = typename first_arg_impl<Func, arg_list_t<Func>>::type;$/;"	t	struct:flecs::first_arg	typeref:typename:first_arg_impl<Func,arg_list_t<Func>>::type
type	./src/flecs.h	/^    using type = typename second_arg_impl<Func, arg_list_t<Func>>::type;$/;"	t	struct:flecs::second_arg	typeref:typename:second_arg_impl<Func,arg_list_t<Func>>::type
type	./src/flecs.h	/^inline flecs::type entity_view::type() const {$/;"	f	class:flecs::entity_view	typeref:typename:flecs::type
type	./src/flecs.h	/^inline flecs::type iter::type() const {$/;"	f	class:flecs::iter	typeref:typename:flecs::type
type	./src/flecs.h	/^struct type {$/;"	s	namespace:flecs
type	./vendor/STC/include/stc/coption.h	/^    coption_type type;$/;"	m	struct:__anonc31abe760208	typeref:typename:coption_type
type	./vendor/STC/include/stc/priv/cregex_prv.c	/^    _Token type;$/;"	m	struct:_Reinst	typeref:typename:_Token	file:
type	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    using type = void;$/;"	t	struct:robin_hood::detail::void_type	typeref:typename:void
type	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using type = Default;$/;"	t	struct:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::detector	typeref:typename:Default
type	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using type = Op<Args...>;$/;"	t	struct:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::detector	typeref:typename:Op<Args...>
type	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    typedef fibonacci_hash_policy type;$/;"	t	struct:ska::detailv3::HashPolicySelector	typeref:typename:fibonacci_hash_policy
type	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    typedef typename T::hash_policy type;$/;"	t	struct:ska::detailv3::HashPolicySelector	typeref:typename:T::hash_policy
type	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  using type = void;$/;"	t	struct:tsl::detail_robin_hash::make_void	typeref:typename:void
type	./vendor/cjson/include/cJSON.h	/^    int type;$/;"	m	struct:cJSON	typeref:typename:int
type	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR auto type(int index) const -> detail::type {$/;"	f	class:basic_format_args	typeref:typename:detail::type
type	./vendor/fmt/include/base.h	/^  auto type() const -> detail::type { return type_; }$/;"	f	class:basic_format_arg	typeref:typename:detail::type
type	./vendor/fmt/include/base.h	/^  presentation_type type;$/;"	m	struct:format_specs	typeref:typename:presentation_type
type	./vendor/fmt/include/base.h	/^  using type = T;$/;"	t	struct:detail::strip_named_arg	typeref:typename:T
type	./vendor/fmt/include/base.h	/^  using type = T;$/;"	t	struct:type_identity	typeref:typename:T
type	./vendor/fmt/include/base.h	/^  using type = basic_format_args<buffered_context<Char>>;$/;"	t	struct:detail::vformat_args	typeref:typename:basic_format_args<buffered_context<Char>>
type	./vendor/fmt/include/base.h	/^  using type = decltype(map(static_cast<T*>(nullptr)));$/;"	t	struct:detail::format_as_result
type	./vendor/fmt/include/base.h	/^  using type = format_args;$/;"	t	struct:detail::vformat_args	typeref:typename:format_args
type	./vendor/fmt/include/base.h	/^  using type = remove_cvref_t<decltype(T::value)>;$/;"	t	struct:detail::strip_named_arg
type	./vendor/fmt/include/base.h	/^  using type = void;$/;"	t	struct:void_t_impl	typeref:typename:void
type	./vendor/fmt/include/base.h	/^enum class type {$/;"	g	namespace:detail
type	./vendor/fmt/include/chrono.h	/^  using type = T;$/;"	t	struct:detail::make_unsigned_or_unchanged	typeref:typename:T
type	./vendor/fmt/include/chrono.h	/^  using type = typename std::make_unsigned<T>::type;$/;"	t	struct:detail::make_unsigned_or_unchanged	typeref:typename:std::make_unsigned<T>::type
type	./vendor/fmt/include/compile.h	/^  using type = remove_cvref_t<T>;$/;"	t	struct:detail::field_type	typeref:typename:remove_cvref_t<T>
type	./vendor/fmt/include/compile.h	/^  using type = remove_cvref_t<decltype(T::value)>;$/;"	t	struct:detail::field_type
type	./vendor/fmt/include/compile.h	/^  using type =$/;"	t	struct:detail::get_type_impl
type	./vendor/fmt/include/printf.h	/^  using type = basic_format_args<basic_printf_context<Char>>;$/;"	t	struct:vprintf_args	typeref:typename:basic_format_args<basic_printf_context<Char>>
type	./vendor/fmt/include/printf.h	/^  using type = bool;$/;"	t	struct:detail::make_unsigned_or_bool	typeref:typename:bool
type	./vendor/fmt/include/ranges.h	/^  using type = T&;$/;"	t	struct:detail::range_reference_type_impl	typeref:typename:T &
type	./vendor/fmt/include/ranges.h	/^  using type = decltype(*detail::range_begin(std::declval<R&>()));$/;"	t	struct:detail::range_reference_type_impl
type	./vendor/fmt/include/xchar.h	/^  using type = char_t<S>;$/;"	t	struct:detail::format_string_char	typeref:typename:char_t<S>
type	./vendor/fmt/include/xchar.h	/^  using type = typename S::char_type;$/;"	t	struct:detail::format_string_char	typeref:typename:S::char_type
type	./vendor/raylib5/include/raylib.h	/^    unsigned int type;              \/\/ Event type (AutomationEventType)$/;"	m	struct:AutomationEvent	typeref:typename:unsigned int
type_	./vendor/fmt/include/base.h	/^  detail::type type_;$/;"	m	class:basic_format_arg	typeref:typename:detail::type
type_	./vendor/fmt/include/printf.h	/^  char_type type_;$/;"	m	class:detail::arg_converter	typeref:typename:char_type
type_constant	./vendor/fmt/include/base.h	/^struct type_constant : std::integral_constant<type, type::custom_type> {};$/;"	s	namespace:detail
type_count	./src/flecs.h	/^        ecs_metric_t type_count;          \/**< Number of registered types *\/$/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1008	typeref:typename:ecs_metric_t
type_hooks_t	./src/flecs.h	/^using type_hooks_t = ecs_type_hooks_t;$/;"	t	namespace:flecs	typeref:typename:ecs_type_hooks_t
type_id	./src/flecs.h	/^flecs::entity_t type_id() {$/;"	f	namespace:flecs	typeref:typename:flecs::entity_t
type_id	./src/flecs.h	/^inline flecs::entity id::type_id() const {$/;"	f	class:flecs::id	typeref:typename:flecs::entity
type_identity	./vendor/fmt/include/base.h	/^template <typename T> struct type_identity {$/;"	s
type_identity_t	./vendor/fmt/include/base.h	/^template <typename T> using type_identity_t = typename type_identity<T>::type;$/;"	t	typeref:typename:type_identity<T>::type
type_index	./src/flecs.h	/^    int32_t type_index() const {$/;"	f	struct:flecs::table	typeref:typename:int32_t
type_index	./src/flecs.h	/^    int32_t type_index(flecs::entity_t first, flecs::entity_t second) const {$/;"	f	struct:flecs::table	typeref:typename:int32_t
type_index	./src/flecs.h	/^    int32_t type_index(flecs::entity_t second) const {$/;"	f	struct:flecs::table	typeref:typename:int32_t
type_index	./src/flecs.h	/^    int32_t type_index(flecs::id_t id) const {$/;"	f	struct:flecs::table	typeref:typename:int32_t
type_info	./src/flecs.c	/^    const ecs_type_info_t *type_info;$/;"	m	struct:ecs_id_record_t	typeref:typename:const ecs_type_info_t *	file:
type_info	./src/flecs.c	/^    ecs_sparse_t type_info;          \/* sparse<type_id, type_info_t> *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_sparse_t	file:
type_info_t	./src/flecs.h	/^using type_info_t = ecs_type_info_t;$/;"	t	namespace:flecs	typeref:typename:ecs_type_info_t
type_is_unformattable_for	./vendor/fmt/include/base.h	/^struct type_is_unformattable_for {$/;"	s	namespace:detail
type_kind	./src/flecs.c	/^    ecs_primitive_kind_t type_kind;  \/**< Primitive type kind of member *\/$/;"	m	struct:__anon7d4a41770c08	typeref:typename:ecs_primitive_kind_t	file:
type_kind_t	./src/flecs.h	/^using type_kind_t = ecs_type_kind_t;$/;"	t	namespace:flecs::meta	typeref:typename:ecs_type_kind_t
type_list	./vendor/fmt/include/compile.h	/^template <typename... Args> struct type_list {};$/;"	s	namespace:detail
type_name	./src/flecs.c	/^    const char *type_name; \/* Include name of mixin type so debug code doesn't$/;"	m	struct:ecs_mixins_t	typeref:typename:const char *	file:
type_name	./src/flecs.h	/^inline const char* type_name() {$/;"	f	namespace:flecs::_	typeref:typename:const char *
type_t	./src/flecs.h	/^using type_t = ecs_type_t;$/;"	t	namespace:flecs	typeref:typename:ecs_type_t
type_to_inout	./src/flecs.h	/^    constexpr flecs::inout_kind_t type_to_inout() {$/;"	f	namespace:flecs::_	typeref:typename:flecs::inout_kind_t
type_to_oper	./src/flecs.h	/^    constexpr flecs::oper_kind_t type_to_oper() {$/;"	f	namespace:flecs::_	typeref:typename:flecs::oper_kind_t
typed_node	./vendor/fmt/include/args.h	/^    FMT_CONSTEXPR typed_node(const Arg& arg) : value(arg) {}$/;"	f	struct:detail::dynamic_arg_list::typed_node	typeref:typename:FMT_CONSTEXPR
typed_node	./vendor/fmt/include/args.h	/^    FMT_CONSTEXPR typed_node(const basic_string_view<Char>& arg)$/;"	f	struct:detail::dynamic_arg_list::typed_node	typeref:typename:FMT_CONSTEXPR
typed_node	./vendor/fmt/include/args.h	/^  template <typename T> struct typed_node : node<> {$/;"	s	class:detail::dynamic_arg_list
types_	./vendor/fmt/include/base.h	/^  const type* types_;$/;"	m	class:detail::compile_parse_context	typeref:typename:const type *
types_	./vendor/fmt/include/base.h	/^  type types_[num_args > 0 ? static_cast<size_t>(num_args) : 1];$/;"	m	class:detail::format_string_checker	typeref:typename:type[]
tzset_once	./vendor/fmt/include/chrono.h	/^inline void tzset_once() {$/;"	f	namespace:detail	typeref:typename:void
u	./src/flecs.c	/^        uint64_t u;$/;"	m	union:flecs_ito_::__anon7d4a4177040a	typeref:typename:uint64_t	file:
u16_t	./src/flecs.h	/^using u16_t = ecs_u16_t;$/;"	t	namespace:flecs	typeref:typename:ecs_u16_t
u32_t	./src/flecs.h	/^using u32_t = ecs_u32_t;$/;"	t	namespace:flecs	typeref:typename:ecs_u32_t
u64_t	./src/flecs.h	/^using u64_t = ecs_u64_t;$/;"	t	namespace:flecs	typeref:typename:ecs_u64_t
u8	./vendor/STC/include/stc/types.h	/^    struct { csview chr; csview_value* end; } u8;$/;"	m	union:__anon0ab7b7af010a	typeref:struct:__anon0ab7b7af010a::__anon0ab7b7af0208
u8	./vendor/STC/misc/benchmarks/various/sso_bench.cpp	/^    union { uint64_t u8; uint8_t b[8]; } r;$/;"	m	union:randomString::__anone7b164fd010a	typeref:typename:uint64_t	file:
u8_t	./src/flecs.h	/^using u8_t = ecs_u8_t;$/;"	t	namespace:flecs	typeref:typename:ecs_u8_t
uchar	./vendor/fmt/include/base.h	/^    using uchar = unsigned char;$/;"	t	function:detail::fill_t::get	typeref:typename:unsigned char
uchar	./vendor/fmt/include/base.h	/^  using uchar = unsigned char;$/;"	t	function:detail::is_utf8_enabled	typeref:typename:unsigned char
uchar	./vendor/fmt/include/format.h	/^  using uchar = unsigned char;$/;"	t	function:detail::utf8_decode	typeref:typename:unsigned char
udata	./src/log.c	/^  void *udata;$/;"	m	struct:__anon6383736c0108	typeref:typename:void *	file:
udata	./src/log.c	/^  void *udata;$/;"	m	struct:__anon6383736c0208	typeref:typename:void *	file:
udata	./src/log.h	/^  void *udata;$/;"	m	struct:__anon638373710108	typeref:typename:void *
udata_t	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^using udata_t = uintptr_t;$/;"	t	namespace:picobench	typeref:typename:uintptr_t
udl_arg	./vendor/fmt/include/format.h	/^struct udl_arg {$/;"	s	namespace:detail
udl_arg	./vendor/fmt/include/format.h	/^template <typename Char> struct udl_arg {$/;"	s	namespace:detail
udl_compiled_string	./vendor/fmt/include/compile.h	/^struct udl_compiled_string : compiled_string {$/;"	s	namespace:detail
uint128_fallback	./vendor/fmt/include/format.h	/^  constexpr uint128_fallback(uint64_t hi, uint64_t lo) : lo_(lo), hi_(hi) {}$/;"	f	class:detail::uint128_fallback
uint128_fallback	./vendor/fmt/include/format.h	/^  constexpr uint128_fallback(uint64_t value = 0) : lo_(value), hi_(0) {}$/;"	f	class:detail::uint128_fallback
uint128_fallback	./vendor/fmt/include/format.h	/^class uint128_fallback {$/;"	c	namespace:detail
uint128_opt	./vendor/fmt/include/base.h	/^enum class uint128_opt {};$/;"	g	namespace:detail
uint128_opt	./vendor/fmt/include/base.h	/^using uint128_opt = __uint128_t;$/;"	t	namespace:detail	typeref:typename:__uint128_t
uint128_t	./vendor/fmt/include/format.h	/^using uint128_t = conditional_t<FMT_USE_INT128, uint128_opt, uint128_fallback>;$/;"	t	namespace:detail	typeref:typename:conditional_t<FMT_USE_INT128,uint128_opt,uint128_fallback>
uint128_type	./vendor/fmt/include/base.h	/^  uint128_type,$/;"	e	enum:detail::type
uint128_value	./vendor/fmt/include/base.h	/^    uint128_opt uint128_value;$/;"	m	union:detail::value::__anonea363bd9060a	typeref:typename:uint128_opt
uint32_or_64_or_128_t	./vendor/fmt/include/format.h	/^using uint32_or_64_or_128_t =$/;"	t	namespace:detail
uint64_or_128_t	./vendor/fmt/include/format.h	/^using uint64_or_128_t = conditional_t<num_bits<T>() <= 64, uint64_t, uint128_t>;$/;"	t	namespace:detail
uint_set	./vendor/fmt/include/base.h	/^  uint_set = set(type::uint_type) | set(type::ulong_long_type) |$/;"	e	enum:detail::__anonea363bd90103
uint_type	./vendor/fmt/include/base.h	/^  uint_type,$/;"	e	enum:detail::type
uint_value	./vendor/fmt/include/base.h	/^    unsigned uint_value;$/;"	m	union:detail::value::__anonea363bd9060a	typeref:typename:unsigned
uintptr_t	./vendor/fmt/include/format.h	/^using uintptr_t = ::uintptr_t;$/;"	t	namespace:detail	typeref:typename:::uintptr_t
uintptr_t	./vendor/fmt/include/format.h	/^using uintptr_t = uint128_t;$/;"	t	namespace:detail	typeref:typename:uint128_t
ulong_long_type	./vendor/fmt/include/base.h	/^  ulong_long_type,$/;"	e	enum:detail::type
ulong_long_value	./vendor/fmt/include/base.h	/^    unsigned long long ulong_long_value;$/;"	m	union:detail::value::__anonea363bd9060a	typeref:typename:unsigned long long
ulong_type	./vendor/fmt/include/base.h	/^using ulong_type = conditional_t<long_short, unsigned, unsigned long long>;$/;"	t	namespace:detail	typeref:typename:conditional_t<long_short,unsigned,unsigned long long>
umap	./vendor/STC/misc/benchmarks/picobench/picobench_hmap.cpp	/^template <class K, class V> using umap = std::unordered_map<K, V>;$/;"	t	typeref:typename:std::unordered_map<K,V>	file:
umul128	./vendor/fmt/include/format.h	/^inline auto umul128(uint64_t x, uint64_t y) noexcept -> uint128_fallback {$/;"	f	namespace:detail	typeref:typename:auto
umul128_upper64	./vendor/fmt/include/format.h	/^inline auto umul128_upper64(uint64_t x, uint64_t y) noexcept -> uint64_t {$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
umul192_lower128	./vendor/fmt/include/format-inl.h	/^inline auto umul192_lower128(uint64_t x, uint128_fallback y) noexcept$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
umul192_upper128	./vendor/fmt/include/format.h	/^inline auto umul192_upper128(uint64_t x, uint128_fallback y) noexcept$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
umul96_lower64	./vendor/fmt/include/format-inl.h	/^inline auto umul96_lower64(uint32_t x, uint64_t y) noexcept -> uint64_t {$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
umul96_upper64	./vendor/fmt/include/format-inl.h	/^inline auto umul96_upper64(uint32_t x, uint64_t y) noexcept -> uint64_t {$/;"	f	namespace:detail::dragonbox	typeref:typename:auto
un_set	./src/flecs.h	/^    ecs_event_record_t un_set;$/;"	m	struct:ecs_observable_t	typeref:typename:ecs_event_record_t
unaligned_load	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^inline T unaligned_load(void const* ptr) noexcept {$/;"	f	namespace:robin_hood::detail	typeref:typename:T
unary	./vendor/STC/misc/tests/ctest.h	/^    ctest_unary_run_func unary;$/;"	m	union:ctest_run_func_union	typeref:typename:ctest_unary_run_func
unbuffered	./vendor/fmt/include/format-inl.h	/^    unbuffered = 2          \/\/ _IO_UNBUFFERED$/;"	e	enum:detail::glibc_file::__anonf306e7170303
unbuffered	./vendor/fmt/include/format-inl.h	/^    unbuffered = 2      \/\/ __SLBF$/;"	e	enum:detail::apple_file::__anonf306e7170403
uncvref_type	./vendor/fmt/include/ranges.h	/^using uncvref_type = remove_cvref_t<range_reference_type<Range>>;$/;"	t	namespace:detail	typeref:typename:remove_cvref_t<range_reference_type<Range>>
underline	./vendor/fmt/include/color.h	/^  underline = 1 << 3,$/;"	e	enum:emphasis
underlying	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^        using underlying = typename std::underlying_type_t<Enum>;$/;"	t	function:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::hash::operator ()	typeref:typename:std::underlying_type_t<Enum>
underlying	./vendor/fmt/include/format.h	/^constexpr auto underlying(Enum e) noexcept -> underlying_t<Enum> {$/;"	f	typeref:typename:auto
underlying	./vendor/fmt/include/ranges.h	/^  FMT_CONSTEXPR auto underlying() -> detail::range_formatter_type<Char, T>& {$/;"	f	struct:range_formatter	typeref:typename:detail::range_formatter_type<Char,T> &
underlying_	./vendor/fmt/include/ranges.h	/^  detail::range_formatter_type<Char, T> underlying_;$/;"	m	struct:range_formatter	typeref:typename:detail::range_formatter_type<Char,T>
underlying_	./vendor/fmt/include/ranges.h	/^  formatter<string_type, Char> underlying_;$/;"	m	struct:formatter	typeref:typename:formatter<string_type,Char>
underlying_	./vendor/fmt/include/std.h	/^  formatter<T, Char> underlying_;$/;"	m	struct:formatter	typeref:typename:formatter<T,Char>
underlying_container_type	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using underlying_container_type = std::conditional_t<IsSegmented,$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:std::conditional_t<IsSegmented,segmented_vector<underlying_value_type,AllocatorOrContainer>,std::vector<underlying_value_type,AllocatorOrContainer>>
underlying_t	./vendor/fmt/include/base.h	/^using underlying_t = typename std::underlying_type<T>::type;$/;"	t	typeref:typename:std::underlying_type<T>::type
underlying_type_t	./src/flecs.h	/^using underlying_type_t = typename std::underlying_type<T>::type;$/;"	t	namespace:flecs	typeref:typename:std::underlying_type<T>::type
underlying_value_type	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using underlying_value_type = typename std::conditional_t<is_map_v<T>, std::pair<Key, T>, Ke/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:std::conditional_t<is_map_v<T>,std::pair<Key,T>,Key>
unformattable	./vendor/fmt/include/base.h	/^  enum { formattable = !std::is_same<arg_type, unformattable>::value };$/;"	e	enum:detail::make_arg::__anonea363bd90f03
unformattable	./vendor/fmt/include/base.h	/^struct unformattable {};$/;"	s	namespace:detail
unformattable_char	./vendor/fmt/include/base.h	/^    formattable_char = !std::is_same<arg_type, unformattable_char>::value$/;"	e	enum:detail::make_arg::__anonea363bd90d03
unformattable_char	./vendor/fmt/include/base.h	/^struct unformattable_char : unformattable {};$/;"	s	namespace:detail
unformattable_pointer	./vendor/fmt/include/base.h	/^    formattable_pointer = !std::is_same<arg_type, unformattable_pointer>::value$/;"	e	enum:detail::make_arg::__anonea363bd90e03
unformattable_pointer	./vendor/fmt/include/base.h	/^struct unformattable_pointer : unformattable {};$/;"	s	namespace:detail
unget	./vendor/fmt/include/format-inl.h	/^  void unget(char c) {$/;"	f	class:detail::fallback_file	typeref:typename:void
unget	./vendor/fmt/include/format-inl.h	/^  void unget(char c) {$/;"	f	class:detail::file_base	typeref:typename:void
unit	./src/flecs.h	/^    ecs_entity_t unit;$/;"	m	struct:EcsMember	typeref:typename:ecs_entity_t
unit	./src/flecs.h	/^    ecs_entity_t unit;$/;"	m	struct:ecs_member_t	typeref:typename:ecs_entity_t
unit	./src/flecs.h	/^Self& unit( $/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
unit	./src/flecs.h	/^Self& unit($/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
unit_prefix	./src/flecs.h	/^Self& unit_prefix( $/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
unit_t	./vendor/fmt/include/chrono.h	/^    using unit_t = codecvt_result<code_unit>;$/;"	t	function:detail::write_encoded_tm_str	typeref:typename:codecvt_result<code_unit>
units	./src/flecs.h	/^inline units::units(flecs::world& world) {$/;"	f	class:flecs::units
units	./src/flecs.h	/^struct units {$/;"	s	namespace:flecs
unknown_format	./vendor/fmt/include/compile.h	/^struct unknown_format {};$/;"	s	namespace:detail
unlikely_	./src/flecs.c	/^  #define unlikely_(/;"	d	file:
unlock	./src/log.c	/^static void unlock(void) {$/;"	f	typeref:typename:void	file:
unordered_dense	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^namespace ankerl::unordered_dense {$/;"	n	namespace:ankerl
unordered_flat_map	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^using unordered_flat_map = detail::Table<true, MaxLoadFactor100, Key, T, Hash, KeyEqual>;$/;"	t	namespace:robin_hood	typeref:typename:detail::Table<true,MaxLoadFactor100,Key,T,Hash,KeyEqual>
unordered_flat_set	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^using unordered_flat_set = detail::Table<true, MaxLoadFactor100, Key, void, Hash, KeyEqual>;$/;"	t	namespace:robin_hood	typeref:typename:detail::Table<true,MaxLoadFactor100,Key,void,Hash,KeyEqual>
unordered_map	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^using unordered_map =$/;"	t	namespace:robin_hood
unordered_node_map	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^using unordered_node_map = detail::Table<false, MaxLoadFactor100, Key, T, Hash, KeyEqual>;$/;"	t	namespace:robin_hood	typeref:typename:detail::Table<false,MaxLoadFactor100,Key,T,Hash,KeyEqual>
unordered_node_set	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^using unordered_node_set = detail::Table<false, MaxLoadFactor100, Key, void, Hash, KeyEqual>;$/;"	t	namespace:robin_hood	typeref:typename:detail::Table<false,MaxLoadFactor100,Key,void,Hash,KeyEqual>
unordered_set	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^using unordered_set = detail::Table<sizeof(Key) <= sizeof(size_t) * 6 &&$/;"	t	namespace:robin_hood
unsigned_char	./vendor/fmt/include/base.h	/^using unsigned_char = typename conditional_t<std::is_integral<Char>::value,$/;"	t	namespace:detail	typeref:typename:conditional_t<std::is_integral<Char>::value,std::make_unsigned<Char>,type_identity<unsigned>>::type
unsigned_streamsize	./vendor/fmt/include/ostream.h	/^  using unsigned_streamsize = std::make_unsigned<std::streamsize>::type;$/;"	t	function:detail::write_buffer	typeref:typename:std::make_unsigned<std::streamsize>::type
unsigned_type	./vendor/fmt/include/format.h	/^  using unsigned_type =$/;"	t	function:detail::write	typeref:typename:conditional_t<std::is_same<Char,char>::value,unsigned char,unsigned>
unsigned_type	./vendor/fmt/include/printf.h	/^        using unsigned_type = typename make_unsigned_or_bool<target_type>::type;$/;"	t	function:detail::arg_converter::operator ()	typeref:typename:make_unsigned_or_bool<target_type>::type
unsupported	./vendor/fmt/include/chrono.h	/^  FMT_CONSTEXPR void unsupported() {$/;"	f	struct:detail::null_chrono_spec_handler	typeref:typename:FMT_CONSTEXPR void
unsupported	./vendor/fmt/include/chrono.h	/^  FMT_NORETURN void unsupported() { FMT_THROW(format_error("no date")); }$/;"	f	struct:detail::chrono_format_checker	typeref:typename:FMT_NORETURN void
unsupported	./vendor/fmt/include/chrono.h	/^  FMT_NORETURN void unsupported() { FMT_THROW(format_error("no format")); }$/;"	f	struct:detail::tm_format_checker	typeref:typename:FMT_NORETURN void
untyped_component	./src/flecs.h	/^struct untyped_component : entity {$/;"	s	namespace:flecs
untyped_field	./src/flecs.h	/^    untyped_field(void* array, size_t size, size_t count, bool is_shared = false)$/;"	f	struct:flecs::untyped_field
untyped_field	./src/flecs.h	/^struct untyped_field {$/;"	s	namespace:flecs
unwrap	./vendor/fmt/include/args.h	/^auto unwrap(const std::reference_wrapper<T>& v) -> const T& {$/;"	f	namespace:detail	typeref:typename:const T &
unwrap	./vendor/fmt/include/args.h	/^template <typename T> auto unwrap(const T& v) -> const T& { return v; }$/;"	f	namespace:detail	typeref:typename:const T &
up	./src/flecs.c	/^        ecs_rule_up_ctx_t up;$/;"	m	union:ecs_rule_op_ctx_t::__anon7d4a4177340a	typeref:typename:ecs_rule_up_ctx_t	file:
up	./src/flecs.c	/^    bool up;$/;"	m	struct:__anon7d4a41772c08	typeref:typename:bool	file:
up	./src/flecs.c	/^    ecs_map_t up;                    \/* map<trigger_id, trigger_t> *\/$/;"	m	struct:ecs_event_id_record_t	typeref:typename:ecs_map_t	file:
up	./src/flecs.h	/^    Base& up() {$/;"	f	struct:flecs::term_id_builder_i	typeref:typename:Base &
up	./src/flecs.h	/^    Base& up(flecs::entity_t trav = 0) {$/;"	f	struct:flecs::term_id_builder_i	typeref:typename:Base &
up	./vendor/raylib5/include/raylib.h	/^    Vector3 up;             \/\/ Camera up vector (rotation over its axis)$/;"	m	struct:Camera3D	typeref:typename:Vector3
upcase_ind	./vendor/STC/include/stc/priv/utf8_tab.c	/^static uint8_t upcase_ind[162] = {$/;"	v	typeref:typename:uint8_t[162]	file:
update	./src/main.c	/^void update(double delta)$/;"	f	typeref:typename:void
upper	./vendor/fmt/include/base.h	/^  bool upper : 1;  \/\/ An uppercase version e.g. 'X' for 'x'.$/;"	m	struct:format_specs	typeref:typename:bool:1
upper	./vendor/fmt/include/format-inl.h	/^  unsigned char upper;$/;"	m	struct:detail::singleton	typeref:typename:unsigned char
uptr_t	./src/flecs.h	/^using uptr_t = ecs_uptr_t;$/;"	t	namespace:flecs	typeref:typename:ecs_uptr_t
uri	./src/flecs.h	/^struct uri {$/;"	s	struct:flecs::units
use	./src/flecs.h	/^inline flecs::entity world::use(const char *alias) const {$/;"	f	class:flecs::world	typeref:typename:flecs::entity
use	./src/flecs.h	/^inline flecs::entity world::use(const char *name, const char *alias) const {$/;"	f	class:flecs::world	typeref:typename:flecs::entity
use	./src/flecs.h	/^inline void world::use(flecs::entity e, const char *alias) const {$/;"	f	class:flecs::world	typeref:typename:void
use_low_id	./src/flecs.h	/^    bool use_low_id;      \/**< When set to true, a low id (typically reserved for$/;"	m	struct:ecs_entity_desc_t	typeref:typename:bool
use_tm_formatter_	./vendor/fmt/include/chrono.h	/^  bool use_tm_formatter_ = false;$/;"	m	struct:formatter	typeref:typename:bool
use_utf8	./vendor/fmt/include/base.h	/^constexpr auto use_utf8() -> bool {$/;"	f	namespace:detail	typeref:typename:bool
used	./src/flecs.h	/^    ecs_flags8_t used;       \/* For which fields is the cache used *\/$/;"	m	struct:ecs_iter_cache_t	typeref:typename:ecs_flags8_t
user_data	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        udata_t user_data; \/\/ passed as an argument to user handlers$/;"	m	struct:picobench::runner::cmd_line_option	typeref:typename:udata_t
user_data	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        udata_t user_data;$/;"	m	struct:picobench::report::benchmark_problem_space	typeref:typename:udata_t
user_data	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        udata_t user_data;$/;"	m	struct:picobench::report::problem_space_benchmark	typeref:typename:udata_t
user_data	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    benchmark& user_data(udata_t data) { _user_data = data; return *this; }$/;"	f	class:picobench::benchmark	typeref:typename:benchmark &
user_data	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    udata_t user_data() const { return _user_data; }$/;"	f	class:picobench::state	typeref:typename:udata_t
user_handler	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^        ext_handler user_handler;$/;"	m	struct:picobench::runner::cmd_line_option	typeref:typename:ext_handler
using	./src/flecs.c	/^    ecs_entity_t using[STACK_MAX_SIZE];$/;"	m	struct:__anon7d4a41771908	typeref:typename:ecs_entity_t[]	file:
using_	./src/flecs.h	/^    ecs_vec_t using_;$/;"	m	struct:EcsScript	typeref:typename:ecs_vec_t
using_cspan	./vendor/STC/include/stc/cspan.h	/^#define using_cspan(...) c_MACRO_OVERLOAD(using_cspan,/;"	d
using_cspan2	./vendor/STC/include/stc/cspan.h	/^#define using_cspan2(/;"	d
using_cspan3	./vendor/STC/include/stc/cspan.h	/^#define using_cspan3(/;"	d
using_cspan4	./vendor/STC/include/stc/cspan.h	/^#define using_cspan4(/;"	d
using_cspan_2	./vendor/STC/include/stc/cspan.h	/^#define using_cspan_2(/;"	d
using_cspan_3	./vendor/STC/include/stc/cspan.h	/^#define using_cspan_3(/;"	d
using_cspan_tuple	./vendor/STC/include/stc/cspan.h	/^#define using_cspan_tuple(/;"	d
using_frame	./src/flecs.c	/^    int32_t using_frame;$/;"	m	struct:__anon7d4a41771908	typeref:typename:int32_t	file:
using_frames	./src/flecs.c	/^    int32_t using_frames[STACK_MAX_SIZE];$/;"	m	struct:__anon7d4a41771908	typeref:typename:int32_t[]	file:
using_print_collection	./vendor/STC/misc/examples/sortedmaps/smap_find.c	/^#define using_print_collection(/;"	d	file:
using_print_collection	./vendor/STC/misc/examples/sortedmaps/smap_find.c	/^using_print_collection(vec_istr)$/;"	f	typeref:typename:smap_istr
using_task_threads	./src/flecs.h	/^inline bool world::using_task_threads() const {$/;"	f	class:flecs::world	typeref:typename:bool
utf8_at	./vendor/STC/include/stc/priv/utf8_prv.h	/^STC_INLINE const char* utf8_at(const char *s, intptr_t index) {$/;"	f	typeref:typename:STC_INLINE const char *
utf8_casefold	./vendor/STC/include/stc/priv/utf8_prv.c	/^uint32_t utf8_casefold(uint32_t c) {$/;"	f	typeref:typename:uint32_t
utf8_chr_size	./vendor/STC/include/stc/priv/utf8_prv.h	/^STC_INLINE int utf8_chr_size(const char *s) {$/;"	f	typeref:typename:STC_INLINE int
utf8_decode	./vendor/STC/include/stc/priv/utf8_prv.h	/^STC_INLINE uint32_t utf8_decode(utf8_decode_t* d, const uint32_t byte) {$/;"	f	typeref:typename:STC_INLINE uint32_t
utf8_decode	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR inline auto utf8_decode(const char* s, uint32_t* c, int* e)$/;"	f	namespace:detail	typeref:typename:const char *
utf8_decode_t	./vendor/STC/include/stc/priv/utf8_prv.h	/^typedef struct { uint32_t state, codep; } utf8_decode_t;$/;"	t	typeref:struct:__anon57216ba80208
utf8_dtab	./vendor/STC/include/stc/priv/utf8_prv.c	/^const uint8_t utf8_dtab[] = {$/;"	v	typeref:typename:const uint8_t[]
utf8_encode	./vendor/STC/include/stc/priv/utf8_prv.c	/^int utf8_encode(char *out, uint32_t c)$/;"	f	typeref:typename:int
utf8_icmp	./vendor/STC/include/stc/priv/utf8_prv.h	/^STC_INLINE int utf8_icmp(const char* s1, const char* s2) {$/;"	f	typeref:typename:STC_INLINE int
utf8_icmp_sv	./vendor/STC/include/stc/priv/utf8_prv.c	/^int utf8_icmp_sv(const csview s1, const csview s2) {$/;"	f	typeref:typename:int
utf8_isalnum	./vendor/STC/include/stc/priv/utf8_prv.h	/^STC_INLINE bool utf8_isalnum(uint32_t c) {$/;"	f	typeref:typename:STC_INLINE bool
utf8_isalpha	./vendor/STC/include/stc/priv/utf8_prv.c	/^bool utf8_isalpha(uint32_t c) {$/;"	f	typeref:typename:bool
utf8_isblank	./vendor/STC/include/stc/priv/utf8_prv.h	/^STC_INLINE bool utf8_isblank(uint32_t c) {$/;"	f	typeref:typename:STC_INLINE bool
utf8_iscased	./vendor/STC/include/stc/priv/utf8_prv.c	/^bool utf8_iscased(uint32_t c) {$/;"	f	typeref:typename:bool
utf8_isgroup	./vendor/STC/include/stc/priv/utf8_prv.c	/^bool utf8_isgroup(int group, uint32_t c) {$/;"	f	typeref:typename:bool
utf8_islower	./vendor/STC/include/stc/priv/utf8_prv.h	/^STC_INLINE bool utf8_islower(uint32_t c)$/;"	f	typeref:typename:STC_INLINE bool
utf8_isspace	./vendor/STC/include/stc/priv/utf8_prv.h	/^STC_INLINE bool utf8_isspace(uint32_t c) {$/;"	f	typeref:typename:STC_INLINE bool
utf8_isupper	./vendor/STC/include/stc/priv/utf8_prv.h	/^STC_INLINE bool utf8_isupper(uint32_t c)$/;"	f	typeref:typename:STC_INLINE bool
utf8_isword	./vendor/STC/include/stc/priv/utf8_prv.c	/^bool utf8_isword(uint32_t c) {$/;"	f	typeref:typename:bool
utf8_peek	./vendor/STC/include/stc/priv/utf8_prv.h	/^STC_INLINE uint32_t utf8_peek(const char* s) {$/;"	f	typeref:typename:STC_INLINE uint32_t
utf8_peek_off	./vendor/STC/include/stc/priv/utf8_prv.c	/^uint32_t utf8_peek_off(const char* s, int pos) {$/;"	f	typeref:typename:uint32_t
utf8_pos	./vendor/STC/include/stc/priv/utf8_prv.h	/^STC_INLINE intptr_t utf8_pos(const char* s, intptr_t index)$/;"	f	typeref:typename:STC_INLINE intptr_t
utf8_size	./vendor/STC/include/stc/priv/utf8_prv.h	/^STC_INLINE intptr_t utf8_size(const char *s) {$/;"	f	typeref:typename:STC_INLINE intptr_t
utf8_size_n	./vendor/STC/include/stc/priv/utf8_prv.h	/^STC_INLINE intptr_t utf8_size_n(const char *s, intptr_t nbytes) {$/;"	f	typeref:typename:STC_INLINE intptr_t
utf8_to_utf16	./vendor/fmt/include/format-inl.h	/^FMT_FUNC detail::utf8_to_utf16::utf8_to_utf16(string_view s) {$/;"	f	class:detail::utf8_to_utf16	typeref:typename:FMT_FUNC
utf8_to_utf16	./vendor/fmt/include/format.h	/^class utf8_to_utf16 {$/;"	c	namespace:detail
utf8_tolower	./vendor/STC/include/stc/priv/utf8_prv.c	/^uint32_t utf8_tolower(uint32_t c) {$/;"	f	typeref:typename:uint32_t
utf8_toupper	./vendor/STC/include/stc/priv/utf8_prv.c	/^uint32_t utf8_toupper(uint32_t c) {$/;"	f	typeref:typename:uint32_t
utf8_valid	./vendor/STC/include/stc/priv/utf8_prv.h	/^STC_INLINE bool utf8_valid(const char* s) {$/;"	f	typeref:typename:STC_INLINE bool
utf8_valid_n	./vendor/STC/include/stc/priv/utf8_prv.c	/^bool utf8_valid_n(const char* s, intptr_t nbytes) {$/;"	f	typeref:typename:bool
utfrune	./vendor/STC/include/stc/priv/cregex_prv.c	/^utfrune(const char *s, _Rune c)$/;"	f	typeref:typename:const char *	file:
utfruneicase	./vendor/STC/include/stc/priv/cregex_prv.c	/^utfruneicase(const char *s, _Rune c)$/;"	f	typeref:typename:const char *	file:
uuid	./src/grid.h	/^	UUID uuid;$/;"	m	struct:Grid	typeref:typename:UUID
uuid	./src/grid.h	/^	UUID uuid;$/;"	m	struct:Tile	typeref:typename:UUID
uuid_generate	./src/uuid.c	/^UUID uuid_generate()$/;"	f	typeref:typename:UUID
uuid_init	./src/uuid.c	/^void uuid_init()$/;"	f	typeref:typename:void
uuid_initialized	./src/uuid.c	/^uint8_t uuid_initialized = 0;$/;"	v	typeref:typename:uint8_t
uuid_seed	./src/uuid.c	/^unsigned long long uuid_seed = 0;$/;"	v	typeref:typename:unsigned long long
uuid_set_seed	./src/uuid.c	/^void uuid_set_seed(unsigned long long seed)$/;"	f	typeref:typename:void
v	./vendor/STC/misc/examples/coroutines/cointerleave.c	/^    IVec *v;$/;"	m	struct:GenValue	typeref:typename:IVec *	file:
v	./vendor/raylib5/include/raymath.h	/^    float v[16];$/;"	m	struct:float16	typeref:typename:float[16]
v	./vendor/raylib5/include/raymath.h	/^    float v[3];$/;"	m	struct:float3	typeref:typename:float[3]
vResolution	./vendor/raylib5/include/raylib.h	/^    int vResolution;                \/\/ Vertical resolution in pixels$/;"	m	struct:VrDeviceInfo	typeref:typename:int
vScreenSize	./vendor/raylib5/include/raylib.h	/^    float vScreenSize;              \/\/ Vertical size in meters$/;"	m	struct:VrDeviceInfo	typeref:typename:float
val	./vendor/STC/include/stc/coption.h	/^    int val;$/;"	m	struct:__anonc31abe760208	typeref:typename:int
val	./vendor/STC/misc/examples/coroutines/cotasks1.c	/^    int val;$/;"	m	struct:next_value	typeref:typename:int	file:
val	./vendor/fmt/include/base.h	/^  } val;$/;"	m	struct:detail::arg_ref	typeref:union:detail::arg_ref::value
val	./vendor/fmt/include/chrono.h	/^  rep val;$/;"	m	struct:detail::chrono_formatter	typeref:typename:rep
val_type	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    typedef ValueT val_type;$/;"	t	class:emhash7::HashMap	typeref:typename:ValueT
valid	./src/flecs.h	/^    bool valid;$/;"	m	struct:ecs_meta_cursor_t	typeref:typename:bool
value	./src/flecs.c	/^    char *value;$/;"	m	struct:ecs_hashed_string_t	typeref:typename:char *	file:
value	./src/flecs.c	/^    ecs_value_t value;$/;"	m	struct:__anon7d4a41771808	typeref:typename:ecs_value_t	file:
value	./src/flecs.c	/^    int64_t value;$/;"	m	struct:meta_constant_t	typeref:typename:int64_t	file:
value	./src/flecs.c	/^    void *value;                     \/* Component value (used by set \/ ensure) *\/$/;"	m	struct:ecs_cmd_1_t	typeref:typename:void *	file:
value	./src/flecs.h	/^    char *value;          \/**< Identifier string *\/$/;"	m	struct:EcsIdentifier	typeref:typename:char *
value	./src/flecs.h	/^    char *value;$/;"	m	struct:EcsDocDescription	typeref:typename:char *
value	./src/flecs.h	/^    const char *value;$/;"	m	struct:__anon7d4a417c0908	typeref:typename:const char *
value	./src/flecs.h	/^    double value;$/;"	m	struct:EcsMetricValue	typeref:typename:double
value	./src/flecs.h	/^    double value[ECS_STAT_WINDOW];$/;"	m	struct:ecs_counter_t	typeref:typename:double[]
value	./src/flecs.h	/^    ecs_flags32_t value;$/;"	m	struct:ecs_bitmask_constant_t	typeref:typename:ecs_flags32_t
value	./src/flecs.h	/^    ecs_map_val_t value;$/;"	m	struct:ecs_bucket_entry_t	typeref:typename:ecs_map_val_t
value	./src/flecs.h	/^    ecs_member_value_range_t value;$/;"	m	struct:EcsMemberRanges	typeref:typename:ecs_member_value_range_t
value	./src/flecs.h	/^    ecs_term_t value;$/;"	m	struct:flecs::term	typeref:typename:ecs_term_t
value	./src/flecs.h	/^    ecs_value_t value;$/;"	m	struct:ecs_expr_var_t	typeref:typename:ecs_value_t
value	./src/flecs.h	/^    int (*value)($/;"	m	struct:ecs_serializer_t	typeref:typename:int (*)(const struct ecs_serializer_t * ser,ecs_entity_t type,const void * value)
value	./src/flecs.h	/^    int32_t value;$/;"	m	struct:ecs_enum_constant_t	typeref:typename:int32_t
value	./src/flecs.h	/^    static const bool value = false;$/;"	m	struct:flecs::_::always_false	typeref:typename:const bool
value	./src/flecs.h	/^    static constexpr E value = FLECS_ENUM_MAX(E);$/;"	m	struct:flecs::enum_last	typeref:typename:E
value	./src/flecs.h	/^    static constexpr E value = __builtin_bit_cast(E, Value);$/;"	m	struct:flecs::_::to_constant	typeref:typename:E
value	./src/flecs.h	/^    static constexpr bool value = $/;"	m	struct:flecs::is_flecs_constructible	typeref:typename:bool
value	./src/flecs.h	/^    static constexpr bool value = _::function_traits<T>::is_callable;$/;"	m	struct:flecs::is_callable	typeref:typename:bool
value	./src/flecs.h	/^    static constexpr bool value = enum_constant_is_valid<E, C>();$/;"	m	struct:flecs::_::enum_is_valid	typeref:typename:bool
value	./src/flecs.h	/^    static constexpr bool value = is_base_of<_::pair_base, raw_type_t<T> >::value;$/;"	m	struct:flecs::is_pair	typeref:typename:bool
value	./src/flecs.h	/^    static constexpr bool value =$/;"	m	struct:flecs::is_actual	typeref:typename:bool
value	./src/flecs.h	/^    static constexpr int value = _::function_traits<T>::arity;$/;"	m	struct:flecs::arity	typeref:typename:int
value	./src/flecs.h	/^    uint32_t value;$/;"	m	struct:flecs::bitmask	typeref:typename:uint32_t
value	./src/flecs.h	/^    void *value;$/;"	m	struct:__anon7d4a417c0608	typeref:typename:void *
value	./src/flecs.h	/^constexpr E to_constant<E, Value>::value;$/;"	m	class:flecs::_::to_constant<E, Value>	typeref:typename:E
value	./src/flecs.h	/^inline int ecs_serializer_t::value(const T& v) const {$/;"	f	class:ecs_serializer_t	typeref:typename:int
value	./src/flecs.h	/^inline int ecs_serializer_t::value(ecs_entity_t type, const void *v) const {$/;"	f	class:ecs_serializer_t	typeref:typename:int
value	./vendor/STC/include/stc/algo/crange.h	/^typedef struct { crange_value start, end, step, value; } crange;$/;"	m	struct:__anon74d0e1bc0108	typeref:typename:crange_value
value	./vendor/STC/include/stc/smap.h	/^    _m_value value;$/;"	m	struct:_m_node	typeref:typename:_m_value
value	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    static const bool value = noexcept(swap(std::declval<T&>(), std::declval<T&>()));$/;"	m	struct:robin_hood::detail::swappable::nothrow	typeref:typename:const bool
value	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    union { T value; };$/;"	m	union:ska::detailv3::sherwood_v3_entry::__anon8777aae4010a	typeref:typename:T
value	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^    const typename U::value_type& value() const {$/;"	f	class:tsl::detail_robin_hash::robin_hash::robin_iterator	typeref:typename:const typename U::value_type &
value	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^    typename U::value_type& value() const {$/;"	f	class:tsl::detail_robin_hash::robin_hash::robin_iterator	typeref:typename:U::value_type &
value	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  const value_type& value() const noexcept {$/;"	f	class:tsl::detail_robin_hash::bucket_entry	typeref:typename:const value_type &
value	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  value_type& value() noexcept {$/;"	f	class:tsl::detail_robin_hash::bucket_entry	typeref:typename:value_type &
value	./vendor/STC/misc/examples/coroutines/cointerleave.c	/^    int value;$/;"	m	struct:Generator	typeref:typename:int	file:
value	./vendor/fmt/include/args.h	/^      value = !(detail::is_reference_wrapper<T>::value ||$/;"	e	enum:dynamic_format_arg_store::need_copy::__anone90e5acb0103
value	./vendor/fmt/include/args.h	/^    T value;$/;"	m	struct:detail::dynamic_arg_list::typed_node	typeref:typename:T
value	./vendor/fmt/include/base.h	/^    FMT_CONSTEXPR value(basic_string_view<Char> n) : name(n) {}$/;"	f	union:detail::arg_ref::value	typeref:typename:FMT_CONSTEXPR
value	./vendor/fmt/include/base.h	/^    FMT_CONSTEXPR value(int idx = 0) : index(idx) {}$/;"	f	union:detail::arg_ref::value	typeref:typename:FMT_CONSTEXPR
value	./vendor/fmt/include/base.h	/^  FMT_ALWAYS_INLINE value(const named_arg_info<char_type>* args, size_t size)$/;"	f	class:detail::value	typeref:typename:FMT_ALWAYS_INLINE
value	./vendor/fmt/include/base.h	/^  FMT_ALWAYS_INLINE value(const void* val) : pointer(val) {}$/;"	f	class:detail::value	typeref:typename:FMT_ALWAYS_INLINE
value	./vendor/fmt/include/base.h	/^  FMT_ALWAYS_INLINE value(int128_opt val) : int128_value(val) {}$/;"	f	class:detail::value	typeref:typename:FMT_ALWAYS_INLINE
value	./vendor/fmt/include/base.h	/^  FMT_ALWAYS_INLINE value(long double val) : long_double_value(val) {}$/;"	f	class:detail::value	typeref:typename:FMT_ALWAYS_INLINE
value	./vendor/fmt/include/base.h	/^  FMT_ALWAYS_INLINE value(uint128_opt val) : uint128_value(val) {}$/;"	f	class:detail::value	typeref:typename:FMT_ALWAYS_INLINE
value	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR FMT_ALWAYS_INLINE value(basic_string_view<char_type> val) {$/;"	f	class:detail::value	typeref:typename:FMT_CONSTEXPR FMT_ALWAYS_INLINE
value	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR FMT_ALWAYS_INLINE value(const char_type* val) {$/;"	f	class:detail::value	typeref:typename:FMT_CONSTEXPR FMT_ALWAYS_INLINE
value	./vendor/fmt/include/base.h	/^  const T& value;$/;"	m	struct:detail::named_arg	typeref:typename:const T &
value	./vendor/fmt/include/base.h	/^  constexpr FMT_ALWAYS_INLINE value() : no_value() {}$/;"	f	class:detail::value	typeref:typename:FMT_ALWAYS_INLINE
value	./vendor/fmt/include/base.h	/^  constexpr FMT_ALWAYS_INLINE value(bool val) : bool_value(val) {}$/;"	f	class:detail::value	typeref:typename:FMT_ALWAYS_INLINE
value	./vendor/fmt/include/base.h	/^  constexpr FMT_ALWAYS_INLINE value(char_type val) : char_value(val) {}$/;"	f	class:detail::value	typeref:typename:FMT_ALWAYS_INLINE
value	./vendor/fmt/include/base.h	/^  constexpr FMT_ALWAYS_INLINE value(double val) : double_value(val) {}$/;"	f	class:detail::value	typeref:typename:FMT_ALWAYS_INLINE
value	./vendor/fmt/include/base.h	/^  constexpr FMT_ALWAYS_INLINE value(float val) : float_value(val) {}$/;"	f	class:detail::value	typeref:typename:FMT_ALWAYS_INLINE
value	./vendor/fmt/include/base.h	/^  constexpr FMT_ALWAYS_INLINE value(int val) : int_value(val) {}$/;"	f	class:detail::value	typeref:typename:FMT_ALWAYS_INLINE
value	./vendor/fmt/include/base.h	/^  constexpr FMT_ALWAYS_INLINE value(long long val) : long_long_value(val) {}$/;"	f	class:detail::value	typeref:typename:FMT_ALWAYS_INLINE
value	./vendor/fmt/include/base.h	/^  constexpr FMT_ALWAYS_INLINE value(unsigned long long val)$/;"	f	class:detail::value	typeref:typename:FMT_ALWAYS_INLINE
value	./vendor/fmt/include/base.h	/^  constexpr FMT_ALWAYS_INLINE value(unsigned val) : uint_value(val) {}$/;"	f	class:detail::value	typeref:typename:FMT_ALWAYS_INLINE
value	./vendor/fmt/include/base.h	/^  static constexpr Char value[sizeof...(C)] = {C...};$/;"	m	struct:detail::string_literal	typeref:typename:Char[]
value	./vendor/fmt/include/base.h	/^  template <typename T> FMT_CONSTEXPR20 FMT_ALWAYS_INLINE value(T& val) {$/;"	f	class:detail::value	typeref:typename:FMT_CONSTEXPR20 FMT_ALWAYS_INLINE
value	./vendor/fmt/include/base.h	/^  union value {$/;"	u	struct:detail::arg_ref
value	./vendor/fmt/include/base.h	/^  void* value;$/;"	m	struct:detail::custom_value	typeref:typename:void *
value	./vendor/fmt/include/base.h	/^constexpr Char string_literal<Char, C...>::value[sizeof...(C)];$/;"	m	class:detail::string_literal<Char, C...>	typeref:typename:Char[]
value	./vendor/fmt/include/base.h	/^template <typename Context> class value {$/;"	c	namespace:detail
value	./vendor/fmt/include/chrono.h	/^  static constexpr int value = (Num % Den == 0) ? N : 6;$/;"	m	struct:detail::count_fractional_digits	typeref:typename:int
value	./vendor/fmt/include/chrono.h	/^  static constexpr int value =$/;"	m	struct:detail::count_fractional_digits	typeref:typename:int
value	./vendor/fmt/include/color.h	/^  const T& value;$/;"	m	struct:detail::styled_arg	typeref:typename:const T &
value	./vendor/fmt/include/color.h	/^  } value;$/;"	m	struct:detail::color_type	typeref:union:detail::color_type::color_union
value	./vendor/fmt/include/compile.h	/^  Char value;$/;"	m	struct:detail::code_unit	typeref:typename:Char
value	./vendor/fmt/include/format.h	/^    unsigned value[static_cast<unsigned>(size)];$/;"	m	struct:detail::bit_cast::data_t	typeref:typename:unsigned[]
value	./vendor/fmt/include/format.h	/^  T value;$/;"	m	struct:group_digits_view	typeref:typename:T
value	./vendor/fmt/include/format.h	/^  const T& value;$/;"	m	struct:detail::statically_named_arg	typeref:typename:const T &
value	./vendor/fmt/include/format.h	/^  const T* value;$/;"	m	struct:nested_view	typeref:typename:const T *
value	./vendor/fmt/include/os.h	/^  size_t value = 0;$/;"	m	struct:detail::buffer_size	typeref:typename:size_t
value	./vendor/fmt/include/ostream.h	/^  const T& value;$/;"	m	struct:detail::streamed_view	typeref:typename:const T &
value	./vendor/fmt/include/ranges.h	/^  static constexpr const bool value = false;$/;"	m	class:detail::is_tuple_formattable_	typeref:typename:const bool
value	./vendor/fmt/include/ranges.h	/^  static constexpr const bool value =$/;"	m	class:detail::is_container_adaptor_like	typeref:typename:const bool
value	./vendor/fmt/include/ranges.h	/^  static constexpr const bool value =$/;"	m	class:detail::is_map	typeref:typename:const bool
value	./vendor/fmt/include/ranges.h	/^  static constexpr const bool value =$/;"	m	class:detail::is_set	typeref:typename:const bool
value	./vendor/fmt/include/ranges.h	/^  static constexpr const bool value =$/;"	m	class:detail::is_tuple_formattable_	typeref:typename:const bool
value	./vendor/fmt/include/ranges.h	/^  static constexpr const bool value =$/;"	m	class:detail::is_tuple_like_	typeref:typename:const bool
value	./vendor/fmt/include/ranges.h	/^  static constexpr const bool value =$/;"	m	struct:is_range	typeref:typename:const bool
value	./vendor/fmt/include/ranges.h	/^  static constexpr const bool value =$/;"	m	struct:is_tuple_formattable	typeref:typename:const bool
value	./vendor/fmt/include/ranges.h	/^  static constexpr const bool value =$/;"	m	struct:is_tuple_like	typeref:typename:const bool
value	./vendor/fmt/include/std.h	/^  static constexpr const bool value = detail::is_variant_like_<T>::value;$/;"	m	struct:is_variant_like	typeref:typename:const bool
value	./vendor/fmt/include/std.h	/^  static constexpr const bool value = true;$/;"	m	struct:detail::is_bit_reference_like	typeref:typename:const bool
value	./vendor/fmt/include/std.h	/^  static constexpr const bool value =$/;"	m	class:detail::is_variant_formattable_	typeref:typename:const bool
value	./vendor/fmt/include/std.h	/^  static constexpr const bool value =$/;"	m	struct:detail::is_bit_reference_like	typeref:typename:const bool
value	./vendor/fmt/include/std.h	/^  static constexpr const bool value =$/;"	m	struct:is_variant_formattable	typeref:typename:const bool
value	./vendor/raylib5/include/raygui.h	/^        int value;              \/\/ Character value (Unicode)$/;"	m	struct:GlyphInfo	typeref:typename:int
value	./vendor/raylib5/include/raylib.h	/^    float value;            \/\/ Material map value$/;"	m	struct:MaterialMap	typeref:typename:float
value	./vendor/raylib5/include/raylib.h	/^    int value;              \/\/ Character value (Unicode)$/;"	m	struct:GlyphInfo	typeref:typename:int
value_	./src/flecs.h	/^    int (*value_)($/;"	m	struct:ecs_serializer_t	typeref:typename:int (*)(const struct ecs_serializer_t * ser,ecs_entity_t type,const void * value)
value_	./vendor/fmt/include/base.h	/^  detail::value<Context> value_;$/;"	m	class:basic_format_arg	typeref:typename:detail::value<Context>
value_	./vendor/fmt/include/chrono.h	/^  int value_;$/;"	m	class:year	typeref:typename:int
value_	./vendor/fmt/include/chrono.h	/^  unsigned char value_;$/;"	m	class:day	typeref:typename:unsigned char
value_	./vendor/fmt/include/chrono.h	/^  unsigned char value_;$/;"	m	class:month	typeref:typename:unsigned char
value_	./vendor/fmt/include/chrono.h	/^  unsigned char value_;$/;"	m	class:weekday	typeref:typename:unsigned char
value_	./vendor/fmt/include/format.h	/^  basic_format_arg<format_context> value_;$/;"	m	class:loc_value	typeref:typename:basic_format_arg<format_context>
value_container_type	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using value_container_type = std::$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:std::conditional_t<is_detected_v<detect_iterator,AllocatorOrContainer>,AllocatorOrContainer,underlying_container_type>
value_ctx	./src/flecs.c	/^    ecs_json_value_ser_ctx_t value_ctx[64];$/;"	m	struct:ecs_json_ser_ctx_t	typeref:typename:ecs_json_value_ser_ctx_t[64]	file:
value_formatter_	./vendor/fmt/include/ranges.h	/^  formatter<remove_cvref_t<value_type>, Char> value_formatter_;$/;"	m	struct:formatter	typeref:typename:formatter<remove_cvref_t<value_type>,Char>
value_idx_type	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using value_idx_type = decltype(Bucket::m_value_idx);$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table
value_pair	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    typedef entry<KeyT, ValueT>               value_pair;$/;"	t	class:emhash7::HashMap	typeref:typename:entry<KeyT,ValueT>
value_pair	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    typedef value_type                        value_pair;$/;"	t	class:emhash7::HashMap	typeref:typename:value_type
value_size	./src/flecs.h	/^    ecs_size_t value_size;$/;"	m	struct:__anon7d4a417c0408	typeref:typename:ecs_size_t
value_t	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using value_t = std::false_type;$/;"	t	struct:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::detector	typeref:typename:std::false_type
value_t	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using value_t = std::true_type;$/;"	t	struct:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::detector	typeref:typename:std::true_type
value_type	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^        using value_type = typename Self::value_type;$/;"	t	class:robin_hood::detail::Table::Iter	typeref:typename:Self::value_type
value_type	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    using value_type = typename std::conditional<$/;"	t	class:robin_hood::detail::Table
value_type	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^        using value_type = T;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector::iter_t	typeref:typename:T
value_type	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using value_type = T;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:T
value_type	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using value_type = typename value_container_type::value_type;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:value_container_type::value_type
value_type	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        typedef value_pair                value_type;$/;"	t	class:emhash7::HashMap::const_iterator	typeref:typename:value_pair
value_type	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^        typedef value_pair                value_type;$/;"	t	class:emhash7::HashMap::iterator	typeref:typename:value_pair
value_type	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    typedef std::pair<KeyT, ValueT>           value_type;$/;"	t	class:emhash7::HashMap	typeref:typename:std::pair<KeyT,ValueT>
value_type	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^        using value_type = ValueType;$/;"	t	struct:ska::detailv3::sherwood_v3_table::templated_iterator	typeref:typename:ValueType
value_type	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    using value_type = T;$/;"	t	class:ska::detailv3::sherwood_v3_table	typeref:typename:T
value_type	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^    using value_type = const typename robin_hash::value_type;$/;"	t	class:tsl::detail_robin_hash::robin_hash::robin_iterator	typeref:typename:const typename robin_hash::value_type
value_type	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  using value_type = ValueType;$/;"	t	class:tsl::detail_robin_hash::bucket_entry	typeref:typename:ValueType
value_type	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  using value_type = ValueType;$/;"	t	class:tsl::detail_robin_hash::robin_hash	typeref:typename:ValueType
value_type	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^    using value_type = T;$/;"	t	class:tsl::robin_map::ValueSelect	typeref:typename:T
value_type	./vendor/STC/misc/benchmarks/external/tsl/robin_map.h	/^  using value_type = typename ht::value_type;$/;"	t	class:tsl::robin_map	typeref:typename:ht::value_type
value_type	./vendor/fmt/include/base.h	/^    using value_type = remove_const_t<T>;$/;"	t	function:detail::value::value	typeref:typename:remove_const_t<T>
value_type	./vendor/fmt/include/base.h	/^  using value_type = Char;$/;"	t	class:basic_string_view	typeref:typename:Char
value_type	./vendor/fmt/include/base.h	/^  using value_type = T;$/;"	t	class:basic_appender	typeref:typename:T
value_type	./vendor/fmt/include/base.h	/^  using value_type = T;$/;"	t	class:detail::buffer	typeref:typename:T
value_type	./vendor/fmt/include/base.h	/^  using value_type = typename container_type::value_type;$/;"	t	class:detail::iterator_buffer	typeref:typename:container_type::value_type
value_type	./vendor/fmt/include/format.h	/^  using value_type = T;$/;"	t	class:basic_memory_buffer	typeref:typename:T
value_type	./vendor/fmt/include/format.h	/^  using value_type = char;$/;"	t	struct:std::iterator_traits	typeref:typename:char
value_type	./vendor/fmt/include/ranges.h	/^  using value_type = T;$/;"	t	struct:detail::integer_sequence	typeref:typename:T
value_type	./vendor/fmt/include/ranges.h	/^  using value_type =$/;"	t	struct:formatter	typeref:typename:std::iter_value_t<It>
valuedouble	./vendor/cjson/include/cJSON.h	/^    double valuedouble;$/;"	m	struct:cJSON	typeref:typename:double
valueint	./vendor/cjson/include/cJSON.h	/^    int valueint;$/;"	m	struct:cJSON	typeref:typename:int
values	./src/flecs.c	/^    ecs_expr_value_t values[EXPR_MAX_STACK_SIZE];$/;"	m	struct:ecs_value_stack_t	typeref:typename:ecs_expr_value_t[]	file:
values	./src/flecs.c	/^    ecs_vec_t values;   \/* vec<uint64_t> *\/$/;"	m	struct:ecs_switch_t	typeref:typename:ecs_vec_t	file:
values	./src/flecs.h	/^    ecs_vec_t values;$/;"	m	struct:__anon7d4a417c0308	typeref:typename:ecs_vec_t
values	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    [[nodiscard]] auto values() const noexcept -> value_container_type const& {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table	typeref:typename:auto
values_	./vendor/fmt/include/base.h	/^    const detail::value<Context>* values_;$/;"	m	union:basic_format_args::__anonea363bd9100a	typeref:typename:const detail::value<Context> *
valuestring	./vendor/cjson/include/cJSON.h	/^    char *valuestring;$/;"	m	struct:cJSON	typeref:typename:char *
vaoId	./vendor/raylib5/include/raylib.h	/^    unsigned int vaoId;     \/\/ OpenGL Vertex Array Object id$/;"	m	struct:Mesh	typeref:typename:unsigned int
var	./src/flecs.c	/^    ecs_rule_var_t var;$/;"	m	struct:__anon7d4a41773808	typeref:typename:ecs_rule_var_t	file:
var	./src/flecs.c	/^    ecs_var_id_t var;$/;"	m	union:__anon7d4a4177240a	typeref:typename:ecs_var_id_t	file:
var	./src/flecs.h	/^    Base& var(const char *v) {$/;"	f	struct:flecs::alert_builder_i	typeref:typename:Base &
var	./src/flecs.h	/^    Base& var(const char *var_name) {$/;"	f	struct:flecs::term_id_builder_i	typeref:typename:Base &
var	./src/flecs.h	/^    const char *var;       \/* Variable to match component on. Do not include the$/;"	m	struct:ecs_alert_severity_filter_t	typeref:typename:const char *
var	./src/flecs.h	/^    const char *var;$/;"	m	struct:ecs_alert_desc_t	typeref:typename:const char *
var_count	./src/flecs.c	/^    int32_t var_count;            \/* Number of variables *\/$/;"	m	struct:ecs_rule_t	typeref:typename:int32_t	file:
var_id	./src/flecs.c	/^    int32_t var_id;             \/* Variable from which to obtain data (0 = $this) *\/$/;"	m	struct:EcsAlert	typeref:typename:int32_t	file:
var_index	./src/flecs.h	/^    ecs_hashmap_t var_index;$/;"	m	struct:ecs_expr_var_scope_t	typeref:typename:ecs_hashmap_t
var_is_prop	./src/flecs.c	/^    bool var_is_prop;$/;"	m	struct:__anon7d4a41771908	typeref:typename:bool	file:
var_name	./src/flecs.c	/^    char var_name[256];$/;"	m	struct:__anon7d4a41771908	typeref:typename:char[256]	file:
var_names	./src/flecs.c	/^    char **var_names;             \/* Array with variable names for iterator *\/$/;"	m	struct:ecs_rule_t	typeref:typename:char **	file:
var_pub_count	./src/flecs.c	/^    int32_t var_pub_count;        \/* Number of public variables *\/$/;"	m	struct:ecs_rule_t	typeref:typename:int32_t	file:
var_size	./src/flecs.c	/^    int32_t var_size;             \/* Used for out of bounds check during compilation *\/$/;"	m	struct:ecs_rule_t	typeref:typename:int32_t	file:
var_stmt	./src/flecs.c	/^    bool var_stmt;$/;"	m	struct:__anon7d4a41771908	typeref:typename:bool	file:
var_type	./src/flecs.c	/^    ecs_entity_t var_type;$/;"	m	struct:__anon7d4a41771908	typeref:typename:ecs_entity_t	file:
variable_count	./src/flecs.h	/^    int32_t variable_count;       \/* Number of variables for query *\/$/;"	m	struct:ecs_iter_t	typeref:typename:int32_t
variable_names	./src/flecs.h	/^    char **variable_names;        \/* Names of variables (if any) *\/$/;"	m	struct:ecs_iter_t	typeref:typename:char **
variable_names	./src/flecs.h	/^    char *variable_names[1];   \/**< Placeholder variable names array *\/$/;"	m	struct:ecs_filter_t	typeref:typename:char * [1]
variables	./src/flecs.c	/^    ecs_vec_t variables;$/;"	m	struct:ecs_stage_t	typeref:typename:ecs_vec_t	file:
variables	./src/flecs.h	/^    ecs_var_t *variables;         \/* Values of variables (if any) *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_var_t *
variant_index_sequence	./vendor/fmt/include/std.h	/^using variant_index_sequence =$/;"	t	namespace:detail	typeref:typename:std::make_index_sequence<std::variant_size<T>::value>
vars	./src/flecs.c	/^    ecs_rule_var_t *vars;         \/* Variables *\/$/;"	m	struct:ecs_rule_t	typeref:typename:ecs_rule_var_t *	file:
vars	./src/flecs.c	/^    ecs_var_t *vars;              \/* Variable storage *\/$/;"	m	struct:__anon7d4a41773708	typeref:typename:ecs_var_t *	file:
vars	./src/flecs.c	/^    ecs_vars_t vars;$/;"	m	struct:__anon7d4a41771908	typeref:typename:ecs_vars_t	file:
vars	./src/flecs.h	/^    ecs_vars_t *vars;$/;"	m	struct:ecs_parse_expr_desc_t	typeref:typename:ecs_vars_t *
vars	./src/flecs.h	/^    ecs_vec_t vars;$/;"	m	struct:ecs_expr_var_scope_t	typeref:typename:ecs_vec_t
vars	./src/flecs.h	/^    struct ecs_var_t *vars;              \/* Variable storage *\/$/;"	m	struct:ecs_rule_iter_t	typeref:struct:ecs_var_t *
vars_cache	./src/flecs.c	/^    ecs_rule_var_cache_t vars_cache; \/* For trivial rules with only This variables *\/$/;"	m	struct:ecs_rule_t	typeref:typename:ecs_rule_var_cache_t	file:
vboId	./vendor/raylib5/include/raylib.h	/^    unsigned int *vboId;    \/\/ OpenGL Vertex Buffer Objects id (default vertex data)$/;"	m	struct:Mesh	typeref:typename:unsigned int *
vec_alloc	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    using vec_alloc = typename std::allocator_traits<Allocator>::template rebind_alloc<pointer>;$/;"	t	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector	typeref:typename:std::allocator_traits<Allocator>::template rebind_alloc<pointer>
vector	./src/flecs.h	/^    ecs_vec_t *vector;        \/**< Current vector, in case a vector is iterated *\/$/;"	m	struct:ecs_meta_scope_t	typeref:typename:ecs_vec_t *
vector	./src/flecs.h	/^inline flecs::entity world::vector() {$/;"	f	class:flecs::world	typeref:typename:flecs::entity
vector	./src/flecs.h	/^inline flecs::entity world::vector(flecs::entity_t elem_id) {$/;"	f	class:flecs::world	typeref:typename:flecs::entity
vectordemo1	./vendor/STC/misc/examples/mixed/demos.c	/^void vectordemo1(void)$/;"	f	typeref:typename:void
vectordemo2	./vendor/STC/misc/examples/mixed/demos.c	/^void vectordemo2(void)$/;"	f	typeref:typename:void
version	./src/flecs.h	/^    const char *version;            \/**< Stringified version *\/$/;"	m	struct:ecs_build_info_t	typeref:typename:const char *
version_major	./src/flecs.h	/^    int16_t version_major;          \/**< Major flecs version *\/$/;"	m	struct:ecs_build_info_t	typeref:typename:int16_t
version_minor	./src/flecs.h	/^    int16_t version_minor;          \/**< Minor flecs version *\/$/;"	m	struct:ecs_build_info_t	typeref:typename:int16_t
version_patch	./src/flecs.h	/^    int16_t version_patch;          \/**< Patch flecs version *\/$/;"	m	struct:ecs_build_info_t	typeref:typename:int16_t
vertexCount	./vendor/raylib5/include/raylib.h	/^    int vertexCount;        \/\/ Number of vertices stored in arrays$/;"	m	struct:Mesh	typeref:typename:int
vertices	./vendor/raylib5/include/raylib.h	/^    float *vertices;        \/\/ Vertex position (XYZ - 3 components per vertex) (shader-locatio/;"	m	struct:Mesh	typeref:typename:float *
vformat	./vendor/fmt/include/color.h	/^inline auto vformat(const text_style& ts, string_view fmt, format_args args)$/;"	f	typeref:typename:std::string
vformat	./vendor/fmt/include/format-inl.h	/^FMT_FUNC auto vformat(string_view fmt, format_args args) -> std::string {$/;"	f	typeref:typename:std::string
vformat	./vendor/fmt/include/format.h	/^auto vformat(const Locale& loc, basic_string_view<Char> fmt,$/;"	f	namespace:detail	typeref:typename:std::basic_string<Char>
vformat	./vendor/fmt/include/format.h	/^inline auto vformat(const Locale& loc, string_view fmt, format_args args)$/;"	f	typeref:typename:std::string
vformat	./vendor/fmt/include/xchar.h	/^auto vformat(basic_string_view<Char> format_str,$/;"	f	typeref:typename:std::basic_string<Char>
vformat	./vendor/fmt/include/xchar.h	/^inline auto vformat(const Locale& loc, const S& format_str,$/;"	f	typeref:typename:std::basic_string<Char>
vformat	./vendor/fmt/include/xchar.h	/^inline auto vformat(const text_style& ts, wstring_view fmt, wformat_args args)$/;"	f	typeref:typename:std::wstring
vformat_args	./vendor/fmt/include/base.h	/^template <> struct vformat_args<char> {$/;"	s	namespace:detail
vformat_args	./vendor/fmt/include/base.h	/^template <typename Char = char> struct vformat_args {$/;"	s	namespace:detail
vformat_to	./vendor/fmt/include/base.h	/^auto vformat_to(OutputIt&& out, string_view fmt, format_args args)$/;"	f	typeref:typename:remove_cvref_t<OutputIt>
vformat_to	./vendor/fmt/include/base.h	/^auto vformat_to(char (&out)[N], string_view fmt, format_args args)$/;"	f	typeref:typename:format_to_result<char * >
vformat_to	./vendor/fmt/include/color.h	/^auto vformat_to(OutputIt out, const text_style& ts, string_view fmt,$/;"	f	typeref:typename:OutputIt
vformat_to	./vendor/fmt/include/color.h	/^void vformat_to($/;"	f	namespace:detail	typeref:typename:void
vformat_to	./vendor/fmt/include/format.h	/^auto vformat_to(OutputIt out, const Locale& loc, string_view fmt,$/;"	f	typeref:typename:OutputIt
vformat_to	./vendor/fmt/include/format.h	/^void vformat_to(buffer<Char>& buf, basic_string_view<Char> fmt,$/;"	f	namespace:detail	typeref:typename:void
vformat_to	./vendor/fmt/include/xchar.h	/^auto vformat_to(OutputIt out, const S& format_str,$/;"	f	typeref:typename:OutputIt
vformat_to	./vendor/fmt/include/xchar.h	/^inline auto vformat_to(OutputIt out, const Locale& loc, const S& format_str,$/;"	f	typeref:typename:OutputIt
vformat_to_n	./vendor/fmt/include/base.h	/^auto vformat_to_n(OutputIt out, size_t n, string_view fmt, format_args args)$/;"	f	typeref:typename:format_to_n_result<OutputIt>
vformat_to_n	./vendor/fmt/include/xchar.h	/^inline auto vformat_to_n(OutputIt out, size_t n,$/;"	f	typeref:typename:format_to_n_result<OutputIt>
vfprintf	./vendor/fmt/include/printf.h	/^inline auto vfprintf(std::FILE* f, basic_string_view<Char> fmt,$/;"	f	typeref:typename:int
view	./src/flecs.h	/^    flecs::entity_view view() const {$/;"	f	struct:flecs::entity	typeref:typename:flecs::entity_view
view	./vendor/fmt/include/base.h	/^struct view {};$/;"	s	namespace:detail
viewOffset	./vendor/raylib5/include/raylib.h	/^    Matrix viewOffset[2];           \/\/ VR view offset matrices (per eye)$/;"	m	struct:VrStereoConfig	typeref:typename:Matrix[2]
view_ref	./vendor/fmt/include/ranges.h	/^  using view_ref = conditional_t<std::is_copy_constructible<It>::value,$/;"	t	struct:formatter
violet	./vendor/fmt/include/color.h	/^  violet = 0xEE82EE,                   \/\/ rgb(238,130,238)$/;"	e	enum:color
visit	./vendor/fmt/include/base.h	/^  FMT_CONSTEXPR FMT_INLINE auto visit(Visitor&& vis) const -> decltype(vis(0)) {$/;"	f	class:basic_format_arg	typeref:typename:decltype(vis (0))
visit	./vendor/fmt/include/format.h	/^  template <typename Visitor> auto visit(Visitor&& vis) -> decltype(vis(0)) {$/;"	f	class:loc_value	typeref:typename:decltype(vis (0))
visit_format_arg	./vendor/fmt/include/base.h	/^FMT_DEPRECATED FMT_CONSTEXPR auto visit_format_arg($/;"	f	typeref:typename:decltype(vis (0))
void_t	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^template<typename...> using void_t = void;$/;"	t	namespace:ska::detailv3	typeref:typename:void
void_t	./vendor/fmt/include/base.h	/^template <typename... T> using void_t = typename void_t_impl<T...>::type;$/;"	t	typeref:typename:void_t_impl<T...>::type
void_t	./vendor/fmt/include/base.h	/^template <typename...> using void_t = void;$/;"	t	typeref:typename:void
void_t_impl	./vendor/fmt/include/base.h	/^template <typename...> struct void_t_impl {$/;"	s
void_type	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^struct void_type {$/;"	s	namespace:robin_hood::detail
vprint	./vendor/fmt/include/color.h	/^inline void vprint(FILE* f, const text_style& ts, string_view fmt,$/;"	f	typeref:typename:void
vprint	./vendor/fmt/include/format-inl.h	/^FMT_FUNC void vprint(std::FILE* f, string_view fmt, format_args args) {$/;"	f	typeref:typename:FMT_FUNC void
vprint	./vendor/fmt/include/format-inl.h	/^FMT_FUNC void vprint(string_view fmt, format_args args) {$/;"	f	typeref:typename:FMT_FUNC void
vprint	./vendor/fmt/include/ostream.h	/^void vprint(std::basic_ostream<Char>& os,$/;"	f	typeref:typename:FMT_EXPORT void
vprint	./vendor/fmt/include/xchar.h	/^inline void vprint(std::FILE* f, wstring_view fmt, wformat_args args) {$/;"	f	typeref:typename:void
vprint	./vendor/fmt/include/xchar.h	/^inline void vprint(wstring_view fmt, wformat_args args) {$/;"	f	typeref:typename:void
vprint_buffered	./vendor/fmt/include/format-inl.h	/^FMT_FUNC void vprint_buffered(std::FILE* f, string_view fmt, format_args args) {$/;"	f	typeref:typename:FMT_FUNC void
vprint_directly	./vendor/fmt/include/ostream.h	/^inline void vprint_directly(std::ostream& os, string_view format_str,$/;"	f	namespace:detail	typeref:typename:void
vprint_errormsg	./vendor/STC/misc/tests/ctest.h	/^static void vprint_errormsg(const char* const fmt, va_list ap) {$/;"	f	typeref:typename:void
vprint_mojibake	./vendor/fmt/include/base.h	/^inline void vprint_mojibake(FILE*, string_view, format_args, bool) {}$/;"	f	namespace:detail	typeref:typename:void
vprint_mojibake	./vendor/fmt/include/format-inl.h	/^FMT_FUNC void vprint_mojibake(std::FILE* f, string_view fmt, format_args args,$/;"	f	namespace:detail	typeref:typename:FMT_FUNC void
vprintf	./vendor/fmt/include/printf.h	/^FMT_DEPRECATED inline auto vprintf(basic_string_view<Char> fmt,$/;"	f	typeref:typename:int
vprintf	./vendor/fmt/include/printf.h	/^void vprintf(buffer<Char>& buf, basic_string_view<Char> format,$/;"	f	namespace:detail	typeref:typename:void
vprintf_args	./vendor/fmt/include/printf.h	/^template <typename Char> struct vprintf_args {$/;"	s
vprintln	./vendor/fmt/include/format-inl.h	/^FMT_FUNC void vprintln(std::FILE* f, string_view fmt, format_args args) {$/;"	f	typeref:typename:FMT_FUNC void
vsprintf	./vendor/fmt/include/printf.h	/^inline auto vsprintf(basic_string_view<Char> fmt,$/;"	f	typeref:typename:std::basic_string<Char>
vsystem_error	./vendor/fmt/include/format-inl.h	/^FMT_FUNC auto vsystem_error(int error_code, string_view fmt, format_args args)$/;"	f	typeref:typename:std::system_error
w	./vendor/raylib5/include/raylib.h	/^    float w;                \/\/ Vector w component$/;"	m	struct:Vector4	typeref:typename:float
w	./vendor/raylib5/include/raymath.h	/^    float w;$/;"	m	struct:Vector4	typeref:typename:float
wait_ms	./src/flecs.c	/^    int32_t wait_ms;$/;"	m	struct:ecs_http_send_queue_t	typeref:typename:int32_t	file:
warn	./src/flecs.h	/^inline void warn(const char *fmt, ...) {$/;"	f	namespace:flecs::log	typeref:typename:void
warning	./src/flecs.h	/^    ecs_member_value_range_t warning;$/;"	m	struct:EcsMemberRanges	typeref:typename:ecs_member_value_range_t
warning_count	./src/flecs.h	/^    int32_t warning_count;$/;"	m	struct:EcsAlertsActive	typeref:typename:int32_t
warning_range	./src/flecs.h	/^    ecs_member_value_range_t warning_range;$/;"	m	struct:ecs_member_t	typeref:typename:ecs_member_value_range_t
warning_range	./src/flecs.h	/^untyped_component& warning_range(double min, double max) {$/;"	f	struct:flecs::untyped_component	typeref:typename:untyped_component &
wcstring_view	./vendor/fmt/include/os.h	/^using wcstring_view = basic_cstring_view<wchar_t>;$/;"	t	typeref:typename:basic_cstring_view<wchar_t>
weekday	./vendor/fmt/include/chrono.h	/^  constexpr explicit weekday(unsigned wd) noexcept$/;"	f	class:weekday
weekday	./vendor/fmt/include/chrono.h	/^class weekday {$/;"	c
weekday	./vendor/fmt/include/chrono.h	/^using weekday = std::chrono::weekday;$/;"	t	typeref:typename:std::chrono::weekday
wformat_args	./vendor/fmt/include/xchar.h	/^using wformat_args = basic_format_args<wformat_context>;$/;"	t	typeref:typename:basic_format_args<wformat_context>
wformat_context	./vendor/fmt/include/xchar.h	/^using wformat_context = buffered_context<wchar_t>;$/;"	t	typeref:typename:buffered_context<wchar_t>
wformat_parse_context	./vendor/fmt/include/xchar.h	/^using wformat_parse_context = basic_format_parse_context<wchar_t>;$/;"	t	typeref:typename:basic_format_parse_context<wchar_t>
wformat_string	./vendor/fmt/include/xchar.h	/^template <typename... Args> using wformat_string = wstring_view;$/;"	t	typeref:typename:wstring_view
wformat_string	./vendor/fmt/include/xchar.h	/^using wformat_string = basic_format_string<wchar_t, type_identity_t<Args>...>;$/;"	t	typeref:typename:basic_format_string<wchar_t,type_identity_t<Args>...>
wheat	./vendor/fmt/include/color.h	/^  wheat = 0xF5DEB3,                    \/\/ rgb(245,222,179)$/;"	e	enum:color
white	./vendor/fmt/include/color.h	/^  white = 0xFFFFFF,                    \/\/ rgb(255,255,255)$/;"	e	enum:color
white	./vendor/fmt/include/color.h	/^  white,$/;"	e	enum:terminal_color
white_smoke	./vendor/fmt/include/color.h	/^  white_smoke = 0xF5F5F5,              \/\/ rgb(245,245,245)$/;"	e	enum:color
width	./src/grid.h	/^	int width;$/;"	m	struct:Grid	typeref:typename:int
width	./src/grid.h	/^	int width;$/;"	m	struct:Tile	typeref:typename:int
width	./vendor/STC/misc/examples/mixed/astar.c	/^    int width;$/;"	m	struct:__anon14ad28530108	typeref:typename:int	file:
width	./vendor/fmt/include/base.h	/^  int width;$/;"	m	struct:format_specs	typeref:typename:int
width	./vendor/fmt/include/base.h	/^enum class state { start, align, sign, hash, zero, width, precision, locale };$/;"	e	enum:detail::state
width	./vendor/raylib5/include/raygui.h	/^        float width;$/;"	m	struct:Rectangle	typeref:typename:float
width	./vendor/raylib5/include/raygui.h	/^        int width;              \/\/ Image base width$/;"	m	struct:Image	typeref:typename:int
width	./vendor/raylib5/include/raygui.h	/^        int width;              \/\/ Texture base width$/;"	m	struct:Texture2D	typeref:typename:int
width	./vendor/raylib5/include/raylib.h	/^    float width;            \/\/ Rectangle width$/;"	m	struct:Rectangle	typeref:typename:float
width	./vendor/raylib5/include/raylib.h	/^    int width;              \/\/ Image base width$/;"	m	struct:Image	typeref:typename:int
width	./vendor/raylib5/include/raylib.h	/^    int width;              \/\/ Texture base width$/;"	m	struct:Texture	typeref:typename:int
width_	./vendor/fmt/include/format.h	/^  int width_;$/;"	m	struct:nested_formatter	typeref:typename:int
width_checker	./vendor/fmt/include/format.h	/^struct width_checker {$/;"	s	namespace:detail
width_ref	./vendor/fmt/include/base.h	/^  arg_ref<Char> width_ref;$/;"	m	struct:detail::dynamic_format_specs	typeref:typename:arg_ref<Char>
width_ref_	./vendor/fmt/include/chrono.h	/^  detail::arg_ref<Char> width_ref_;$/;"	m	struct:formatter	typeref:typename:detail::arg_ref<Char>
width_ref_	./vendor/fmt/include/std.h	/^  detail::arg_ref<Char> width_ref_;$/;"	m	struct:formatter	typeref:typename:detail::arg_ref<Char>
wildcard	./src/flecs.h	/^    struct ecs_event_id_record_t *wildcard;$/;"	m	struct:ecs_event_record_t	typeref:struct:ecs_event_id_record_t *
wildcard_ids	./src/flecs.c	/^    ecs_map_t wildcard_ids;$/;"	m	struct:ecs_write_state_t	typeref:typename:ecs_map_t	file:
wildcard_pair	./src/flecs.h	/^    struct ecs_event_id_record_t *wildcard_pair;$/;"	m	struct:ecs_event_record_t	typeref:struct:ecs_event_id_record_t *
win_adec	./src/flecs.c	/^int32_t win_adec($/;"	f	typeref:typename:int32_t	file:
win_ainc	./src/flecs.c	/^int32_t win_ainc($/;"	f	typeref:typename:int32_t	file:
win_cond_broadcast	./src/flecs.c	/^void win_cond_broadcast($/;"	f	typeref:typename:void	file:
win_cond_free	./src/flecs.c	/^void win_cond_free($/;"	f	typeref:typename:void	file:
win_cond_new	./src/flecs.c	/^ecs_os_cond_t win_cond_new(void) {$/;"	f	typeref:typename:ecs_os_cond_t	file:
win_cond_signal	./src/flecs.c	/^void win_cond_signal($/;"	f	typeref:typename:void	file:
win_cond_wait	./src/flecs.c	/^void win_cond_wait($/;"	f	typeref:typename:void	file:
win_current_resolution	./src/flecs.c	/^static ULONG win_current_resolution;$/;"	v	typeref:typename:ULONG	file:
win_enable_high_timer_resolution	./src/flecs.c	/^void win_enable_high_timer_resolution(bool enable)$/;"	f	typeref:typename:void	file:
win_fini	./src/flecs.c	/^void win_fini(void) {$/;"	f	typeref:typename:void	file:
win_ladec	./src/flecs.c	/^int64_t win_ladec($/;"	f	typeref:typename:int64_t	file:
win_lainc	./src/flecs.c	/^int64_t win_lainc($/;"	f	typeref:typename:int64_t	file:
win_mutex_free	./src/flecs.c	/^void win_mutex_free($/;"	f	typeref:typename:void	file:
win_mutex_lock	./src/flecs.c	/^void win_mutex_lock($/;"	f	typeref:typename:void	file:
win_mutex_new	./src/flecs.c	/^ecs_os_mutex_t win_mutex_new(void) {$/;"	f	typeref:typename:ecs_os_mutex_t	file:
win_mutex_unlock	./src/flecs.c	/^void win_mutex_unlock($/;"	f	typeref:typename:void	file:
win_sleep	./src/flecs.c	/^void win_sleep($/;"	f	typeref:typename:void	file:
win_thread_join	./src/flecs.c	/^void* win_thread_join($/;"	f	typeref:typename:void *	file:
win_thread_new	./src/flecs.c	/^ecs_os_thread_t win_thread_new($/;"	f	typeref:typename:ecs_os_thread_t	file:
win_thread_self	./src/flecs.c	/^ecs_os_thread_id_t win_thread_self(void)$/;"	f	typeref:typename:ecs_os_thread_id_t	file:
win_time_freq	./src/flecs.c	/^static double win_time_freq;$/;"	v	typeref:typename:double	file:
win_time_initialized	./src/flecs.c	/^static bool win_time_initialized;$/;"	v	typeref:typename:bool	file:
win_time_now	./src/flecs.c	/^uint64_t win_time_now(void) {$/;"	f	typeref:typename:uint64_t	file:
win_time_setup	./src/flecs.c	/^void win_time_setup(void) {$/;"	f	typeref:typename:void	file:
win_time_start	./src/flecs.c	/^static LARGE_INTEGER win_time_start;$/;"	v	typeref:typename:LARGE_INTEGER	file:
windows_error	./vendor/fmt/include/os.h	/^std::system_error windows_error(int error_code, string_view message,$/;"	f	typeref:typename:std::system_error
with	./src/flecs.c	/^    ecs_entity_t with;               \/* Id to add by default to new entities *\/$/;"	m	struct:ecs_stage_t	typeref:typename:ecs_entity_t	file:
with	./src/flecs.c	/^    ecs_entity_t with;$/;"	m	struct:ecs_suspend_readonly_state_t	typeref:typename:ecs_entity_t	file:
with	./src/flecs.c	/^    ecs_entity_t with[STACK_MAX_SIZE];$/;"	m	struct:__anon7d4a41771908	typeref:typename:ecs_entity_t[]	file:
with	./src/flecs.c	/^    ecs_id_t with;$/;"	m	struct:__anon7d4a41772908	typeref:typename:ecs_id_t	file:
with	./src/flecs.c	/^    ecs_id_t with;$/;"	m	struct:__anon7d4a41772a08	typeref:typename:ecs_id_t	file:
with	./src/flecs.h	/^    Base& with() {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
with	./src/flecs.h	/^    Base& with(Args&&... args) {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
with	./src/flecs.h	/^    Self& with(const Func& func) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
with	./src/flecs.h	/^    Self& with(entity_t first, const Func& func) {$/;"	f	struct:flecs::entity_builder	typeref:typename:Self &
with	./src/flecs.h	/^    ecs_id_t with;         \/* Component to match *\/$/;"	m	struct:ecs_alert_severity_filter_t	typeref:typename:ecs_id_t
with	./src/flecs.h	/^    void with(const Func& func) const {$/;"	f	struct:flecs::world	typeref:typename:void
with	./src/flecs.h	/^    void with(id_t first, id_t second, const Func& func) const {$/;"	f	struct:flecs::world	typeref:typename:void
with	./src/flecs.h	/^    void with(id_t second, const Func& func) const {$/;"	f	struct:flecs::world	typeref:typename:void
with	./src/flecs.h	/^    void with(id_t with_id, const Func& func) const {$/;"	f	struct:flecs::world	typeref:typename:void
with_frame	./src/flecs.c	/^    int32_t with_frame;$/;"	m	struct:__anon7d4a41771908	typeref:typename:int32_t	file:
with_frames	./src/flecs.c	/^    int32_t with_frames[STACK_MAX_SIZE];$/;"	m	struct:__anon7d4a41771908	typeref:typename:int32_t[]	file:
with_stmt	./src/flecs.c	/^    bool with_stmt;$/;"	m	struct:__anon7d4a41771908	typeref:typename:bool	file:
with_typename_	./vendor/fmt/include/std.h	/^  bool with_typename_ = false;$/;"	m	struct:formatter	typeref:typename:bool
with_value_frames	./src/flecs.c	/^    plecs_with_value_t with_value_frames[STACK_MAX_SIZE];$/;"	m	struct:__anon7d4a41771908	typeref:typename:plecs_with_value_t[]	file:
without	./src/flecs.h	/^    Base& without() {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
without	./src/flecs.h	/^    Base& without(Args&&... args) {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
wmemory_buffer	./vendor/fmt/include/xchar.h	/^using wmemory_buffer = basic_memory_buffer<wchar_t>;$/;"	t	typeref:typename:basic_memory_buffer<wchar_t>
worker	./src/flecs.h	/^        ecs_worker_iter_t worker;$/;"	m	union:ecs_iter_private_t::__anon7d4a417c020a	typeref:typename:ecs_worker_iter_t
worker	./src/flecs.h	/^worker_iterable<Components...> iterable<Components...>::worker($/;"	f	class:flecs::iterable	typeref:typename:worker_iterable<Components...>
worker_cond	./src/flecs.c	/^    ecs_os_cond_t worker_cond;       \/* Signal that worker threads can start *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_os_cond_t	file:
worker_iterable	./src/flecs.h	/^    worker_iterable(int32_t offset, int32_t limit, iterable<Components...> *it) $/;"	f	struct:flecs::worker_iterable
worker_iterable	./src/flecs.h	/^struct worker_iterable final : iterable<Components...> {$/;"	s	namespace:flecs
workers_running	./src/flecs.c	/^    int32_t workers_running;         \/* Number of threads running *\/$/;"	m	struct:ecs_world_t	typeref:typename:int32_t	file:
workers_use_task_api	./src/flecs.c	/^    bool workers_use_task_api;       \/* Workers are short-lived tasks, not long-running threads/;"	m	struct:ecs_world_t	typeref:typename:bool	file:
workers_waiting	./src/flecs.c	/^    int32_t workers_waiting;         \/* Number of workers waiting on sync *\/$/;"	m	struct:ecs_world_t	typeref:typename:int32_t	file:
world	./src/flecs.c	/^    const ecs_world_t *world;$/;"	m	struct:__anon7d4a41770308	typeref:typename:const ecs_world_t *	file:
world	./src/flecs.c	/^    ecs_world_t *world;              \/* Reference to world *\/$/;"	m	struct:ecs_stage_t	typeref:typename:ecs_world_t *	file:
world	./src/flecs.c	/^    ecs_world_t *world;           \/* Reference to world *\/$/;"	m	struct:__anon7d4a41773708	typeref:typename:ecs_world_t *	file:
world	./src/flecs.c	/^    ecs_world_t *world;$/;"	m	struct:__anon7d4a41771a08	typeref:typename:ecs_world_t *	file:
world	./src/flecs.c	/^    ecs_world_t *world;$/;"	m	struct:ecs_snapshot_t	typeref:typename:ecs_world_t *	file:
world	./src/flecs.c	/^    ecs_world_t *world;$/;"	m	struct:ecs_system_t	typeref:typename:ecs_world_t *	file:
world	./src/flecs.h	/^    const ecs_world_t *world;$/;"	m	struct:ecs_meta_cursor_t	typeref:typename:const ecs_world_t *
world	./src/flecs.h	/^    const ecs_world_t *world;$/;"	m	struct:ecs_serializer_t	typeref:typename:const ecs_world_t *
world	./src/flecs.h	/^    ecs_world_t *world;           \/* The world *\/$/;"	m	struct:ecs_iter_t	typeref:typename:ecs_world_t *
world	./src/flecs.h	/^    ecs_world_t *world;        \/**< World mixin *\/$/;"	m	struct:ecs_filter_t	typeref:typename:ecs_world_t *
world	./src/flecs.h	/^    ecs_world_t *world;$/;"	m	struct:EcsScript	typeref:typename:ecs_world_t *
world	./src/flecs.h	/^    ecs_world_t *world;$/;"	m	struct:ecs_vars_t	typeref:typename:ecs_world_t *
world	./src/flecs.h	/^    explicit world()$/;"	f	struct:flecs::world
world	./src/flecs.h	/^    explicit world(int argc, char *argv[])$/;"	f	struct:flecs::world
world	./src/flecs.h	/^    explicit world(world_t *w, bool owned = false)$/;"	f	struct:flecs::world
world	./src/flecs.h	/^    flecs::world world() const {$/;"	f	struct:flecs::query	typeref:typename:flecs::world
world	./src/flecs.h	/^    flecs::world_t *world = nullptr;$/;"	m	struct:flecs::opaque	typeref:typename:flecs::world_t *
world	./src/flecs.h	/^    world(world&& obj) noexcept {$/;"	f	struct:flecs::world
world	./src/flecs.h	/^inline flecs::world id::world() const {$/;"	f	class:flecs::id	typeref:typename:flecs::world
world	./src/flecs.h	/^inline flecs::world iter::world() const {$/;"	f	class:flecs::iter	typeref:typename:flecs::world
world	./src/flecs.h	/^struct world {$/;"	s	namespace:flecs
world	./src/grid.h	/^	ecs_world_t *world;$/;"	m	struct:Grid	typeref:typename:ecs_world_t *
world	./src/grid.h	/^	ecs_world_t *world;$/;"	m	struct:Tile	typeref:typename:ecs_world_t *
world	./src/turnbasedsystem.h	/^	ecs_world_t *world;$/;"	m	struct:TurnManager	typeref:typename:ecs_world_t *
world	./src/turnbasedsystem.h	/^    ecs_world_t *world;$/;"	m	struct:TurnComponentData	typeref:typename:ecs_world_t *
world_	./src/flecs.h	/^    flecs::world_t *world_;$/;"	m	struct:flecs::enum_data	typeref:typename:flecs::world_t *
world_info_t	./src/flecs.h	/^using world_info_t = ecs_world_info_t;$/;"	t	namespace:flecs	typeref:typename:ecs_world_info_t
world_start_time	./src/flecs.c	/^    ecs_time_t world_start_time;     \/* Timestamp of simulation start *\/$/;"	m	struct:ecs_world_t	typeref:typename:ecs_time_t	file:
world_t	./src/flecs.h	/^using world_t = ecs_world_t;$/;"	t	namespace:flecs	typeref:typename:ecs_world_t
world_time	./src/flecs.h	/^        ecs_metric_t world_time;           \/**< Simulation time passed since simulation start. /;"	m	struct:ecs_world_stats_t::__anon7d4a417c1508	typeref:typename:ecs_metric_t
world_time_raw	./src/flecs.h	/^        ecs_metric_t world_time_raw;       \/**< Actual time passed since simulation start (firs/;"	m	struct:ecs_world_stats_t::__anon7d4a417c1508	typeref:typename:ecs_metric_t
world_time_total	./src/flecs.h	/^    ecs_ftime_t world_time_total;     \/**< Time elapsed in simulation *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:ecs_ftime_t
world_time_total_raw	./src/flecs.h	/^    ecs_ftime_t world_time_total_raw; \/**< Time elapsed in simulation (no scaling) *\/$/;"	m	struct:ecs_world_info_t	typeref:typename:ecs_ftime_t
world_v	./src/flecs.h	/^    flecs::world_t* world_v() override { return m_world; }$/;"	f	struct:flecs::_::builder	typeref:typename:flecs::world_t *
world_v	./src/flecs.h	/^    flecs::world_t* world_v() override { return m_world; }$/;"	f	struct:flecs::_::node_builder	typeref:typename:flecs::world_t *
world_v	./src/flecs.h	/^    flecs::world_t* world_v() override { return m_world; }$/;"	f	struct:flecs::term	typeref:typename:flecs::world_t *
wprintf_args	./vendor/fmt/include/printf.h	/^using wprintf_args = basic_format_args<wprintf_context>;$/;"	t	typeref:typename:basic_format_args<wprintf_context>
wprintf_context	./vendor/fmt/include/printf.h	/^using wprintf_context = basic_printf_context<wchar_t>;$/;"	t	typeref:typename:basic_printf_context<wchar_t>
write	./src/flecs.h	/^    Base& write() {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
write	./src/flecs.h	/^    Base& write() {$/;"	f	struct:flecs::term_builder_i	typeref:typename:Base &
write	./src/flecs.h	/^    Base& write(Args&&... args) {$/;"	f	struct:flecs::filter_builder_i	typeref:typename:Base &
write	./vendor/STC/misc/benchmarks/various/rust_hashmap.rs	/^    fn write(&mut self, bytes: &[u8]) {$/;"	P	implementation:MyHasher
write	./vendor/fmt/include/chrono.h	/^  void write(Rep value, int width, pad_type pad = pad_type::zero) {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
write	./vendor/fmt/include/chrono.h	/^auto write(OutputIt out, const std::tm& time, const std::locale& loc,$/;"	f	namespace:detail	typeref:typename:OutputIt
write	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR FMT_INLINE auto write(OutputIt out, T value,$/;"	f	namespace:detail	typeref:typename:OutputIt
write	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR FMT_INLINE auto write(basic_appender<Char> out, T value,$/;"	f	namespace:detail	typeref:typename:basic_appender<Char>
write	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto write(OutputIt out, Char value) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
write	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto write(OutputIt out, Char value, const format_specs& specs,$/;"	f	namespace:detail	typeref:typename:OutputIt
write	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto write(OutputIt out, T value) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
write	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto write(OutputIt out, T value, const format_specs& specs = {},$/;"	f	namespace:detail	typeref:typename:OutputIt
write	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto write(OutputIt out, basic_string_view<Char> s,$/;"	f	namespace:detail	typeref:typename:OutputIt
write	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto write(OutputIt out, basic_string_view<Char> value)$/;"	f	namespace:detail	typeref:typename:OutputIt
write	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto write(OutputIt out, const Char* s, const format_specs& specs,$/;"	f	namespace:detail	typeref:typename:OutputIt
write	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto write(OutputIt out, const T& value) -> enable_if_t<$/;"	f	namespace:detail
write	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto write(OutputIt out, const T& value)$/;"	f	namespace:detail	typeref:typename:enable_if_t<mapped_type_constant<T,Context>::value==type::custom_type &&!std::is_fundamental<T>::value,OutputIt>
write	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto write(OutputIt out,$/;"	f	namespace:detail	typeref:typename:OutputIt
write	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR20 auto write(OutputIt out, T value) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
write	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR20 auto write(OutputIt out, T value, format_specs specs,$/;"	f	namespace:detail	typeref:typename:OutputIt
write	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR20 auto write(OutputIt out, const Char* value) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
write	./vendor/fmt/include/format.h	/^auto write(OutputIt out, const T* value, const format_specs& specs = {},$/;"	f	namespace:detail	typeref:typename:OutputIt
write	./vendor/fmt/include/format.h	/^auto write(OutputIt out, monostate, format_specs = {}, locale_ref = {})$/;"	f	namespace:detail	typeref:typename:OutputIt
write	./vendor/fmt/include/format.h	/^constexpr auto write(OutputIt out, const T& value) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
write	./vendor/fmt/include/format.h	/^inline auto write(OutputIt out, T value) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
write1	./vendor/fmt/include/chrono.h	/^  void write1(int value) {$/;"	f	class:detail::tm_writer	typeref:typename:void
write2	./vendor/fmt/include/chrono.h	/^  void write2(int value) {$/;"	f	class:detail::tm_writer	typeref:typename:void
write2	./vendor/fmt/include/chrono.h	/^  void write2(int value, pad_type pad) {$/;"	f	class:detail::tm_writer	typeref:typename:void
write_barrier	./src/flecs.c	/^    bool write_barrier;$/;"	m	struct:ecs_write_state_t	typeref:typename:bool	file:
write_buffer	./vendor/fmt/include/ostream.h	/^void write_buffer(std::basic_ostream<Char>& os, buffer<Char>& buf) {$/;"	f	namespace:detail	typeref:typename:void
write_bytes	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto write_bytes(OutputIt out, string_view bytes,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_char	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto write_char(OutputIt out, Char value,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_codecvt	./vendor/fmt/include/chrono.h	/^void write_codecvt(codecvt_result<CodeUnit>& out, string_view in_buf,$/;"	f	namespace:detail	typeref:typename:void
write_codepoint	./vendor/fmt/include/format.h	/^auto write_codepoint(OutputIt out, char prefix, uint32_t cp) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
write_console	./vendor/fmt/include/format-inl.h	/^FMT_FUNC auto write_console(int, string_view) -> bool { return false; }$/;"	f	namespace:detail	typeref:typename:bool
write_console	./vendor/fmt/include/format-inl.h	/^FMT_FUNC bool write_console(int fd, string_view text) {$/;"	f	namespace:detail	typeref:typename:FMT_FUNC bool
write_debug_string	./vendor/fmt/include/ranges.h	/^  auto write_debug_string(Output& out, It it, Sentinel end) const -> Output {$/;"	f	struct:range_formatter	typeref:typename:Output
write_debug_string	./vendor/fmt/include/ranges.h	/^  auto write_debug_string(Output& out, It, Sentinel) const -> Output {$/;"	f	struct:range_formatter	typeref:typename:Output
write_demangled_name	./vendor/fmt/include/std.h	/^auto write_demangled_name(OutputIt out, const std::type_info& ti) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
write_digit2_separated	./vendor/fmt/include/chrono.h	/^inline void write_digit2_separated(char* buf, unsigned a, unsigned b,$/;"	f	namespace:detail	typeref:typename:void
write_encoded_tm_str	./vendor/fmt/include/chrono.h	/^auto write_encoded_tm_str(OutputIt out, string_view in, const std::locale& loc)$/;"	f	namespace:detail	typeref:typename:OutputIt
write_end	./vendor/fmt/include/os.h	/^  file write_end;$/;"	m	struct:pipe	typeref:typename:file
write_escaped_alternative	./vendor/fmt/include/std.h	/^auto write_escaped_alternative(OutputIt out, const T& v) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
write_escaped_char	./vendor/fmt/include/format.h	/^auto write_escaped_char(OutputIt out, Char v) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
write_escaped_cp	./vendor/fmt/include/format.h	/^auto write_escaped_cp(OutputIt out, const find_escape_result<Char>& escape)$/;"	f	namespace:detail	typeref:typename:OutputIt
write_escaped_path	./vendor/fmt/include/std.h	/^void write_escaped_path(basic_memory_buffer<Char>& quoted,$/;"	f	namespace:detail	typeref:typename:void
write_escaped_string	./vendor/fmt/include/format.h	/^auto write_escaped_string(OutputIt out, basic_string_view<Char> str)$/;"	f	namespace:detail	typeref:typename:OutputIt
write_exponent	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto write_exponent(int exp, It it) -> It {$/;"	f	namespace:detail	typeref:typename:It
write_float	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR20 auto write_float(OutputIt out, T value, format_specs specs,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_float	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR20 auto write_float(OutputIt out, const DecimalFP& f,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_floating_seconds	./vendor/fmt/include/chrono.h	/^void write_floating_seconds(memory_buffer& buf, Duration duration,$/;"	f	namespace:detail	typeref:typename:void
write_fractional_seconds	./vendor/fmt/include/chrono.h	/^void write_fractional_seconds(OutputIt& out, Duration d, int precision = -1) {$/;"	f	namespace:detail	typeref:typename:void
write_int	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR FMT_INLINE auto write_int(OutputIt out, int num_digits,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_int	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR FMT_INLINE auto write_int(OutputIt out, write_int_arg<T> arg,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_int	./vendor/fmt/include/format.h	/^auto write_int(OutputIt out, UInt value, unsigned prefix,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_int_arg	./vendor/fmt/include/format.h	/^template <typename UInt> struct write_int_arg {$/;"	s	namespace:detail
write_int_data	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR write_int_data(int num_digits, unsigned prefix,$/;"	f	struct:detail::write_int_data	typeref:typename:FMT_CONSTEXPR
write_int_data	./vendor/fmt/include/format.h	/^template <typename Char> struct write_int_data {$/;"	s	namespace:detail
write_int_noinline	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR FMT_NOINLINE auto write_int_noinline(OutputIt out,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_loc	./vendor/fmt/include/format-inl.h	/^FMT_FUNC auto write_loc(appender out, loc_value value,$/;"	f	namespace:detail	typeref:typename:bool
write_loc	./vendor/fmt/include/format.h	/^inline auto write_loc(OutputIt, loc_value, const format_specs&, locale_ref)$/;"	f	namespace:detail	typeref:typename:bool
write_loc	./vendor/fmt/include/xchar.h	/^inline auto write_loc(basic_appender<wchar_t> out, loc_value value,$/;"	f	namespace:detail	typeref:typename:bool
write_nan	./vendor/fmt/include/chrono.h	/^  void write_nan() { std::copy_n("nan", 3, out); }$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
write_ninf	./vendor/fmt/include/chrono.h	/^  void write_ninf() { std::copy_n("-inf", 4, out); }$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
write_nonfinite	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR20 auto write_nonfinite(OutputIt out, bool isnan,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_null_pointer	./vendor/fmt/include/printf.h	/^  void write_null_pointer(bool is_string = false) {$/;"	f	class:detail::printf_arg_formatter	typeref:typename:void
write_ostream_unicode	./vendor/fmt/include/ostream.h	/^inline auto write_ostream_unicode(std::ostream& os, fmt::string_view data)$/;"	f	namespace:detail	typeref:typename:bool
write_ostream_unicode	./vendor/fmt/include/ostream.h	/^inline auto write_ostream_unicode(std::wostream&,$/;"	f	namespace:detail	typeref:typename:bool
write_padded	./vendor/fmt/include/format.h	/^  auto write_padded(FormatContext& ctx, F write) const -> decltype(ctx.out()) {$/;"	f	struct:nested_formatter	typeref:typename:decltype(ctx.out ())
write_padded	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto write_padded(OutputIt out, const format_specs& specs,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_padded	./vendor/fmt/include/format.h	/^constexpr auto write_padded(OutputIt out, const format_specs& specs,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_padding	./vendor/fmt/include/chrono.h	/^auto write_padding(OutputIt out, pad_type pad) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
write_padding	./vendor/fmt/include/chrono.h	/^auto write_padding(OutputIt out, pad_type pad, int width) -> OutputIt {$/;"	f	namespace:detail	typeref:typename:OutputIt
write_pinf	./vendor/fmt/include/chrono.h	/^  void write_pinf() { std::copy_n("inf", 3, out); }$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
write_ptr	./vendor/fmt/include/format.h	/^auto write_ptr(OutputIt out, UIntPtr value, const format_specs* specs)$/;"	f	namespace:detail	typeref:typename:OutputIt
write_sign	./vendor/fmt/include/chrono.h	/^  void write_sign() {$/;"	f	struct:detail::chrono_formatter	typeref:typename:void
write_significand	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR auto write_significand(OutputIt out, const char* significand,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_significand	./vendor/fmt/include/format.h	/^FMT_CONSTEXPR20 auto write_significand(OutputIt out, T significand,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_significand	./vendor/fmt/include/format.h	/^constexpr auto write_significand(OutputIt out, const char* significand,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_significand	./vendor/fmt/include/format.h	/^inline auto write_significand(Char* out, UInt significand, int significand_size,$/;"	f	namespace:detail	typeref:typename:Char *
write_significand	./vendor/fmt/include/format.h	/^inline auto write_significand(OutputIt out, UInt significand,$/;"	f	namespace:detail	typeref:typename:OutputIt
write_tm_str	./vendor/fmt/include/chrono.h	/^auto write_tm_str(OutputIt out, string_view sv, const std::locale& loc)$/;"	f	namespace:detail	typeref:typename:OutputIt
write_u64	./vendor/STC/misc/benchmarks/various/rust_hashmap.rs	/^    fn write_u64(&mut self, i: u64) {$/;"	P	implementation:MyHasher
write_utc_offset	./vendor/fmt/include/chrono.h	/^  void write_utc_offset(long offset, numeric_system ns) {$/;"	f	class:detail::tm_writer	typeref:typename:void
write_year	./vendor/fmt/include/chrono.h	/^  void write_year(long long year) {$/;"	f	class:detail::tm_writer	typeref:typename:void
write_year_extended	./vendor/fmt/include/chrono.h	/^  void write_year_extended(long long year) {$/;"	f	class:detail::tm_writer	typeref:typename:void
writer	./vendor/fmt/include/base.h	/^  struct writer {$/;"	s	function:detail::parse_format_string
writer	./vendor/fmt/include/std.h	/^  struct writer {$/;"	s	struct:formatter
written	./src/flecs.c	/^    ecs_flags64_t written;     \/* Bitset with variables written by op *\/$/;"	m	struct:ecs_rule_op_t	typeref:typename:ecs_flags64_t	file:
written	./src/flecs.c	/^    ecs_write_flags_t written; \/* Bitmask to check which variables have been written *\/$/;"	m	struct:__anon7d4a41773608	typeref:typename:ecs_write_flags_t	file:
written	./src/flecs.c	/^    uint64_t *written;            \/* Bitset to check which variables have been written *\/$/;"	m	struct:__anon7d4a41773708	typeref:typename:uint64_t *	file:
written	./src/flecs.h	/^    uint64_t *written;$/;"	m	struct:ecs_rule_iter_t	typeref:typename:uint64_t *
wstring_view	./vendor/fmt/include/xchar.h	/^using wstring_view = basic_string_view<wchar_t>;$/;"	t	typeref:typename:basic_string_view<wchar_t>
wyhash	./src/flecs.c	/^static inline uint64_t wyhash(const void *key, size_t len, uint64_t seed, const uint64_t *secret/;"	f	typeref:typename:uint64_t	file:
wyhash	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^namespace detail::wyhash {$/;"	n	namespace:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail
wymix_	./src/flecs.c	/^static inline uint64_t wymix_(uint64_t A, uint64_t B){ wymum_(&A,&B); return A^B; }$/;"	f	typeref:typename:uint64_t	file:
wymum_	./src/flecs.c	/^static inline void wymum_(uint64_t *A, uint64_t *B){$/;"	f	typeref:typename:void	file:
wyp_	./src/flecs.c	/^static const uint64_t wyp_[4] = {0xa0761d6478bd642full, 0xe7037ed1a0b428dbull, 0x8ebc6af09c88c6e/;"	v	typeref:typename:const uint64_t[4]	file:
wyr3_	./src/flecs.c	/^static inline uint64_t wyr3_(const uint8_t *p, size_t k) { return (((uint64_t)p[0])<<16)|(((uint/;"	f	typeref:typename:uint64_t	file:
wyr4_	./src/flecs.c	/^static inline uint64_t wyr4_(const uint8_t *p) { uint32_t v; memcpy(&v, p, 4); return __builtin_/;"	f	typeref:typename:uint64_t	file:
wyr4_	./src/flecs.c	/^static inline uint64_t wyr4_(const uint8_t *p) { uint32_t v; memcpy(&v, p, 4); return _byteswap_/;"	f	typeref:typename:uint64_t	file:
wyr4_	./src/flecs.c	/^static inline uint64_t wyr4_(const uint8_t *p) { uint32_t v; memcpy(&v, p, 4); return v;}$/;"	f	typeref:typename:uint64_t	file:
wyr4_	./src/flecs.c	/^static inline uint64_t wyr4_(const uint8_t *p) {$/;"	f	typeref:typename:uint64_t	file:
wyr8_	./src/flecs.c	/^static inline uint64_t wyr8_(const uint8_t *p) { uint64_t v; memcpy(&v, p, 8); return __builtin_/;"	f	typeref:typename:uint64_t	file:
wyr8_	./src/flecs.c	/^static inline uint64_t wyr8_(const uint8_t *p) { uint64_t v; memcpy(&v, p, 8); return _byteswap_/;"	f	typeref:typename:uint64_t	file:
wyr8_	./src/flecs.c	/^static inline uint64_t wyr8_(const uint8_t *p) { uint64_t v; memcpy(&v, p, 8); return v;}$/;"	f	typeref:typename:uint64_t	file:
wyr8_	./src/flecs.c	/^static inline uint64_t wyr8_(const uint8_t *p) {$/;"	f	typeref:typename:uint64_t	file:
wyrand64	./vendor/STC/misc/benchmarks/various/prng_bench.cpp	/^static inline uint64_t wyrand64(uint64_t *seed){$/;"	f	typeref:typename:uint64_t	file:
x	./vendor/STC/misc/examples/algorithms/shape.c	/^    float x, y;$/;"	m	struct:__anon6b1a6e6c0108	typeref:typename:float	file:
x	./vendor/STC/misc/examples/algorithms/shape.cpp	/^    float x, y;$/;"	m	struct:Point	typeref:typename:float	file:
x	./vendor/STC/misc/examples/coroutines/cointerleave.c	/^    struct GenValue x, y;$/;"	m	struct:Generator	typeref:struct:GenValue	file:
x	./vendor/STC/misc/examples/hashmaps/new_map.c	/^typedef struct Point { int x, y; } Point;$/;"	m	struct:Point	typeref:typename:int	file:
x	./vendor/STC/misc/examples/linkedlists/new_list.c	/^typedef struct Point { int x, y; } Point;$/;"	m	struct:Point	typeref:typename:int	file:
x	./vendor/STC/misc/examples/mixed/astar.c	/^    int x;$/;"	m	struct:__anon14ad28530108	typeref:typename:int	file:
x	./vendor/STC/misc/examples/mixed/inits.c	/^typedef struct {int x, y;} ipair_t;$/;"	m	struct:__anon7018a51f0108	typeref:typename:int	file:
x	./vendor/STC/misc/examples/priorityqueues/new_pque.c	/^typedef struct Point { int x, y; } Point;$/;"	m	struct:Point	typeref:typename:int	file:
x	./vendor/STC/misc/examples/queues/new_queue.c	/^typedef struct Point { int x, y; } Point;$/;"	m	struct:Point	typeref:typename:int	file:
x	./vendor/STC/misc/examples/smartpointers/box2.c	/^    double x;$/;"	m	struct:__anon9bc77dd70108	typeref:typename:double	file:
x	./vendor/STC/misc/examples/sortedmaps/new_smap.c	/^typedef struct Point { int x, y; } Point;$/;"	m	struct:Point	typeref:typename:int	file:
x	./vendor/STC/misc/examples/vectors/new_vec.c	/^typedef struct Point { int x, y; } Point;$/;"	m	struct:Point	typeref:typename:int	file:
x	./vendor/raylib5/include/raygui.h	/^        float x;$/;"	m	struct:Rectangle	typeref:typename:float
x	./vendor/raylib5/include/raygui.h	/^        float x;$/;"	m	struct:Vector2	typeref:typename:float
x	./vendor/raylib5/include/raygui.h	/^        float x;$/;"	m	struct:Vector3	typeref:typename:float
x	./vendor/raylib5/include/raylib.h	/^    float x;                \/\/ Rectangle top-left corner position x$/;"	m	struct:Rectangle	typeref:typename:float
x	./vendor/raylib5/include/raylib.h	/^    float x;                \/\/ Vector x component$/;"	m	struct:Vector2	typeref:typename:float
x	./vendor/raylib5/include/raylib.h	/^    float x;                \/\/ Vector x component$/;"	m	struct:Vector3	typeref:typename:float
x	./vendor/raylib5/include/raylib.h	/^    float x;                \/\/ Vector x component$/;"	m	struct:Vector4	typeref:typename:float
x	./vendor/raylib5/include/raymath.h	/^    float x;$/;"	m	struct:Vector2	typeref:typename:float
x	./vendor/raylib5/include/raymath.h	/^    float x;$/;"	m	struct:Vector3	typeref:typename:float
x	./vendor/raylib5/include/raymath.h	/^    float x;$/;"	m	struct:Vector4	typeref:typename:float
xoroshiro128plus	./vendor/STC/misc/benchmarks/various/prng_bench.cpp	/^uint64_t xoroshiro128plus(uint64_t s[2]) {$/;"	f	typeref:typename:uint64_t
xoshiro256starstar	./vendor/STC/misc/benchmarks/various/prng_bench.cpp	/^static inline uint64_t xoshiro256starstar(uint64_t s[4]) {$/;"	f	typeref:typename:uint64_t	file:
xsputn	./vendor/fmt/include/chrono.h	/^  auto xsputn(const char_type* s, streamsize count) -> streamsize override {$/;"	f	class:detail::formatbuf	typeref:typename:streamsize override
y	./vendor/STC/misc/examples/algorithms/shape.c	/^    float x, y;$/;"	m	struct:__anon6b1a6e6c0108	typeref:typename:float	file:
y	./vendor/STC/misc/examples/algorithms/shape.cpp	/^    float x, y;$/;"	m	struct:Point	typeref:typename:float	file:
y	./vendor/STC/misc/examples/coroutines/cointerleave.c	/^    struct GenValue x, y;$/;"	m	struct:Generator	typeref:struct:GenValue	file:
y	./vendor/STC/misc/examples/hashmaps/new_map.c	/^typedef struct Point { int x, y; } Point;$/;"	m	struct:Point	typeref:typename:int	file:
y	./vendor/STC/misc/examples/linkedlists/new_list.c	/^typedef struct Point { int x, y; } Point;$/;"	m	struct:Point	typeref:typename:int	file:
y	./vendor/STC/misc/examples/mixed/astar.c	/^    int y;$/;"	m	struct:__anon14ad28530108	typeref:typename:int	file:
y	./vendor/STC/misc/examples/mixed/inits.c	/^typedef struct {int x, y;} ipair_t;$/;"	m	struct:__anon7018a51f0108	typeref:typename:int	file:
y	./vendor/STC/misc/examples/priorityqueues/new_pque.c	/^typedef struct Point { int x, y; } Point;$/;"	m	struct:Point	typeref:typename:int	file:
y	./vendor/STC/misc/examples/queues/new_queue.c	/^typedef struct Point { int x, y; } Point;$/;"	m	struct:Point	typeref:typename:int	file:
y	./vendor/STC/misc/examples/smartpointers/box2.c	/^    double y;$/;"	m	struct:__anon9bc77dd70108	typeref:typename:double	file:
y	./vendor/STC/misc/examples/sortedmaps/new_smap.c	/^typedef struct Point { int x, y; } Point;$/;"	m	struct:Point	typeref:typename:int	file:
y	./vendor/STC/misc/examples/vectors/new_vec.c	/^typedef struct Point { int x, y; } Point;$/;"	m	struct:Point	typeref:typename:int	file:
y	./vendor/raylib5/include/raygui.h	/^        float y;$/;"	m	struct:Rectangle	typeref:typename:float
y	./vendor/raylib5/include/raygui.h	/^        float y;$/;"	m	struct:Vector2	typeref:typename:float
y	./vendor/raylib5/include/raygui.h	/^        float y;$/;"	m	struct:Vector3	typeref:typename:float
y	./vendor/raylib5/include/raylib.h	/^    float y;                \/\/ Rectangle top-left corner position y$/;"	m	struct:Rectangle	typeref:typename:float
y	./vendor/raylib5/include/raylib.h	/^    float y;                \/\/ Vector y component$/;"	m	struct:Vector2	typeref:typename:float
y	./vendor/raylib5/include/raylib.h	/^    float y;                \/\/ Vector y component$/;"	m	struct:Vector3	typeref:typename:float
y	./vendor/raylib5/include/raylib.h	/^    float y;                \/\/ Vector y component$/;"	m	struct:Vector4	typeref:typename:float
y	./vendor/raylib5/include/raymath.h	/^    float y;$/;"	m	struct:Vector2	typeref:typename:float
y	./vendor/raylib5/include/raymath.h	/^    float y;$/;"	m	struct:Vector3	typeref:typename:float
y	./vendor/raylib5/include/raymath.h	/^    float y;$/;"	m	struct:Vector4	typeref:typename:float
year	./vendor/STC/misc/examples/sortedmaps/multimap.c	/^struct OlympicsData { int year; const char *city, *country, *date; } ol_data[] = {$/;"	m	struct:OlympicsData	typeref:typename:int	file:
year	./vendor/STC/misc/examples/sortedmaps/multimap.c	/^typedef struct { int year; cstr city, date; } OlympicLoc;$/;"	m	struct:__anonc17d532c0108	typeref:typename:int	file:
year	./vendor/fmt/include/chrono.h	/^  constexpr auto year() const noexcept -> fmt::year { return year_; }$/;"	f	class:year_month_day	typeref:typename:auto
year	./vendor/fmt/include/chrono.h	/^  constexpr explicit year(int y) noexcept : value_(y) {}$/;"	f	class:year
year	./vendor/fmt/include/chrono.h	/^class year {$/;"	c
year	./vendor/fmt/include/chrono.h	/^using year = std::chrono::year;$/;"	t	typeref:typename:std::chrono::year
year_	./vendor/fmt/include/chrono.h	/^  fmt::year year_;$/;"	m	class:year_month_day	typeref:typename:fmt::year
year_month_day	./vendor/fmt/include/chrono.h	/^  constexpr year_month_day(const year& y, const month& m, const day& d) noexcept$/;"	f	class:year_month_day
year_month_day	./vendor/fmt/include/chrono.h	/^class year_month_day {$/;"	c
year_month_day	./vendor/fmt/include/chrono.h	/^using year_month_day = std::chrono::year_month_day;$/;"	t	typeref:typename:std::chrono::year_month_day
yellow	./vendor/fmt/include/color.h	/^  yellow = 0xFFFF00,                   \/\/ rgb(255,255,0)$/;"	e	enum:color
yellow	./vendor/fmt/include/color.h	/^  yellow,$/;"	e	enum:terminal_color
yellow_green	./vendor/fmt/include/color.h	/^  yellow_green = 0x9ACD32              \/\/ rgb(154,205,50)$/;"	e	enum:color
yield_existing	./src/flecs.h	/^    Base& yield_existing(bool value = true) {$/;"	f	struct:flecs::observer_builder_i	typeref:typename:Base &
yield_existing	./src/flecs.h	/^    bool yield_existing;$/;"	m	struct:ecs_observer_desc_t	typeref:typename:bool
yield_reflexive	./src/flecs.c	/^    bool yield_reflexive;$/;"	m	struct:__anon7d4a41772d08	typeref:typename:bool	file:
yyclassp	./vendor/STC/include/stc/priv/cregex_prv.c	/^    _Reclass *yyclassp;   \/* last lex'd class *\/$/;"	m	struct:_Parser	typeref:typename:_Reclass *	file:
yyrune	./vendor/STC/include/stc/priv/cregex_prv.c	/^    _Rune yyrune;         \/* last lex'd rune *\/$/;"	m	struct:_Parser	typeref:typename:_Rune	file:
z	./vendor/raylib5/include/raygui.h	/^        float z;$/;"	m	struct:Vector3	typeref:typename:float
z	./vendor/raylib5/include/raylib.h	/^    float z;                \/\/ Vector z component$/;"	m	struct:Vector3	typeref:typename:float
z	./vendor/raylib5/include/raylib.h	/^    float z;                \/\/ Vector z component$/;"	m	struct:Vector4	typeref:typename:float
z	./vendor/raylib5/include/raymath.h	/^    float z;$/;"	m	struct:Vector3	typeref:typename:float
z	./vendor/raylib5/include/raymath.h	/^    float z;$/;"	m	struct:Vector4	typeref:typename:float
zero	./vendor/fmt/include/base.h	/^enum class state { start, align, sign, hash, zero, width, precision, locale };$/;"	e	enum:detail::state
zero	./vendor/fmt/include/chrono.h	/^  zero,$/;"	e	enum:detail::pad_type
zero_2d	./vendor/STC/misc/examples/spans/submdspan.c	/^void zero_2d(span2 grid2d) {$/;"	f	typeref:typename:void
zero_surface	./vendor/STC/misc/examples/spans/submdspan.c	/^void zero_surface(span3 grid3d) {$/;"	f	typeref:typename:void
zoom	./vendor/raylib5/include/raylib.h	/^    float zoom;             \/\/ Camera zoom (scaling), should be 1.0f by default$/;"	m	struct:Camera2D	typeref:typename:float
~BulkPoolAllocator	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    ~BulkPoolAllocator() noexcept {$/;"	f	class:robin_hood::detail::BulkPoolAllocator
~HashMap	./vendor/STC/misc/benchmarks/external/emhash/hash_table7.hpp	/^    ~HashMap() noexcept$/;"	f	class:emhash7::HashMap
~Polygon	./vendor/STC/misc/examples/algorithms/shape.cpp	/^Polygon::~Polygon()$/;"	f	class:Polygon
~Shape	./vendor/STC/misc/examples/algorithms/shape.cpp	/^Shape::~Shape()$/;"	f	class:Shape
~Table	./vendor/STC/misc/benchmarks/external/ankerl/robin_hood.h	/^    ~Table() {$/;"	f	class:robin_hood::detail::Table
~basic_memory_buffer	./vendor/fmt/include/format.h	/^  FMT_CONSTEXPR20 ~basic_memory_buffer() { deallocate(); }$/;"	f	class:basic_memory_buffer	typeref:typename:FMT_CONSTEXPR20
~bucket_entry	./vendor/STC/misc/benchmarks/external/tsl/robin_hash.h	/^  ~bucket_entry() noexcept { clear(); }$/;"	f	class:tsl::detail_robin_hash::bucket_entry
~component_binding_ctx	./src/flecs.h	/^    ~component_binding_ctx() {$/;"	f	struct:flecs::_::component_binding_ctx
~file_print_buffer	./vendor/fmt/include/format-inl.h	/^  ~file_print_buffer() {$/;"	f	class:detail::file_print_buffer
~filter_base	./src/flecs.h	/^    ~filter_base() {$/;"	f	struct:flecs::filter_base
~get_locale	./vendor/fmt/include/chrono.h	/^  ~get_locale() {$/;"	f	class:detail::get_locale
~iterable	./src/flecs.h	/^    virtual ~iterable() { }$/;"	f	struct:flecs::iterable
~iterator_buffer	./vendor/fmt/include/base.h	/^  ~iterator_buffer() { flush(); }$/;"	f	class:detail::iterator_buffer
~iterator_buffer	./vendor/fmt/include/base.h	/^  ~iterator_buffer() {$/;"	f	class:detail::iterator_buffer
~metric_builder	./src/flecs.h	/^inline metric_builder::~metric_builder() {$/;"	f	class:flecs::metric_builder
~opaque	./src/flecs.h	/^    ~opaque() {$/;"	f	struct:flecs::opaque
~scope	./vendor/STC/misc/benchmarks/picobench/picobench.hpp	/^    ~scope()$/;"	f	class:picobench::scope	typeref:typename:PICOBENCH_INLINE
~scoped_world	./src/flecs.h	/^    ~scoped_world() {$/;"	f	struct:flecs::scoped_world
~segmented_vector	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    ~segmented_vector() {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::segmented_vector
~sherwood_v3_entry	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    ~sherwood_v3_entry()$/;"	f	struct:ska::detailv3::sherwood_v3_entry
~sherwood_v3_table	./vendor/STC/misc/benchmarks/external/skarupke/flat_hash_map.hpp	/^    ~sherwood_v3_table()$/;"	f	class:ska::detailv3::sherwood_v3_table
~snapshot	./src/flecs.h	/^    ~snapshot() {$/;"	f	struct:flecs::snapshot
~string	./src/flecs.h	/^    ~string() {$/;"	f	struct:flecs::string
~stringstream	./src/flecs.h	/^    ~stringstream() {$/;"	f	struct:flecs::stringstream
~system_runner_fluent	./src/flecs.h	/^    ~system_runner_fluent() {$/;"	f	struct:flecs::system_runner_fluent
~table	./src/flecs.h	/^    virtual ~table() { }$/;"	f	struct:flecs::table
~table	./vendor/STC/misc/benchmarks/external/ankerl/unordered_dense.h	/^    ~table() {$/;"	f	class:ankerl::unordered_dense::ANKERL_UNORDERED_DENSE_NAMESPACE::detail::table
~term	./src/flecs.h	/^    ~term() {$/;"	f	struct:flecs::term
~term_id_builder_i	./src/flecs.h	/^    virtual ~term_id_builder_i() { }$/;"	f	struct:flecs::term_id_builder_i
~world	./src/flecs.h	/^    ~world() {$/;"	f	struct:flecs::world
